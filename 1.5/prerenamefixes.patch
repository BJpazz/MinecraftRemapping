commit 6a5f28237a9c9faa5be49280b9a92f8051458aa8
Author: Agaricus <agaricusb@yahoo.com>
Date:   Tue Mar 12 22:30:54 2013 -0700

    Pre-rename fixes to accomodate MCP remapping
    
    There should be no functional changes with these fixes.

diff --git a/src/main/java/net/minecraft/server/ConsoleLogFormatter.java b/src/main/java/net/minecraft/server/ConsoleLogFormatter.java
index b9c7dd1..9396827 100644
--- a/src/main/java/net/minecraft/server/ConsoleLogFormatter.java
+++ b/src/main/java/net/minecraft/server/ConsoleLogFormatter.java
@@ -8,7 +8,7 @@ import java.util.logging.LogRecord;
 
 import java.util.regex.Pattern; // CraftBukkit
 
-class ConsoleLogFormatter extends Formatter {
+public class ConsoleLogFormatter extends Formatter { // CBMCP - package-private -> public to cope with repackaging
 
     private SimpleDateFormat b;
     final LogAgent a;
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 46ab859..22e96ca 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -61,7 +61,7 @@ public class PlayerConnection extends Connection {
     private long i;
     private static Random j = new Random();
     private long k;
-    private volatile int chatThrottle = 0; private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle"); // CraftBukkit - multithreaded field
+    private volatile int chatThrottle = 0; private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatSpamThresholdCount"); // CraftBukkit - multithreaded field // CBMCP - chatThrottle -> chatSpamThresholdCount
     private int x = 0;
     private double y;
     private double z;
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 33852b3..5b24664 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -935,4 +935,18 @@ public class WorldServer extends World implements org.bukkit.BlockChangeDelegate
         return this.setTypeIdAndData(i, j, k, l, i1, 3);
     }
     // CraftBukkit end
+
+    // CBMCP start - a few more for BlockChangeDelegate
+    public boolean setTypeId__API_CB(int x, int y, int z, int typeId) {
+        return this.setTypeId(x, y, z, typeId);
+    }
+
+    public boolean isEmpty__API_CB(int x, int y, int z) {
+        return this.isEmpty(x, y, z);
+    }
+
+    public int getTypeId__API_CB(int x, int y, int z) {
+        return this.getTypeId(x, y, z);
+    }
+    // CBMCP end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index 36aa6f8..ee0681d 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -206,7 +206,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
         return generator.getDefaultPopulators(world);
     }
 
-    public List<?> getMobsFor(EnumCreatureType type, int x, int y, int z) {
+    public List getMobsFor(EnumCreatureType type, int x, int y, int z) { // CBMCP - List<?> -> List
         BiomeBase biomebase = world.getBiome(x, z);
 
         return biomebase == null ? null : biomebase.getMobs(type);
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
index c24c524..bf810c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/NormalChunkGenerator.java
@@ -61,7 +61,7 @@ public class NormalChunkGenerator extends InternalChunkGenerator {
         return provider.canSave();
     }
 
-    public List<?> getMobsFor(EnumCreatureType ect, int i, int i1, int i2) {
+    public List getMobsFor(EnumCreatureType ect, int i, int i1, int i2) { // CBMCP - List<?> -> List
         return provider.getMobsFor(ect, i, i1, i2);
     }
 
diff --git a/src/test/java/org/bukkit/AchievementTest.java b/src/test/java/org/bukkit/AchievementTest.java
index b8695cc..fd13e8e 100644
--- a/src/test/java/org/bukkit/AchievementTest.java
+++ b/src/test/java/org/bukkit/AchievementTest.java
@@ -23,7 +23,7 @@ public class AchievementTest {
         for (net.minecraft.server.Achievement statistic : (List<net.minecraft.server.Achievement>) AchievementList.e) {
             int id = statistic.e;
 
-            String name = Util.getInternalState(Statistic.class, statistic, "a");
+            String name = Util.getInternalState(Statistic.class, statistic, "statName"); // CBMCP
             String message = String.format("org.bukkit.Achievement is missing id: %d named: '%s'", id - Achievement.STATISTIC_OFFSET, name);
 
             Achievement subject = Achievement.getById(id);
diff --git a/src/test/java/org/bukkit/PerMaterialTest.java b/src/test/java/org/bukkit/PerMaterialTest.java
index e660d9e..6823813 100644
--- a/src/test/java/org/bukkit/PerMaterialTest.java
+++ b/src/test/java/org/bukkit/PerMaterialTest.java
@@ -30,7 +30,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @BeforeClass
     public static void getFireValues() {
-        fireValues = Util.getInternalState(BlockFire.class, Block.FIRE, "creativeTab");
+        fireValues = Util.getInternalState(BlockFire.class, Block.FIRE, "chanceToEncourageFire"); // CBMCP
     }
 
     @Parameters(name= "{index}: {0}")
diff --git a/src/test/java/org/bukkit/potion/PotionTest.java b/src/test/java/org/bukkit/potion/PotionTest.java
index a9df7d1..bf3c299 100644
--- a/src/test/java/org/bukkit/potion/PotionTest.java
+++ b/src/test/java/org/bukkit/potion/PotionTest.java
@@ -26,7 +26,7 @@ public class PotionTest extends AbstractTestingBase {
 
     @Test
     public void testEffectCompleteness() throws Throwable {
-        Map<Integer, ?> effectDurations = Util.getInternalState(net.minecraft.server.PotionBrewer.class, null, "effectDurations");
+        Map<Integer, ?> effectDurations = Util.getInternalState(net.minecraft.server.PotionBrewer.class, null, "potionRequirements"); // CBMCP
 
         Map<PotionType, String> effects = new EnumMap(PotionType.class);
         for (int id : effectDurations.keySet()) {
