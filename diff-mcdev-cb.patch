Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft: org
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/server: MinecraftServer$1.class
Binary files mcp-mcdev/net/minecraft/server/MinecraftServer.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/server/MinecraftServer.class differ
Only in mcp-mcdev/net/minecraft/server: MinecraftServer.java
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: .WorldGenTrees.java.swp
Binary files mcp-mcdev/net/minecraft/src/AABBPool.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/AABBPool.class differ
diff -ur mcp-mcdev/net/minecraft/src/AABBPool.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/AABBPool.java
--- mcp-mcdev/net/minecraft/src/AABBPool.java	2012-11-29 21:15:28.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/AABBPool.java	2012-11-29 20:44:48.000000000 -0800
@@ -14,23 +14,27 @@
    private int numCleans = 0;
 
 
-   public AABBPool(int var1, int var2) {
-      this.maxNumCleans = var1;
-      this.numEntriesToRemove = var2;
+   public AABBPool(int i, int j) {
+      this.maxNumCleans = i;
+      this.numEntriesToRemove = j;
    }
 
-   public AxisAlignedBB addOrModifyAABBInPool(double var1, double var3, double var5, double var7, double var9, double var11) {
-      AxisAlignedBB var13;
-      if(this.nextPoolIndex >= this.listAABB.size()) {
-         var13 = new AxisAlignedBB(var1, var3, var5, var7, var9, var11);
-         this.listAABB.add(var13);
+   public AxisAlignedBB addOrModifyAABBInPool(double d0, double d1, double d2, double d3, double d4, double d5) {
+      if(this.numCleans == 0) {
+         return new AxisAlignedBB(d0, d1, d2, d3, d4, d5);
       } else {
-         var13 = (AxisAlignedBB)this.listAABB.get(this.nextPoolIndex);
-         var13.setBounds(var1, var3, var5, var7, var9, var11);
-      }
+         AxisAlignedBB axisalignedbb;
+         if(this.nextPoolIndex >= this.listAABB.size()) {
+            axisalignedbb = new AxisAlignedBB(d0, d1, d2, d3, d4, d5);
+            this.listAABB.add(axisalignedbb);
+         } else {
+            axisalignedbb = (AxisAlignedBB)this.listAABB.get(this.nextPoolIndex);
+            axisalignedbb.setBounds(d0, d1, d2, d3, d4, d5);
+         }
 
-      ++this.nextPoolIndex;
-      return var13;
+         ++this.nextPoolIndex;
+         return axisalignedbb;
+      }
    }
 
    public void cleanPool() {
@@ -38,15 +42,15 @@
          this.maxPoolIndex = this.nextPoolIndex;
       }
 
-      if(this.numCleans++ == this.maxNumCleans) {
-         int var1 = Math.max(this.maxPoolIndex, this.listAABB.size() - this.numEntriesToRemove);
-
-         while(this.listAABB.size() > var1) {
-            this.listAABB.remove(var1);
+      if((this.numCleans++ & 255) == 0) {
+         int newSize = this.listAABB.size() - (this.listAABB.size() >> 3);
+         if(newSize > this.maxPoolIndex) {
+            for(int i = this.listAABB.size() - 1; i > newSize; --i) {
+               this.listAABB.remove(i);
+            }
          }
 
          this.maxPoolIndex = 0;
-         this.numCleans = 0;
       }
 
       this.nextPoolIndex = 0;
Binary files mcp-mcdev/net/minecraft/src/AnvilChunkLoader.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/AnvilChunkLoader.class differ
diff -ur mcp-mcdev/net/minecraft/src/AnvilChunkLoader.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/AnvilChunkLoader.java
--- mcp-mcdev/net/minecraft/src/AnvilChunkLoader.java	2012-11-29 21:15:28.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/AnvilChunkLoader.java	2012-11-29 20:44:48.000000000 -0800
@@ -3,6 +3,7 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -17,6 +18,7 @@
 import net.minecraft.src.ExtendedBlockStorage;
 import net.minecraft.src.IChunkLoader;
 import net.minecraft.src.IThreadedFileIO;
+import net.minecraft.src.MinecraftException;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.NBTTagList;
 import net.minecraft.src.NextTickListEntry;
@@ -34,271 +36,278 @@
    private final File chunkSaveLocation;
 
 
-   public AnvilChunkLoader(File var1) {
-      this.chunkSaveLocation = var1;
+   public AnvilChunkLoader(File file1) {
+      this.chunkSaveLocation = file1;
    }
 
-   public Chunk loadChunk(World var1, int var2, int var3) {
-      NBTTagCompound var4 = null;
-      ChunkCoordIntPair var5 = new ChunkCoordIntPair(var2, var3);
-      Object var6 = this.syncLockObject;
+   public Chunk loadChunk(World world, int i, int j) {
+      NBTTagCompound nbttagcompound = null;
+      ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
+      Object object = this.syncLockObject;
+      Object datainputstream = this.syncLockObject;
       synchronized(this.syncLockObject) {
-         if(this.pendingAnvilChunksCoordinates.contains(var5)) {
-            for(int var7 = 0; var7 < this.chunksToRemove.size(); ++var7) {
-               if(((AnvilChunkLoaderPending)this.chunksToRemove.get(var7)).chunkCoordinate.equals(var5)) {
-                  var4 = ((AnvilChunkLoaderPending)this.chunksToRemove.get(var7)).nbtTags;
+         if(this.pendingAnvilChunksCoordinates.contains(chunkcoordintpair)) {
+            for(int k = 0; k < this.chunksToRemove.size(); ++k) {
+               if(((AnvilChunkLoaderPending)this.chunksToRemove.get(k)).chunkCoordinate.equals(chunkcoordintpair)) {
+                  nbttagcompound = ((AnvilChunkLoaderPending)this.chunksToRemove.get(k)).nbtTags;
                   break;
                }
             }
          }
       }
 
-      if(var4 == null) {
-         DataInputStream var10 = RegionFileCache.getChunkInputStream(this.chunkSaveLocation, var2, var3);
-         if(var10 == null) {
+      if(nbttagcompound == null) {
+         DataInputStream var11 = RegionFileCache.getChunkInputStream(this.chunkSaveLocation, i, j);
+         if(var11 == null) {
             return null;
          }
 
-         var4 = CompressedStreamTools.read(var10);
+         nbttagcompound = CompressedStreamTools.read(var11);
       }
 
-      return this.checkedReadChunkFromNBT(var1, var2, var3, var4);
+      return this.checkedReadChunkFromNBT(world, i, j, nbttagcompound);
    }
 
-   protected Chunk checkedReadChunkFromNBT(World var1, int var2, int var3, NBTTagCompound var4) {
-      if(!var4.hasKey("Level")) {
-         System.out.println("Chunk file at " + var2 + "," + var3 + " is missing level data, skipping");
+   protected Chunk checkedReadChunkFromNBT(World world, int i, int j, NBTTagCompound nbttagcompound) {
+      if(!nbttagcompound.hasKey("Level")) {
+         System.out.println("Chunk file at " + i + "," + j + " is missing level data, skipping");
          return null;
-      } else if(!var4.getCompoundTag("Level").hasKey("Sections")) {
-         System.out.println("Chunk file at " + var2 + "," + var3 + " is missing block data, skipping");
+      } else if(!nbttagcompound.getCompoundTag("Level").hasKey("Sections")) {
+         System.out.println("Chunk file at " + i + "," + j + " is missing block data, skipping");
          return null;
       } else {
-         Chunk var5 = this.readChunkFromNBT(var1, var4.getCompoundTag("Level"));
-         if(!var5.isAtLocation(var2, var3)) {
-            System.out.println("Chunk file at " + var2 + "," + var3 + " is in the wrong location; relocating. (Expected " + var2 + ", " + var3 + ", got " + var5.xPosition + ", " + var5.zPosition + ")");
-            var4.setInteger("xPos", var2);
-            var4.setInteger("zPos", var3);
-            var5 = this.readChunkFromNBT(var1, var4.getCompoundTag("Level"));
+         Chunk chunk = this.readChunkFromNBT(world, nbttagcompound.getCompoundTag("Level"));
+         if(!chunk.isAtLocation(i, j)) {
+            System.out.println("Chunk file at " + i + "," + j + " is in the wrong location; relocating. (Expected " + i + ", " + j + ", got " + chunk.xPosition + ", " + chunk.zPosition + ")");
+            nbttagcompound.getCompoundTag("Level").setInteger("xPos", i);
+            nbttagcompound.getCompoundTag("Level").setInteger("zPos", j);
+            chunk = this.readChunkFromNBT(world, nbttagcompound.getCompoundTag("Level"));
          }
 
-         return var5;
+         return chunk;
       }
    }
 
-   public void saveChunk(World var1, Chunk var2) {
-      var1.checkSessionLock();
+   public void saveChunk(World world, Chunk chunk) {
+      try {
+         world.checkSessionLock();
+      } catch (MinecraftException var6) {
+         var6.printStackTrace();
+      }
 
       try {
-         NBTTagCompound var3 = new NBTTagCompound();
-         NBTTagCompound var4 = new NBTTagCompound();
-         var3.setTag("Level", var4);
-         this.writeChunkToNBT(var2, var1, var4);
-         this.func_75824_a(var2.getChunkCoordIntPair(), var3);
+         NBTTagCompound exception = new NBTTagCompound();
+         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+         exception.setTag("Level", nbttagcompound1);
+         this.writeChunkToNBT(chunk, world, nbttagcompound1);
+         this.func_75824_a(chunk.getChunkCoordIntPair(), exception);
       } catch (Exception var5) {
          var5.printStackTrace();
       }
 
    }
 
-   protected void func_75824_a(ChunkCoordIntPair var1, NBTTagCompound var2) {
-      Object var3 = this.syncLockObject;
+   protected void func_75824_a(ChunkCoordIntPair chunkcoordintpair, NBTTagCompound nbttagcompound) {
+      Object object = this.syncLockObject;
+      Object var4 = this.syncLockObject;
       synchronized(this.syncLockObject) {
-         if(this.pendingAnvilChunksCoordinates.contains(var1)) {
-            for(int var4 = 0; var4 < this.chunksToRemove.size(); ++var4) {
-               if(((AnvilChunkLoaderPending)this.chunksToRemove.get(var4)).chunkCoordinate.equals(var1)) {
-                  this.chunksToRemove.set(var4, new AnvilChunkLoaderPending(var1, var2));
+         if(this.pendingAnvilChunksCoordinates.contains(chunkcoordintpair)) {
+            for(int i = 0; i < this.chunksToRemove.size(); ++i) {
+               if(((AnvilChunkLoaderPending)this.chunksToRemove.get(i)).chunkCoordinate.equals(chunkcoordintpair)) {
+                  this.chunksToRemove.set(i, new AnvilChunkLoaderPending(chunkcoordintpair, nbttagcompound));
                   return;
                }
             }
          }
 
-         this.chunksToRemove.add(new AnvilChunkLoaderPending(var1, var2));
-         this.pendingAnvilChunksCoordinates.add(var1);
+         this.chunksToRemove.add(new AnvilChunkLoaderPending(chunkcoordintpair, nbttagcompound));
+         this.pendingAnvilChunksCoordinates.add(chunkcoordintpair);
          ThreadedFileIOBase.threadedIOInstance.queueIO(this);
       }
    }
 
    public boolean writeNextIO() {
-      AnvilChunkLoaderPending var1 = null;
-      Object var2 = this.syncLockObject;
+      AnvilChunkLoaderPending pendingchunktosave = null;
+      Object object = this.syncLockObject;
+      Object exception = this.syncLockObject;
       synchronized(this.syncLockObject) {
          if(this.chunksToRemove.isEmpty()) {
             return false;
          }
 
-         var1 = (AnvilChunkLoaderPending)this.chunksToRemove.remove(0);
-         this.pendingAnvilChunksCoordinates.remove(var1.chunkCoordinate);
+         pendingchunktosave = (AnvilChunkLoaderPending)this.chunksToRemove.remove(0);
+         this.pendingAnvilChunksCoordinates.remove(pendingchunktosave.chunkCoordinate);
       }
 
-      if(var1 != null) {
+      if(pendingchunktosave != null) {
          try {
-            this.writeChunkNBTTags(var1);
-         } catch (Exception var4) {
-            var4.printStackTrace();
+            this.writeChunkNBTTags(pendingchunktosave);
+         } catch (Exception var5) {
+            var5.printStackTrace();
          }
       }
 
       return true;
    }
 
-   private void writeChunkNBTTags(AnvilChunkLoaderPending var1) {
-      DataOutputStream var2 = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, var1.chunkCoordinate.chunkXPos, var1.chunkCoordinate.chunkZPos);
-      CompressedStreamTools.write(var1.nbtTags, var2);
-      var2.close();
+   public void writeChunkNBTTags(AnvilChunkLoaderPending pendingchunktosave) throws IOException {
+      DataOutputStream dataoutputstream = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, pendingchunktosave.chunkCoordinate.chunkXPos, pendingchunktosave.chunkCoordinate.chunkZPos);
+      CompressedStreamTools.write(pendingchunktosave.nbtTags, dataoutputstream);
+      dataoutputstream.close();
    }
 
-   public void saveExtraChunkData(World var1, Chunk var2) {}
+   public void saveExtraChunkData(World world, Chunk chunk) {}
 
    public void chunkTick() {}
 
    public void saveExtraData() {}
 
-   private void writeChunkToNBT(Chunk var1, World var2, NBTTagCompound var3) {
-      var3.setInteger("xPos", var1.xPosition);
-      var3.setInteger("zPos", var1.zPosition);
-      var3.setLong("LastUpdate", var2.getTotalWorldTime());
-      var3.setIntArray("HeightMap", var1.heightMap);
-      var3.setBoolean("TerrainPopulated", var1.isTerrainPopulated);
-      ExtendedBlockStorage[] var4 = var1.getBlockStorageArray();
-      NBTTagList var5 = new NBTTagList("Sections");
-      ExtendedBlockStorage[] var6 = var4;
-      int var7 = var4.length;
-
-      NBTTagCompound var10;
-      for(int var8 = 0; var8 < var7; ++var8) {
-         ExtendedBlockStorage var9 = var6[var8];
-         if(var9 != null) {
-            var10 = new NBTTagCompound();
-            var10.setByte("Y", (byte)(var9.getYLocation() >> 4 & 255));
-            var10.setByteArray("Blocks", var9.getBlockLSBArray());
-            if(var9.getBlockMSBArray() != null) {
-               var10.setByteArray("Add", var9.getBlockMSBArray().data);
+   private void writeChunkToNBT(Chunk chunk, World world, NBTTagCompound nbttagcompound) {
+      nbttagcompound.setInteger("xPos", chunk.xPosition);
+      nbttagcompound.setInteger("zPos", chunk.zPosition);
+      nbttagcompound.setLong("LastUpdate", world.getTotalWorldTime());
+      nbttagcompound.setIntArray("HeightMap", chunk.heightMap);
+      nbttagcompound.setBoolean("TerrainPopulated", chunk.isTerrainPopulated);
+      ExtendedBlockStorage[] achunksection = chunk.getBlockStorageArray();
+      NBTTagList nbttaglist = new NBTTagList("Sections");
+      ExtendedBlockStorage[] achunksection1 = achunksection;
+      int i = achunksection.length;
+
+      NBTTagCompound nbttagcompound1;
+      for(int nbttaglist1 = 0; nbttaglist1 < i; ++nbttaglist1) {
+         ExtendedBlockStorage iterator = achunksection1[nbttaglist1];
+         if(iterator != null) {
+            nbttagcompound1 = new NBTTagCompound();
+            nbttagcompound1.setByte("Y", (byte)(iterator.getYLocation() >> 4 & 255));
+            nbttagcompound1.setByteArray("Blocks", iterator.getBlockLSBArray());
+            if(iterator.getBlockMSBArray() != null) {
+               nbttagcompound1.setByteArray("Add", iterator.getBlockMSBArray().data);
             }
 
-            var10.setByteArray("Data", var9.getMetadataArray().data);
-            var10.setByteArray("SkyLight", var9.getSkylightArray().data);
-            var10.setByteArray("BlockLight", var9.getBlocklightArray().data);
-            var5.appendTag(var10);
+            nbttagcompound1.setByteArray("Data", iterator.getMetadataArray().data);
+            nbttagcompound1.setByteArray("SkyLight", iterator.getSkylightArray().data);
+            nbttagcompound1.setByteArray("BlockLight", iterator.getBlocklightArray().data);
+            nbttaglist.appendTag(nbttagcompound1);
          }
       }
 
-      var3.setTag("Sections", var5);
-      var3.setByteArray("Biomes", var1.getBiomeArray());
-      var1.hasEntities = false;
-      NBTTagList var17 = new NBTTagList();
-
-      Iterator var19;
-      for(var7 = 0; var7 < var1.entityLists.length; ++var7) {
-         var19 = var1.entityLists[var7].iterator();
-
-         while(var19.hasNext()) {
-            Entity var21 = (Entity)var19.next();
-            var1.hasEntities = true;
-            var10 = new NBTTagCompound();
-            if(var21.addEntityID(var10)) {
-               var17.appendTag(var10);
+      nbttagcompound.setTag("Sections", nbttaglist);
+      nbttagcompound.setByteArray("Biomes", chunk.getBiomeArray());
+      chunk.hasEntities = false;
+      NBTTagList var19 = new NBTTagList();
+
+      Iterator var20;
+      for(i = 0; i < chunk.entityLists.length; ++i) {
+         var20 = chunk.entityLists[i].iterator();
+
+         while(var20.hasNext()) {
+            Entity nbttaglist2 = (Entity)var20.next();
+            chunk.hasEntities = true;
+            nbttagcompound1 = new NBTTagCompound();
+            if(nbttaglist2.addEntityID(nbttagcompound1)) {
+               var19.appendTag(nbttagcompound1);
             }
          }
       }
 
-      var3.setTag("Entities", var17);
-      NBTTagList var18 = new NBTTagList();
-      var19 = var1.chunkTileEntityMap.values().iterator();
-
-      while(var19.hasNext()) {
-         TileEntity var22 = (TileEntity)var19.next();
-         var10 = new NBTTagCompound();
-         var22.writeToNBT(var10);
-         var18.appendTag(var10);
-      }
-
-      var3.setTag("TileEntities", var18);
-      List var20 = var2.getPendingBlockUpdates(var1, false);
-      if(var20 != null) {
-         long var11 = var2.getTotalWorldTime();
-         NBTTagList var13 = new NBTTagList();
-         Iterator var14 = var20.iterator();
-
-         while(var14.hasNext()) {
-            NextTickListEntry var15 = (NextTickListEntry)var14.next();
-            NBTTagCompound var16 = new NBTTagCompound();
-            var16.setInteger("i", var15.blockID);
-            var16.setInteger("x", var15.xCoord);
-            var16.setInteger("y", var15.yCoord);
-            var16.setInteger("z", var15.zCoord);
-            var16.setInteger("t", (int)(var15.scheduledTime - var11));
-            var13.appendTag(var16);
+      nbttagcompound.setTag("Entities", var19);
+      NBTTagList var21 = new NBTTagList();
+      var20 = chunk.chunkTileEntityMap.values().iterator();
+
+      while(var20.hasNext()) {
+         TileEntity list = (TileEntity)var20.next();
+         nbttagcompound1 = new NBTTagCompound();
+         list.writeToNBT(nbttagcompound1);
+         var21.appendTag(nbttagcompound1);
+      }
+
+      nbttagcompound.setTag("TileEntities", var21);
+      List var22 = world.getPendingBlockUpdates(chunk, false);
+      if(var22 != null) {
+         long k = world.getTotalWorldTime();
+         NBTTagList nbttaglist3 = new NBTTagList();
+         Iterator iterator1 = var22.iterator();
+
+         while(iterator1.hasNext()) {
+            NextTickListEntry nextticklistentry = (NextTickListEntry)iterator1.next();
+            NBTTagCompound nbttagcompound2 = new NBTTagCompound();
+            nbttagcompound2.setInteger("i", nextticklistentry.blockID);
+            nbttagcompound2.setInteger("x", nextticklistentry.xCoord);
+            nbttagcompound2.setInteger("y", nextticklistentry.yCoord);
+            nbttagcompound2.setInteger("z", nextticklistentry.zCoord);
+            nbttagcompound2.setInteger("t", (int)(nextticklistentry.scheduledTime - k));
+            nbttaglist3.appendTag(nbttagcompound2);
          }
 
-         var3.setTag("TileTicks", var13);
+         nbttagcompound.setTag("TileTicks", nbttaglist3);
       }
 
    }
 
-   private Chunk readChunkFromNBT(World var1, NBTTagCompound var2) {
-      int var3 = var2.getInteger("xPos");
-      int var4 = var2.getInteger("zPos");
-      Chunk var5 = new Chunk(var1, var3, var4);
-      var5.heightMap = var2.getIntArray("HeightMap");
-      var5.isTerrainPopulated = var2.getBoolean("TerrainPopulated");
-      NBTTagList var6 = var2.getTagList("Sections");
-      byte var7 = 16;
-      ExtendedBlockStorage[] var8 = new ExtendedBlockStorage[var7];
-
-      for(int var9 = 0; var9 < var6.tagCount(); ++var9) {
-         NBTTagCompound var10 = (NBTTagCompound)var6.tagAt(var9);
-         byte var11 = var10.getByte("Y");
-         ExtendedBlockStorage var12 = new ExtendedBlockStorage(var11 << 4);
-         var12.setBlockLSBArray(var10.getByteArray("Blocks"));
-         if(var10.hasKey("Add")) {
-            var12.setBlockMSBArray(new NibbleArray(var10.getByteArray("Add"), 4));
-         }
-
-         var12.setBlockMetadataArray(new NibbleArray(var10.getByteArray("Data"), 4));
-         var12.setSkylightArray(new NibbleArray(var10.getByteArray("SkyLight"), 4));
-         var12.setBlocklightArray(new NibbleArray(var10.getByteArray("BlockLight"), 4));
-         var12.removeInvalidBlocks();
-         var8[var11] = var12;
-      }
-
-      var5.setStorageArrays(var8);
-      if(var2.hasKey("Biomes")) {
-         var5.setBiomeArray(var2.getByteArray("Biomes"));
+   private Chunk readChunkFromNBT(World world, NBTTagCompound nbttagcompound) {
+      int i = nbttagcompound.getInteger("xPos");
+      int j = nbttagcompound.getInteger("zPos");
+      Chunk chunk = new Chunk(world, i, j);
+      chunk.heightMap = nbttagcompound.getIntArray("HeightMap");
+      chunk.isTerrainPopulated = nbttagcompound.getBoolean("TerrainPopulated");
+      NBTTagList nbttaglist = nbttagcompound.getTagList("Sections");
+      byte b0 = 16;
+      ExtendedBlockStorage[] achunksection = new ExtendedBlockStorage[b0];
+
+      for(int nbttaglist1 = 0; nbttaglist1 < nbttaglist.tagCount(); ++nbttaglist1) {
+         NBTTagCompound nbttaglist2 = (NBTTagCompound)nbttaglist.tagAt(nbttaglist1);
+         byte nbttaglist3 = nbttaglist2.getByte("Y");
+         ExtendedBlockStorage j1 = new ExtendedBlockStorage(nbttaglist3 << 4);
+         j1.setBlockLSBArray(nbttaglist2.getByteArray("Blocks"));
+         if(nbttaglist2.hasKey("Add")) {
+            j1.setBlockMSBArray(new NibbleArray(nbttaglist2.getByteArray("Add"), 4));
+         }
+
+         j1.setBlockMetadataArray(new NibbleArray(nbttaglist2.getByteArray("Data"), 4));
+         j1.setSkylightArray(new NibbleArray(nbttaglist2.getByteArray("SkyLight"), 4));
+         j1.setBlocklightArray(new NibbleArray(nbttaglist2.getByteArray("BlockLight"), 4));
+         j1.removeInvalidBlocks();
+         achunksection[nbttaglist3] = j1;
+      }
+
+      chunk.setStorageArrays(achunksection);
+      if(nbttagcompound.hasKey("Biomes")) {
+         chunk.setBiomeArray(nbttagcompound.getByteArray("Biomes"));
       }
 
-      NBTTagList var14 = var2.getTagList("Entities");
+      NBTTagList var14 = nbttagcompound.getTagList("Entities");
       if(var14 != null) {
          for(int var17 = 0; var17 < var14.tagCount(); ++var17) {
             NBTTagCompound var16 = (NBTTagCompound)var14.tagAt(var17);
-            Entity var18 = EntityList.createEntityFromNBT(var16, var1);
-            var5.hasEntities = true;
+            Entity var18 = EntityList.createEntityFromNBT(var16, world);
+            chunk.hasEntities = true;
             if(var18 != null) {
-               var5.addEntity(var18);
+               chunk.addEntity(var18);
             }
          }
       }
 
-      NBTTagList var15 = var2.getTagList("TileEntities");
+      NBTTagList var15 = nbttagcompound.getTagList("TileEntities");
       if(var15 != null) {
          for(int var21 = 0; var21 < var15.tagCount(); ++var21) {
             NBTTagCompound var20 = (NBTTagCompound)var15.tagAt(var21);
-            TileEntity var13 = TileEntity.createAndLoadEntity(var20);
-            if(var13 != null) {
-               var5.addTileEntity(var13);
+            TileEntity nbttagcompound4 = TileEntity.createAndLoadEntity(var20);
+            if(nbttagcompound4 != null) {
+               chunk.addTileEntity(nbttagcompound4);
             }
          }
       }
 
-      if(var2.hasKey("TileTicks")) {
-         NBTTagList var19 = var2.getTagList("TileTicks");
+      if(nbttagcompound.hasKey("TileTicks")) {
+         NBTTagList var19 = nbttagcompound.getTagList("TileTicks");
          if(var19 != null) {
             for(int var22 = 0; var22 < var19.tagCount(); ++var22) {
                NBTTagCompound var23 = (NBTTagCompound)var19.tagAt(var22);
-               var1.scheduleBlockUpdateFromLoad(var23.getInteger("x"), var23.getInteger("y"), var23.getInteger("z"), var23.getInteger("i"), var23.getInteger("t"));
+               world.scheduleBlockUpdateFromLoad(var23.getInteger("x"), var23.getInteger("y"), var23.getInteger("z"), var23.getInteger("i"), var23.getInteger("t"));
             }
          }
       }
 
-      return var5;
+      return chunk;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BehaviorBucketEmptyDispense.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorBucketEmptyDispense.class differ
diff -ur mcp-mcdev/net/minecraft/src/BehaviorBucketEmptyDispense.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorBucketEmptyDispense.java
--- mcp-mcdev/net/minecraft/src/BehaviorBucketEmptyDispense.java	2012-11-29 21:15:28.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorBucketEmptyDispense.java	2012-11-29 20:44:47.000000000 -0800
@@ -2,53 +2,77 @@
 
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.BehaviorDefaultDispenseItem;
+import net.minecraft.src.BlockDispenser;
 import net.minecraft.src.EnumFacing;
+import net.minecraft.src.IBehaviorDispenseItem;
 import net.minecraft.src.IBlockSource;
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.Material;
 import net.minecraft.src.TileEntityDispenser;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.util.Vector;
 
 public class BehaviorBucketEmptyDispense extends BehaviorDefaultDispenseItem {
 
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior;
-   // $FF: synthetic field
    final MinecraftServer mcServer;
 
 
-   public BehaviorBucketEmptyDispense(MinecraftServer var1) {
-      this.mcServer = var1;
+   public BehaviorBucketEmptyDispense(MinecraftServer minecraftserver) {
+      this.mcServer = minecraftserver;
       this.defaultItemDispenseBehavior = new BehaviorDefaultDispenseItem();
    }
 
-   public ItemStack dispenseStack(IBlockSource var1, ItemStack var2) {
-      EnumFacing var3 = EnumFacing.func_82600_a(var1.func_82620_h());
-      World var4 = var1.getWorld();
-      int var5 = var1.getXInt() + var3.func_82601_c();
-      int var6 = var1.getYInt();
-      int var7 = var1.getZInt() + var3.func_82599_e();
-      Material var8 = var4.getBlockMaterial(var5, var6, var7);
-      int var9 = var4.getBlockMetadata(var5, var6, var7);
-      Item var10;
-      if(Material.water.equals(var8) && var9 == 0) {
-         var10 = Item.bucketWater;
+   public ItemStack dispenseStack(IBlockSource isourceblock, ItemStack itemstack) {
+      EnumFacing enumfacing = EnumFacing.func_82600_a(isourceblock.func_82620_h());
+      World world = isourceblock.getWorld();
+      int i = isourceblock.getXInt() + enumfacing.func_82601_c();
+      int j = isourceblock.getYInt();
+      int k = isourceblock.getZInt() + enumfacing.func_82599_e();
+      Material material = world.getBlockMaterial(i, j, k);
+      int l = world.getBlockMetadata(i, j, k);
+      Item item;
+      if(Material.water.equals(material) && l == 0) {
+         item = Item.bucketWater;
       } else {
-         if(!Material.lava.equals(var8) || var9 != 0) {
-            return super.dispenseStack(var1, var2);
+         if(!Material.lava.equals(material) || l != 0) {
+            return super.dispenseStack(isourceblock, itemstack);
          }
 
-         var10 = Item.bucketLava;
+         item = Item.bucketLava;
       }
 
-      var4.setBlockWithNotify(var5, var6, var7, 0);
-      if(--var2.stackSize == 0) {
-         var2.itemID = var10.shiftedIndex;
-         var2.stackSize = 1;
-      } else if(((TileEntityDispenser)var1.func_82619_j()).func_70360_a(new ItemStack(var10)) < 0) {
-         this.defaultItemDispenseBehavior.dispense(var1, new ItemStack(var10));
+      org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+      CraftItemStack bukkitItem = (new CraftItemStack(itemstack)).clone();
+      BlockDispenseEvent event = new BlockDispenseEvent(block, bukkitItem, new Vector(0, 0, 0));
+      if(!BlockDispenser.eventFired) {
+         world.getServer().getPluginManager().callEvent(event);
       }
 
-      return var2;
+      if(event.isCancelled()) {
+         return itemstack;
+      } else {
+         if(!event.getItem().equals(bukkitItem)) {
+            ItemStack eventStack = CraftItemStack.createNMSItemStack(event.getItem());
+            IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.func_82594_a(eventStack.getItem());
+            if(idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this) {
+               idispensebehavior.dispense(isourceblock, eventStack);
+               return itemstack;
+            }
+         }
+
+         world.setBlockWithNotify(i, j, k, 0);
+         if(--itemstack.stackSize == 0) {
+            itemstack.itemID = item.shiftedIndex;
+            itemstack.stackSize = 1;
+         } else if(((TileEntityDispenser)isourceblock.func_82619_j()).func_70360_a(new ItemStack(item)) < 0) {
+            this.defaultItemDispenseBehavior.dispense(isourceblock, new ItemStack(item));
+         }
+
+         return itemstack;
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BehaviorBucketFullDispense.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorBucketFullDispense.class differ
diff -ur mcp-mcdev/net/minecraft/src/BehaviorBucketFullDispense.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorBucketFullDispense.java
--- mcp-mcdev/net/minecraft/src/BehaviorBucketFullDispense.java	2012-11-29 21:15:27.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorBucketFullDispense.java	2012-11-29 20:44:47.000000000 -0800
@@ -2,36 +2,75 @@
 
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.BehaviorDefaultDispenseItem;
+import net.minecraft.src.BlockDispenser;
 import net.minecraft.src.EnumFacing;
+import net.minecraft.src.IBehaviorDispenseItem;
 import net.minecraft.src.IBlockSource;
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemBucket;
 import net.minecraft.src.ItemStack;
+import net.minecraft.src.TileEntityDispenser;
+import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.util.Vector;
 
 public class BehaviorBucketFullDispense extends BehaviorDefaultDispenseItem {
 
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior;
-   // $FF: synthetic field
    final MinecraftServer mcServer;
 
 
-   public BehaviorBucketFullDispense(MinecraftServer var1) {
-      this.mcServer = var1;
+   public BehaviorBucketFullDispense(MinecraftServer minecraftserver) {
+      this.mcServer = minecraftserver;
       this.defaultItemDispenseBehavior = new BehaviorDefaultDispenseItem();
    }
 
-   public ItemStack dispenseStack(IBlockSource var1, ItemStack var2) {
-      ItemBucket var3 = (ItemBucket)var2.getItem();
-      int var4 = var1.getXInt();
-      int var5 = var1.getYInt();
-      int var6 = var1.getZInt();
-      EnumFacing var7 = EnumFacing.func_82600_a(var1.func_82620_h());
-      if(var3.tryPlaceContainedLiquid(var1.getWorld(), (double)var4, (double)var5, (double)var6, var4 + var7.func_82601_c(), var5, var6 + var7.func_82599_e())) {
-         var2.itemID = Item.bucketEmpty.shiftedIndex;
-         var2.stackSize = 1;
-         return var2;
+   public ItemStack dispenseStack(IBlockSource isourceblock, ItemStack itemstack) {
+      ItemBucket itembucket = (ItemBucket)itemstack.getItem();
+      int i = isourceblock.getXInt();
+      int j = isourceblock.getYInt();
+      int k = isourceblock.getZInt();
+      EnumFacing enumfacing = EnumFacing.func_82600_a(isourceblock.func_82620_h());
+      World world = isourceblock.getWorld();
+      int i2 = i + enumfacing.func_82601_c();
+      int k2 = k + enumfacing.func_82599_e();
+      if(world.isAirBlock(i2, j, k2) || world.getBlockMaterial(i2, j, k2).isSolid()) {
+         org.bukkit.block.Block item = world.getWorld().getBlockAt(i, j, k);
+         CraftItemStack bukkitItem = (new CraftItemStack(itemstack)).clone();
+         BlockDispenseEvent event = new BlockDispenseEvent(item, bukkitItem, new Vector(0, 0, 0));
+         if(!BlockDispenser.eventFired) {
+            world.getServer().getPluginManager().callEvent(event);
+         }
+
+         if(event.isCancelled()) {
+            return itemstack;
+         }
+
+         if(!event.getItem().equals(bukkitItem)) {
+            ItemStack eventStack = CraftItemStack.createNMSItemStack(event.getItem());
+            IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.func_82594_a(eventStack.getItem());
+            if(idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this) {
+               idispensebehavior.dispense(isourceblock, eventStack);
+               return itemstack;
+            }
+         }
+
+         itembucket = (ItemBucket)CraftItemStack.createNMSItemStack(event.getItem()).getItem();
+      }
+
+      if(itembucket.tryPlaceContainedLiquid(isourceblock.getWorld(), (double)i, (double)j, (double)k, i + enumfacing.func_82601_c(), j, k + enumfacing.func_82599_e())) {
+         Item var16 = Item.bucketEmpty;
+         if(--itemstack.stackSize == 0) {
+            itemstack.itemID = var16.shiftedIndex;
+            itemstack.stackSize = 1;
+         } else if(((TileEntityDispenser)isourceblock.func_82619_j()).func_70360_a(new ItemStack(var16)) < 0) {
+            this.defaultItemDispenseBehavior.dispense(isourceblock, new ItemStack(var16));
+         }
+
+         return itemstack;
       } else {
-         return this.defaultItemDispenseBehavior.dispense(var1, var2);
+         return this.defaultItemDispenseBehavior.dispense(isourceblock, itemstack);
       }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BehaviorDefaultDispenseItem.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDefaultDispenseItem.class differ
diff -ur mcp-mcdev/net/minecraft/src/BehaviorDefaultDispenseItem.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDefaultDispenseItem.java
--- mcp-mcdev/net/minecraft/src/BehaviorDefaultDispenseItem.java	2012-11-29 21:15:27.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDefaultDispenseItem.java	2012-11-29 20:44:47.000000000 -0800
@@ -8,48 +8,83 @@
 import net.minecraft.src.IPosition;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.util.Vector;
 
 public class BehaviorDefaultDispenseItem implements IBehaviorDispenseItem {
 
-   public final ItemStack dispense(IBlockSource var1, ItemStack var2) {
-      ItemStack var3 = this.dispenseStack(var1, var2);
-      this.playDispenseSound(var1);
-      this.spawnDispenseParticles(var1, EnumFacing.func_82600_a(var1.func_82620_h()));
-      return var3;
-   }
-
-   protected ItemStack dispenseStack(IBlockSource var1, ItemStack var2) {
-      EnumFacing var3 = EnumFacing.func_82600_a(var1.func_82620_h());
-      IPosition var4 = BlockDispenser.func_82525_a(var1);
-      ItemStack var5 = var2.splitStack(1);
-      func_82486_a(var1.getWorld(), var5, 6, var3, var4);
-      return var2;
-   }
-
-   public static void func_82486_a(World var0, ItemStack var1, int var2, EnumFacing var3, IPosition var4) {
-      double var5 = var4.getX();
-      double var7 = var4.getY();
-      double var9 = var4.getZ();
-      EntityItem var11 = new EntityItem(var0, var5, var7 - 0.3D, var9, var1);
-      double var12 = var0.rand.nextDouble() * 0.1D + 0.2D;
-      var11.motionX = (double)var3.func_82601_c() * var12;
-      var11.motionY = 0.20000000298023224D;
-      var11.motionZ = (double)var3.func_82599_e() * var12;
-      var11.motionX += var0.rand.nextGaussian() * 0.007499999832361937D * (double)var2;
-      var11.motionY += var0.rand.nextGaussian() * 0.007499999832361937D * (double)var2;
-      var11.motionZ += var0.rand.nextGaussian() * 0.007499999832361937D * (double)var2;
-      var0.spawnEntityInWorld(var11);
-   }
-
-   protected void playDispenseSound(IBlockSource var1) {
-      var1.getWorld().playAuxSFX(1000, var1.getXInt(), var1.getYInt(), var1.getZInt(), 0);
+   public final ItemStack dispense(IBlockSource isourceblock, ItemStack itemstack) {
+      ItemStack itemstack1 = this.dispenseStack(isourceblock, itemstack);
+      this.playDispenseSound(isourceblock);
+      this.spawnDispenseParticles(isourceblock, EnumFacing.func_82600_a(isourceblock.func_82620_h()));
+      return itemstack1;
+   }
+
+   protected ItemStack dispenseStack(IBlockSource isourceblock, ItemStack itemstack) {
+      EnumFacing enumfacing = EnumFacing.func_82600_a(isourceblock.func_82620_h());
+      IPosition iposition = BlockDispenser.func_82525_a(isourceblock);
+      ItemStack itemstack1 = itemstack.splitStack(1);
+      if(!a(isourceblock.getWorld(), itemstack1, 6, enumfacing, isourceblock)) {
+         ++itemstack.stackSize;
+      }
+
+      return itemstack;
+   }
+
+   public static boolean a(World world, ItemStack itemstack, int i, EnumFacing enumfacing, IBlockSource isourceblock) {
+      IPosition iposition = BlockDispenser.func_82525_a(isourceblock);
+      double d0 = iposition.getX();
+      double d1 = iposition.getY();
+      double d2 = iposition.getZ();
+      EntityItem entityitem = new EntityItem(world, d0, d1 - 0.3D, d2, itemstack);
+      double d3 = world.rand.nextDouble() * 0.1D + 0.2D;
+      entityitem.motionX = (double)enumfacing.func_82601_c() * d3;
+      entityitem.motionY = 0.20000000298023224D;
+      entityitem.motionZ = (double)enumfacing.func_82599_e() * d3;
+      entityitem.motionX += world.rand.nextGaussian() * 0.007499999832361937D * (double)i;
+      entityitem.motionY += world.rand.nextGaussian() * 0.007499999832361937D * (double)i;
+      entityitem.motionZ += world.rand.nextGaussian() * 0.007499999832361937D * (double)i;
+      org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt());
+      CraftItemStack bukkitItem = (new CraftItemStack(itemstack)).clone();
+      BlockDispenseEvent event = new BlockDispenseEvent(block, bukkitItem, new Vector(entityitem.motionX, entityitem.motionY, entityitem.motionZ));
+      if(!BlockDispenser.eventFired) {
+         world.getServer().getPluginManager().callEvent(event);
+      }
+
+      if(event.isCancelled()) {
+         return false;
+      } else {
+         entityitem.item = CraftItemStack.createNMSItemStack(event.getItem());
+         entityitem.motionX = event.getVelocity().getX();
+         entityitem.motionY = event.getVelocity().getY();
+         entityitem.motionZ = event.getVelocity().getZ();
+         if(event.getItem().equals(bukkitItem)) {
+            world.spawnEntityInWorld(entityitem);
+            return true;
+         } else {
+            ItemStack eventStack = CraftItemStack.createNMSItemStack(event.getItem());
+            IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.func_82594_a(eventStack.getItem());
+            if(idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior.getClass() != BehaviorDefaultDispenseItem.class) {
+               idispensebehavior.dispense(isourceblock, eventStack);
+            } else {
+               world.spawnEntityInWorld(entityitem);
+            }
+
+            return false;
+         }
+      }
+   }
+
+   protected void playDispenseSound(IBlockSource isourceblock) {
+      isourceblock.getWorld().playAuxSFX(1000, isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt(), 0);
    }
 
-   protected void spawnDispenseParticles(IBlockSource var1, EnumFacing var2) {
-      var1.getWorld().playAuxSFX(2000, var1.getXInt(), var1.getYInt(), var1.getZInt(), this.func_82488_a(var2));
+   protected void spawnDispenseParticles(IBlockSource isourceblock, EnumFacing enumfacing) {
+      isourceblock.getWorld().playAuxSFX(2000, isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt(), this.func_82488_a(enumfacing));
    }
 
-   private int func_82488_a(EnumFacing var1) {
-      return var1.func_82601_c() + 1 + (var1.func_82599_e() + 1) * 3;
+   private int func_82488_a(EnumFacing enumfacing) {
+      return enumfacing.func_82601_c() + 1 + (enumfacing.func_82599_e() + 1) * 3;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BehaviorDispenseBoat.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDispenseBoat.class differ
diff -ur mcp-mcdev/net/minecraft/src/BehaviorDispenseBoat.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDispenseBoat.java
--- mcp-mcdev/net/minecraft/src/BehaviorDispenseBoat.java	2012-11-29 21:15:27.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDispenseBoat.java	2012-11-29 20:44:47.000000000 -0800
@@ -2,53 +2,79 @@
 
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.BehaviorDefaultDispenseItem;
+import net.minecraft.src.BlockDispenser;
 import net.minecraft.src.EntityBoat;
 import net.minecraft.src.EnumFacing;
+import net.minecraft.src.IBehaviorDispenseItem;
 import net.minecraft.src.IBlockSource;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.util.Vector;
 
 public class BehaviorDispenseBoat extends BehaviorDefaultDispenseItem {
 
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior;
-   // $FF: synthetic field
    final MinecraftServer mcServer;
 
 
-   public BehaviorDispenseBoat(MinecraftServer var1) {
-      this.mcServer = var1;
+   public BehaviorDispenseBoat(MinecraftServer minecraftserver) {
+      this.mcServer = minecraftserver;
       this.defaultItemDispenseBehavior = new BehaviorDefaultDispenseItem();
    }
 
-   public ItemStack dispenseStack(IBlockSource var1, ItemStack var2) {
-      EnumFacing var3 = EnumFacing.func_82600_a(var1.func_82620_h());
-      World var4 = var1.getWorld();
-      double var5 = var1.getX() + (double)((float)var3.func_82601_c() * 1.125F);
-      double var7 = var1.getY();
-      double var9 = var1.getZ() + (double)((float)var3.func_82599_e() * 1.125F);
-      int var11 = var1.getXInt() + var3.func_82601_c();
-      int var12 = var1.getYInt();
-      int var13 = var1.getZInt() + var3.func_82599_e();
-      Material var14 = var4.getBlockMaterial(var11, var12, var13);
-      double var15;
-      if(Material.water.equals(var14)) {
-         var15 = 1.0D;
+   public ItemStack dispenseStack(IBlockSource isourceblock, ItemStack itemstack) {
+      EnumFacing enumfacing = EnumFacing.func_82600_a(isourceblock.func_82620_h());
+      World world = isourceblock.getWorld();
+      double d0 = isourceblock.getX() + (double)((float)enumfacing.func_82601_c() * 1.125F);
+      double d1 = isourceblock.getY();
+      double d2 = isourceblock.getZ() + (double)((float)enumfacing.func_82599_e() * 1.125F);
+      int i = isourceblock.getXInt() + enumfacing.func_82601_c();
+      int j = isourceblock.getYInt();
+      int k = isourceblock.getZInt() + enumfacing.func_82599_e();
+      Material material = world.getBlockMaterial(i, j, k);
+      double d3;
+      if(Material.water.equals(material)) {
+         d3 = 1.0D;
       } else {
-         if(!Material.air.equals(var14) || !Material.water.equals(var4.getBlockMaterial(var11, var12 - 1, var13))) {
-            return this.defaultItemDispenseBehavior.dispense(var1, var2);
+         if(!Material.air.equals(material) || !Material.water.equals(world.getBlockMaterial(i, j - 1, k))) {
+            return this.defaultItemDispenseBehavior.dispense(isourceblock, itemstack);
          }
 
-         var15 = 0.0D;
+         d3 = 0.0D;
       }
 
-      EntityBoat var17 = new EntityBoat(var4, var5, var7 + var15, var9);
-      var4.spawnEntityInWorld(var17);
-      var2.splitStack(1);
-      return var2;
+      ItemStack itemstack1 = itemstack.splitStack(1);
+      org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt());
+      CraftItemStack bukkitItem = (new CraftItemStack(itemstack1)).clone();
+      BlockDispenseEvent event = new BlockDispenseEvent(block, bukkitItem, new Vector(d0, d1 + d3, d2));
+      if(!BlockDispenser.eventFired) {
+         world.getServer().getPluginManager().callEvent(event);
+      }
+
+      if(event.isCancelled()) {
+         ++itemstack.stackSize;
+         return itemstack;
+      } else {
+         if(!event.getItem().equals(bukkitItem)) {
+            ++itemstack.stackSize;
+            ItemStack entityboat = CraftItemStack.createNMSItemStack(event.getItem());
+            IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.func_82594_a(entityboat.getItem());
+            if(idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this) {
+               idispensebehavior.dispense(isourceblock, entityboat);
+               return itemstack;
+            }
+         }
+
+         EntityBoat entityboat1 = new EntityBoat(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
+         world.spawnEntityInWorld(entityboat1);
+         return itemstack;
+      }
    }
 
-   protected void playDispenseSound(IBlockSource var1) {
-      var1.getWorld().playAuxSFX(1000, var1.getXInt(), var1.getYInt(), var1.getZInt(), 0);
+   protected void playDispenseSound(IBlockSource isourceblock) {
+      isourceblock.getWorld().playAuxSFX(1000, isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt(), 0);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BehaviorDispenseFireball.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDispenseFireball.class differ
diff -ur mcp-mcdev/net/minecraft/src/BehaviorDispenseFireball.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDispenseFireball.java
--- mcp-mcdev/net/minecraft/src/BehaviorDispenseFireball.java	2012-11-29 21:15:27.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDispenseFireball.java	2012-11-29 20:44:47.000000000 -0800
@@ -6,38 +6,63 @@
 import net.minecraft.src.BlockDispenser;
 import net.minecraft.src.EntitySmallFireball;
 import net.minecraft.src.EnumFacing;
+import net.minecraft.src.IBehaviorDispenseItem;
 import net.minecraft.src.IBlockSource;
 import net.minecraft.src.IPosition;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.util.Vector;
 
 public class BehaviorDispenseFireball extends BehaviorDefaultDispenseItem {
 
-   // $FF: synthetic field
    final MinecraftServer mcServer;
 
 
-   public BehaviorDispenseFireball(MinecraftServer var1) {
-      this.mcServer = var1;
+   public BehaviorDispenseFireball(MinecraftServer minecraftserver) {
+      this.mcServer = minecraftserver;
    }
 
-   public ItemStack dispenseStack(IBlockSource var1, ItemStack var2) {
-      EnumFacing var3 = EnumFacing.func_82600_a(var1.func_82620_h());
-      IPosition var4 = BlockDispenser.func_82525_a(var1);
-      double var5 = var4.getX() + (double)((float)var3.func_82601_c() * 0.3F);
-      double var7 = var4.getY();
-      double var9 = var4.getZ() + (double)((float)var3.func_82599_e() * 0.3F);
-      World var11 = var1.getWorld();
-      Random var12 = var11.rand;
-      double var13 = var12.nextGaussian() * 0.05D + (double)var3.func_82601_c();
-      double var15 = var12.nextGaussian() * 0.05D;
-      double var17 = var12.nextGaussian() * 0.05D + (double)var3.func_82599_e();
-      var11.spawnEntityInWorld(new EntitySmallFireball(var11, var5, var7, var9, var13, var15, var17));
-      var2.splitStack(1);
-      return var2;
+   public ItemStack dispenseStack(IBlockSource isourceblock, ItemStack itemstack) {
+      EnumFacing enumfacing = EnumFacing.func_82600_a(isourceblock.func_82620_h());
+      IPosition iposition = BlockDispenser.func_82525_a(isourceblock);
+      double d0 = iposition.getX() + (double)((float)enumfacing.func_82601_c() * 0.3F);
+      double d1 = iposition.getY();
+      double d2 = iposition.getZ() + (double)((float)enumfacing.func_82599_e() * 0.3F);
+      World world = isourceblock.getWorld();
+      Random random = world.rand;
+      double d3 = random.nextGaussian() * 0.05D + (double)enumfacing.func_82601_c();
+      double d4 = random.nextGaussian() * 0.05D;
+      double d5 = random.nextGaussian() * 0.05D + (double)enumfacing.func_82599_e();
+      ItemStack itemstack1 = itemstack.splitStack(1);
+      org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt());
+      CraftItemStack bukkitItem = (new CraftItemStack(itemstack1)).clone();
+      BlockDispenseEvent event = new BlockDispenseEvent(block, bukkitItem, new Vector(d3, d4, d5));
+      if(!BlockDispenser.eventFired) {
+         world.getServer().getPluginManager().callEvent(event);
+      }
+
+      if(event.isCancelled()) {
+         ++itemstack.stackSize;
+         return itemstack;
+      } else {
+         if(!event.getItem().equals(bukkitItem)) {
+            ++itemstack.stackSize;
+            ItemStack eventStack = CraftItemStack.createNMSItemStack(event.getItem());
+            IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.func_82594_a(eventStack.getItem());
+            if(idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this) {
+               idispensebehavior.dispense(isourceblock, eventStack);
+               return itemstack;
+            }
+         }
+
+         world.spawnEntityInWorld(new EntitySmallFireball(world, d0, d1, d2, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ()));
+         return itemstack;
+      }
    }
 
-   protected void playDispenseSound(IBlockSource var1) {
-      var1.getWorld().playAuxSFX(1009, var1.getXInt(), var1.getYInt(), var1.getZInt(), 0);
+   protected void playDispenseSound(IBlockSource isourceblock) {
+      isourceblock.getWorld().playAuxSFX(1009, isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt(), 0);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BehaviorDispenseMinecart.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDispenseMinecart.class differ
diff -ur mcp-mcdev/net/minecraft/src/BehaviorDispenseMinecart.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDispenseMinecart.java
--- mcp-mcdev/net/minecraft/src/BehaviorDispenseMinecart.java	2012-11-29 21:15:27.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorDispenseMinecart.java	2012-11-29 20:44:47.000000000 -0800
@@ -2,54 +2,81 @@
 
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.BehaviorDefaultDispenseItem;
+import net.minecraft.src.BlockDispenser;
 import net.minecraft.src.BlockRail;
 import net.minecraft.src.EntityMinecart;
 import net.minecraft.src.EnumFacing;
+import net.minecraft.src.IBehaviorDispenseItem;
 import net.minecraft.src.IBlockSource;
 import net.minecraft.src.ItemMinecart;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.util.Vector;
 
 public class BehaviorDispenseMinecart extends BehaviorDefaultDispenseItem {
 
    private final BehaviorDefaultDispenseItem defaultItemDispenseBehavior;
-   // $FF: synthetic field
    final MinecraftServer mcServer;
 
 
-   public BehaviorDispenseMinecart(MinecraftServer var1) {
-      this.mcServer = var1;
+   public BehaviorDispenseMinecart(MinecraftServer minecraftserver) {
+      this.mcServer = minecraftserver;
       this.defaultItemDispenseBehavior = new BehaviorDefaultDispenseItem();
    }
 
-   public ItemStack dispenseStack(IBlockSource var1, ItemStack var2) {
-      EnumFacing var3 = EnumFacing.func_82600_a(var1.func_82620_h());
-      World var4 = var1.getWorld();
-      double var5 = var1.getX() + (double)((float)var3.func_82601_c() * 1.125F);
-      double var7 = var1.getY();
-      double var9 = var1.getZ() + (double)((float)var3.func_82599_e() * 1.125F);
-      int var11 = var1.getXInt() + var3.func_82601_c();
-      int var12 = var1.getYInt();
-      int var13 = var1.getZInt() + var3.func_82599_e();
-      int var14 = var4.getBlockId(var11, var12, var13);
-      double var15;
-      if(BlockRail.isRailBlock(var14)) {
-         var15 = 0.0D;
+   public ItemStack dispenseStack(IBlockSource isourceblock, ItemStack itemstack) {
+      EnumFacing enumfacing = EnumFacing.func_82600_a(isourceblock.func_82620_h());
+      World world = isourceblock.getWorld();
+      double d0 = isourceblock.getX() + (double)((float)enumfacing.func_82601_c() * 1.125F);
+      double d1 = isourceblock.getY();
+      double d2 = isourceblock.getZ() + (double)((float)enumfacing.func_82599_e() * 1.125F);
+      int i = isourceblock.getXInt() + enumfacing.func_82601_c();
+      int j = isourceblock.getYInt();
+      int k = isourceblock.getZInt() + enumfacing.func_82599_e();
+      int l = world.getBlockId(i, j, k);
+      double d3;
+      if(BlockRail.isRailBlock(l)) {
+         d3 = 0.0D;
       } else {
-         if(var14 != 0 || !BlockRail.isRailBlock(var4.getBlockId(var11, var12 - 1, var13))) {
-            return this.defaultItemDispenseBehavior.dispense(var1, var2);
+         if(l != 0 || !BlockRail.isRailBlock(world.getBlockId(i, j - 1, k))) {
+            return this.defaultItemDispenseBehavior.dispense(isourceblock, itemstack);
          }
 
-         var15 = -1.0D;
+         d3 = -1.0D;
       }
 
-      EntityMinecart var17 = new EntityMinecart(var4, var5, var7 + var15, var9, ((ItemMinecart)var2.getItem()).minecartType);
-      var4.spawnEntityInWorld(var17);
-      var2.splitStack(1);
-      return var2;
+      ItemStack itemstack1 = itemstack.splitStack(1);
+      org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt());
+      CraftItemStack bukkitItem = (new CraftItemStack(itemstack1)).clone();
+      BlockDispenseEvent event = new BlockDispenseEvent(block, bukkitItem, new Vector(d0, d1 + d3, d2));
+      if(!BlockDispenser.eventFired) {
+         world.getServer().getPluginManager().callEvent(event);
+      }
+
+      if(event.isCancelled()) {
+         ++itemstack.stackSize;
+         return itemstack;
+      } else {
+         if(!event.getItem().equals(bukkitItem)) {
+            ++itemstack.stackSize;
+            ItemStack entityminecart = CraftItemStack.createNMSItemStack(event.getItem());
+            IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.func_82594_a(entityminecart.getItem());
+            if(idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this) {
+               idispensebehavior.dispense(isourceblock, entityminecart);
+               return itemstack;
+            }
+         }
+
+         itemstack1 = CraftItemStack.createNMSItemStack(event.getItem());
+         EntityMinecart entityminecart1 = new EntityMinecart(world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), ((ItemMinecart)itemstack1.getItem()).minecartType);
+         world.spawnEntityInWorld(entityminecart1);
+         return itemstack;
+      }
    }
 
-   protected void playDispenseSound(IBlockSource var1) {
-      var1.getWorld().playAuxSFX(1000, var1.getXInt(), var1.getYInt(), var1.getZInt(), 0);
+   protected void playDispenseSound(IBlockSource isourceblock) {
+      isourceblock.getWorld().playAuxSFX(1000, isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt(), 0);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BehaviorMobEggDispense.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorMobEggDispense.class differ
diff -ur mcp-mcdev/net/minecraft/src/BehaviorMobEggDispense.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorMobEggDispense.java
--- mcp-mcdev/net/minecraft/src/BehaviorMobEggDispense.java	2012-11-29 21:15:27.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorMobEggDispense.java	2012-11-29 20:44:47.000000000 -0800
@@ -2,32 +2,61 @@
 
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.BehaviorDefaultDispenseItem;
+import net.minecraft.src.BlockDispenser;
 import net.minecraft.src.EnumFacing;
+import net.minecraft.src.IBehaviorDispenseItem;
 import net.minecraft.src.IBlockSource;
 import net.minecraft.src.ItemMonsterPlacer;
 import net.minecraft.src.ItemStack;
+import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.util.Vector;
 
 public class BehaviorMobEggDispense extends BehaviorDefaultDispenseItem {
 
-   // $FF: synthetic field
    final MinecraftServer mcServer;
 
 
-   public BehaviorMobEggDispense(MinecraftServer var1) {
-      this.mcServer = var1;
+   public BehaviorMobEggDispense(MinecraftServer minecraftserver) {
+      this.mcServer = minecraftserver;
    }
 
-   public ItemStack dispenseStack(IBlockSource var1, ItemStack var2) {
-      EnumFacing var3 = EnumFacing.func_82600_a(var1.func_82620_h());
-      double var4 = var1.getX() + (double)var3.func_82601_c();
-      double var6 = (double)((float)var1.getYInt() + 0.2F);
-      double var8 = var1.getZ() + (double)var3.func_82599_e();
-      ItemMonsterPlacer.spawnCreature(var1.getWorld(), var2.getItemDamage(), var4, var6, var8);
-      var2.splitStack(1);
-      return var2;
+   public ItemStack dispenseStack(IBlockSource isourceblock, ItemStack itemstack) {
+      EnumFacing enumfacing = EnumFacing.func_82600_a(isourceblock.func_82620_h());
+      double d0 = isourceblock.getX() + (double)enumfacing.func_82601_c();
+      double d1 = (double)((float)isourceblock.getYInt() + 0.2F);
+      double d2 = isourceblock.getZ() + (double)enumfacing.func_82599_e();
+      World world = isourceblock.getWorld();
+      ItemStack itemstack1 = itemstack.splitStack(1);
+      org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt());
+      CraftItemStack bukkitItem = (new CraftItemStack(itemstack1)).clone();
+      BlockDispenseEvent event = new BlockDispenseEvent(block, bukkitItem, new Vector(d0, d1, d2));
+      if(!BlockDispenser.eventFired) {
+         world.getServer().getPluginManager().callEvent(event);
+      }
+
+      if(event.isCancelled()) {
+         ++itemstack.stackSize;
+         return itemstack;
+      } else {
+         if(!event.getItem().equals(bukkitItem)) {
+            ++itemstack.stackSize;
+            ItemStack eventStack = CraftItemStack.createNMSItemStack(event.getItem());
+            IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.func_82594_a(eventStack.getItem());
+            if(idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this) {
+               idispensebehavior.dispense(isourceblock, eventStack);
+               return itemstack;
+            }
+         }
+
+         itemstack1 = CraftItemStack.createNMSItemStack(event.getItem());
+         ItemMonsterPlacer.spawnCreature(isourceblock.getWorld(), itemstack1.getItemDamage(), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
+         return itemstack;
+      }
    }
 
-   protected void playDispenseSound(IBlockSource var1) {
-      var1.getWorld().playAuxSFX(1002, var1.getXInt(), var1.getYInt(), var1.getZInt(), 0);
+   protected void playDispenseSound(IBlockSource isourceblock) {
+      isourceblock.getWorld().playAuxSFX(1002, isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt(), 0);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BehaviorProjectileDispense.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorProjectileDispense.class differ
diff -ur mcp-mcdev/net/minecraft/src/BehaviorProjectileDispense.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorProjectileDispense.java
--- mcp-mcdev/net/minecraft/src/BehaviorProjectileDispense.java	2012-11-29 21:15:27.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BehaviorProjectileDispense.java	2012-11-29 20:44:47.000000000 -0800
@@ -4,27 +4,53 @@
 import net.minecraft.src.BlockDispenser;
 import net.minecraft.src.Entity;
 import net.minecraft.src.EnumFacing;
+import net.minecraft.src.IBehaviorDispenseItem;
 import net.minecraft.src.IBlockSource;
 import net.minecraft.src.IPosition;
 import net.minecraft.src.IProjectile;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.util.Vector;
 
 public abstract class BehaviorProjectileDispense extends BehaviorDefaultDispenseItem {
 
-   public ItemStack dispenseStack(IBlockSource var1, ItemStack var2) {
-      World var3 = var1.getWorld();
-      IPosition var4 = BlockDispenser.func_82525_a(var1);
-      EnumFacing var5 = EnumFacing.func_82600_a(var1.func_82620_h());
-      IProjectile var6 = this.getProjectileEntity(var3, var4);
-      var6.setThrowableHeading((double)var5.func_82601_c(), 0.10000000149011612D, (double)var5.func_82599_e(), this.func_82500_b(), this.func_82498_a());
-      var3.spawnEntityInWorld((Entity)var6);
-      var2.splitStack(1);
-      return var2;
+   public ItemStack dispenseStack(IBlockSource isourceblock, ItemStack itemstack) {
+      World world = isourceblock.getWorld();
+      IPosition iposition = BlockDispenser.func_82525_a(isourceblock);
+      EnumFacing enumfacing = EnumFacing.func_82600_a(isourceblock.func_82620_h());
+      IProjectile iprojectile = this.getProjectileEntity(world, iposition);
+      ItemStack itemstack1 = itemstack.splitStack(1);
+      org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt());
+      CraftItemStack bukkitItem = (new CraftItemStack(itemstack1)).clone();
+      BlockDispenseEvent event = new BlockDispenseEvent(block, bukkitItem, new Vector((double)enumfacing.func_82601_c(), 0.10000000149011612D, (double)enumfacing.func_82599_e()));
+      if(!BlockDispenser.eventFired) {
+         world.getServer().getPluginManager().callEvent(event);
+      }
+
+      if(event.isCancelled()) {
+         ++itemstack.stackSize;
+         return itemstack;
+      } else {
+         if(!event.getItem().equals(bukkitItem)) {
+            ++itemstack.stackSize;
+            ItemStack eventStack = CraftItemStack.createNMSItemStack(event.getItem());
+            IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.func_82594_a(eventStack.getItem());
+            if(idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider && idispensebehavior != this) {
+               idispensebehavior.dispense(isourceblock, CraftItemStack.createNMSItemStack(event.getItem()));
+               return itemstack;
+            }
+         }
+
+         iprojectile.setThrowableHeading(event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), this.func_82500_b(), this.func_82498_a());
+         world.spawnEntityInWorld((Entity)iprojectile);
+         return itemstack;
+      }
    }
 
-   protected void playDispenseSound(IBlockSource var1) {
-      var1.getWorld().playAuxSFX(1002, var1.getXInt(), var1.getYInt(), var1.getZInt(), 0);
+   protected void playDispenseSound(IBlockSource isourceblock) {
+      isourceblock.getWorld().playAuxSFX(1002, isourceblock.getXInt(), isourceblock.getYInt(), isourceblock.getZInt(), 0);
    }
 
    protected abstract IProjectile getProjectileEntity(World var1, IPosition var2);
Binary files mcp-mcdev/net/minecraft/src/Block.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Block.class differ
diff -ur mcp-mcdev/net/minecraft/src/Block.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Block.java
--- mcp-mcdev/net/minecraft/src/Block.java	2012-11-29 21:15:27.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Block.java	2012-11-29 20:44:46.000000000 -0800
@@ -325,22 +325,22 @@
    private String blockName;
 
 
-   protected Block(int var1, Material var2) {
+   protected Block(int i, Material material) {
       this.blockConstructorCalled = true;
       this.enableStats = true;
       this.stepSound = soundPowderFootstep;
       this.blockParticleGravity = 1.0F;
       this.slipperiness = 0.6F;
-      if(blocksList[var1] != null) {
-         throw new IllegalArgumentException("Slot " + var1 + " is already occupied by " + blocksList[var1] + " when adding " + this);
+      if(blocksList[i] != null) {
+         throw new IllegalArgumentException("Slot " + i + " is already occupied by " + blocksList[i] + " when adding " + this);
       } else {
-         this.blockMaterial = var2;
-         blocksList[var1] = this;
-         this.blockID = var1;
+         this.blockMaterial = material;
+         blocksList[i] = this;
+         this.blockID = i;
          this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-         opaqueCubeLookup[var1] = this.isOpaqueCube();
-         lightOpacity[var1] = this.isOpaqueCube()?255:0;
-         canBlockGrass[var1] = !var2.getCanBlockGrass();
+         opaqueCubeLookup[i] = this.isOpaqueCube();
+         lightOpacity[i] = this.isOpaqueCube()?255:0;
+         canBlockGrass[i] = !material.getCanBlockGrass();
       }
    }
 
@@ -351,41 +351,41 @@
 
    protected void initializeBlock() {}
 
-   protected Block(int var1, int var2, Material var3) {
-      this(var1, var3);
-      this.blockIndexInTexture = var2;
+   protected Block(int i, int j, Material material) {
+      this(i, material);
+      this.blockIndexInTexture = j;
    }
 
-   protected Block setStepSound(StepSound var1) {
-      this.stepSound = var1;
+   protected Block setStepSound(StepSound stepsound) {
+      this.stepSound = stepsound;
       return this;
    }
 
-   protected Block setLightOpacity(int var1) {
-      lightOpacity[this.blockID] = var1;
+   protected Block setLightOpacity(int i) {
+      lightOpacity[this.blockID] = i;
       return this;
    }
 
-   protected Block setLightValue(float var1) {
-      lightValue[this.blockID] = (int)(15.0F * var1);
+   protected Block setLightValue(float f) {
+      lightValue[this.blockID] = (int)(15.0F * f);
       return this;
    }
 
-   protected Block setResistance(float var1) {
-      this.blockResistance = var1 * 3.0F;
+   protected Block setResistance(float f) {
+      this.blockResistance = f * 3.0F;
       return this;
    }
 
-   public static boolean isNormalCube(int var0) {
-      Block var1 = blocksList[var0];
-      return var1 == null?false:var1.blockMaterial.isOpaque() && var1.renderAsNormalBlock();
+   public static boolean isNormalCube(int i) {
+      Block block = blocksList[i];
+      return block == null?false:block.blockMaterial.isOpaque() && block.renderAsNormalBlock();
    }
 
    public boolean renderAsNormalBlock() {
       return true;
    }
 
-   public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
+   public boolean getBlocksMovement(IBlockAccess iblockaccess, int i, int j, int k) {
       return !this.blockMaterial.blocksMovement();
    }
 
@@ -393,10 +393,10 @@
       return 0;
    }
 
-   protected Block setHardness(float var1) {
-      this.blockHardness = var1;
-      if(this.blockResistance < var1 * 5.0F) {
-         this.blockResistance = var1 * 5.0F;
+   protected Block setHardness(float f) {
+      this.blockHardness = f;
+      if(this.blockResistance < f * 5.0F) {
+         this.blockResistance = f * 5.0F;
       }
 
       return this;
@@ -407,12 +407,12 @@
       return this;
    }
 
-   public float getBlockHardness(World var1, int var2, int var3, int var4) {
+   public float getBlockHardness(World world, int i, int j, int k) {
       return this.blockHardness;
    }
 
-   protected Block setTickRandomly(boolean var1) {
-      this.needsRandomTick = var1;
+   protected Block setTickRandomly(boolean flag) {
+      this.needsRandomTick = flag;
       return this;
    }
 
@@ -424,44 +424,44 @@
       return this.isBlockContainer;
    }
 
-   protected final void setBlockBounds(float var1, float var2, float var3, float var4, float var5, float var6) {
-      this.minX = (double)var1;
-      this.minY = (double)var2;
-      this.minZ = (double)var3;
-      this.maxX = (double)var4;
-      this.maxY = (double)var5;
-      this.maxZ = (double)var6;
+   protected final void setBlockBounds(float f, float f1, float f2, float f3, float f4, float f5) {
+      this.minX = (double)f;
+      this.minY = (double)f1;
+      this.minZ = (double)f2;
+      this.maxX = (double)f3;
+      this.maxY = (double)f4;
+      this.maxZ = (double)f5;
    }
 
-   public boolean isBlockSolid(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return var1.getBlockMaterial(var2, var3, var4).isSolid();
+   public boolean isBlockSolid(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return iblockaccess.getBlockMaterial(i, j, k).isSolid();
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      return this.getBlockTextureFromSide(var1);
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      return this.getBlockTextureFromSide(i);
    }
 
-   public int getBlockTextureFromSide(int var1) {
+   public int getBlockTextureFromSide(int i) {
       return this.blockIndexInTexture;
    }
 
-   public void addCollidingBlockToList(World var1, int var2, int var3, int var4, AxisAlignedBB var5, List var6, Entity var7) {
-      AxisAlignedBB var8 = this.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-      if(var8 != null && var5.intersectsWith(var8)) {
-         var6.add(var8);
+   public void addCollidingBlockToList(World world, int i, int j, int k, AxisAlignedBB axisalignedbb, List list, Entity entity) {
+      AxisAlignedBB axisalignedbb1 = this.getCollisionBoundingBoxFromPool(world, i, j, k);
+      if(axisalignedbb1 != null && axisalignedbb.intersectsWith(axisalignedbb1)) {
+         list.add(axisalignedbb1);
       }
 
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-      return AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ);
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
+      return AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)i + this.minX, (double)j + this.minY, (double)k + this.minZ, (double)i + this.maxX, (double)j + this.maxY, (double)k + this.maxZ);
    }
 
    public boolean isOpaqueCube() {
       return true;
    }
 
-   public boolean canCollideCheck(int var1, boolean var2) {
+   public boolean canCollideCheck(int i, boolean flag) {
       return this.isCollidable();
    }
 
@@ -469,213 +469,214 @@
       return true;
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {}
+   public void updateTick(World world, int i, int j, int k, Random random) {}
 
-   public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {}
+   public void onBlockDestroyedByPlayer(World world, int i, int j, int k, int l) {}
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {}
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {}
 
    public int tickRate() {
       return 10;
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {}
+   public void onBlockAdded(World world, int i, int j, int k) {}
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {}
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {}
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 1;
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return this.blockID;
    }
 
-   public float getPlayerRelativeBlockHardness(EntityPlayer var1, World var2, int var3, int var4, int var5) {
-      float var6 = this.getBlockHardness(var2, var3, var4, var5);
-      return var6 < 0.0F?0.0F:(!var1.canHarvestBlock(this)?1.0F / var6 / 100.0F:var1.getCurrentPlayerStrVsBlock(this) / var6 / 30.0F);
+   public float getPlayerRelativeBlockHardness(EntityPlayer entityhuman, World world, int i, int j, int k) {
+      float f = this.getBlockHardness(world, i, j, k);
+      return f < 0.0F?0.0F:(!entityhuman.canHarvestBlock(this)?1.0F / f / 100.0F:entityhuman.getCurrentPlayerStrVsBlock(this) / f / 30.0F);
    }
 
-   public final void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5, int var6) {
-      this.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, 1.0F, var6);
+   public final void dropBlockAsItem(World world, int i, int j, int k, int l, int i1) {
+      this.dropBlockAsItemWithChance(world, i, j, k, l, 1.0F, i1);
    }
 
-   public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-      if(!var1.isRemote) {
-         int var8 = this.quantityDroppedWithBonus(var7, var1.rand);
+   public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f, int i1) {
+      if(!world.isRemote) {
+         int j1 = this.quantityDroppedWithBonus(i1, world.rand);
 
-         for(int var9 = 0; var9 < var8; ++var9) {
-            if(var1.rand.nextFloat() <= var6) {
-               int var10 = this.idDropped(var5, var1.rand, var7);
-               if(var10 > 0) {
-                  this.dropBlockAsItem_do(var1, var2, var3, var4, new ItemStack(var10, 1, this.damageDropped(var5)));
+         for(int k1 = 0; k1 < j1; ++k1) {
+            if(world.rand.nextFloat() < f) {
+               int l1 = this.idDropped(l, world.rand, i1);
+               if(l1 > 0) {
+                  this.dropBlockAsItem_do(world, i, j, k, new ItemStack(l1, 1, this.damageDropped(l)));
                }
             }
          }
-
       }
+
    }
 
-   protected void dropBlockAsItem_do(World var1, int var2, int var3, int var4, ItemStack var5) {
-      if(!var1.isRemote && var1.getGameRules().getGameRuleBooleanValue("doTileDrops")) {
-         float var6 = 0.7F;
-         double var7 = (double)(var1.rand.nextFloat() * var6) + (double)(1.0F - var6) * 0.5D;
-         double var9 = (double)(var1.rand.nextFloat() * var6) + (double)(1.0F - var6) * 0.5D;
-         double var11 = (double)(var1.rand.nextFloat() * var6) + (double)(1.0F - var6) * 0.5D;
-         EntityItem var13 = new EntityItem(var1, (double)var2 + var7, (double)var3 + var9, (double)var4 + var11, var5);
-         var13.delayBeforeCanPickup = 10;
-         var1.spawnEntityInWorld(var13);
+   protected void dropBlockAsItem_do(World world, int i, int j, int k, ItemStack itemstack) {
+      if(!world.isRemote && world.getGameRules().getGameRuleBooleanValue("doTileDrops")) {
+         float f = 0.7F;
+         double d0 = (double)(world.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+         double d1 = (double)(world.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+         double d2 = (double)(world.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
+         EntityItem entityitem = new EntityItem(world, (double)i + d0, (double)j + d1, (double)k + d2, itemstack);
+         entityitem.delayBeforeCanPickup = 10;
+         world.spawnEntityInWorld(entityitem);
       }
+
    }
 
-   protected void dropXpOnBlockBreak(World var1, int var2, int var3, int var4, int var5) {
-      if(!var1.isRemote) {
-         while(var5 > 0) {
-            int var6 = EntityXPOrb.getXPSplit(var5);
-            var5 -= var6;
-            var1.spawnEntityInWorld(new EntityXPOrb(var1, (double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, var6));
+   protected void dropXpOnBlockBreak(World world, int i, int j, int k, int l) {
+      if(!world.isRemote) {
+         while(l > 0) {
+            int i1 = EntityXPOrb.getXPSplit(l);
+            l -= i1;
+            world.spawnEntityInWorld(new EntityXPOrb(world, (double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, i1));
          }
       }
 
    }
 
-   public int damageDropped(int var1) {
+   public int damageDropped(int i) {
       return 0;
    }
 
-   public float getExplosionResistance(Entity var1) {
+   public float getExplosionResistance(Entity entity) {
       return this.blockResistance / 5.0F;
    }
 
-   public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3 var5, Vec3 var6) {
-      this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-      var5 = var5.addVector((double)(-var2), (double)(-var3), (double)(-var4));
-      var6 = var6.addVector((double)(-var2), (double)(-var3), (double)(-var4));
-      Vec3 var7 = var5.getIntermediateWithXValue(var6, this.minX);
-      Vec3 var8 = var5.getIntermediateWithXValue(var6, this.maxX);
-      Vec3 var9 = var5.getIntermediateWithYValue(var6, this.minY);
-      Vec3 var10 = var5.getIntermediateWithYValue(var6, this.maxY);
-      Vec3 var11 = var5.getIntermediateWithZValue(var6, this.minZ);
-      Vec3 var12 = var5.getIntermediateWithZValue(var6, this.maxZ);
-      if(!this.isVecInsideYZBounds(var7)) {
-         var7 = null;
+   public MovingObjectPosition collisionRayTrace(World world, int i, int j, int k, Vec3 vec3d, Vec3 vec3d1) {
+      this.setBlockBoundsBasedOnState(world, i, j, k);
+      vec3d = vec3d.addVector((double)(-i), (double)(-j), (double)(-k));
+      vec3d1 = vec3d1.addVector((double)(-i), (double)(-j), (double)(-k));
+      Vec3 vec3d2 = vec3d.getIntermediateWithXValue(vec3d1, this.minX);
+      Vec3 vec3d3 = vec3d.getIntermediateWithXValue(vec3d1, this.maxX);
+      Vec3 vec3d4 = vec3d.getIntermediateWithYValue(vec3d1, this.minY);
+      Vec3 vec3d5 = vec3d.getIntermediateWithYValue(vec3d1, this.maxY);
+      Vec3 vec3d6 = vec3d.getIntermediateWithZValue(vec3d1, this.minZ);
+      Vec3 vec3d7 = vec3d.getIntermediateWithZValue(vec3d1, this.maxZ);
+      if(!this.isVecInsideYZBounds(vec3d2)) {
+         vec3d2 = null;
       }
 
-      if(!this.isVecInsideYZBounds(var8)) {
-         var8 = null;
+      if(!this.isVecInsideYZBounds(vec3d3)) {
+         vec3d3 = null;
       }
 
-      if(!this.isVecInsideXZBounds(var9)) {
-         var9 = null;
+      if(!this.isVecInsideXZBounds(vec3d4)) {
+         vec3d4 = null;
       }
 
-      if(!this.isVecInsideXZBounds(var10)) {
-         var10 = null;
+      if(!this.isVecInsideXZBounds(vec3d5)) {
+         vec3d5 = null;
       }
 
-      if(!this.isVecInsideXYBounds(var11)) {
-         var11 = null;
+      if(!this.isVecInsideXYBounds(vec3d6)) {
+         vec3d6 = null;
       }
 
-      if(!this.isVecInsideXYBounds(var12)) {
-         var12 = null;
+      if(!this.isVecInsideXYBounds(vec3d7)) {
+         vec3d7 = null;
       }
 
-      Vec3 var13 = null;
-      if(var7 != null && (var13 == null || var5.squareDistanceTo(var7) < var5.squareDistanceTo(var13))) {
-         var13 = var7;
+      Vec3 vec3d8 = null;
+      if(vec3d2 != null && (vec3d8 == null || vec3d.squareDistanceTo(vec3d2) < vec3d.squareDistanceTo(vec3d8))) {
+         vec3d8 = vec3d2;
       }
 
-      if(var8 != null && (var13 == null || var5.squareDistanceTo(var8) < var5.squareDistanceTo(var13))) {
-         var13 = var8;
+      if(vec3d3 != null && (vec3d8 == null || vec3d.squareDistanceTo(vec3d3) < vec3d.squareDistanceTo(vec3d8))) {
+         vec3d8 = vec3d3;
       }
 
-      if(var9 != null && (var13 == null || var5.squareDistanceTo(var9) < var5.squareDistanceTo(var13))) {
-         var13 = var9;
+      if(vec3d4 != null && (vec3d8 == null || vec3d.squareDistanceTo(vec3d4) < vec3d.squareDistanceTo(vec3d8))) {
+         vec3d8 = vec3d4;
       }
 
-      if(var10 != null && (var13 == null || var5.squareDistanceTo(var10) < var5.squareDistanceTo(var13))) {
-         var13 = var10;
+      if(vec3d5 != null && (vec3d8 == null || vec3d.squareDistanceTo(vec3d5) < vec3d.squareDistanceTo(vec3d8))) {
+         vec3d8 = vec3d5;
       }
 
-      if(var11 != null && (var13 == null || var5.squareDistanceTo(var11) < var5.squareDistanceTo(var13))) {
-         var13 = var11;
+      if(vec3d6 != null && (vec3d8 == null || vec3d.squareDistanceTo(vec3d6) < vec3d.squareDistanceTo(vec3d8))) {
+         vec3d8 = vec3d6;
       }
 
-      if(var12 != null && (var13 == null || var5.squareDistanceTo(var12) < var5.squareDistanceTo(var13))) {
-         var13 = var12;
+      if(vec3d7 != null && (vec3d8 == null || vec3d.squareDistanceTo(vec3d7) < vec3d.squareDistanceTo(vec3d8))) {
+         vec3d8 = vec3d7;
       }
 
-      if(var13 == null) {
+      if(vec3d8 == null) {
          return null;
       } else {
-         byte var14 = -1;
-         if(var13 == var7) {
-            var14 = 4;
+         byte b0 = -1;
+         if(vec3d8 == vec3d2) {
+            b0 = 4;
          }
 
-         if(var13 == var8) {
-            var14 = 5;
+         if(vec3d8 == vec3d3) {
+            b0 = 5;
          }
 
-         if(var13 == var9) {
-            var14 = 0;
+         if(vec3d8 == vec3d4) {
+            b0 = 0;
          }
 
-         if(var13 == var10) {
-            var14 = 1;
+         if(vec3d8 == vec3d5) {
+            b0 = 1;
          }
 
-         if(var13 == var11) {
-            var14 = 2;
+         if(vec3d8 == vec3d6) {
+            b0 = 2;
          }
 
-         if(var13 == var12) {
-            var14 = 3;
+         if(vec3d8 == vec3d7) {
+            b0 = 3;
          }
 
-         return new MovingObjectPosition(var2, var3, var4, var14, var13.addVector((double)var2, (double)var3, (double)var4));
+         return new MovingObjectPosition(i, j, k, b0, vec3d8.addVector((double)i, (double)j, (double)k));
       }
    }
 
-   private boolean isVecInsideYZBounds(Vec3 var1) {
-      return var1 == null?false:var1.yCoord >= this.minY && var1.yCoord <= this.maxY && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
+   private boolean isVecInsideYZBounds(Vec3 vec3d) {
+      return vec3d == null?false:vec3d.yCoord >= this.minY && vec3d.yCoord <= this.maxY && vec3d.zCoord >= this.minZ && vec3d.zCoord <= this.maxZ;
    }
 
-   private boolean isVecInsideXZBounds(Vec3 var1) {
-      return var1 == null?false:var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
+   private boolean isVecInsideXZBounds(Vec3 vec3d) {
+      return vec3d == null?false:vec3d.xCoord >= this.minX && vec3d.xCoord <= this.maxX && vec3d.zCoord >= this.minZ && vec3d.zCoord <= this.maxZ;
    }
 
-   private boolean isVecInsideXYBounds(Vec3 var1) {
-      return var1 == null?false:var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.yCoord >= this.minY && var1.yCoord <= this.maxY;
+   private boolean isVecInsideXYBounds(Vec3 vec3d) {
+      return vec3d == null?false:vec3d.xCoord >= this.minX && vec3d.xCoord <= this.maxX && vec3d.yCoord >= this.minY && vec3d.yCoord <= this.maxY;
    }
 
-   public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {}
+   public void onBlockDestroyedByExplosion(World world, int i, int j, int k) {}
 
-   public boolean canPlaceBlockOnSide(World var1, int var2, int var3, int var4, int var5) {
-      return this.canPlaceBlockAt(var1, var2, var3, var4);
+   public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l) {
+      return this.canPlaceBlockAt(world, i, j, k);
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockId(var2, var3, var4);
-      return var5 == 0 || blocksList[var5].blockMaterial.isReplaceable();
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      int l = world.getBlockId(i, j, k);
+      return l == 0 || blocksList[l].blockMaterial.isReplaceable();
    }
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
       return false;
    }
 
-   public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {}
+   public void onEntityWalking(World world, int i, int j, int k, Entity entity) {}
 
-   public int func_85104_a(World var1, int var2, int var3, int var4, int var5, float var6, float var7, float var8, int var9) {
-      return var9;
+   public int func_85104_a(World world, int i, int j, int k, int l, float f, float f1, float f2, int i1) {
+      return i1;
    }
 
-   public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {}
+   public void onBlockClicked(World world, int i, int j, int k, EntityPlayer entityhuman) {}
 
-   public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3 var6) {}
+   public void velocityToAddToEntity(World world, int i, int j, int k, Entity entity, Vec3 vec3d) {}
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {}
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {}
 
    public final double getMinX() {
       return this.minX;
@@ -701,7 +702,7 @@
       return this.maxZ;
    }
 
-   public boolean isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+   public boolean isProvidingWeakPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
       return false;
    }
 
@@ -709,25 +710,25 @@
       return false;
    }
 
-   public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {}
+   public void onEntityCollidedWithBlock(World world, int i, int j, int k, Entity entity) {}
 
-   public boolean isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+   public boolean isProvidingStrongPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
       return false;
    }
 
    public void setBlockBoundsForItemRender() {}
 
-   public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
-      var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
-      var2.addExhaustion(0.025F);
-      if(this.canSilkHarvest() && EnchantmentHelper.getSilkTouchModifier(var2)) {
-         ItemStack var8 = this.createStackedBlock(var6);
-         if(var8 != null) {
-            this.dropBlockAsItem_do(var1, var3, var4, var5, var8);
+   public void harvestBlock(World world, EntityPlayer entityhuman, int i, int j, int k, int l) {
+      entityhuman.addStat(StatList.mineBlockStatArray[this.blockID], 1);
+      entityhuman.addExhaustion(0.025F);
+      if(this.canSilkHarvest() && EnchantmentHelper.getSilkTouchModifier(entityhuman)) {
+         ItemStack i11 = this.createStackedBlock(l);
+         if(i11 != null) {
+            this.dropBlockAsItem_do(world, i, j, k, i11);
          }
       } else {
-         int var7 = EnchantmentHelper.getFortuneModifier(var2);
-         this.dropBlockAsItem(var1, var3, var4, var5, var6, var7);
+         int i1 = EnchantmentHelper.getFortuneModifier(entityhuman);
+         this.dropBlockAsItem(world, i, j, k, l, i1);
       }
 
    }
@@ -736,29 +737,29 @@
       return this.renderAsNormalBlock() && !this.isBlockContainer;
    }
 
-   protected ItemStack createStackedBlock(int var1) {
-      int var2 = 0;
+   protected ItemStack createStackedBlock(int i) {
+      int j = 0;
       if(this.blockID >= 0 && this.blockID < Item.itemsList.length && Item.itemsList[this.blockID].getHasSubtypes()) {
-         var2 = var1;
+         j = i;
       }
 
-      return new ItemStack(this.blockID, 1, var2);
+      return new ItemStack(this.blockID, 1, j);
    }
 
-   public int quantityDroppedWithBonus(int var1, Random var2) {
-      return this.quantityDropped(var2);
+   public int quantityDroppedWithBonus(int i, Random random) {
+      return this.quantityDropped(random);
    }
 
-   public boolean canBlockStay(World var1, int var2, int var3, int var4) {
+   public boolean canBlockStay(World world, int i, int j, int k) {
       return true;
    }
 
-   public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {}
+   public void onBlockPlacedBy(World world, int i, int j, int k, EntityLiving entityliving) {}
 
-   public void func_85105_g(World var1, int var2, int var3, int var4, int var5) {}
+   public void func_85105_g(World world, int i, int j, int k, int l) {}
 
-   public Block setBlockName(String var1) {
-      this.blockName = "tile." + var1;
+   public Block setBlockName(String s) {
+      this.blockName = "tile." + s;
       return this;
    }
 
@@ -770,7 +771,7 @@
       return this.blockName;
    }
 
-   public void onBlockEventReceived(World var1, int var2, int var3, int var4, int var5, int var6) {}
+   public void onBlockEventReceived(World world, int i, int j, int k, int l, int i1) {}
 
    public boolean getEnableStats() {
       return this.enableStats;
@@ -785,31 +786,35 @@
       return this.blockMaterial.getMaterialMobility();
    }
 
-   public void onFallenUpon(World var1, int var2, int var3, int var4, Entity var5, float var6) {}
+   public void onFallenUpon(World world, int i, int j, int k, Entity entity, float f) {}
 
-   public int getDamageValue(World var1, int var2, int var3, int var4) {
-      return this.damageDropped(var1.getBlockMetadata(var2, var3, var4));
+   public int getDamageValue(World world, int i, int j, int k) {
+      return this.damageDropped(world.getBlockMetadata(i, j, k));
    }
 
-   public Block setCreativeTab(CreativeTabs var1) {
-      this.displayOnCreativeTab = var1;
+   public Block setCreativeTab(CreativeTabs creativemodetab) {
+      this.displayOnCreativeTab = creativemodetab;
       return this;
    }
 
-   public void onBlockHarvested(World var1, int var2, int var3, int var4, int var5, EntityPlayer var6) {}
+   public void onBlockHarvested(World world, int i, int j, int k, int l, EntityPlayer entityhuman) {}
 
-   public void onSetBlockIDWithMetaData(World var1, int var2, int var3, int var4, int var5) {}
+   public void onSetBlockIDWithMetaData(World world, int i, int j, int k, int l) {}
 
-   public void fillWithRain(World var1, int var2, int var3, int var4) {}
+   public void fillWithRain(World world, int i, int j, int k) {}
 
    public boolean func_82506_l() {
       return true;
    }
 
-   public boolean func_85103_a(Explosion var1) {
+   public boolean func_85103_a(Explosion explosion) {
       return true;
    }
 
+   public int getExpDrop(World world, int data, int enchantmentLevel) {
+      return 0;
+   }
+
    static {
       Item.itemsList[cloth.blockID] = (new ItemCloth(cloth.blockID - 256)).setItemName("cloth");
       Item.itemsList[wood.blockID] = (new ItemMultiTextureTile(wood.blockID - 256, wood, BlockLog.woodType)).setItemName("log");
@@ -830,36 +835,39 @@
       Item.itemsList[pistonStickyBase.blockID] = new ItemPiston(pistonStickyBase.blockID - 256);
       Item.itemsList[cobblestoneWall.blockID] = (new ItemMultiTextureTile(cobblestoneWall.blockID - 256, cobblestoneWall, BlockWall.types)).setItemName("cobbleWall");
       Item.itemsList[anvil.blockID] = (new ItemAnvilBlock(anvil)).setItemName("anvil");
-
-      for(int var0 = 0; var0 < 256; ++var0) {
-         if(blocksList[var0] != null) {
-            if(Item.itemsList[var0] == null) {
-               Item.itemsList[var0] = new ItemBlock(var0 - 256);
-               blocksList[var0].initializeBlock();
+      Item.itemsList[mushroomCapBrown.blockID] = new ItemColored(mushroomCapBrown.blockID - 256, true);
+      Item.itemsList[mushroomCapRed.blockID] = new ItemColored(mushroomCapRed.blockID - 256, true);
+      Item.itemsList[mobSpawner.blockID] = new ItemColored(mobSpawner.blockID - 256, true);
+
+      for(int i = 0; i < 256; ++i) {
+         if(blocksList[i] != null) {
+            if(Item.itemsList[i] == null) {
+               Item.itemsList[i] = new ItemBlock(i - 256);
+               blocksList[i].initializeBlock();
             }
 
-            boolean var1 = false;
-            if(var0 > 0 && blocksList[var0].getRenderType() == 10) {
-               var1 = true;
+            boolean flag = false;
+            if(i > 0 && blocksList[i].getRenderType() == 10) {
+               flag = true;
             }
 
-            if(var0 > 0 && blocksList[var0] instanceof BlockHalfSlab) {
-               var1 = true;
+            if(i > 0 && blocksList[i] instanceof BlockHalfSlab) {
+               flag = true;
             }
 
-            if(var0 == tilledField.blockID) {
-               var1 = true;
+            if(i == tilledField.blockID) {
+               flag = true;
             }
 
-            if(canBlockGrass[var0]) {
-               var1 = true;
+            if(canBlockGrass[i]) {
+               flag = true;
             }
 
-            if(lightOpacity[var0] == 0) {
-               var1 = true;
+            if(lightOpacity[i] == 0) {
+               flag = true;
             }
 
-            useNeighborBrightness[var0] = var1;
+            useNeighborBrightness[i] = flag;
          }
       }
 
Binary files mcp-mcdev/net/minecraft/src/BlockButton.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockButton.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockButton.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockButton.java
--- mcp-mcdev/net/minecraft/src/BlockButton.java	2012-11-29 21:15:25.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockButton.java	2012-11-29 20:44:45.000000000 -0800
@@ -11,20 +11,21 @@
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockButton extends Block {
 
    private final boolean sensible;
 
 
-   protected BlockButton(int var1, int var2, boolean var3) {
-      super(var1, var2, Material.circuits);
+   protected BlockButton(int i, int j, boolean flag) {
+      super(i, j, Material.circuits);
       this.setTickRandomly(true);
       this.setCreativeTab(CreativeTabs.tabRedstone);
-      this.sensible = var3;
+      this.sensible = flag;
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
@@ -40,141 +41,150 @@
       return false;
    }
 
-   public boolean canPlaceBlockOnSide(World var1, int var2, int var3, int var4, int var5) {
-      return var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)?true:(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)?true:(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)?true:var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)));
+   public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l) {
+      return l == 2 && world.isBlockNormalCube(i, j, k + 1)?true:(l == 3 && world.isBlockNormalCube(i, j, k - 1)?true:(l == 4 && world.isBlockNormalCube(i + 1, j, k)?true:l == 5 && world.isBlockNormalCube(i - 1, j, k)));
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      return var1.isBlockNormalCube(var2 - 1, var3, var4)?true:(var1.isBlockNormalCube(var2 + 1, var3, var4)?true:(var1.isBlockNormalCube(var2, var3, var4 - 1)?true:var1.isBlockNormalCube(var2, var3, var4 + 1)));
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      return world.isBlockNormalCube(i - 1, j, k)?true:(world.isBlockNormalCube(i + 1, j, k)?true:(world.isBlockNormalCube(i, j, k - 1)?true:world.isBlockNormalCube(i, j, k + 1)));
    }
 
-   public int func_85104_a(World var1, int var2, int var3, int var4, int var5, float var6, float var7, float var8, int var9) {
-      int var10 = var1.getBlockMetadata(var2, var3, var4);
-      int var11 = var10 & 8;
-      var10 &= 7;
-      if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-         var10 = 4;
-      } else if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-         var10 = 3;
-      } else if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-         var10 = 2;
-      } else if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-         var10 = 1;
+   public int func_85104_a(World world, int i, int j, int k, int l, float f, float f1, float f2, int i1) {
+      int j1 = world.getBlockMetadata(i, j, k);
+      int k1 = j1 & 8;
+      j1 &= 7;
+      if(l == 2 && world.isBlockNormalCube(i, j, k + 1)) {
+         j1 = 4;
+      } else if(l == 3 && world.isBlockNormalCube(i, j, k - 1)) {
+         j1 = 3;
+      } else if(l == 4 && world.isBlockNormalCube(i + 1, j, k)) {
+         j1 = 2;
+      } else if(l == 5 && world.isBlockNormalCube(i - 1, j, k)) {
+         j1 = 1;
       } else {
-         var10 = this.getOrientation(var1, var2, var3, var4);
+         j1 = this.getOrientation(world, i, j, k);
       }
 
-      return var10 + var11;
+      return j1 + k1;
    }
 
-   private int getOrientation(World var1, int var2, int var3, int var4) {
-      return var1.isBlockNormalCube(var2 - 1, var3, var4)?1:(var1.isBlockNormalCube(var2 + 1, var3, var4)?2:(var1.isBlockNormalCube(var2, var3, var4 - 1)?3:(var1.isBlockNormalCube(var2, var3, var4 + 1)?4:1)));
+   private int getOrientation(World world, int i, int j, int k) {
+      return world.isBlockNormalCube(i - 1, j, k)?1:(world.isBlockNormalCube(i + 1, j, k)?2:(world.isBlockNormalCube(i, j, k - 1)?3:(world.isBlockNormalCube(i, j, k + 1)?4:1)));
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(this.redundantCanPlaceBlockAt(var1, var2, var3, var4)) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
-         boolean var7 = false;
-         if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-            var7 = true;
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(this.redundantCanPlaceBlockAt(world, i, j, k)) {
+         int i1 = world.getBlockMetadata(i, j, k) & 7;
+         boolean flag = false;
+         if(!world.isBlockNormalCube(i - 1, j, k) && i1 == 1) {
+            flag = true;
          }
 
-         if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-            var7 = true;
+         if(!world.isBlockNormalCube(i + 1, j, k) && i1 == 2) {
+            flag = true;
          }
 
-         if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-            var7 = true;
+         if(!world.isBlockNormalCube(i, j, k - 1) && i1 == 3) {
+            flag = true;
          }
 
-         if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-            var7 = true;
+         if(!world.isBlockNormalCube(i, j, k + 1) && i1 == 4) {
+            flag = true;
          }
 
-         if(var7) {
-            this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+         if(flag) {
+            this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+            world.setBlockWithNotify(i, j, k, 0);
          }
       }
 
    }
 
-   private boolean redundantCanPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   private boolean redundantCanPlaceBlockAt(World world, int i, int j, int k) {
+      if(!this.canPlaceBlockAt(world, i, j, k)) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
          return false;
       } else {
          return true;
       }
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      this.func_82534_e(var5);
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k);
+      this.func_82534_e(l);
    }
 
-   private void func_82534_e(int var1) {
-      int var2 = var1 & 7;
-      boolean var3 = (var1 & 8) > 0;
-      float var4 = 0.375F;
-      float var5 = 0.625F;
-      float var6 = 0.1875F;
-      float var7 = 0.125F;
-      if(var3) {
-         var7 = 0.0625F;
+   private void func_82534_e(int i) {
+      int j = i & 7;
+      boolean flag = (i & 8) > 0;
+      float f = 0.375F;
+      float f1 = 0.625F;
+      float f2 = 0.1875F;
+      float f3 = 0.125F;
+      if(flag) {
+         f3 = 0.0625F;
       }
 
-      if(var2 == 1) {
-         this.setBlockBounds(0.0F, var4, 0.5F - var6, var7, var5, 0.5F + var6);
-      } else if(var2 == 2) {
-         this.setBlockBounds(1.0F - var7, var4, 0.5F - var6, 1.0F, var5, 0.5F + var6);
-      } else if(var2 == 3) {
-         this.setBlockBounds(0.5F - var6, var4, 0.0F, 0.5F + var6, var5, var7);
-      } else if(var2 == 4) {
-         this.setBlockBounds(0.5F - var6, var4, 1.0F - var7, 0.5F + var6, var5, 1.0F);
+      if(j == 1) {
+         this.setBlockBounds(0.0F, f, 0.5F - f2, f3, f1, 0.5F + f2);
+      } else if(j == 2) {
+         this.setBlockBounds(1.0F - f3, f, 0.5F - f2, 1.0F, f1, 0.5F + f2);
+      } else if(j == 3) {
+         this.setBlockBounds(0.5F - f2, f, 0.0F, 0.5F + f2, f1, f3);
+      } else if(j == 4) {
+         this.setBlockBounds(0.5F - f2, f, 1.0F - f3, 0.5F + f2, f1, 1.0F);
       }
 
    }
 
-   public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {}
+   public void onBlockClicked(World world, int i, int j, int k, EntityPlayer entityhuman) {}
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-      int var10 = var1.getBlockMetadata(var2, var3, var4);
-      int var11 = var10 & 7;
-      int var12 = 8 - (var10 & 8);
-      if(var12 == 0) {
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
+      int i1 = world.getBlockMetadata(i, j, k);
+      int j1 = i1 & 7;
+      int k1 = 8 - (i1 & 8);
+      if(k1 == 0) {
          return true;
       } else {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var11 + var12);
-         var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
-         this.func_82536_d(var1, var2, var3, var4, var11);
-         var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
-         return true;
+         org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+         int old = k1 != 8?1:0;
+         int current = k1 == 8?1:0;
+         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+         world.getServer().getPluginManager().callEvent(eventRedstone);
+         if(eventRedstone.getNewCurrent() > 0 != (k1 == 8)) {
+            return true;
+         } else {
+            world.setBlockMetadataWithNotify(i, j, k, j1 + k1);
+            world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
+            world.playSoundEffect((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, 0.6F);
+            this.func_82536_d(world, i, j, k, j1);
+            world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
+            return true;
+         }
       }
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      if((var6 & 8) > 0) {
-         int var7 = var6 & 7;
-         this.func_82536_d(var1, var2, var3, var4, var7);
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      if((i1 & 8) > 0) {
+         int j1 = i1 & 7;
+         this.func_82536_d(world, i, j, k, j1);
       }
 
-      super.breakBlock(var1, var2, var3, var4, var5, var6);
+      super.breakBlock(world, i, j, k, l, i1);
    }
 
-   public boolean isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return (var1.getBlockMetadata(var2, var3, var4) & 8) > 0;
+   public boolean isProvidingWeakPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return (iblockaccess.getBlockMetadata(i, j, k) & 8) > 0;
    }
 
-   public boolean isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      int var6 = var1.getBlockMetadata(var2, var3, var4);
-      if((var6 & 8) == 0) {
+   public boolean isProvidingStrongPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      int i1 = iblockaccess.getBlockMetadata(i, j, k);
+      if((i1 & 8) == 0) {
          return false;
       } else {
-         int var7 = var6 & 7;
-         return var7 == 5 && var5 == 1?true:(var7 == 4 && var5 == 2?true:(var7 == 3 && var5 == 3?true:(var7 == 2 && var5 == 4?true:var7 == 1 && var5 == 5)));
+         int j1 = i1 & 7;
+         return j1 == 5 && l == 1?true:(j1 == 4 && l == 2?true:(j1 == 3 && l == 3?true:(j1 == 2 && l == 4?true:j1 == 1 && l == 5)));
       }
    }
 
@@ -182,80 +192,84 @@
       return true;
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         if((var6 & 8) != 0) {
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote) {
+         int l = world.getBlockMetadata(i, j, k);
+         if((l & 8) != 0) {
+            org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 1, 0);
+            world.getServer().getPluginManager().callEvent(eventRedstone);
+            if(eventRedstone.getNewCurrent() > 0) {
+               return;
+            }
+
             if(this.sensible) {
-               this.func_82535_o(var1, var2, var3, var4);
+               this.func_82535_o(world, i, j, k);
             } else {
-               var1.setBlockMetadataWithNotify(var2, var3, var4, var6 & 7);
-               int var7 = var6 & 7;
-               this.func_82536_d(var1, var2, var3, var4, var7);
-               var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
-               var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
+               world.setBlockMetadataWithNotify(i, j, k, l & 7);
+               int i1 = l & 7;
+               this.func_82536_d(world, i, j, k, i1);
+               world.playSoundEffect((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, 0.5F);
+               world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
             }
-
          }
       }
+
    }
 
    public void setBlockBoundsForItemRender() {
-      float var1 = 0.1875F;
-      float var2 = 0.125F;
-      float var3 = 0.125F;
-      this.setBlockBounds(0.5F - var1, 0.5F - var2, 0.5F - var3, 0.5F + var1, 0.5F + var2, 0.5F + var3);
+      float f = 0.1875F;
+      float f1 = 0.125F;
+      float f2 = 0.125F;
+      this.setBlockBounds(0.5F - f, 0.5F - f1, 0.5F - f2, 0.5F + f, 0.5F + f1, 0.5F + f2);
    }
 
-   public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-      if(!var1.isRemote) {
-         if(this.sensible) {
-            if((var1.getBlockMetadata(var2, var3, var4) & 8) == 0) {
-               this.func_82535_o(var1, var2, var3, var4);
-            }
-         }
+   public void onEntityCollidedWithBlock(World world, int i, int j, int k, Entity entity) {
+      if(!world.isRemote && this.sensible && (world.getBlockMetadata(i, j, k) & 8) == 0) {
+         this.func_82535_o(world, i, j, k);
       }
+
    }
 
-   private void func_82535_o(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      int var6 = var5 & 7;
-      boolean var7 = (var5 & 8) != 0;
-      this.func_82534_e(var5);
-      List var8 = var1.getEntitiesWithinAABB(EntityArrow.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ));
-      boolean var9 = !var8.isEmpty();
-      if(var9 && !var7) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var6 | 8);
-         this.func_82536_d(var1, var2, var3, var4, var6);
-         var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
-      }
-
-      if(!var9 && var7) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-         this.func_82536_d(var1, var2, var3, var4, var6);
-         var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
-      }
-
-      if(var9) {
-         var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+   private void func_82535_o(World world, int i, int j, int k) {
+      int l = world.getBlockMetadata(i, j, k);
+      int i1 = l & 7;
+      boolean flag = (l & 8) != 0;
+      this.func_82534_e(l);
+      List list = world.getEntitiesWithinAABB(EntityArrow.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)i + this.minX, (double)j + this.minY, (double)k + this.minZ, (double)i + this.maxX, (double)j + this.maxY, (double)k + this.maxZ));
+      boolean flag1 = !list.isEmpty();
+      if(flag1 && !flag) {
+         world.setBlockMetadataWithNotify(i, j, k, i1 | 8);
+         this.func_82536_d(world, i, j, k, i1);
+         world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
+         world.playSoundEffect((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, 0.6F);
+      }
+
+      if(!flag1 && flag) {
+         world.setBlockMetadataWithNotify(i, j, k, i1);
+         this.func_82536_d(world, i, j, k, i1);
+         world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
+         world.playSoundEffect((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, 0.5F);
+      }
+
+      if(flag1) {
+         world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
       }
 
    }
 
-   private void func_82536_d(World var1, int var2, int var3, int var4, int var5) {
-      var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-      if(var5 == 1) {
-         var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-      } else if(var5 == 2) {
-         var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-      } else if(var5 == 3) {
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-      } else if(var5 == 4) {
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+   private void func_82536_d(World world, int i, int j, int k, int l) {
+      world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+      if(l == 1) {
+         world.notifyBlocksOfNeighborChange(i - 1, j, k, this.blockID);
+      } else if(l == 2) {
+         world.notifyBlocksOfNeighborChange(i + 1, j, k, this.blockID);
+      } else if(l == 3) {
+         world.notifyBlocksOfNeighborChange(i, j, k - 1, this.blockID);
+      } else if(l == 4) {
+         world.notifyBlocksOfNeighborChange(i, j, k + 1, this.blockID);
       } else {
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/BlockCactus.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockCactus.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockCactus.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockCactus.java
--- mcp-mcdev/net/minecraft/src/BlockCactus.java	2012-11-29 21:15:25.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockCactus.java	2012-11-29 20:44:44.000000000 -0800
@@ -6,44 +6,48 @@
 import net.minecraft.src.CreativeTabs;
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.Entity;
+import net.minecraft.src.EntityLiving;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityDamageByBlockEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
 
 public class BlockCactus extends Block {
 
-   protected BlockCactus(int var1, int var2) {
-      super(var1, var2, Material.cactus);
+   protected BlockCactus(int i, int j) {
+      super(i, j, Material.cactus);
       this.setTickRandomly(true);
       this.setCreativeTab(CreativeTabs.tabDecorations);
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(var1.isAirBlock(var2, var3 + 1, var4)) {
-         int var6;
-         for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(world.isAirBlock(i, j + 1, k)) {
+         int l;
+         for(l = 1; world.getBlockId(i, j - l, k) == this.blockID; ++l) {
             ;
          }
 
-         if(var6 < 3) {
-            int var7 = var1.getBlockMetadata(var2, var3, var4);
-            if(var7 == 15) {
-               var1.setBlockWithNotify(var2, var3 + 1, var4, this.blockID);
-               var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+         if(l < 3) {
+            int i1 = world.getBlockMetadata(i, j, k);
+            if(i1 == 15) {
+               CraftEventFactory.handleBlockGrowEvent(world, i, j + 1, k, this.blockID, 0);
+               world.setBlockMetadataWithNotify(i, j, k, 0);
             } else {
-               var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
+               world.setBlockMetadataWithNotify(i, j, k, i1 + 1);
             }
          }
       }
 
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-      float var5 = 0.0625F;
-      return AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)((float)(var3 + 1) - var5), (double)((float)(var4 + 1) - var5));
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
+      float f = 0.0625F;
+      return AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)i + f), (double)j, (double)((float)k + f), (double)((float)(i + 1) - f), (double)((float)(j + 1) - f), (double)((float)(k + 1) - f));
    }
 
-   public int getBlockTextureFromSide(int var1) {
-      return var1 == 1?this.blockIndexInTexture - 1:(var1 == 0?this.blockIndexInTexture + 1:this.blockIndexInTexture);
+   public int getBlockTextureFromSide(int i) {
+      return i == 1?this.blockIndexInTexture - 1:(i == 0?this.blockIndexInTexture + 1:this.blockIndexInTexture);
    }
 
    public boolean renderAsNormalBlock() {
@@ -58,34 +62,46 @@
       return 13;
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      return !super.canPlaceBlockAt(var1, var2, var3, var4)?false:this.canBlockStay(var1, var2, var3, var4);
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      return !super.canPlaceBlockAt(world, i, j, k)?false:this.canBlockStay(world, i, j, k);
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(!this.canBlockStay(var1, var2, var3, var4)) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(!this.canBlockStay(world, i, j, k)) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
       }
 
    }
 
-   public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-      if(var1.getBlockMaterial(var2 - 1, var3, var4).isSolid()) {
+   public boolean canBlockStay(World world, int i, int j, int k) {
+      if(world.getBlockMaterial(i - 1, j, k).isSolid()) {
          return false;
-      } else if(var1.getBlockMaterial(var2 + 1, var3, var4).isSolid()) {
+      } else if(world.getBlockMaterial(i + 1, j, k).isSolid()) {
          return false;
-      } else if(var1.getBlockMaterial(var2, var3, var4 - 1).isSolid()) {
+      } else if(world.getBlockMaterial(i, j, k - 1).isSolid()) {
          return false;
-      } else if(var1.getBlockMaterial(var2, var3, var4 + 1).isSolid()) {
+      } else if(world.getBlockMaterial(i, j, k + 1).isSolid()) {
          return false;
       } else {
-         int var5 = var1.getBlockId(var2, var3 - 1, var4);
-         return var5 == Block.cactus.blockID || var5 == Block.sand.blockID;
+         int l = world.getBlockId(i, j - 1, k);
+         return l == Block.cactus.blockID || l == Block.sand.blockID;
       }
    }
 
-   public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-      var5.attackEntityFrom(DamageSource.cactus, 1);
+   public void onEntityCollidedWithBlock(World world, int i, int j, int k, Entity entity) {
+      if(entity instanceof EntityLiving) {
+         org.bukkit.block.Block damager = world.getWorld().getBlockAt(i, j, k);
+         org.bukkit.entity.Entity damagee = entity == null?null:entity.getBukkitEntity();
+         EntityDamageByBlockEvent event = new EntityDamageByBlockEvent(damager, damagee, DamageCause.CONTACT, 1);
+         world.getServer().getPluginManager().callEvent(event);
+         if(!event.isCancelled()) {
+            damagee.setLastDamageCause(event);
+            entity.attackEntityFrom(DamageSource.cactus, event.getDamage());
+         }
+
+      } else {
+         entity.attackEntityFrom(DamageSource.cactus, 1);
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockCommandBlock.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockCommandBlock.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockCommandBlock.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockCommandBlock.java
--- mcp-mcdev/net/minecraft/src/BlockCommandBlock.java	2012-11-29 21:15:24.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockCommandBlock.java	2012-11-29 20:44:44.000000000 -0800
@@ -7,36 +7,42 @@
 import net.minecraft.src.TileEntity;
 import net.minecraft.src.TileEntityCommandBlock;
 import net.minecraft.src.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockCommandBlock extends BlockContainer {
 
-   public BlockCommandBlock(int var1) {
-      super(var1, 184, Material.iron);
+   public BlockCommandBlock(int i) {
+      super(i, 184, Material.iron);
    }
 
-   public TileEntity createNewTileEntity(World var1) {
+   public TileEntity createNewTileEntity(World world) {
       return new TileEntityCommandBlock();
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(!var1.isRemote) {
-         boolean var6 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
-         int var7 = var1.getBlockMetadata(var2, var3, var4);
-         boolean var8 = (var7 & 1) != 0;
-         if(var6 && !var8) {
-            var1.setBlockMetadata(var2, var3, var4, var7 | 1);
-            var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
-         } else if(!var6 && var8) {
-            var1.setBlockMetadata(var2, var3, var4, var7 & -2);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(!world.isRemote) {
+         boolean flag = world.isBlockIndirectlyGettingPowered(i, j, k);
+         int i1 = world.getBlockMetadata(i, j, k);
+         boolean flag1 = (i1 & 1) != 0;
+         org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+         int old = flag1?1:0;
+         int current = flag?1:0;
+         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+         world.getServer().getPluginManager().callEvent(eventRedstone);
+         if(eventRedstone.getNewCurrent() > 0 && eventRedstone.getOldCurrent() <= 0) {
+            world.setBlockMetadata(i, j, k, i1 | 1);
+            world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
+         } else if(eventRedstone.getNewCurrent() <= 0 && eventRedstone.getOldCurrent() > 0) {
+            world.setBlockMetadata(i, j, k, i1 & -2);
          }
       }
 
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      TileEntity var6 = var1.getBlockTileEntity(var2, var3, var4);
-      if(var6 != null && var6 instanceof TileEntityCommandBlock) {
-         ((TileEntityCommandBlock)var6).executeCommandOnPowered(var1);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      TileEntity tileentity = world.getBlockTileEntity(i, j, k);
+      if(tileentity != null && tileentity instanceof TileEntityCommandBlock) {
+         ((TileEntityCommandBlock)tileentity).executeCommandOnPowered(world);
       }
 
    }
@@ -45,10 +51,10 @@
       return 1;
    }
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-      TileEntityCommandBlock var10 = (TileEntityCommandBlock)var1.getBlockTileEntity(var2, var3, var4);
-      if(var10 != null) {
-         var5.displayGUIEditSign(var10);
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
+      TileEntityCommandBlock tileentitycommand = (TileEntityCommandBlock)world.getBlockTileEntity(i, j, k);
+      if(tileentitycommand != null) {
+         entityhuman.displayGUIEditSign(tileentitycommand);
       }
 
       return true;
Binary files mcp-mcdev/net/minecraft/src/BlockCrops.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockCrops.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockCrops.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockCrops.java
--- mcp-mcdev/net/minecraft/src/BlockCrops.java	2012-11-29 21:15:24.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockCrops.java	2012-11-29 20:44:44.000000000 -0800
@@ -7,15 +7,16 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class BlockCrops extends BlockFlower {
 
-   protected BlockCrops(int var1, int var2) {
-      super(var1, var2);
-      this.blockIndexInTexture = var2;
+   protected BlockCrops(int i, int j) {
+      super(i, j);
+      this.blockIndexInTexture = j;
       this.setTickRandomly(true);
-      float var3 = 0.5F;
-      this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 0.25F, 0.5F + var3);
+      float f = 0.5F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.25F, 0.5F + f);
       this.setCreativeTab((CreativeTabs)null);
       this.setHardness(0.0F);
       this.setStepSound(soundGrassFootstep);
@@ -23,75 +24,75 @@
       this.setRequiresSelfNotify();
    }
 
-   protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-      return var1 == Block.tilledField.blockID;
+   protected boolean canThisPlantGrowOnThisBlockID(int i) {
+      return i == Block.tilledField.blockID;
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      super.updateTick(var1, var2, var3, var4, var5);
-      if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         if(var6 < 7) {
-            float var7 = this.getGrowthRate(var1, var2, var3, var4);
-            if(var5.nextInt((int)(25.0F / var7) + 1) == 0) {
-               ++var6;
-               var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      super.updateTick(world, i, j, k, random);
+      if(world.getBlockLightValue(i, j + 1, k) >= 9) {
+         int l = world.getBlockMetadata(i, j, k);
+         if(l < 7) {
+            float f = this.getGrowthRate(world, i, j, k);
+            if(random.nextInt((int)(25.0F / f) + 1) == 0) {
+               ++l;
+               CraftEventFactory.handleBlockGrowEvent(world, i, j, k, this.blockID, l);
             }
          }
       }
 
    }
 
-   public void fertilize(World var1, int var2, int var3, int var4) {
-      var1.setBlockMetadataWithNotify(var2, var3, var4, 7);
+   public void fertilize(World world, int i, int j, int k) {
+      world.setBlockMetadataWithNotify(i, j, k, 7);
    }
 
-   private float getGrowthRate(World var1, int var2, int var3, int var4) {
-      float var5 = 1.0F;
-      int var6 = var1.getBlockId(var2, var3, var4 - 1);
-      int var7 = var1.getBlockId(var2, var3, var4 + 1);
-      int var8 = var1.getBlockId(var2 - 1, var3, var4);
-      int var9 = var1.getBlockId(var2 + 1, var3, var4);
-      int var10 = var1.getBlockId(var2 - 1, var3, var4 - 1);
-      int var11 = var1.getBlockId(var2 + 1, var3, var4 - 1);
-      int var12 = var1.getBlockId(var2 + 1, var3, var4 + 1);
-      int var13 = var1.getBlockId(var2 - 1, var3, var4 + 1);
-      boolean var14 = var8 == this.blockID || var9 == this.blockID;
-      boolean var15 = var6 == this.blockID || var7 == this.blockID;
-      boolean var16 = var10 == this.blockID || var11 == this.blockID || var12 == this.blockID || var13 == this.blockID;
-
-      for(int var17 = var2 - 1; var17 <= var2 + 1; ++var17) {
-         for(int var18 = var4 - 1; var18 <= var4 + 1; ++var18) {
-            int var19 = var1.getBlockId(var17, var3 - 1, var18);
-            float var20 = 0.0F;
-            if(var19 == Block.tilledField.blockID) {
-               var20 = 1.0F;
-               if(var1.getBlockMetadata(var17, var3 - 1, var18) > 0) {
-                  var20 = 3.0F;
+   private float getGrowthRate(World world, int i, int j, int k) {
+      float f = 1.0F;
+      int l = world.getBlockId(i, j, k - 1);
+      int i1 = world.getBlockId(i, j, k + 1);
+      int j1 = world.getBlockId(i - 1, j, k);
+      int k1 = world.getBlockId(i + 1, j, k);
+      int l1 = world.getBlockId(i - 1, j, k - 1);
+      int i2 = world.getBlockId(i + 1, j, k - 1);
+      int j2 = world.getBlockId(i + 1, j, k + 1);
+      int k2 = world.getBlockId(i - 1, j, k + 1);
+      boolean flag = j1 == this.blockID || k1 == this.blockID;
+      boolean flag1 = l == this.blockID || i1 == this.blockID;
+      boolean flag2 = l1 == this.blockID || i2 == this.blockID || j2 == this.blockID || k2 == this.blockID;
+
+      for(int l2 = i - 1; l2 <= i + 1; ++l2) {
+         for(int i3 = k - 1; i3 <= k + 1; ++i3) {
+            int j3 = world.getBlockId(l2, j - 1, i3);
+            float f1 = 0.0F;
+            if(j3 == Block.tilledField.blockID) {
+               f1 = 1.0F;
+               if(world.getBlockMetadata(l2, j - 1, i3) > 0) {
+                  f1 = 3.0F;
                }
             }
 
-            if(var17 != var2 || var18 != var4) {
-               var20 /= 4.0F;
+            if(l2 != i || i3 != k) {
+               f1 /= 4.0F;
             }
 
-            var5 += var20;
+            f += f1;
          }
       }
 
-      if(var16 || var14 && var15) {
-         var5 /= 2.0F;
+      if(flag2 || flag && flag1) {
+         f /= 2.0F;
       }
 
-      return var5;
+      return f;
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      if(var2 < 0) {
-         var2 = 7;
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      if(j < 0) {
+         j = 7;
       }
 
-      return this.blockIndexInTexture + var2;
+      return this.blockIndexInTexture + j;
    }
 
    public int getRenderType() {
@@ -106,27 +107,25 @@
       return Item.wheat.shiftedIndex;
    }
 
-   public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-      super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6, 0);
-      if(!var1.isRemote) {
-         if(var5 >= 7) {
-            int var8 = 3 + var7;
-
-            for(int var9 = 0; var9 < var8; ++var9) {
-               if(var1.rand.nextInt(15) <= var5) {
-                  this.dropBlockAsItem_do(var1, var2, var3, var4, new ItemStack(this.getSeedItem(), 1, 0));
-               }
+   public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f, int i1) {
+      super.dropBlockAsItemWithChance(world, i, j, k, l, f, 0);
+      if(!world.isRemote && l >= 7) {
+         int j1 = 3 + i1;
+
+         for(int k1 = 0; k1 < j1; ++k1) {
+            if(world.rand.nextInt(15) <= l) {
+               this.dropBlockAsItem_do(world, i, j, k, new ItemStack(this.getSeedItem(), 1, 0));
             }
          }
-
       }
+
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
-      return var1 == 7?this.getCropItem():this.getSeedItem();
+   public int idDropped(int i, Random random, int j) {
+      return i == 7?this.getCropItem():this.getSeedItem();
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 1;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockDetectorRail.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDetectorRail.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockDetectorRail.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDetectorRail.java
--- mcp-mcdev/net/minecraft/src/BlockDetectorRail.java	2012-11-29 21:15:24.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDetectorRail.java	2012-11-29 20:44:44.000000000 -0800
@@ -8,11 +8,12 @@
 import net.minecraft.src.EntityMinecart;
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockDetectorRail extends BlockRail {
 
-   public BlockDetectorRail(int var1, int var2) {
-      super(var1, var2, true);
+   public BlockDetectorRail(int i, int j) {
+      super(i, j, true);
       this.setTickRandomly(true);
    }
 
@@ -24,57 +25,66 @@
       return true;
    }
 
-   public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-      if(!var1.isRemote) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         if((var6 & 8) == 0) {
-            this.setStateIfMinecartInteractsWithRail(var1, var2, var3, var4, var6);
+   public void onEntityCollidedWithBlock(World world, int i, int j, int k, Entity entity) {
+      if(!world.isRemote) {
+         int l = world.getBlockMetadata(i, j, k);
+         if((l & 8) == 0) {
+            this.setStateIfMinecartInteractsWithRail(world, i, j, k, l);
          }
       }
+
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         if((var6 & 8) != 0) {
-            this.setStateIfMinecartInteractsWithRail(var1, var2, var3, var4, var6);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote) {
+         int l = world.getBlockMetadata(i, j, k);
+         if((l & 8) != 0) {
+            this.setStateIfMinecartInteractsWithRail(world, i, j, k, l);
          }
       }
+
    }
 
-   public boolean isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return (var1.getBlockMetadata(var2, var3, var4) & 8) != 0;
+   public boolean isProvidingWeakPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return (iblockaccess.getBlockMetadata(i, j, k) & 8) != 0;
    }
 
-   public boolean isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return (var1.getBlockMetadata(var2, var3, var4) & 8) == 0?false:var5 == 1;
+   public boolean isProvidingStrongPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return (iblockaccess.getBlockMetadata(i, j, k) & 8) == 0?false:l == 1;
    }
 
-   private void setStateIfMinecartInteractsWithRail(World var1, int var2, int var3, int var4, int var5) {
-      boolean var6 = (var5 & 8) != 0;
-      boolean var7 = false;
-      float var8 = 0.125F;
-      List var9 = var1.getEntitiesWithinAABB(EntityMinecart.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)var2 + var8), (double)var3, (double)((float)var4 + var8), (double)((float)(var2 + 1) - var8), (double)((float)(var3 + 1) - var8), (double)((float)(var4 + 1) - var8)));
-      if(!var9.isEmpty()) {
-         var7 = true;
+   private void setStateIfMinecartInteractsWithRail(World world, int i, int j, int k, int l) {
+      boolean flag = (l & 8) != 0;
+      boolean flag1 = false;
+      float f = 0.125F;
+      List list = world.getEntitiesWithinAABB(EntityMinecart.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)i + f), (double)j, (double)((float)k + f), (double)((float)(i + 1) - f), (double)((float)(j + 1) - f), (double)((float)(k + 1) - f)));
+      if(!list.isEmpty()) {
+         flag1 = true;
+      }
+
+      if(flag != flag1) {
+         org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, flag?1:0, flag1?1:0);
+         world.getServer().getPluginManager().callEvent(eventRedstone);
+         flag1 = eventRedstone.getNewCurrent() > 0;
       }
 
-      if(var7 && !var6) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var5 | 8);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
+      if(flag1 && !flag) {
+         world.setBlockMetadataWithNotify(i, j, k, l | 8);
+         world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+         world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
       }
 
-      if(!var7 && var6) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var5 & 7);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
+      if(!flag1 && flag) {
+         world.setBlockMetadataWithNotify(i, j, k, l & 7);
+         world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+         world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
       }
 
-      if(var7) {
-         var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+      if(flag1) {
+         world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/BlockDispenser.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDispenser.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockDispenser.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDispenser.java
--- mcp-mcdev/net/minecraft/src/BlockDispenser.java	2012-11-29 21:15:24.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDispenser.java	2012-11-29 20:44:44.000000000 -0800
@@ -28,10 +28,11 @@
 
    public static final IRegistry dispenseBehaviorRegistry = new RegistryDefaulted(new BehaviorDefaultDispenseItem());
    private Random random = new Random();
+   public static boolean eventFired = false;
 
 
-   protected BlockDispenser(int var1) {
-      super(var1, Material.rock);
+   protected BlockDispenser(int i) {
+      super(i, Material.rock);
       this.blockIndexInTexture = 45;
       this.setCreativeTab(CreativeTabs.tabRedstone);
    }
@@ -40,160 +41,162 @@
       return 4;
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Block.dispenser.blockID;
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      super.onBlockAdded(var1, var2, var3, var4);
-      this.setDispenserDefaultDirection(var1, var2, var3, var4);
+   public void onBlockAdded(World world, int i, int j, int k) {
+      super.onBlockAdded(world, i, j, k);
+      this.setDispenserDefaultDirection(world, i, j, k);
    }
 
-   private void setDispenserDefaultDirection(World var1, int var2, int var3, int var4) {
-      if(!var1.isRemote) {
-         int var5 = var1.getBlockId(var2, var3, var4 - 1);
-         int var6 = var1.getBlockId(var2, var3, var4 + 1);
-         int var7 = var1.getBlockId(var2 - 1, var3, var4);
-         int var8 = var1.getBlockId(var2 + 1, var3, var4);
-         byte var9 = 3;
-         if(Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var6]) {
-            var9 = 3;
+   private void setDispenserDefaultDirection(World world, int i, int j, int k) {
+      if(!world.isRemote) {
+         int l = world.getBlockId(i, j, k - 1);
+         int i1 = world.getBlockId(i, j, k + 1);
+         int j1 = world.getBlockId(i - 1, j, k);
+         int k1 = world.getBlockId(i + 1, j, k);
+         byte b0 = 3;
+         if(Block.opaqueCubeLookup[l] && !Block.opaqueCubeLookup[i1]) {
+            b0 = 3;
          }
 
-         if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var5]) {
-            var9 = 2;
+         if(Block.opaqueCubeLookup[i1] && !Block.opaqueCubeLookup[l]) {
+            b0 = 2;
          }
 
-         if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var8]) {
-            var9 = 5;
+         if(Block.opaqueCubeLookup[j1] && !Block.opaqueCubeLookup[k1]) {
+            b0 = 5;
          }
 
-         if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var7]) {
-            var9 = 4;
+         if(Block.opaqueCubeLookup[k1] && !Block.opaqueCubeLookup[j1]) {
+            b0 = 4;
          }
 
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var9);
+         world.setBlockMetadataWithNotify(i, j, k, b0);
       }
+
    }
 
-   public int getBlockTextureFromSide(int var1) {
-      return var1 == 1?this.blockIndexInTexture + 17:(var1 == 0?this.blockIndexInTexture + 17:(var1 == 3?this.blockIndexInTexture + 1:this.blockIndexInTexture));
+   public int getBlockTextureFromSide(int i) {
+      return i == 1?this.blockIndexInTexture + 17:(i == 0?this.blockIndexInTexture + 17:(i == 3?this.blockIndexInTexture + 1:this.blockIndexInTexture));
    }
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-      if(var1.isRemote) {
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
+      if(world.isRemote) {
          return true;
       } else {
-         TileEntityDispenser var10 = (TileEntityDispenser)var1.getBlockTileEntity(var2, var3, var4);
-         if(var10 != null) {
-            var5.displayGUIDispenser(var10);
+         TileEntityDispenser tileentitydispenser = (TileEntityDispenser)world.getBlockTileEntity(i, j, k);
+         if(tileentitydispenser != null) {
+            entityhuman.displayGUIDispenser(tileentitydispenser);
          }
 
          return true;
       }
    }
 
-   private void dispense(World var1, int var2, int var3, int var4) {
-      BlockSourceImpl var5 = new BlockSourceImpl(var1, var2, var3, var4);
-      TileEntityDispenser var6 = (TileEntityDispenser)var5.func_82619_j();
-      if(var6 != null) {
-         int var7 = var6.getRandomStackFromInventory();
-         if(var7 < 0) {
-            var1.playAuxSFX(1001, var2, var3, var4, 0);
+   public void dispense(World world, int i, int j, int k) {
+      BlockSourceImpl sourceblock = new BlockSourceImpl(world, i, j, k);
+      TileEntityDispenser tileentitydispenser = (TileEntityDispenser)sourceblock.func_82619_j();
+      if(tileentitydispenser != null) {
+         int l = tileentitydispenser.getRandomStackFromInventory();
+         if(l < 0) {
+            world.playAuxSFX(1001, i, j, k, 0);
          } else {
-            ItemStack var8 = var6.getStackInSlot(var7);
-            IBehaviorDispenseItem var9 = (IBehaviorDispenseItem)dispenseBehaviorRegistry.func_82594_a(var8.getItem());
-            if(var9 != IBehaviorDispenseItem.itemDispenseBehaviorProvider) {
-               ItemStack var10 = var9.dispense(var5, var8);
-               var6.setInventorySlotContents(var7, var10.stackSize == 0?null:var10);
+            ItemStack itemstack = tileentitydispenser.getStackInSlot(l);
+            IBehaviorDispenseItem idispensebehavior = (IBehaviorDispenseItem)dispenseBehaviorRegistry.func_82594_a(itemstack.getItem());
+            if(idispensebehavior != IBehaviorDispenseItem.itemDispenseBehaviorProvider) {
+               ItemStack itemstack1 = idispensebehavior.dispense(sourceblock, itemstack);
+               eventFired = false;
+               tileentitydispenser.setInventorySlotContents(l, itemstack1.stackSize == 0?null:itemstack1);
             }
          }
-
       }
+
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(var5 > 0 && Block.blocksList[var5].canProvidePower()) {
-         boolean var6 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4) || var1.isBlockIndirectlyGettingPowered(var2, var3 + 1, var4);
-         if(var6) {
-            var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(l > 0 && Block.blocksList[l].canProvidePower()) {
+         boolean flag = world.isBlockIndirectlyGettingPowered(i, j, k) || world.isBlockIndirectlyGettingPowered(i, j + 1, k);
+         if(flag) {
+            world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
          }
       }
 
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote && (var1.isBlockIndirectlyGettingPowered(var2, var3, var4) || var1.isBlockIndirectlyGettingPowered(var2, var3 + 1, var4))) {
-         this.dispense(var1, var2, var3, var4);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote && (world.isBlockIndirectlyGettingPowered(i, j, k) || world.isBlockIndirectlyGettingPowered(i, j + 1, k))) {
+         this.dispense(world, i, j, k);
       }
 
    }
 
-   public TileEntity createNewTileEntity(World var1) {
+   public TileEntity createNewTileEntity(World world) {
       return new TileEntityDispenser();
    }
 
-   public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
-      int var6 = MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
-      if(var6 == 0) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
+   public void onBlockPlacedBy(World world, int i, int j, int k, EntityLiving entityliving) {
+      int l = MathHelper.floor_double((double)(entityliving.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
+      if(l == 0) {
+         world.setBlockMetadataWithNotify(i, j, k, 2);
       }
 
-      if(var6 == 1) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, 5);
+      if(l == 1) {
+         world.setBlockMetadataWithNotify(i, j, k, 5);
       }
 
-      if(var6 == 2) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
+      if(l == 2) {
+         world.setBlockMetadataWithNotify(i, j, k, 3);
       }
 
-      if(var6 == 3) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
+      if(l == 3) {
+         world.setBlockMetadataWithNotify(i, j, k, 4);
       }
 
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      TileEntityDispenser var7 = (TileEntityDispenser)var1.getBlockTileEntity(var2, var3, var4);
-      if(var7 != null) {
-         for(int var8 = 0; var8 < var7.getSizeInventory(); ++var8) {
-            ItemStack var9 = var7.getStackInSlot(var8);
-            if(var9 != null) {
-               float var10 = this.random.nextFloat() * 0.8F + 0.1F;
-               float var11 = this.random.nextFloat() * 0.8F + 0.1F;
-               float var12 = this.random.nextFloat() * 0.8F + 0.1F;
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      TileEntityDispenser tileentitydispenser = (TileEntityDispenser)world.getBlockTileEntity(i, j, k);
+      if(tileentitydispenser != null) {
+         for(int j1 = 0; j1 < tileentitydispenser.getSizeInventory(); ++j1) {
+            ItemStack itemstack = tileentitydispenser.getStackInSlot(j1);
+            if(itemstack != null) {
+               float f = this.random.nextFloat() * 0.8F + 0.1F;
+               float f1 = this.random.nextFloat() * 0.8F + 0.1F;
+               float f2 = this.random.nextFloat() * 0.8F + 0.1F;
 
-               while(var9.stackSize > 0) {
-                  int var13 = this.random.nextInt(21) + 10;
-                  if(var13 > var9.stackSize) {
-                     var13 = var9.stackSize;
+               while(itemstack.stackSize > 0) {
+                  int k1 = this.random.nextInt(21) + 10;
+                  if(k1 > itemstack.stackSize) {
+                     k1 = itemstack.stackSize;
                   }
 
-                  var9.stackSize -= var13;
-                  EntityItem var14 = new EntityItem(var1, (double)((float)var2 + var10), (double)((float)var3 + var11), (double)((float)var4 + var12), new ItemStack(var9.itemID, var13, var9.getItemDamage()));
-                  if(var9.hasTagCompound()) {
-                     var14.item.setTagCompound((NBTTagCompound)var9.getTagCompound().copy());
+                  itemstack.stackSize -= k1;
+                  EntityItem entityitem = new EntityItem(world, (double)((float)i + f), (double)((float)j + f1), (double)((float)k + f2), new ItemStack(itemstack.itemID, k1, itemstack.getItemDamage()));
+                  if(itemstack.hasTagCompound()) {
+                     entityitem.item.setTagCompound((NBTTagCompound)itemstack.getTagCompound().copy());
                   }
 
-                  float var15 = 0.05F;
-                  var14.motionX = (double)((float)this.random.nextGaussian() * var15);
-                  var14.motionY = (double)((float)this.random.nextGaussian() * var15 + 0.2F);
-                  var14.motionZ = (double)((float)this.random.nextGaussian() * var15);
-                  var1.spawnEntityInWorld(var14);
+                  float f3 = 0.05F;
+                  entityitem.motionX = (double)((float)this.random.nextGaussian() * f3);
+                  entityitem.motionY = (double)((float)this.random.nextGaussian() * f3 + 0.2F);
+                  entityitem.motionZ = (double)((float)this.random.nextGaussian() * f3);
+                  world.spawnEntityInWorld(entityitem);
                }
             }
          }
       }
 
-      super.breakBlock(var1, var2, var3, var4, var5, var6);
+      super.breakBlock(world, i, j, k, l, i1);
    }
 
-   public static IPosition func_82525_a(IBlockSource var0) {
-      EnumFacing var1 = EnumFacing.func_82600_a(var0.func_82620_h());
-      double var2 = var0.getX() + 0.6D * (double)var1.func_82601_c();
-      double var4 = var0.getY();
-      double var6 = var0.getZ() + 0.6D * (double)var1.func_82599_e();
-      return new PositionImpl(var2, var4, var6);
+   public static IPosition func_82525_a(IBlockSource isourceblock) {
+      EnumFacing enumfacing = EnumFacing.func_82600_a(isourceblock.func_82620_h());
+      double d0 = isourceblock.getX() + 0.6D * (double)enumfacing.func_82601_c();
+      double d1 = isourceblock.getY();
+      double d2 = isourceblock.getZ() + 0.6D * (double)enumfacing.func_82599_e();
+      return new PositionImpl(d0, d1, d2);
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/BlockDoor.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDoor.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockDoor.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDoor.java
--- mcp-mcdev/net/minecraft/src/BlockDoor.java	2012-11-29 21:15:24.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDoor.java	2012-11-29 20:44:44.000000000 -0800
@@ -10,28 +10,30 @@
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockDoor extends Block {
 
-   protected BlockDoor(int var1, Material var2) {
-      super(var1, var2);
+   protected BlockDoor(int i, Material material) {
+      super(i, material);
       this.blockIndexInTexture = 97;
-      if(var2 == Material.iron) {
+      if(material == Material.iron) {
          ++this.blockIndexInTexture;
       }
 
-      float var3 = 0.5F;
-      float var4 = 1.0F;
-      this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var4, 0.5F + var3);
+      float f = 0.5F;
+      float f1 = 1.0F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f1, 0.5F + f);
    }
 
    public boolean isOpaqueCube() {
       return false;
    }
 
-   public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = this.getFullMetadata(var1, var2, var3, var4);
-      return (var5 & 4) != 0;
+   public boolean getBlocksMovement(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = this.getFullMetadata(iblockaccess, i, j, k);
+      return (l & 4) != 0;
    }
 
    public boolean renderAsNormalBlock() {
@@ -42,189 +44,197 @@
       return 7;
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-      this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-      return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
+      this.setBlockBoundsBasedOnState(world, i, j, k);
+      return super.getCollisionBoundingBoxFromPool(world, i, j, k);
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      this.setDoorRotation(this.getFullMetadata(var1, var2, var3, var4));
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      this.setDoorRotation(this.getFullMetadata(iblockaccess, i, j, k));
    }
 
-   public int getDoorOrientation(IBlockAccess var1, int var2, int var3, int var4) {
-      return this.getFullMetadata(var1, var2, var3, var4) & 3;
+   public int getDoorOrientation(IBlockAccess iblockaccess, int i, int j, int k) {
+      return this.getFullMetadata(iblockaccess, i, j, k) & 3;
    }
 
-   public boolean isDoorOpen(IBlockAccess var1, int var2, int var3, int var4) {
-      return (this.getFullMetadata(var1, var2, var3, var4) & 4) != 0;
+   public boolean isDoorOpen(IBlockAccess iblockaccess, int i, int j, int k) {
+      return (this.getFullMetadata(iblockaccess, i, j, k) & 4) != 0;
    }
 
-   private void setDoorRotation(int var1) {
-      float var2 = 0.1875F;
+   private void setDoorRotation(int i) {
+      float f = 0.1875F;
       this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F, 1.0F);
-      int var3 = var1 & 3;
-      boolean var4 = (var1 & 4) != 0;
-      boolean var5 = (var1 & 16) != 0;
-      if(var3 == 0) {
-         if(var4) {
-            if(!var5) {
-               this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
+      int j = i & 3;
+      boolean flag = (i & 4) != 0;
+      boolean flag1 = (i & 16) != 0;
+      if(j == 0) {
+         if(flag) {
+            if(!flag1) {
+               this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f);
             } else {
-               this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
+               this.setBlockBounds(0.0F, 0.0F, 1.0F - f, 1.0F, 1.0F, 1.0F);
             }
          } else {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
+            this.setBlockBounds(0.0F, 0.0F, 0.0F, f, 1.0F, 1.0F);
          }
-      } else if(var3 == 1) {
-         if(var4) {
-            if(!var5) {
-               this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+      } else if(j == 1) {
+         if(flag) {
+            if(!flag1) {
+               this.setBlockBounds(1.0F - f, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
             } else {
-               this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
+               this.setBlockBounds(0.0F, 0.0F, 0.0F, f, 1.0F, 1.0F);
             }
          } else {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
+            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f);
          }
-      } else if(var3 == 2) {
-         if(var4) {
-            if(!var5) {
-               this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
+      } else if(j == 2) {
+         if(flag) {
+            if(!flag1) {
+               this.setBlockBounds(0.0F, 0.0F, 1.0F - f, 1.0F, 1.0F, 1.0F);
             } else {
-               this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
+               this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f);
             }
          } else {
-            this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+            this.setBlockBounds(1.0F - f, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
          }
-      } else if(var3 == 3) {
-         if(var4) {
-            if(!var5) {
-               this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
+      } else if(j == 3) {
+         if(flag) {
+            if(!flag1) {
+               this.setBlockBounds(0.0F, 0.0F, 0.0F, f, 1.0F, 1.0F);
             } else {
-               this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+               this.setBlockBounds(1.0F - f, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
             }
          } else {
-            this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
+            this.setBlockBounds(0.0F, 0.0F, 1.0F - f, 1.0F, 1.0F, 1.0F);
          }
       }
 
    }
 
-   public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {}
+   public void onBlockClicked(World world, int i, int j, int k, EntityPlayer entityhuman) {}
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
       if(this.blockMaterial == Material.iron) {
          return true;
       } else {
-         int var10 = this.getFullMetadata(var1, var2, var3, var4);
-         int var11 = var10 & 7;
-         var11 ^= 4;
-         if((var10 & 8) == 0) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, var11);
-            var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
+         int i1 = this.getFullMetadata(world, i, j, k);
+         int j1 = i1 & 7;
+         j1 ^= 4;
+         if((i1 & 8) == 0) {
+            world.setBlockMetadataWithNotify(i, j, k, j1);
+            world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
          } else {
-            var1.setBlockMetadataWithNotify(var2, var3 - 1, var4, var11);
-            var1.markBlockRangeForRenderUpdate(var2, var3 - 1, var4, var2, var3, var4);
+            world.setBlockMetadataWithNotify(i, j - 1, k, j1);
+            world.markBlockRangeForRenderUpdate(i, j - 1, k, i, j, k);
          }
 
-         var1.playAuxSFXAtEntity(var5, 1003, var2, var3, var4, 0);
+         world.playAuxSFXAtEntity(entityhuman, 1003, i, j, k, 0);
          return true;
       }
    }
 
-   public void onPoweredBlockChange(World var1, int var2, int var3, int var4, boolean var5) {
-      int var6 = this.getFullMetadata(var1, var2, var3, var4);
-      boolean var7 = (var6 & 4) != 0;
-      if(var7 != var5) {
-         int var8 = var6 & 7;
-         var8 ^= 4;
-         if((var6 & 8) == 0) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, var8);
-            var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
+   public void onPoweredBlockChange(World world, int i, int j, int k, boolean flag) {
+      int l = this.getFullMetadata(world, i, j, k);
+      boolean flag1 = (l & 4) != 0;
+      if(flag1 != flag) {
+         int i1 = l & 7;
+         i1 ^= 4;
+         if((l & 8) == 0) {
+            world.setBlockMetadataWithNotify(i, j, k, i1);
+            world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
          } else {
-            var1.setBlockMetadataWithNotify(var2, var3 - 1, var4, var8);
-            var1.markBlockRangeForRenderUpdate(var2, var3 - 1, var4, var2, var3, var4);
+            world.setBlockMetadataWithNotify(i, j - 1, k, i1);
+            world.markBlockRangeForRenderUpdate(i, j - 1, k, i, j, k);
          }
 
-         var1.playAuxSFXAtEntity((EntityPlayer)null, 1003, var2, var3, var4, 0);
+         world.playAuxSFXAtEntity((EntityPlayer)null, 1003, i, j, k, 0);
       }
+
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      int var6 = var1.getBlockMetadata(var2, var3, var4);
-      if((var6 & 8) == 0) {
-         boolean var7 = false;
-         if(var1.getBlockId(var2, var3 + 1, var4) != this.blockID) {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
-            var7 = true;
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      int i1 = world.getBlockMetadata(i, j, k);
+      if((i1 & 8) == 0) {
+         boolean flag = false;
+         if(world.getBlockId(i, j + 1, k) != this.blockID) {
+            world.setBlockWithNotify(i, j, k, 0);
+            flag = true;
          }
 
-         if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4)) {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
-            var7 = true;
-            if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-               var1.setBlockWithNotify(var2, var3 + 1, var4, 0);
+         if(!world.doesBlockHaveSolidTopSurface(i, j - 1, k)) {
+            world.setBlockWithNotify(i, j, k, 0);
+            flag = true;
+            if(world.getBlockId(i, j + 1, k) == this.blockID) {
+               world.setBlockWithNotify(i, j + 1, k, 0);
             }
          }
 
-         if(var7) {
-            if(!var1.isRemote) {
-               this.dropBlockAsItem(var1, var2, var3, var4, var6, 0);
+         if(flag) {
+            if(!world.isRemote) {
+               this.dropBlockAsItem(world, i, j, k, i1, 0);
             }
-         } else {
-            boolean var8 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4) || var1.isBlockIndirectlyGettingPowered(var2, var3 + 1, var4);
-            if((var8 || var5 > 0 && Block.blocksList[var5].canProvidePower()) && var5 != this.blockID) {
-               this.onPoweredBlockChange(var1, var2, var3, var4, var8);
+         } else if(l > 0 && Block.blocksList[l].canProvidePower()) {
+            CraftWorld bworld = world.getWorld();
+            org.bukkit.block.Block block = bworld.getBlockAt(i, j, k);
+            org.bukkit.block.Block blockTop = bworld.getBlockAt(i, j + 1, k);
+            int power = block.getBlockPower();
+            int powerTop = blockTop.getBlockPower();
+            if(powerTop > power) {
+               power = powerTop;
             }
-         }
-      } else {
-         if(var1.getBlockId(var2, var3 - 1, var4) != this.blockID) {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
-         }
 
-         if(var5 > 0 && var5 != this.blockID) {
-            this.onNeighborBlockChange(var1, var2, var3 - 1, var4, var5);
+            int oldPower = (world.getBlockMetadata(i, j, k) & 4) > 0?15:0;
+            if(oldPower == 0 ^ power == 0) {
+               BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, oldPower, power);
+               world.getServer().getPluginManager().callEvent(eventRedstone);
+               this.onPoweredBlockChange(world, i, j, k, eventRedstone.getNewCurrent() > 0);
+            }
          }
+      } else if(world.getBlockId(i, j - 1, k) != this.blockID) {
+         world.setBlockWithNotify(i, j, k, 0);
+      } else if(l > 0 && l != this.blockID) {
+         this.onNeighborBlockChange(world, i, j - 1, k, l);
       }
 
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
-      return (var1 & 8) != 0?0:(this.blockMaterial == Material.iron?Item.doorSteel.shiftedIndex:Item.doorWood.shiftedIndex);
+   public int idDropped(int i, Random random, int j) {
+      return (i & 8) != 0?0:(this.blockMaterial == Material.iron?Item.doorSteel.shiftedIndex:Item.doorWood.shiftedIndex);
    }
 
-   public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3 var5, Vec3 var6) {
-      this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-      return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
+   public MovingObjectPosition collisionRayTrace(World world, int i, int j, int k, Vec3 vec3d, Vec3 vec3d1) {
+      this.setBlockBoundsBasedOnState(world, i, j, k);
+      return super.collisionRayTrace(world, i, j, k, vec3d, vec3d1);
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      return var3 >= 255?false:var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      return j >= 255?false:world.doesBlockHaveSolidTopSurface(i, j - 1, k) && super.canPlaceBlockAt(world, i, j, k) && super.canPlaceBlockAt(world, i, j + 1, k);
    }
 
    public int getMobilityFlag() {
       return 1;
    }
 
-   public int getFullMetadata(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      boolean var6 = (var5 & 8) != 0;
-      int var7;
-      int var8;
-      if(var6) {
-         var7 = var1.getBlockMetadata(var2, var3 - 1, var4);
-         var8 = var5;
+   public int getFullMetadata(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k);
+      boolean flag = (l & 8) != 0;
+      int i1;
+      int j1;
+      if(flag) {
+         i1 = iblockaccess.getBlockMetadata(i, j - 1, k);
+         j1 = l;
       } else {
-         var7 = var5;
-         var8 = var1.getBlockMetadata(var2, var3 + 1, var4);
+         i1 = l;
+         j1 = iblockaccess.getBlockMetadata(i, j + 1, k);
       }
 
-      boolean var9 = (var8 & 1) != 0;
-      return var7 & 7 | (var6?8:0) | (var9?16:0);
+      boolean flag1 = (j1 & 1) != 0;
+      return i1 & 7 | (flag?8:0) | (flag1?16:0);
    }
 
-   public void onBlockHarvested(World var1, int var2, int var3, int var4, int var5, EntityPlayer var6) {
-      if(var6.capabilities.isCreativeMode && (var5 & 8) != 0 && var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
-         var1.setBlockWithNotify(var2, var3 - 1, var4, 0);
+   public void onBlockHarvested(World world, int i, int j, int k, int l, EntityPlayer entityhuman) {
+      if(entityhuman.capabilities.isCreativeMode && (l & 8) != 0 && world.getBlockId(i, j - 1, k) == this.blockID) {
+         world.setBlockWithNotify(i, j - 1, k, 0);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/BlockDragonEgg.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDragonEgg.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockDragonEgg.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDragonEgg.java
--- mcp-mcdev/net/minecraft/src/BlockDragonEgg.java	2012-11-29 21:15:24.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockDragonEgg.java	2012-11-29 20:44:44.000000000 -0800
@@ -7,85 +7,98 @@
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.Bukkit;
+import org.bukkit.event.block.BlockFromToEvent;
 
 public class BlockDragonEgg extends Block {
 
-   public BlockDragonEgg(int var1, int var2) {
-      super(var1, var2, Material.dragonEgg);
+   public BlockDragonEgg(int i, int j) {
+      super(i, j, Material.dragonEgg);
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+   public void onBlockAdded(World world, int i, int j, int k) {
+      world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      this.fallIfPossible(var1, var2, var3, var4);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      this.fallIfPossible(world, i, j, k);
    }
 
-   private void fallIfPossible(World var1, int var2, int var3, int var4) {
-      if(BlockSand.canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
-         byte var5 = 32;
-         if(!BlockSand.fallInstantly && var1.checkChunksExist(var2 - var5, var3 - var5, var4 - var5, var2 + var5, var3 + var5, var4 + var5)) {
-            EntityFallingSand var6 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID);
-            var1.spawnEntityInWorld(var6);
+   private void fallIfPossible(World world, int i, int j, int k) {
+      if(BlockSand.canFallBelow(world, i, j - 1, k) && j >= 0) {
+         byte b0 = 32;
+         if(!BlockSand.fallInstantly && world.checkChunksExist(i - b0, j - b0, k - b0, i + b0, j + b0, k + b0)) {
+            EntityFallingSand entityfallingblock = new EntityFallingSand(world, (double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), this.blockID, world.getBlockMetadata(i, j, k));
+            world.spawnEntityInWorld(entityfallingblock);
          } else {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+            world.setBlockWithNotify(i, j, k, 0);
 
-            while(BlockSand.canFallBelow(var1, var2, var3 - 1, var4) && var3 > 0) {
-               --var3;
+            while(BlockSand.canFallBelow(world, i, j - 1, k) && j > 0) {
+               --j;
             }
 
-            if(var3 > 0) {
-               var1.setBlockWithNotify(var2, var3, var4, this.blockID);
+            if(j > 0) {
+               world.setBlockWithNotify(i, j, k, this.blockID);
             }
          }
       }
 
    }
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-      this.teleportNearby(var1, var2, var3, var4);
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
+      this.teleportNearby(world, i, j, k);
       return true;
    }
 
-   public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-      this.teleportNearby(var1, var2, var3, var4);
+   public void onBlockClicked(World world, int i, int j, int k, EntityPlayer entityhuman) {
+      this.teleportNearby(world, i, j, k);
    }
 
-   private void teleportNearby(World var1, int var2, int var3, int var4) {
-      if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-         for(int var5 = 0; var5 < 1000; ++var5) {
-            int var6 = var2 + var1.rand.nextInt(16) - var1.rand.nextInt(16);
-            int var7 = var3 + var1.rand.nextInt(8) - var1.rand.nextInt(8);
-            int var8 = var4 + var1.rand.nextInt(16) - var1.rand.nextInt(16);
-            if(var1.getBlockId(var6, var7, var8) == 0) {
-               if(!var1.isRemote) {
-                  var1.setBlockAndMetadataWithNotify(var6, var7, var8, this.blockID, var1.getBlockMetadata(var2, var3, var4));
-                  var1.setBlockWithNotify(var2, var3, var4, 0);
+   private void teleportNearby(World world, int i, int j, int k) {
+      if(world.getBlockId(i, j, k) == this.blockID) {
+         for(int l = 0; l < 1000; ++l) {
+            int i1 = i + world.rand.nextInt(16) - world.rand.nextInt(16);
+            int j1 = j + world.rand.nextInt(8) - world.rand.nextInt(8);
+            int k1 = k + world.rand.nextInt(16) - world.rand.nextInt(16);
+            if(world.getBlockId(i1, j1, k1) == 0) {
+               org.bukkit.block.Block from = world.getWorld().getBlockAt(i, j, k);
+               org.bukkit.block.Block to = world.getWorld().getBlockAt(i1, j1, k1);
+               BlockFromToEvent event = new BlockFromToEvent(from, to);
+               Bukkit.getPluginManager().callEvent(event);
+               if(event.isCancelled()) {
+                  return;
+               }
+
+               i1 = event.getToBlock().getX();
+               j1 = event.getToBlock().getY();
+               k1 = event.getToBlock().getZ();
+               if(!world.isRemote) {
+                  world.setBlockAndMetadataWithNotify(i1, j1, k1, this.blockID, world.getBlockMetadata(i, j, k));
+                  world.setBlockWithNotify(i, j, k, 0);
                } else {
-                  short var9 = 128;
+                  short short1 = 128;
 
-                  for(int var10 = 0; var10 < var9; ++var10) {
-                     double var11 = var1.rand.nextDouble();
-                     float var13 = (var1.rand.nextFloat() - 0.5F) * 0.2F;
-                     float var14 = (var1.rand.nextFloat() - 0.5F) * 0.2F;
-                     float var15 = (var1.rand.nextFloat() - 0.5F) * 0.2F;
-                     double var16 = (double)var6 + (double)(var2 - var6) * var11 + (var1.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
-                     double var18 = (double)var7 + (double)(var3 - var7) * var11 + var1.rand.nextDouble() * 1.0D - 0.5D;
-                     double var20 = (double)var8 + (double)(var4 - var8) * var11 + (var1.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
-                     var1.spawnParticle("portal", var16, var18, var20, (double)var13, (double)var14, (double)var15);
+                  for(int l1 = 0; l1 < short1; ++l1) {
+                     double d0 = world.rand.nextDouble();
+                     float f = (world.rand.nextFloat() - 0.5F) * 0.2F;
+                     float f1 = (world.rand.nextFloat() - 0.5F) * 0.2F;
+                     float f2 = (world.rand.nextFloat() - 0.5F) * 0.2F;
+                     double d1 = (double)i1 + (double)(i - i1) * d0 + (world.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
+                     double d2 = (double)j1 + (double)(j - j1) * d0 + world.rand.nextDouble() * 1.0D - 0.5D;
+                     double d3 = (double)k1 + (double)(k - k1) * d0 + (world.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
+                     world.spawnParticle("portal", d1, d2, d3, (double)f, (double)f1, (double)f2);
                   }
                }
 
                return;
             }
          }
-
       }
+
    }
 
    public int tickRate() {
Binary files mcp-mcdev/net/minecraft/src/BlockFarmland.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockFarmland.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockFarmland.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockFarmland.java
--- mcp-mcdev/net/minecraft/src/BlockFarmland.java	2012-11-29 21:15:24.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockFarmland.java	2012-11-29 20:44:43.000000000 -0800
@@ -4,21 +4,27 @@
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.Block;
 import net.minecraft.src.Entity;
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.ItemStack;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.entity.EntityInteractEvent;
 
 public class BlockFarmland extends Block {
 
-   protected BlockFarmland(int var1) {
-      super(var1, Material.ground);
+   protected BlockFarmland(int i) {
+      super(i, Material.ground);
       this.blockIndexInTexture = 87;
       this.setTickRandomly(true);
       this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.9375F, 1.0F);
       this.setLightOpacity(255);
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-      return AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)(var2 + 0), (double)(var3 + 0), (double)(var4 + 0), (double)(var2 + 1), (double)(var3 + 1), (double)(var4 + 1));
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
+      return AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)(i + 0), (double)(j + 0), (double)(k + 0), (double)(i + 1), (double)(j + 1), (double)(k + 1));
    }
 
    public boolean isOpaqueCube() {
@@ -29,38 +35,55 @@
       return false;
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      return var1 == 1 && var2 > 0?this.blockIndexInTexture - 1:(var1 == 1?this.blockIndexInTexture:2);
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      return i == 1 && j > 0?this.blockIndexInTexture - 1:(i == 1?this.blockIndexInTexture:2);
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!this.isWaterNearby(var1, var2, var3, var4) && !var1.canLightningStrikeAt(var2, var3 + 1, var4)) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         if(var6 > 0) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, var6 - 1);
-         } else if(!this.isCropsNearby(var1, var2, var3, var4)) {
-            var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!this.isWaterNearby(world, i, j, k) && !world.canLightningStrikeAt(i, j + 1, k)) {
+         int l = world.getBlockMetadata(i, j, k);
+         if(l > 0) {
+            world.setBlockMetadataWithNotify(i, j, k, l - 1);
+         } else if(!this.isCropsNearby(world, i, j, k)) {
+            org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+            if(CraftEventFactory.callBlockFadeEvent(block, Block.dirt.blockID).isCancelled()) {
+               return;
+            }
+
+            world.setBlockWithNotify(i, j, k, Block.dirt.blockID);
          }
       } else {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, 7);
+         world.setBlockMetadataWithNotify(i, j, k, 7);
       }
 
    }
 
-   public void onFallenUpon(World var1, int var2, int var3, int var4, Entity var5, float var6) {
-      if(!var1.isRemote && var1.rand.nextFloat() < var6 - 0.5F) {
-         var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+   public void onFallenUpon(World world, int i, int j, int k, Entity entity, float f) {
+      if(!world.isRemote && world.rand.nextFloat() < f - 0.5F) {
+         Object cancellable;
+         if(entity instanceof EntityPlayer) {
+            cancellable = CraftEventFactory.callPlayerInteractEvent((EntityPlayer)entity, Action.PHYSICAL, i, j, k, -1, (ItemStack)null);
+         } else {
+            cancellable = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(i, j, k));
+            world.getServer().getPluginManager().callEvent((EntityInteractEvent)cancellable);
+         }
+
+         if(((Cancellable)cancellable).isCancelled()) {
+            return;
+         }
+
+         world.setBlockWithNotify(i, j, k, Block.dirt.blockID);
       }
 
    }
 
-   private boolean isCropsNearby(World var1, int var2, int var3, int var4) {
-      byte var5 = 0;
+   private boolean isCropsNearby(World world, int i, int j, int k) {
+      byte b0 = 0;
 
-      for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-         for(int var7 = var4 - var5; var7 <= var4 + var5; ++var7) {
-            int var8 = var1.getBlockId(var6, var3 + 1, var7);
-            if(var8 == Block.crops.blockID || var8 == Block.melonStem.blockID || var8 == Block.pumpkinStem.blockID || var8 == Block.potato.blockID || var8 == Block.carrot.blockID) {
+      for(int l = i - b0; l <= i + b0; ++l) {
+         for(int i1 = k - b0; i1 <= k + b0; ++i1) {
+            int j1 = world.getBlockId(l, j + 1, i1);
+            if(j1 == Block.crops.blockID || j1 == Block.melonStem.blockID || j1 == Block.pumpkinStem.blockID || j1 == Block.potato.blockID || j1 == Block.carrot.blockID) {
                return true;
             }
          }
@@ -69,11 +92,11 @@
       return false;
    }
 
-   private boolean isWaterNearby(World var1, int var2, int var3, int var4) {
-      for(int var5 = var2 - 4; var5 <= var2 + 4; ++var5) {
-         for(int var6 = var3; var6 <= var3 + 1; ++var6) {
-            for(int var7 = var4 - 4; var7 <= var4 + 4; ++var7) {
-               if(var1.getBlockMaterial(var5, var6, var7) == Material.water) {
+   private boolean isWaterNearby(World world, int i, int j, int k) {
+      for(int l = i - 4; l <= i + 4; ++l) {
+         for(int i1 = j; i1 <= j + 1; ++i1) {
+            for(int j1 = k - 4; j1 <= k + 4; ++j1) {
+               if(world.getBlockMaterial(l, i1, j1) == Material.water) {
                   return true;
                }
             }
@@ -83,16 +106,16 @@
       return false;
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-      Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
-      if(var6.isSolid()) {
-         var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      super.onNeighborBlockChange(world, i, j, k, l);
+      Material material = world.getBlockMaterial(i, j + 1, k);
+      if(material.isSolid()) {
+         world.setBlockWithNotify(i, j, k, Block.dirt.blockID);
       }
 
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
-      return Block.dirt.idDropped(0, var2, var3);
+   public int idDropped(int i, Random random, int j) {
+      return Block.dirt.idDropped(0, random, j);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockFire.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockFire.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockFire.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockFire.java
--- mcp-mcdev/net/minecraft/src/BlockFire.java	2012-11-29 21:15:24.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockFire.java	2012-11-29 20:44:43.000000000 -0800
@@ -7,6 +7,16 @@
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldProviderEnd;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockBurnEvent;
+import org.bukkit.event.block.BlockIgniteEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
+import org.bukkit.event.block.BlockIgniteEvent.IgniteCause;
+import org.bukkit.material.MaterialData;
 
 public class BlockFire extends Block {
 
@@ -14,8 +24,8 @@
    private int[] abilityToCatchFire = new int[256];
 
 
-   protected BlockFire(int var1, int var2) {
-      super(var1, var2, Material.fire);
+   protected BlockFire(int i, int j) {
+      super(i, j, Material.fire);
       this.setTickRandomly(true);
    }
 
@@ -37,12 +47,12 @@
       this.setBurnRate(Block.vine.blockID, 15, 100);
    }
 
-   private void setBurnRate(int var1, int var2, int var3) {
-      this.chanceToEncourageFire[var1] = var2;
-      this.abilityToCatchFire[var1] = var3;
+   private void setBurnRate(int i, int j, int k) {
+      this.chanceToEncourageFire[i] = j;
+      this.abilityToCatchFire[i] = k;
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
@@ -58,7 +68,7 @@
       return 3;
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 0;
    }
 
@@ -66,124 +76,148 @@
       return 30;
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(var1.getGameRules().getGameRuleBooleanValue("doFireTick")) {
-         boolean var6 = var1.getBlockId(var2, var3 - 1, var4) == Block.netherrack.blockID;
-         if(var1.provider instanceof WorldProviderEnd && var1.getBlockId(var2, var3 - 1, var4) == Block.bedrock.blockID) {
-            var6 = true;
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(world.getGameRules().getGameRuleBooleanValue("doFireTick")) {
+         boolean flag = world.getBlockId(i, j - 1, k) == Block.netherrack.blockID;
+         if(world.provider instanceof WorldProviderEnd && world.getBlockId(i, j - 1, k) == Block.bedrock.blockID) {
+            flag = true;
          }
 
-         if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+         if(!this.canPlaceBlockAt(world, i, j, k)) {
+            this.fireExtinguished(world, i, j, k);
          }
 
-         if(!var6 && var1.isRaining() && (var1.canLightningStrikeAt(var2, var3, var4) || var1.canLightningStrikeAt(var2 - 1, var3, var4) || var1.canLightningStrikeAt(var2 + 1, var3, var4) || var1.canLightningStrikeAt(var2, var3, var4 - 1) || var1.canLightningStrikeAt(var2, var3, var4 + 1))) {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+         if(!flag && world.isRaining() && (world.canLightningStrikeAt(i, j, k) || world.canLightningStrikeAt(i - 1, j, k) || world.canLightningStrikeAt(i + 1, j, k) || world.canLightningStrikeAt(i, j, k - 1) || world.canLightningStrikeAt(i, j, k + 1))) {
+            this.fireExtinguished(world, i, j, k);
          } else {
-            int var7 = var1.getBlockMetadata(var2, var3, var4);
-            if(var7 < 15) {
-               var1.setBlockMetadata(var2, var3, var4, var7 + var5.nextInt(3) / 2);
+            int l = world.getBlockMetadata(i, j, k);
+            if(l < 15) {
+               world.setBlockMetadata(i, j, k, l + random.nextInt(3) / 2);
             }
 
-            var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate() + var5.nextInt(10));
-            if(!var6 && !this.canNeighborBurn(var1, var2, var3, var4)) {
-               if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) || var7 > 3) {
-                  var1.setBlockWithNotify(var2, var3, var4, 0);
+            world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate() + random.nextInt(10));
+            if(!flag && !this.canNeighborBurn(world, i, j, k)) {
+               if(!world.doesBlockHaveSolidTopSurface(i, j - 1, k) || l > 3) {
+                  world.setBlockWithNotify(i, j, k, 0);
                }
-
-            } else if(!var6 && !this.canBlockCatchFire(var1, var2, var3 - 1, var4) && var7 == 15 && var5.nextInt(4) == 0) {
-               var1.setBlockWithNotify(var2, var3, var4, 0);
+            } else if(!flag && !this.canBlockCatchFire(world, i, j - 1, k) && l == 15 && random.nextInt(4) == 0) {
+               this.fireExtinguished(world, i, j, k);
             } else {
-               boolean var8 = var1.isBlockHighHumidity(var2, var3, var4);
-               byte var9 = 0;
-               if(var8) {
-                  var9 = -50;
+               boolean flag1 = world.isBlockHighHumidity(i, j, k);
+               byte b0 = 0;
+               if(flag1) {
+                  b0 = -50;
                }
 
-               this.tryToCatchBlockOnFire(var1, var2 + 1, var3, var4, 300 + var9, var5, var7);
-               this.tryToCatchBlockOnFire(var1, var2 - 1, var3, var4, 300 + var9, var5, var7);
-               this.tryToCatchBlockOnFire(var1, var2, var3 - 1, var4, 250 + var9, var5, var7);
-               this.tryToCatchBlockOnFire(var1, var2, var3 + 1, var4, 250 + var9, var5, var7);
-               this.tryToCatchBlockOnFire(var1, var2, var3, var4 - 1, 300 + var9, var5, var7);
-               this.tryToCatchBlockOnFire(var1, var2, var3, var4 + 1, 300 + var9, var5, var7);
-
-               for(int var10 = var2 - 1; var10 <= var2 + 1; ++var10) {
-                  for(int var11 = var4 - 1; var11 <= var4 + 1; ++var11) {
-                     for(int var12 = var3 - 1; var12 <= var3 + 4; ++var12) {
-                        if(var10 != var2 || var12 != var3 || var11 != var4) {
-                           int var13 = 100;
-                           if(var12 > var3 + 1) {
-                              var13 += (var12 - (var3 + 1)) * 100;
+               this.tryToCatchBlockOnFire(world, i + 1, j, k, 300 + b0, random, l);
+               this.tryToCatchBlockOnFire(world, i - 1, j, k, 300 + b0, random, l);
+               this.tryToCatchBlockOnFire(world, i, j - 1, k, 250 + b0, random, l);
+               this.tryToCatchBlockOnFire(world, i, j + 1, k, 250 + b0, random, l);
+               this.tryToCatchBlockOnFire(world, i, j, k - 1, 300 + b0, random, l);
+               this.tryToCatchBlockOnFire(world, i, j, k + 1, 300 + b0, random, l);
+               CraftServer server = world.getServer();
+               CraftWorld bworld = world.getWorld();
+               IgniteCause igniteCause = IgniteCause.SPREAD;
+               org.bukkit.block.Block fromBlock = bworld.getBlockAt(i, j, k);
+
+               for(int i1 = i - 1; i1 <= i + 1; ++i1) {
+                  for(int j1 = k - 1; j1 <= k + 1; ++j1) {
+                     for(int k1 = j - 1; k1 <= j + 4; ++k1) {
+                        if(i1 != i || k1 != j || j1 != k) {
+                           int l1 = 100;
+                           if(k1 > j + 1) {
+                              l1 += (k1 - (j + 1)) * 100;
                            }
 
-                           int var14 = this.getChanceOfNeighborsEncouragingFire(var1, var10, var12, var11);
-                           if(var14 > 0) {
-                              int var15 = (var14 + 40 + var1.difficultySetting * 7) / (var7 + 30);
-                              if(var8) {
-                                 var15 /= 2;
+                           int i2 = this.getChanceOfNeighborsEncouragingFire(world, i1, k1, j1);
+                           if(i2 > 0) {
+                              int j2 = (i2 + 40 + world.difficultySetting * 7) / (l + 30);
+                              if(flag1) {
+                                 j2 /= 2;
                               }
 
-                              if(var15 > 0 && var5.nextInt(var13) <= var15 && (!var1.isRaining() || !var1.canLightningStrikeAt(var10, var12, var11)) && !var1.canLightningStrikeAt(var10 - 1, var12, var4) && !var1.canLightningStrikeAt(var10 + 1, var12, var11) && !var1.canLightningStrikeAt(var10, var12, var11 - 1) && !var1.canLightningStrikeAt(var10, var12, var11 + 1)) {
-                                 int var16 = var7 + var5.nextInt(5) / 4;
-                                 if(var16 > 15) {
-                                    var16 = 15;
+                              if(j2 > 0 && random.nextInt(l1) <= j2 && (!world.isRaining() || !world.canLightningStrikeAt(i1, k1, j1)) && !world.canLightningStrikeAt(i1 - 1, k1, k) && !world.canLightningStrikeAt(i1 + 1, k1, j1) && !world.canLightningStrikeAt(i1, k1, j1 - 1) && !world.canLightningStrikeAt(i1, k1, j1 + 1)) {
+                                 int k2 = l + random.nextInt(5) / 4;
+                                 if(k2 > 15) {
+                                    k2 = 15;
                                  }
 
-                                 var1.setBlockAndMetadataWithNotify(var10, var12, var11, this.blockID, var16);
+                                 org.bukkit.block.Block block = bworld.getBlockAt(i1, k1, j1);
+                                 if(block.getTypeId() != Block.fire.blockID) {
+                                    BlockIgniteEvent event = new BlockIgniteEvent(block, igniteCause, (Player)null);
+                                    server.getPluginManager().callEvent(event);
+                                    if(!event.isCancelled()) {
+                                       BlockState blockState = bworld.getBlockAt(i1, k1, j1).getState();
+                                       blockState.setTypeId(this.blockID);
+                                       blockState.setData(new MaterialData(this.blockID, (byte)k2));
+                                       BlockSpreadEvent spreadEvent = new BlockSpreadEvent(blockState.getBlock(), fromBlock, blockState);
+                                       server.getPluginManager().callEvent(spreadEvent);
+                                       if(!spreadEvent.isCancelled()) {
+                                          blockState.update(true);
+                                       }
+                                    }
+                                 }
                               }
                            }
                         }
                      }
                   }
                }
-
             }
          }
       }
+
    }
 
    public boolean func_82506_l() {
       return false;
    }
 
-   private void tryToCatchBlockOnFire(World var1, int var2, int var3, int var4, int var5, Random var6, int var7) {
-      int var8 = this.abilityToCatchFire[var1.getBlockId(var2, var3, var4)];
-      if(var6.nextInt(var5) < var8) {
-         boolean var9 = var1.getBlockId(var2, var3, var4) == Block.tnt.blockID;
-         if(var6.nextInt(var7 + 10) < 5 && !var1.canLightningStrikeAt(var2, var3, var4)) {
-            int var10 = var7 + var6.nextInt(5) / 4;
-            if(var10 > 15) {
-               var10 = 15;
+   private void tryToCatchBlockOnFire(World world, int i, int j, int k, int l, Random random, int i1) {
+      int j1 = this.abilityToCatchFire[world.getBlockId(i, j, k)];
+      if(random.nextInt(l) < j1) {
+         boolean flag = world.getBlockId(i, j, k) == Block.tnt.blockID;
+         org.bukkit.block.Block theBlock = world.getWorld().getBlockAt(i, j, k);
+         BlockBurnEvent event = new BlockBurnEvent(theBlock);
+         world.getServer().getPluginManager().callEvent(event);
+         if(event.isCancelled()) {
+            return;
+         }
+
+         if(random.nextInt(i1 + 10) < 5 && !world.canLightningStrikeAt(i, j, k)) {
+            int k1 = i1 + random.nextInt(5) / 4;
+            if(k1 > 15) {
+               k1 = 15;
             }
 
-            var1.setBlockAndMetadataWithNotify(var2, var3, var4, this.blockID, var10);
+            world.setBlockAndMetadataWithNotify(i, j, k, this.blockID, k1);
          } else {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+            world.setBlockWithNotify(i, j, k, 0);
          }
 
-         if(var9) {
-            Block.tnt.onBlockDestroyedByPlayer(var1, var2, var3, var4, 1);
+         if(flag) {
+            Block.tnt.onBlockDestroyedByPlayer(world, i, j, k, 1);
          }
       }
 
    }
 
-   private boolean canNeighborBurn(World var1, int var2, int var3, int var4) {
-      return this.canBlockCatchFire(var1, var2 + 1, var3, var4)?true:(this.canBlockCatchFire(var1, var2 - 1, var3, var4)?true:(this.canBlockCatchFire(var1, var2, var3 - 1, var4)?true:(this.canBlockCatchFire(var1, var2, var3 + 1, var4)?true:(this.canBlockCatchFire(var1, var2, var3, var4 - 1)?true:this.canBlockCatchFire(var1, var2, var3, var4 + 1)))));
+   private boolean canNeighborBurn(World world, int i, int j, int k) {
+      return this.canBlockCatchFire(world, i + 1, j, k)?true:(this.canBlockCatchFire(world, i - 1, j, k)?true:(this.canBlockCatchFire(world, i, j - 1, k)?true:(this.canBlockCatchFire(world, i, j + 1, k)?true:(this.canBlockCatchFire(world, i, j, k - 1)?true:this.canBlockCatchFire(world, i, j, k + 1)))));
    }
 
-   private int getChanceOfNeighborsEncouragingFire(World var1, int var2, int var3, int var4) {
-      byte var5 = 0;
-      if(!var1.isAirBlock(var2, var3, var4)) {
+   private int getChanceOfNeighborsEncouragingFire(World world, int i, int j, int k) {
+      byte b0 = 0;
+      if(!world.isAirBlock(i, j, k)) {
          return 0;
       } else {
-         int var6 = this.getChanceToEncourageFire(var1, var2 + 1, var3, var4, var5);
-         var6 = this.getChanceToEncourageFire(var1, var2 - 1, var3, var4, var6);
-         var6 = this.getChanceToEncourageFire(var1, var2, var3 - 1, var4, var6);
-         var6 = this.getChanceToEncourageFire(var1, var2, var3 + 1, var4, var6);
-         var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 - 1, var6);
-         var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 + 1, var6);
-         return var6;
+         int l = this.getChanceToEncourageFire(world, i + 1, j, k, b0);
+         l = this.getChanceToEncourageFire(world, i - 1, j, k, l);
+         l = this.getChanceToEncourageFire(world, i, j - 1, k, l);
+         l = this.getChanceToEncourageFire(world, i, j + 1, k, l);
+         l = this.getChanceToEncourageFire(world, i, j, k - 1, l);
+         l = this.getChanceToEncourageFire(world, i, j, k + 1, l);
+         return l;
       }
    }
 
@@ -191,33 +225,41 @@
       return false;
    }
 
-   public boolean canBlockCatchFire(IBlockAccess var1, int var2, int var3, int var4) {
-      return this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)] > 0;
+   public boolean canBlockCatchFire(IBlockAccess iblockaccess, int i, int j, int k) {
+      return this.chanceToEncourageFire[iblockaccess.getBlockId(i, j, k)] > 0;
    }
 
-   public int getChanceToEncourageFire(World var1, int var2, int var3, int var4, int var5) {
-      int var6 = this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)];
-      return var6 > var5?var6:var5;
+   public int getChanceToEncourageFire(World world, int i, int j, int k, int l) {
+      int i1 = this.chanceToEncourageFire[world.getBlockId(i, j, k)];
+      return i1 > l?i1:l;
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      return var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) || this.canNeighborBurn(var1, var2, var3, var4);
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      return world.doesBlockHaveSolidTopSurface(i, j - 1, k) || this.canNeighborBurn(world, i, j, k);
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(!world.doesBlockHaveSolidTopSurface(i, j - 1, k) && !this.canNeighborBurn(world, i, j, k)) {
+         this.fireExtinguished(world, i, j, k);
       }
 
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      if(var1.provider.dimensionId > 0 || var1.getBlockId(var2, var3 - 1, var4) != Block.obsidian.blockID || !Block.portal.tryToCreatePortal(var1, var2, var3, var4)) {
-         if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void onBlockAdded(World world, int i, int j, int k) {
+      if(world.provider.dimensionId > 0 || world.getBlockId(i, j - 1, k) != Block.obsidian.blockID || !Block.portal.tryToCreatePortal(world, i, j, k)) {
+         if(!world.doesBlockHaveSolidTopSurface(i, j - 1, k) && !this.canNeighborBurn(world, i, j, k)) {
+            this.fireExtinguished(world, i, j, k);
          } else {
-            var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate() + var1.rand.nextInt(10));
+            world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate() + world.rand.nextInt(10));
          }
       }
+
+   }
+
+   private void fireExtinguished(World world, int x, int y, int z) {
+      if(!CraftEventFactory.callBlockFadeEvent(world.getWorld().getBlockAt(x, y, z), 0).isCancelled()) {
+         world.setBlockWithNotify(x, y, z, 0);
+      }
+
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockFlowing.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockFlowing.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockFlowing.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockFlowing.java
--- mcp-mcdev/net/minecraft/src/BlockFlowing.java	2012-11-29 21:15:24.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockFlowing.java	2012-11-29 20:44:43.000000000 -0800
@@ -6,6 +6,10 @@
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.block.BlockFace;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.block.BlockFromToEvent;
 
 public class BlockFlowing extends BlockFluid {
 
@@ -14,267 +18,283 @@
    int[] flowCost = new int[4];
 
 
-   protected BlockFlowing(int var1, Material var2) {
-      super(var1, var2);
+   protected BlockFlowing(int i, Material material) {
+      super(i, material);
    }
 
-   private void updateFlow(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      var1.setBlockAndMetadata(var2, var3, var4, this.blockID + 1, var5);
-      var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
+   private void updateFlow(World world, int i, int j, int k) {
+      int l = world.getBlockMetadata(i, j, k);
+      world.setBlockAndMetadata(i, j, k, this.blockID + 1, l);
+      world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
    }
 
-   public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
+   public boolean getBlocksMovement(IBlockAccess iblockaccess, int i, int j, int k) {
       return this.blockMaterial != Material.lava;
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      int var6 = this.getFlowDecay(var1, var2, var3, var4);
-      byte var7 = 1;
-      if(this.blockMaterial == Material.lava && !var1.provider.isHellWorld) {
-         var7 = 2;
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      CraftWorld bworld = world.getWorld();
+      CraftServer server = world.getServer();
+      org.bukkit.block.Block source = bworld == null?null:bworld.getBlockAt(i, j, k);
+      int l = this.getFlowDecay(world, i, j, k);
+      byte b0 = 1;
+      if(this.blockMaterial == Material.lava && !world.provider.isHellWorld) {
+         b0 = 2;
       }
 
-      boolean var8 = true;
-      int var10;
-      if(var6 > 0) {
-         byte var9 = -100;
+      boolean flag = true;
+      int i1;
+      int index;
+      if(l > 0) {
+         byte aboolean = -100;
          this.numAdjacentSources = 0;
-         int var12 = this.getSmallestFlowDecay(var1, var2 - 1, var3, var4, var9);
-         var12 = this.getSmallestFlowDecay(var1, var2 + 1, var3, var4, var12);
-         var12 = this.getSmallestFlowDecay(var1, var2, var3, var4 - 1, var12);
-         var12 = this.getSmallestFlowDecay(var1, var2, var3, var4 + 1, var12);
-         var10 = var12 + var7;
-         if(var10 >= 8 || var12 < 0) {
-            var10 = -1;
+         int faces = this.getSmallestFlowDecay(world, i - 1, j, k, aboolean);
+         faces = this.getSmallestFlowDecay(world, i + 1, j, k, faces);
+         faces = this.getSmallestFlowDecay(world, i, j, k - 1, faces);
+         faces = this.getSmallestFlowDecay(world, i, j, k + 1, faces);
+         i1 = faces + b0;
+         if(i1 >= 8 || faces < 0) {
+            i1 = -1;
          }
 
-         if(this.getFlowDecay(var1, var2, var3 + 1, var4) >= 0) {
-            int var11 = this.getFlowDecay(var1, var2, var3 + 1, var4);
-            if(var11 >= 8) {
-               var10 = var11;
+         if(this.getFlowDecay(world, i, j + 1, k) >= 0) {
+            index = this.getFlowDecay(world, i, j + 1, k);
+            if(index >= 8) {
+               i1 = index;
             } else {
-               var10 = var11 + 8;
+               i1 = index + 8;
             }
          }
 
          if(this.numAdjacentSources >= 2 && this.blockMaterial == Material.water) {
-            if(var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
-               var10 = 0;
-            } else if(var1.getBlockMaterial(var2, var3 - 1, var4) == this.blockMaterial && var1.getBlockMetadata(var2, var3, var4) == 0) {
-               var10 = 0;
+            if(world.getBlockMaterial(i, j - 1, k).isSolid()) {
+               i1 = 0;
+            } else if(world.getBlockMaterial(i, j - 1, k) == this.blockMaterial && world.getBlockMetadata(i, j, k) == 0) {
+               i1 = 0;
             }
          }
 
-         if(this.blockMaterial == Material.lava && var6 < 8 && var10 < 8 && var10 > var6 && var5.nextInt(4) != 0) {
-            var10 = var6;
-            var8 = false;
+         if(this.blockMaterial == Material.lava && l < 8 && i1 < 8 && i1 > l && random.nextInt(4) != 0) {
+            i1 = l;
+            flag = false;
          }
 
-         if(var10 == var6) {
-            if(var8) {
-               this.updateFlow(var1, var2, var3, var4);
+         if(i1 == l) {
+            if(flag) {
+               this.updateFlow(world, i, j, k);
             }
          } else {
-            var6 = var10;
-            if(var10 < 0) {
-               var1.setBlockWithNotify(var2, var3, var4, 0);
+            l = i1;
+            if(i1 < 0) {
+               world.setBlockWithNotify(i, j, k, 0);
             } else {
-               var1.setBlockMetadataWithNotify(var2, var3, var4, var10);
-               var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
-               var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+               world.setBlockMetadataWithNotify(i, j, k, i1);
+               world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
+               world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
             }
          }
       } else {
-         this.updateFlow(var1, var2, var3, var4);
+         this.updateFlow(world, i, j, k);
       }
 
-      if(this.liquidCanDisplaceBlock(var1, var2, var3 - 1, var4)) {
-         if(this.blockMaterial == Material.lava && var1.getBlockMaterial(var2, var3 - 1, var4) == Material.water) {
-            var1.setBlockWithNotify(var2, var3 - 1, var4, Block.stone.blockID);
-            this.triggerLavaMixEffects(var1, var2, var3 - 1, var4);
-            return;
+      if(this.liquidCanDisplaceBlock(world, i, j - 1, k)) {
+         BlockFromToEvent var21 = new BlockFromToEvent(source, BlockFace.DOWN);
+         if(server != null) {
+            server.getPluginManager().callEvent(var21);
          }
 
-         if(var6 >= 8) {
-            this.flowIntoBlock(var1, var2, var3 - 1, var4, var6);
-         } else {
-            this.flowIntoBlock(var1, var2, var3 - 1, var4, var6 + 8);
+         if(!var21.isCancelled()) {
+            if(this.blockMaterial == Material.lava && world.getBlockMaterial(i, j - 1, k) == Material.water) {
+               world.setBlockWithNotify(i, j - 1, k, Block.stone.blockID);
+               this.triggerLavaMixEffects(world, i, j - 1, k);
+               return;
+            }
+
+            if(l >= 8) {
+               this.flowIntoBlock(world, i, j - 1, k, l);
+            } else {
+               this.flowIntoBlock(world, i, j - 1, k, l + 8);
+            }
          }
-      } else if(var6 >= 0 && (var6 == 0 || this.blockBlocksFlow(var1, var2, var3 - 1, var4))) {
-         boolean[] var13 = this.getOptimalFlowDirections(var1, var2, var3, var4);
-         var10 = var6 + var7;
-         if(var6 >= 8) {
-            var10 = 1;
+      } else if(l >= 0 && (l == 0 || this.blockBlocksFlow(world, i, j - 1, k))) {
+         boolean[] var22 = this.getOptimalFlowDirections(world, i, j, k);
+         i1 = l + b0;
+         if(l >= 8) {
+            i1 = 1;
          }
 
-         if(var10 >= 8) {
+         if(i1 >= 8) {
             return;
          }
 
-         if(var13[0]) {
-            this.flowIntoBlock(var1, var2 - 1, var3, var4, var10);
-         }
-
-         if(var13[1]) {
-            this.flowIntoBlock(var1, var2 + 1, var3, var4, var10);
-         }
+         BlockFace[] var23 = new BlockFace[]{BlockFace.NORTH, BlockFace.SOUTH, BlockFace.EAST, BlockFace.WEST};
+         index = 0;
+         BlockFace[] arr$ = var23;
+         int len$ = var23.length;
+
+         for(int i$ = 0; i$ < len$; ++i$) {
+            BlockFace currentFace = arr$[i$];
+            if(var22[index]) {
+               BlockFromToEvent event = new BlockFromToEvent(source, currentFace);
+               if(server != null) {
+                  server.getPluginManager().callEvent(event);
+               }
 
-         if(var13[2]) {
-            this.flowIntoBlock(var1, var2, var3, var4 - 1, var10);
-         }
+               if(!event.isCancelled()) {
+                  this.flowIntoBlock(world, i + currentFace.getModX(), j, k + currentFace.getModZ(), i1);
+               }
+            }
 
-         if(var13[3]) {
-            this.flowIntoBlock(var1, var2, var3, var4 + 1, var10);
+            ++index;
          }
       }
 
    }
 
-   private void flowIntoBlock(World var1, int var2, int var3, int var4, int var5) {
-      if(this.liquidCanDisplaceBlock(var1, var2, var3, var4)) {
-         int var6 = var1.getBlockId(var2, var3, var4);
-         if(var6 > 0) {
+   private void flowIntoBlock(World world, int i, int j, int k, int l) {
+      if(this.liquidCanDisplaceBlock(world, i, j, k)) {
+         int i1 = world.getBlockId(i, j, k);
+         if(i1 > 0) {
             if(this.blockMaterial == Material.lava) {
-               this.triggerLavaMixEffects(var1, var2, var3, var4);
+               this.triggerLavaMixEffects(world, i, j, k);
             } else {
-               Block.blocksList[var6].dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
+               Block.blocksList[i1].dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
             }
          }
 
-         var1.setBlockAndMetadataWithNotify(var2, var3, var4, this.blockID, var5);
+         world.setBlockAndMetadataWithNotify(i, j, k, this.blockID, l);
       }
 
    }
 
-   private int calculateFlowCost(World var1, int var2, int var3, int var4, int var5, int var6) {
-      int var7 = 1000;
+   private int calculateFlowCost(World world, int i, int j, int k, int l, int i1) {
+      int j1 = 1000;
 
-      for(int var8 = 0; var8 < 4; ++var8) {
-         if((var8 != 0 || var6 != 1) && (var8 != 1 || var6 != 0) && (var8 != 2 || var6 != 3) && (var8 != 3 || var6 != 2)) {
-            int var9 = var2;
-            int var11 = var4;
-            if(var8 == 0) {
-               var9 = var2 - 1;
+      for(int k1 = 0; k1 < 4; ++k1) {
+         if((k1 != 0 || i1 != 1) && (k1 != 1 || i1 != 0) && (k1 != 2 || i1 != 3) && (k1 != 3 || i1 != 2)) {
+            int l1 = i;
+            int i2 = k;
+            if(k1 == 0) {
+               l1 = i - 1;
             }
 
-            if(var8 == 1) {
-               ++var9;
+            if(k1 == 1) {
+               ++l1;
             }
 
-            if(var8 == 2) {
-               var11 = var4 - 1;
+            if(k1 == 2) {
+               i2 = k - 1;
             }
 
-            if(var8 == 3) {
-               ++var11;
+            if(k1 == 3) {
+               ++i2;
             }
 
-            if(!this.blockBlocksFlow(var1, var9, var3, var11) && (var1.getBlockMaterial(var9, var3, var11) != this.blockMaterial || var1.getBlockMetadata(var9, var3, var11) != 0)) {
-               if(!this.blockBlocksFlow(var1, var9, var3 - 1, var11)) {
-                  return var5;
+            if(!this.blockBlocksFlow(world, l1, j, i2) && (world.getBlockMaterial(l1, j, i2) != this.blockMaterial || world.getBlockMetadata(l1, j, i2) != 0)) {
+               if(!this.blockBlocksFlow(world, l1, j - 1, i2)) {
+                  return l;
                }
 
-               if(var5 < 4) {
-                  int var12 = this.calculateFlowCost(var1, var9, var3, var11, var5 + 1, var8);
-                  if(var12 < var7) {
-                     var7 = var12;
+               if(l < 4) {
+                  int j2 = this.calculateFlowCost(world, l1, j, i2, l + 1, k1);
+                  if(j2 < j1) {
+                     j1 = j2;
                   }
                }
             }
          }
       }
 
-      return var7;
+      return j1;
    }
 
-   private boolean[] getOptimalFlowDirections(World var1, int var2, int var3, int var4) {
-      int var5;
-      int var6;
-      for(var5 = 0; var5 < 4; ++var5) {
-         this.flowCost[var5] = 1000;
-         var6 = var2;
-         int var8 = var4;
-         if(var5 == 0) {
-            var6 = var2 - 1;
+   private boolean[] getOptimalFlowDirections(World world, int i, int j, int k) {
+      int l;
+      int i1;
+      for(l = 0; l < 4; ++l) {
+         this.flowCost[l] = 1000;
+         i1 = i;
+         int j1 = k;
+         if(l == 0) {
+            i1 = i - 1;
          }
 
-         if(var5 == 1) {
-            ++var6;
+         if(l == 1) {
+            ++i1;
          }
 
-         if(var5 == 2) {
-            var8 = var4 - 1;
+         if(l == 2) {
+            j1 = k - 1;
          }
 
-         if(var5 == 3) {
-            ++var8;
+         if(l == 3) {
+            ++j1;
          }
 
-         if(!this.blockBlocksFlow(var1, var6, var3, var8) && (var1.getBlockMaterial(var6, var3, var8) != this.blockMaterial || var1.getBlockMetadata(var6, var3, var8) != 0)) {
-            if(this.blockBlocksFlow(var1, var6, var3 - 1, var8)) {
-               this.flowCost[var5] = this.calculateFlowCost(var1, var6, var3, var8, 1, var5);
+         if(!this.blockBlocksFlow(world, i1, j, j1) && (world.getBlockMaterial(i1, j, j1) != this.blockMaterial || world.getBlockMetadata(i1, j, j1) != 0)) {
+            if(this.blockBlocksFlow(world, i1, j - 1, j1)) {
+               this.flowCost[l] = this.calculateFlowCost(world, i1, j, j1, 1, l);
             } else {
-               this.flowCost[var5] = 0;
+               this.flowCost[l] = 0;
             }
          }
       }
 
-      var5 = this.flowCost[0];
+      l = this.flowCost[0];
 
-      for(var6 = 1; var6 < 4; ++var6) {
-         if(this.flowCost[var6] < var5) {
-            var5 = this.flowCost[var6];
+      for(i1 = 1; i1 < 4; ++i1) {
+         if(this.flowCost[i1] < l) {
+            l = this.flowCost[i1];
          }
       }
 
-      for(var6 = 0; var6 < 4; ++var6) {
-         this.isOptimalFlowDirection[var6] = this.flowCost[var6] == var5;
+      for(i1 = 0; i1 < 4; ++i1) {
+         this.isOptimalFlowDirection[i1] = this.flowCost[i1] == l;
       }
 
       return this.isOptimalFlowDirection;
    }
 
-   private boolean blockBlocksFlow(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockId(var2, var3, var4);
-      if(var5 != Block.doorWood.blockID && var5 != Block.doorSteel.blockID && var5 != Block.signPost.blockID && var5 != Block.ladder.blockID && var5 != Block.reed.blockID) {
-         if(var5 == 0) {
+   private boolean blockBlocksFlow(World world, int i, int j, int k) {
+      int l = world.getBlockId(i, j, k);
+      if(l != Block.doorWood.blockID && l != Block.doorSteel.blockID && l != Block.signPost.blockID && l != Block.ladder.blockID && l != Block.reed.blockID) {
+         if(l == 0) {
             return false;
          } else {
-            Material var6 = Block.blocksList[var5].blockMaterial;
-            return var6 == Material.portal?true:var6.blocksMovement();
+            Material material = Block.blocksList[l].blockMaterial;
+            return material == Material.portal?true:material.blocksMovement();
          }
       } else {
          return true;
       }
    }
 
-   protected int getSmallestFlowDecay(World var1, int var2, int var3, int var4, int var5) {
-      int var6 = this.getFlowDecay(var1, var2, var3, var4);
-      if(var6 < 0) {
-         return var5;
+   protected int getSmallestFlowDecay(World world, int i, int j, int k, int l) {
+      int i1 = this.getFlowDecay(world, i, j, k);
+      if(i1 < 0) {
+         return l;
       } else {
-         if(var6 == 0) {
+         if(i1 == 0) {
             ++this.numAdjacentSources;
          }
 
-         if(var6 >= 8) {
-            var6 = 0;
+         if(i1 >= 8) {
+            i1 = 0;
          }
 
-         return var5 >= 0 && var6 >= var5?var5:var6;
+         return l >= 0 && i1 >= l?l:i1;
       }
    }
 
-   private boolean liquidCanDisplaceBlock(World var1, int var2, int var3, int var4) {
-      Material var5 = var1.getBlockMaterial(var2, var3, var4);
-      return var5 == this.blockMaterial?false:(var5 == Material.lava?false:!this.blockBlocksFlow(var1, var2, var3, var4));
+   private boolean liquidCanDisplaceBlock(World world, int i, int j, int k) {
+      Material material = world.getBlockMaterial(i, j, k);
+      return material == this.blockMaterial?false:(material == Material.lava?false:!this.blockBlocksFlow(world, i, j, k));
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      super.onBlockAdded(var1, var2, var3, var4);
-      if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-         var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+   public void onBlockAdded(World world, int i, int j, int k) {
+      super.onBlockAdded(world, i, j, k);
+      if(world.getBlockId(i, j, k) == this.blockID) {
+         world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/BlockGrass.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockGrass.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockGrass.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockGrass.java
--- mcp-mcdev/net/minecraft/src/BlockGrass.java	2012-11-29 21:15:23.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockGrass.java	2012-11-29 20:44:42.000000000 -0800
@@ -5,40 +5,58 @@
 import net.minecraft.src.CreativeTabs;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.block.BlockFadeEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
 
 public class BlockGrass extends Block {
 
-   protected BlockGrass(int var1) {
-      super(var1, Material.grass);
+   protected BlockGrass(int i) {
+      super(i, Material.grass);
       this.blockIndexInTexture = 3;
       this.setTickRandomly(true);
       this.setCreativeTab(CreativeTabs.tabBlock);
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      return var1 == 1?0:(var1 == 0?2:3);
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      return i == 1?0:(i == 0?2:3);
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote) {
-         if(var1.getBlockLightValue(var2, var3 + 1, var4) < 4 && Block.lightOpacity[var1.getBlockId(var2, var3 + 1, var4)] > 2) {
-            var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
-         } else if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-            for(int var6 = 0; var6 < 4; ++var6) {
-               int var7 = var2 + var5.nextInt(3) - 1;
-               int var8 = var3 + var5.nextInt(5) - 3;
-               int var9 = var4 + var5.nextInt(3) - 1;
-               int var10 = var1.getBlockId(var7, var8 + 1, var9);
-               if(var1.getBlockId(var7, var8, var9) == Block.dirt.blockID && var1.getBlockLightValue(var7, var8 + 1, var9) >= 4 && Block.lightOpacity[var10] <= 2) {
-                  var1.setBlockWithNotify(var7, var8, var9, Block.grass.blockID);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote) {
+         if(world.getBlockLightValue(i, j + 1, k) < 4 && Block.lightOpacity[world.getBlockId(i, j + 1, k)] > 2) {
+            CraftWorld var14 = world.getWorld();
+            BlockState var15 = var14.getBlockAt(i, j, k).getState();
+            var15.setTypeId(Block.dirt.blockID);
+            BlockFadeEvent var16 = new BlockFadeEvent(var15.getBlock(), var15);
+            world.getServer().getPluginManager().callEvent(var16);
+            if(!var16.isCancelled()) {
+               var15.update(true);
+            }
+         } else if(world.getBlockLightValue(i, j + 1, k) >= 9) {
+            for(int l = 0; l < 4; ++l) {
+               int i1 = i + random.nextInt(3) - 1;
+               int j1 = j + random.nextInt(5) - 3;
+               int k1 = k + random.nextInt(3) - 1;
+               int l1 = world.getBlockId(i1, j1 + 1, k1);
+               if(world.getBlockId(i1, j1, k1) == Block.dirt.blockID && world.getBlockLightValue(i1, j1 + 1, k1) >= 4 && Block.lightOpacity[l1] <= 2) {
+                  CraftWorld bworld = world.getWorld();
+                  BlockState blockState = bworld.getBlockAt(i1, j1, k1).getState();
+                  blockState.setTypeId(Block.grass.blockID);
+                  BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(i, j, k), blockState);
+                  world.getServer().getPluginManager().callEvent(event);
+                  if(!event.isCancelled()) {
+                     blockState.update(true);
+                  }
                }
             }
          }
-
       }
+
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
-      return Block.dirt.idDropped(0, var2, var3);
+   public int idDropped(int i, Random random, int j) {
+      return Block.dirt.idDropped(0, random, j);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockIce.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockIce.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockIce.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockIce.java
--- mcp-mcdev/net/minecraft/src/BlockIce.java	2012-11-29 21:15:23.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockIce.java	2012-11-29 20:44:42.000000000 -0800
@@ -11,53 +11,58 @@
 import net.minecraft.src.Material;
 import net.minecraft.src.StatList;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class BlockIce extends BlockBreakable {
 
-   public BlockIce(int var1, int var2) {
-      super(var1, var2, Material.ice, false);
+   public BlockIce(int i, int j) {
+      super(i, j, Material.ice, false);
       this.slipperiness = 0.98F;
       this.setTickRandomly(true);
       this.setCreativeTab(CreativeTabs.tabBlock);
    }
 
-   public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
-      var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
-      var2.addExhaustion(0.025F);
-      if(this.canSilkHarvest() && EnchantmentHelper.getSilkTouchModifier(var2)) {
-         ItemStack var9 = this.createStackedBlock(var6);
-         if(var9 != null) {
-            this.dropBlockAsItem_do(var1, var3, var4, var5, var9);
+   public void harvestBlock(World world, EntityPlayer entityhuman, int i, int j, int k, int l) {
+      entityhuman.addStat(StatList.mineBlockStatArray[this.blockID], 1);
+      entityhuman.addExhaustion(0.025F);
+      if(this.canSilkHarvest() && EnchantmentHelper.getSilkTouchModifier(entityhuman)) {
+         ItemStack i11 = this.createStackedBlock(l);
+         if(i11 != null) {
+            this.dropBlockAsItem_do(world, i, j, k, i11);
          }
       } else {
-         if(var1.provider.isHellWorld) {
-            var1.setBlockWithNotify(var3, var4, var5, 0);
+         if(world.provider.isHellWorld) {
+            world.setBlockWithNotify(i, j, k, 0);
             return;
          }
 
-         int var7 = EnchantmentHelper.getFortuneModifier(var2);
-         this.dropBlockAsItem(var1, var3, var4, var5, var6, var7);
-         Material var8 = var1.getBlockMaterial(var3, var4 - 1, var5);
-         if(var8.blocksMovement() || var8.isLiquid()) {
-            var1.setBlockWithNotify(var3, var4, var5, Block.waterMoving.blockID);
+         int i1 = EnchantmentHelper.getFortuneModifier(entityhuman);
+         this.dropBlockAsItem(world, i, j, k, l, i1);
+         Material material = world.getBlockMaterial(i, j - 1, k);
+         if(material.blocksMovement() || material.isLiquid()) {
+            world.setBlockWithNotify(i, j, k, Block.waterMoving.blockID);
          }
       }
 
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 0;
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11 - Block.lightOpacity[this.blockID]) {
-         if(var1.provider.isHellWorld) {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(world.getSavedLightValue(EnumSkyBlock.Block, i, j, k) > 11 - Block.lightOpacity[this.blockID]) {
+         if(CraftEventFactory.callBlockFadeEvent(world.getWorld().getBlockAt(i, j, k), Block.waterStill.blockID).isCancelled()) {
             return;
          }
 
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, Block.waterStill.blockID);
+         if(world.provider.isHellWorld) {
+            world.setBlockWithNotify(i, j, k, 0);
+            return;
+         }
+
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, Block.waterStill.blockID);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/BlockLeaves.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockLeaves.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockLeaves.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockLeaves.java
--- mcp-mcdev/net/minecraft/src/BlockLeaves.java	2012-11-29 21:15:23.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockLeaves.java	2012-11-29 20:44:42.000000000 -0800
@@ -10,6 +10,7 @@
 import net.minecraft.src.Material;
 import net.minecraft.src.StatList;
 import net.minecraft.src.World;
+import org.bukkit.event.block.LeavesDecayEvent;
 
 public class BlockLeaves extends BlockLeavesBase {
 
@@ -18,24 +19,24 @@
    int[] adjacentTreeBlocks;
 
 
-   protected BlockLeaves(int var1, int var2) {
-      super(var1, var2, Material.leaves, false);
-      this.baseIndexInPNG = var2;
+   protected BlockLeaves(int i, int j) {
+      super(i, j, Material.leaves, false);
+      this.baseIndexInPNG = j;
       this.setTickRandomly(true);
       this.setCreativeTab(CreativeTabs.tabDecorations);
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      byte var7 = 1;
-      int var8 = var7 + 1;
-      if(var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-         for(int var9 = -var7; var9 <= var7; ++var9) {
-            for(int var10 = -var7; var10 <= var7; ++var10) {
-               for(int var11 = -var7; var11 <= var7; ++var11) {
-                  int var12 = var1.getBlockId(var2 + var9, var3 + var10, var4 + var11);
-                  if(var12 == Block.leaves.blockID) {
-                     int var13 = var1.getBlockMetadata(var2 + var9, var3 + var10, var4 + var11);
-                     var1.setBlockMetadata(var2 + var9, var3 + var10, var4 + var11, var13 | 8);
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      byte b0 = 1;
+      int j1 = b0 + 1;
+      if(world.checkChunksExist(i - j1, j - j1, k - j1, i + j1, j + j1, k + j1)) {
+         for(int k1 = -b0; k1 <= b0; ++k1) {
+            for(int l1 = -b0; l1 <= b0; ++l1) {
+               for(int i2 = -b0; i2 <= b0; ++i2) {
+                  int j2 = world.getBlockId(i + k1, j + l1, k + i2);
+                  if(j2 == Block.leaves.blockID) {
+                     int k2 = world.getBlockMetadata(i + k1, j + l1, k + i2);
+                     world.setBlockMetadata(i + k1, j + l1, k + i2, k2 | 8);
                   }
                }
             }
@@ -44,66 +45,66 @@
 
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         if((var6 & 8) != 0 && (var6 & 4) == 0) {
-            byte var7 = 4;
-            int var8 = var7 + 1;
-            byte var9 = 32;
-            int var10 = var9 * var9;
-            int var11 = var9 / 2;
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote) {
+         int l = world.getBlockMetadata(i, j, k);
+         if((l & 8) != 0 && (l & 4) == 0) {
+            byte b0 = 4;
+            int i1 = b0 + 1;
+            byte b1 = 32;
+            int j1 = b1 * b1;
+            int k1 = b1 / 2;
             if(this.adjacentTreeBlocks == null) {
-               this.adjacentTreeBlocks = new int[var9 * var9 * var9];
+               this.adjacentTreeBlocks = new int[b1 * b1 * b1];
             }
 
-            int var12;
-            if(var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-               int var13;
-               int var14;
-               int var15;
-               for(var12 = -var7; var12 <= var7; ++var12) {
-                  for(var13 = -var7; var13 <= var7; ++var13) {
-                     for(var14 = -var7; var14 <= var7; ++var14) {
-                        var15 = var1.getBlockId(var2 + var12, var3 + var13, var4 + var14);
-                        if(var15 == Block.wood.blockID) {
-                           this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = 0;
-                        } else if(var15 == Block.leaves.blockID) {
-                           this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -2;
+            int l1;
+            if(world.checkChunksExist(i - i1, j - i1, k - i1, i + i1, j + i1, k + i1)) {
+               int i2;
+               int j2;
+               int k2;
+               for(l1 = -b0; l1 <= b0; ++l1) {
+                  for(i2 = -b0; i2 <= b0; ++i2) {
+                     for(j2 = -b0; j2 <= b0; ++j2) {
+                        k2 = world.getBlockId(i + l1, j + i2, k + j2);
+                        if(k2 == Block.wood.blockID) {
+                           this.adjacentTreeBlocks[(l1 + k1) * j1 + (i2 + k1) * b1 + j2 + k1] = 0;
+                        } else if(k2 == Block.leaves.blockID) {
+                           this.adjacentTreeBlocks[(l1 + k1) * j1 + (i2 + k1) * b1 + j2 + k1] = -2;
                         } else {
-                           this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -1;
+                           this.adjacentTreeBlocks[(l1 + k1) * j1 + (i2 + k1) * b1 + j2 + k1] = -1;
                         }
                      }
                   }
                }
 
-               for(var12 = 1; var12 <= 4; ++var12) {
-                  for(var13 = -var7; var13 <= var7; ++var13) {
-                     for(var14 = -var7; var14 <= var7; ++var14) {
-                        for(var15 = -var7; var15 <= var7; ++var15) {
-                           if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11] == var12 - 1) {
-                              if(this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-                                 this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
+               for(l1 = 1; l1 <= 4; ++l1) {
+                  for(i2 = -b0; i2 <= b0; ++i2) {
+                     for(j2 = -b0; j2 <= b0; ++j2) {
+                        for(k2 = -b0; k2 <= b0; ++k2) {
+                           if(this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + k2 + k1] == l1 - 1) {
+                              if(this.adjacentTreeBlocks[(i2 + k1 - 1) * j1 + (j2 + k1) * b1 + k2 + k1] == -2) {
+                                 this.adjacentTreeBlocks[(i2 + k1 - 1) * j1 + (j2 + k1) * b1 + k2 + k1] = l1;
                               }
 
-                              if(this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-                                 this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
+                              if(this.adjacentTreeBlocks[(i2 + k1 + 1) * j1 + (j2 + k1) * b1 + k2 + k1] == -2) {
+                                 this.adjacentTreeBlocks[(i2 + k1 + 1) * j1 + (j2 + k1) * b1 + k2 + k1] = l1;
                               }
 
-                              if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] == -2) {
-                                 this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] = var12;
+                              if(this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1 - 1) * b1 + k2 + k1] == -2) {
+                                 this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1 - 1) * b1 + k2 + k1] = l1;
                               }
 
-                              if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] == -2) {
-                                 this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] = var12;
+                              if(this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1 + 1) * b1 + k2 + k1] == -2) {
+                                 this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1 + 1) * b1 + k2 + k1] = l1;
                               }
 
-                              if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] == -2) {
-                                 this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] = var12;
+                              if(this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + (k2 + k1 - 1)] == -2) {
+                                 this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + (k2 + k1 - 1)] = l1;
                               }
 
-                              if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] == -2) {
-                                 this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] = var12;
+                              if(this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + k2 + k1 + 1] == -2) {
+                                 this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + k2 + k1 + 1] = l1;
                               }
                            }
                         }
@@ -112,69 +113,73 @@
                }
             }
 
-            var12 = this.adjacentTreeBlocks[var11 * var10 + var11 * var9 + var11];
-            if(var12 >= 0) {
-               var1.setBlockMetadata(var2, var3, var4, var6 & -9);
+            l1 = this.adjacentTreeBlocks[k1 * j1 + k1 * b1 + k1];
+            if(l1 >= 0) {
+               world.setBlockMetadata(i, j, k, l & -9);
             } else {
-               this.removeLeaves(var1, var2, var3, var4);
+               this.removeLeaves(world, i, j, k);
             }
          }
-
       }
+
    }
 
-   private void removeLeaves(World var1, int var2, int var3, int var4) {
-      this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-      var1.setBlockWithNotify(var2, var3, var4, 0);
+   private void removeLeaves(World world, int i, int j, int k) {
+      LeavesDecayEvent event = new LeavesDecayEvent(world.getWorld().getBlockAt(i, j, k));
+      world.getServer().getPluginManager().callEvent(event);
+      if(!event.isCancelled()) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
+      }
    }
 
-   public int quantityDropped(Random var1) {
-      return var1.nextInt(20) == 0?1:0;
+   public int quantityDropped(Random random) {
+      return random.nextInt(20) == 0?1:0;
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Block.sapling.blockID;
    }
 
-   public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-      if(!var1.isRemote) {
-         byte var8 = 20;
-         if((var5 & 3) == 3) {
-            var8 = 40;
+   public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f, int i1) {
+      if(!world.isRemote) {
+         byte b0 = 20;
+         if((l & 3) == 3) {
+            b0 = 40;
          }
 
-         if(var1.rand.nextInt(var8) == 0) {
-            int var9 = this.idDropped(var5, var1.rand, var7);
-            this.dropBlockAsItem_do(var1, var2, var3, var4, new ItemStack(var9, 1, this.damageDropped(var5)));
+         if(world.rand.nextInt(b0) == 0) {
+            int j1 = this.idDropped(l, world.rand, i1);
+            this.dropBlockAsItem_do(world, i, j, k, new ItemStack(j1, 1, this.damageDropped(l)));
          }
 
-         if((var5 & 3) == 0 && var1.rand.nextInt(200) == 0) {
-            this.dropBlockAsItem_do(var1, var2, var3, var4, new ItemStack(Item.appleRed, 1, 0));
+         if((l & 3) == 0 && world.rand.nextInt(200) == 0) {
+            this.dropBlockAsItem_do(world, i, j, k, new ItemStack(Item.appleRed, 1, 0));
          }
       }
 
    }
 
-   public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
-      if(!var1.isRemote && var2.getCurrentEquippedItem() != null && var2.getCurrentEquippedItem().itemID == Item.shears.shiftedIndex) {
-         var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
-         this.dropBlockAsItem_do(var1, var3, var4, var5, new ItemStack(Block.leaves.blockID, 1, var6 & 3));
+   public void harvestBlock(World world, EntityPlayer entityhuman, int i, int j, int k, int l) {
+      if(!world.isRemote && entityhuman.getCurrentEquippedItem() != null && entityhuman.getCurrentEquippedItem().itemID == Item.shears.shiftedIndex) {
+         entityhuman.addStat(StatList.mineBlockStatArray[this.blockID], 1);
+         this.dropBlockAsItem_do(world, i, j, k, new ItemStack(Block.leaves.blockID, 1, l & 3));
       } else {
-         super.harvestBlock(var1, var2, var3, var4, var5, var6);
+         super.harvestBlock(world, entityhuman, i, j, k, l);
       }
 
    }
 
-   public int damageDropped(int var1) {
-      return var1 & 3;
+   public int damageDropped(int i) {
+      return i & 3;
    }
 
    public boolean isOpaqueCube() {
       return !this.graphicsLevel;
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      return (var2 & 3) == 1?this.blockIndexInTexture + 80:((var2 & 3) == 3?this.blockIndexInTexture + 144:this.blockIndexInTexture);
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      return (j & 3) == 1?this.blockIndexInTexture + 80:((j & 3) == 3?this.blockIndexInTexture + 144:this.blockIndexInTexture);
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/BlockLever.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockLever.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockLever.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockLever.java
--- mcp-mcdev/net/minecraft/src/BlockLever.java	2012-11-29 21:15:23.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockLever.java	2012-11-29 20:44:42.000000000 -0800
@@ -7,15 +7,16 @@
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockLever extends Block {
 
-   protected BlockLever(int var1, int var2) {
-      super(var1, var2, Material.circuits);
+   protected BlockLever(int i, int j) {
+      super(i, j, Material.circuits);
       this.setCreativeTab(CreativeTabs.tabRedstone);
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
@@ -31,47 +32,47 @@
       return 12;
    }
 
-   public boolean canPlaceBlockOnSide(World var1, int var2, int var3, int var4, int var5) {
-      return var5 == 0 && var1.isBlockNormalCube(var2, var3 + 1, var4)?true:(var5 == 1 && var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4)?true:(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)?true:(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)?true:(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)?true:var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)))));
+   public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l) {
+      return l == 0 && world.isBlockNormalCube(i, j + 1, k)?true:(l == 1 && world.doesBlockHaveSolidTopSurface(i, j - 1, k)?true:(l == 2 && world.isBlockNormalCube(i, j, k + 1)?true:(l == 3 && world.isBlockNormalCube(i, j, k - 1)?true:(l == 4 && world.isBlockNormalCube(i + 1, j, k)?true:l == 5 && world.isBlockNormalCube(i - 1, j, k)))));
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      return var1.isBlockNormalCube(var2 - 1, var3, var4)?true:(var1.isBlockNormalCube(var2 + 1, var3, var4)?true:(var1.isBlockNormalCube(var2, var3, var4 - 1)?true:(var1.isBlockNormalCube(var2, var3, var4 + 1)?true:(var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4)?true:var1.isBlockNormalCube(var2, var3 + 1, var4)))));
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      return world.isBlockNormalCube(i - 1, j, k)?true:(world.isBlockNormalCube(i + 1, j, k)?true:(world.isBlockNormalCube(i, j, k - 1)?true:(world.isBlockNormalCube(i, j, k + 1)?true:(world.doesBlockHaveSolidTopSurface(i, j - 1, k)?true:world.isBlockNormalCube(i, j + 1, k)))));
    }
 
-   public int func_85104_a(World var1, int var2, int var3, int var4, int var5, float var6, float var7, float var8, int var9) {
-      int var11 = var9 & 8;
-      int var10 = var9 & 7;
-      var10 = -1;
-      if(var5 == 0 && var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-         var10 = var1.rand.nextBoolean()?0:7;
+   public int func_85104_a(World world, int i, int j, int k, int l, float f, float f1, float f2, int i1) {
+      int j1 = i1 & 8;
+      int k1 = i1 & 7;
+      k1 = -1;
+      if(l == 0 && world.isBlockNormalCube(i, j + 1, k)) {
+         k1 = world.rand.nextBoolean()?0:7;
       }
 
-      if(var5 == 1 && var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4)) {
-         var10 = 5 + var1.rand.nextInt(2);
+      if(l == 1 && world.doesBlockHaveSolidTopSurface(i, j - 1, k)) {
+         k1 = 5 + world.rand.nextInt(2);
       }
 
-      if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-         var10 = 4;
+      if(l == 2 && world.isBlockNormalCube(i, j, k + 1)) {
+         k1 = 4;
       }
 
-      if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-         var10 = 3;
+      if(l == 3 && world.isBlockNormalCube(i, j, k - 1)) {
+         k1 = 3;
       }
 
-      if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-         var10 = 2;
+      if(l == 4 && world.isBlockNormalCube(i + 1, j, k)) {
+         k1 = 2;
       }
 
-      if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-         var10 = 1;
+      if(l == 5 && world.isBlockNormalCube(i - 1, j, k)) {
+         k1 = 1;
       }
 
-      return var10 + var11;
+      return k1 + j1;
    }
 
-   public static int invertMetadata(int var0) {
-      switch(var0) {
+   public static int invertMetadata(int i) {
+      switch(i) {
       case 0:
          return 0;
       case 1:
@@ -89,151 +90,160 @@
       }
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
-         boolean var7 = false;
-         if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
-            var7 = true;
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(this.checkIfAttachedToBlock(world, i, j, k)) {
+         int i1 = world.getBlockMetadata(i, j, k) & 7;
+         boolean flag = false;
+         if(!world.isBlockNormalCube(i - 1, j, k) && i1 == 1) {
+            flag = true;
          }
 
-         if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
-            var7 = true;
+         if(!world.isBlockNormalCube(i + 1, j, k) && i1 == 2) {
+            flag = true;
          }
 
-         if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
-            var7 = true;
+         if(!world.isBlockNormalCube(i, j, k - 1) && i1 == 3) {
+            flag = true;
          }
 
-         if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
-            var7 = true;
+         if(!world.isBlockNormalCube(i, j, k + 1) && i1 == 4) {
+            flag = true;
          }
 
-         if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && var6 == 5) {
-            var7 = true;
+         if(!world.doesBlockHaveSolidTopSurface(i, j - 1, k) && i1 == 5) {
+            flag = true;
          }
 
-         if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && var6 == 6) {
-            var7 = true;
+         if(!world.doesBlockHaveSolidTopSurface(i, j - 1, k) && i1 == 6) {
+            flag = true;
          }
 
-         if(!var1.isBlockNormalCube(var2, var3 + 1, var4) && var6 == 0) {
-            var7 = true;
+         if(!world.isBlockNormalCube(i, j + 1, k) && i1 == 0) {
+            flag = true;
          }
 
-         if(!var1.isBlockNormalCube(var2, var3 + 1, var4) && var6 == 7) {
-            var7 = true;
+         if(!world.isBlockNormalCube(i, j + 1, k) && i1 == 7) {
+            flag = true;
          }
 
-         if(var7) {
-            this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+         if(flag) {
+            this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+            world.setBlockWithNotify(i, j, k, 0);
          }
       }
 
    }
 
-   private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
-      if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   private boolean checkIfAttachedToBlock(World world, int i, int j, int k) {
+      if(!this.canPlaceBlockAt(world, i, j, k)) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
          return false;
       } else {
          return true;
       }
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4) & 7;
-      float var6 = 0.1875F;
-      if(var5 == 1) {
-         this.setBlockBounds(0.0F, 0.2F, 0.5F - var6, var6 * 2.0F, 0.8F, 0.5F + var6);
-      } else if(var5 == 2) {
-         this.setBlockBounds(1.0F - var6 * 2.0F, 0.2F, 0.5F - var6, 1.0F, 0.8F, 0.5F + var6);
-      } else if(var5 == 3) {
-         this.setBlockBounds(0.5F - var6, 0.2F, 0.0F, 0.5F + var6, 0.8F, var6 * 2.0F);
-      } else if(var5 == 4) {
-         this.setBlockBounds(0.5F - var6, 0.2F, 1.0F - var6 * 2.0F, 0.5F + var6, 0.8F, 1.0F);
-      } else if(var5 != 5 && var5 != 6) {
-         if(var5 == 0 || var5 == 7) {
-            var6 = 0.25F;
-            this.setBlockBounds(0.5F - var6, 0.4F, 0.5F - var6, 0.5F + var6, 1.0F, 0.5F + var6);
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k) & 7;
+      float f = 0.1875F;
+      if(l == 1) {
+         this.setBlockBounds(0.0F, 0.2F, 0.5F - f, f * 2.0F, 0.8F, 0.5F + f);
+      } else if(l == 2) {
+         this.setBlockBounds(1.0F - f * 2.0F, 0.2F, 0.5F - f, 1.0F, 0.8F, 0.5F + f);
+      } else if(l == 3) {
+         this.setBlockBounds(0.5F - f, 0.2F, 0.0F, 0.5F + f, 0.8F, f * 2.0F);
+      } else if(l == 4) {
+         this.setBlockBounds(0.5F - f, 0.2F, 1.0F - f * 2.0F, 0.5F + f, 0.8F, 1.0F);
+      } else if(l != 5 && l != 6) {
+         if(l == 0 || l == 7) {
+            f = 0.25F;
+            this.setBlockBounds(0.5F - f, 0.4F, 0.5F - f, 0.5F + f, 1.0F, 0.5F + f);
          }
       } else {
-         var6 = 0.25F;
-         this.setBlockBounds(0.5F - var6, 0.0F, 0.5F - var6, 0.5F + var6, 0.6F, 0.5F + var6);
+         f = 0.25F;
+         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.6F, 0.5F + f);
       }
 
    }
 
-   public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {}
+   public void onBlockClicked(World world, int i, int j, int k, EntityPlayer entityhuman) {}
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-      if(var1.isRemote) {
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
+      if(world.isRemote) {
          return true;
       } else {
-         int var10 = var1.getBlockMetadata(var2, var3, var4);
-         int var11 = var10 & 7;
-         int var12 = 8 - (var10 & 8);
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var11 + var12);
-         var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, var12 > 0?0.6F:0.5F);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-         if(var11 == 1) {
-            var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-         } else if(var11 == 2) {
-            var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-         } else if(var11 == 3) {
-            var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-         } else if(var11 == 4) {
-            var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-         } else if(var11 != 5 && var11 != 6) {
-            if(var11 == 0 || var11 == 7) {
-               var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-            }
+         int i1 = world.getBlockMetadata(i, j, k);
+         int j1 = i1 & 7;
+         int k1 = 8 - (i1 & 8);
+         org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+         int old = k1 != 8?1:0;
+         int current = k1 == 8?1:0;
+         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+         world.getServer().getPluginManager().callEvent(eventRedstone);
+         if(eventRedstone.getNewCurrent() > 0 != (k1 == 8)) {
+            return true;
          } else {
-            var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         }
+            world.setBlockMetadataWithNotify(i, j, k, j1 + k1);
+            world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
+            world.playSoundEffect((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "random.click", 0.3F, k1 > 0?0.6F:0.5F);
+            world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+            if(j1 == 1) {
+               world.notifyBlocksOfNeighborChange(i - 1, j, k, this.blockID);
+            } else if(j1 == 2) {
+               world.notifyBlocksOfNeighborChange(i + 1, j, k, this.blockID);
+            } else if(j1 == 3) {
+               world.notifyBlocksOfNeighborChange(i, j, k - 1, this.blockID);
+            } else if(j1 == 4) {
+               world.notifyBlocksOfNeighborChange(i, j, k + 1, this.blockID);
+            } else if(j1 != 5 && j1 != 6) {
+               if(j1 == 0 || j1 == 7) {
+                  world.notifyBlocksOfNeighborChange(i, j + 1, k, this.blockID);
+               }
+            } else {
+               world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+            }
 
-         return true;
+            return true;
+         }
       }
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      if((var6 & 8) > 0) {
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-         int var7 = var6 & 7;
-         if(var7 == 1) {
-            var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-         } else if(var7 == 2) {
-            var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-         } else if(var7 == 3) {
-            var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-         } else if(var7 == 4) {
-            var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-         } else if(var7 != 5 && var7 != 6) {
-            if(var7 == 0 || var7 == 7) {
-               var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      if((i1 & 8) > 0) {
+         world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+         int j1 = i1 & 7;
+         if(j1 == 1) {
+            world.notifyBlocksOfNeighborChange(i - 1, j, k, this.blockID);
+         } else if(j1 == 2) {
+            world.notifyBlocksOfNeighborChange(i + 1, j, k, this.blockID);
+         } else if(j1 == 3) {
+            world.notifyBlocksOfNeighborChange(i, j, k - 1, this.blockID);
+         } else if(j1 == 4) {
+            world.notifyBlocksOfNeighborChange(i, j, k + 1, this.blockID);
+         } else if(j1 != 5 && j1 != 6) {
+            if(j1 == 0 || j1 == 7) {
+               world.notifyBlocksOfNeighborChange(i, j + 1, k, this.blockID);
             }
          } else {
-            var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+            world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
          }
       }
 
-      super.breakBlock(var1, var2, var3, var4, var5, var6);
+      super.breakBlock(world, i, j, k, l, i1);
    }
 
-   public boolean isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return (var1.getBlockMetadata(var2, var3, var4) & 8) > 0;
+   public boolean isProvidingWeakPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return (iblockaccess.getBlockMetadata(i, j, k) & 8) > 0;
    }
 
-   public boolean isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      int var6 = var1.getBlockMetadata(var2, var3, var4);
-      if((var6 & 8) == 0) {
+   public boolean isProvidingStrongPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      int i1 = iblockaccess.getBlockMetadata(i, j, k);
+      if((i1 & 8) == 0) {
          return false;
       } else {
-         int var7 = var6 & 7;
-         return var7 == 0 && var5 == 0?true:(var7 == 7 && var5 == 0?true:(var7 == 6 && var5 == 1?true:(var7 == 5 && var5 == 1?true:(var7 == 4 && var5 == 2?true:(var7 == 3 && var5 == 3?true:(var7 == 2 && var5 == 4?true:var7 == 1 && var5 == 5))))));
+         int j1 = i1 & 7;
+         return j1 == 0 && l == 0?true:(j1 == 7 && l == 0?true:(j1 == 6 && l == 1?true:(j1 == 5 && l == 1?true:(j1 == 4 && l == 2?true:(j1 == 3 && l == 3?true:(j1 == 2 && l == 4?true:j1 == 1 && l == 5))))));
       }
    }
 
Binary files mcp-mcdev/net/minecraft/src/BlockMobSpawner.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockMobSpawner.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockMobSpawner.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockMobSpawner.java
--- mcp-mcdev/net/minecraft/src/BlockMobSpawner.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockMobSpawner.java	2012-11-29 20:44:42.000000000 -0800
@@ -9,26 +9,29 @@
 
 public class BlockMobSpawner extends BlockContainer {
 
-   protected BlockMobSpawner(int var1, int var2) {
-      super(var1, var2, Material.rock);
+   protected BlockMobSpawner(int i, int j) {
+      super(i, j, Material.rock);
    }
 
-   public TileEntity createNewTileEntity(World var1) {
+   public TileEntity createNewTileEntity(World world) {
       return new TileEntityMobSpawner();
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return 0;
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 0;
    }
 
-   public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-      super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6, var7);
-      int var8 = 15 + var1.rand.nextInt(15) + var1.rand.nextInt(15);
-      this.dropXpOnBlockBreak(var1, var2, var3, var4, var8);
+   public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f, int i1) {
+      super.dropBlockAsItemWithChance(world, i, j, k, l, f, i1);
+   }
+
+   public int getExpDrop(World world, int data, int enchantmentLevel) {
+      int j1 = 15 + world.rand.nextInt(15) + world.rand.nextInt(15);
+      return j1;
    }
 
    public boolean isOpaqueCube() {
Binary files mcp-mcdev/net/minecraft/src/BlockMushroom.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockMushroom.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockMushroom.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockMushroom.java
--- mcp-mcdev/net/minecraft/src/BlockMushroom.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockMushroom.java	2012-11-29 20:44:42.000000000 -0800
@@ -1,34 +1,44 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Random;
 import net.minecraft.src.Block;
 import net.minecraft.src.BlockFlower;
+import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenBigMushroom;
+import org.bukkit.BlockChangeDelegate;
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockSpreadEvent;
+import org.bukkit.event.world.StructureGrowEvent;
 
 public class BlockMushroom extends BlockFlower {
 
-   protected BlockMushroom(int var1, int var2) {
-      super(var1, var2);
-      float var3 = 0.2F;
-      this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 2.0F, 0.5F + var3);
+   protected BlockMushroom(int i, int j) {
+      super(i, j);
+      float f = 0.2F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f * 2.0F, 0.5F + f);
       this.setTickRandomly(true);
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(var5.nextInt(25) == 0) {
-         byte var6 = 4;
-         int var7 = 5;
-
-         int var8;
-         int var9;
-         int var10;
-         for(var8 = var2 - var6; var8 <= var2 + var6; ++var8) {
-            for(var9 = var4 - var6; var9 <= var4 + var6; ++var9) {
-               for(var10 = var3 - 1; var10 <= var3 + 1; ++var10) {
-                  if(var1.getBlockId(var8, var10, var9) == this.blockID) {
-                     --var7;
-                     if(var7 <= 0) {
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(random.nextInt(25) == 0) {
+         byte b0 = 4;
+         int l = 5;
+
+         int i1;
+         int j1;
+         int k1;
+         for(i1 = i - b0; i1 <= i + b0; ++i1) {
+            for(j1 = k - b0; j1 <= k + b0; ++j1) {
+               for(k1 = j - 1; k1 <= j + 1; ++k1) {
+                  if(world.getBlockId(i1, k1, j1) == this.blockID) {
+                     --l;
+                     if(l <= 0) {
                         return;
                      }
                   }
@@ -36,60 +46,79 @@
             }
          }
 
-         var8 = var2 + var5.nextInt(3) - 1;
-         var9 = var3 + var5.nextInt(2) - var5.nextInt(2);
-         var10 = var4 + var5.nextInt(3) - 1;
-
-         for(int var11 = 0; var11 < 4; ++var11) {
-            if(var1.isAirBlock(var8, var9, var10) && this.canBlockStay(var1, var8, var9, var10)) {
-               var2 = var8;
-               var3 = var9;
-               var4 = var10;
+         i1 = i + random.nextInt(3) - 1;
+         j1 = j + random.nextInt(2) - random.nextInt(2);
+         k1 = k + random.nextInt(3) - 1;
+
+         for(int bworld = 0; bworld < 4; ++bworld) {
+            if(world.isAirBlock(i1, j1, k1) && this.canBlockStay(world, i1, j1, k1)) {
+               i = i1;
+               j = j1;
+               k = k1;
             }
 
-            var8 = var2 + var5.nextInt(3) - 1;
-            var9 = var3 + var5.nextInt(2) - var5.nextInt(2);
-            var10 = var4 + var5.nextInt(3) - 1;
+            i1 = i + random.nextInt(3) - 1;
+            j1 = j + random.nextInt(2) - random.nextInt(2);
+            k1 = k + random.nextInt(3) - 1;
          }
 
-         if(var1.isAirBlock(var8, var9, var10) && this.canBlockStay(var1, var8, var9, var10)) {
-            var1.setBlockWithNotify(var8, var9, var10, this.blockID);
+         if(world.isAirBlock(i1, j1, k1) && this.canBlockStay(world, i1, j1, k1)) {
+            CraftWorld var14 = world.getWorld();
+            BlockState blockState = var14.getBlockAt(i1, j1, k1).getState();
+            blockState.setTypeId(this.blockID);
+            BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), var14.getBlockAt(i, j, k), blockState);
+            world.getServer().getPluginManager().callEvent(event);
+            if(!event.isCancelled()) {
+               blockState.update(true);
+            }
          }
       }
 
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      return super.canPlaceBlockAt(var1, var2, var3, var4) && this.canBlockStay(var1, var2, var3, var4);
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      return super.canPlaceBlockAt(world, i, j, k) && this.canBlockStay(world, i, j, k);
    }
 
-   protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-      return Block.opaqueCubeLookup[var1];
+   protected boolean canThisPlantGrowOnThisBlockID(int i) {
+      return Block.opaqueCubeLookup[i];
    }
 
-   public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-      if(var3 >= 0 && var3 < 256) {
-         int var5 = var1.getBlockId(var2, var3 - 1, var4);
-         return var5 == Block.mycelium.blockID || var1.getFullBlockLightValue(var2, var3, var4) < 13 && this.canThisPlantGrowOnThisBlockID(var5);
+   public boolean canBlockStay(World world, int i, int j, int k) {
+      if(j >= 0 && j < 256) {
+         int l = world.getBlockId(i, j - 1, k);
+         return l == Block.mycelium.blockID || world.getFullBlockLightValue(i, j, k) < 13 && this.canThisPlantGrowOnThisBlockID(l);
       } else {
          return false;
       }
    }
 
-   public boolean fertilizeMushroom(World var1, int var2, int var3, int var4, Random var5) {
-      int var6 = var1.getBlockMetadata(var2, var3, var4);
-      var1.setBlock(var2, var3, var4, 0);
-      WorldGenBigMushroom var7 = null;
+   public boolean grow(World world, int i, int j, int k, Random random, boolean bonemeal, Player player, ItemStack itemstack) {
+      int l = world.getBlockMetadata(i, j, k);
+      world.setBlock(i, j, k, 0);
+      boolean grown = false;
+      StructureGrowEvent event = null;
+      Location location = new Location(world.getWorld(), (double)i, (double)j, (double)k);
+      WorldGenBigMushroom worldgenhugemushroom = null;
       if(this.blockID == Block.mushroomBrown.blockID) {
-         var7 = new WorldGenBigMushroom(0);
+         event = new StructureGrowEvent(location, TreeType.BROWN_MUSHROOM, bonemeal, player, new ArrayList());
+         worldgenhugemushroom = new WorldGenBigMushroom(0);
       } else if(this.blockID == Block.mushroomRed.blockID) {
-         var7 = new WorldGenBigMushroom(1);
+         event = new StructureGrowEvent(location, TreeType.RED_MUSHROOM, bonemeal, player, new ArrayList());
+         worldgenhugemushroom = new WorldGenBigMushroom(1);
+      }
+
+      if(worldgenhugemushroom != null && event != null) {
+         grown = worldgenhugemushroom.grow((BlockChangeDelegate)world, random, i, j, k, event, itemstack, world.getWorld());
+         if(event.isFromBonemeal() && itemstack != null) {
+            --itemstack.stackSize;
+         }
       }
 
-      if(var7 != null && var7.generate(var1, var5, var2, var3, var4)) {
+      if(grown && !event.isCancelled()) {
          return true;
       } else {
-         var1.setBlockAndMetadata(var2, var3, var4, this.blockID, var6);
+         world.setBlockAndMetadata(i, j, k, this.blockID, l);
          return false;
       }
    }
Binary files mcp-mcdev/net/minecraft/src/BlockMycelium.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockMycelium.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockMycelium.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockMycelium.java
--- mcp-mcdev/net/minecraft/src/BlockMycelium.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockMycelium.java	2012-11-29 20:44:42.000000000 -0800
@@ -5,40 +5,58 @@
 import net.minecraft.src.CreativeTabs;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.block.BlockFadeEvent;
+import org.bukkit.event.block.BlockSpreadEvent;
 
 public class BlockMycelium extends Block {
 
-   protected BlockMycelium(int var1) {
-      super(var1, Material.grass);
+   protected BlockMycelium(int i) {
+      super(i, Material.grass);
       this.blockIndexInTexture = 77;
       this.setTickRandomly(true);
       this.setCreativeTab(CreativeTabs.tabBlock);
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      return var1 == 1?78:(var1 == 0?2:77);
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      return i == 1?78:(i == 0?2:77);
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote) {
-         if(var1.getBlockLightValue(var2, var3 + 1, var4) < 4 && Block.lightOpacity[var1.getBlockId(var2, var3 + 1, var4)] > 2) {
-            var1.setBlockWithNotify(var2, var3, var4, Block.dirt.blockID);
-         } else if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-            for(int var6 = 0; var6 < 4; ++var6) {
-               int var7 = var2 + var5.nextInt(3) - 1;
-               int var8 = var3 + var5.nextInt(5) - 3;
-               int var9 = var4 + var5.nextInt(3) - 1;
-               int var10 = var1.getBlockId(var7, var8 + 1, var9);
-               if(var1.getBlockId(var7, var8, var9) == Block.dirt.blockID && var1.getBlockLightValue(var7, var8 + 1, var9) >= 4 && Block.lightOpacity[var10] <= 2) {
-                  var1.setBlockWithNotify(var7, var8, var9, this.blockID);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote) {
+         if(world.getBlockLightValue(i, j + 1, k) < 4 && Block.lightOpacity[world.getBlockId(i, j + 1, k)] > 2) {
+            CraftWorld var14 = world.getWorld();
+            BlockState var15 = var14.getBlockAt(i, j, k).getState();
+            var15.setTypeId(Block.dirt.blockID);
+            BlockFadeEvent var16 = new BlockFadeEvent(var15.getBlock(), var15);
+            world.getServer().getPluginManager().callEvent(var16);
+            if(!var16.isCancelled()) {
+               var15.update(true);
+            }
+         } else if(world.getBlockLightValue(i, j + 1, k) >= 9) {
+            for(int l = 0; l < 4; ++l) {
+               int i1 = i + random.nextInt(3) - 1;
+               int j1 = j + random.nextInt(5) - 3;
+               int k1 = k + random.nextInt(3) - 1;
+               int l1 = world.getBlockId(i1, j1 + 1, k1);
+               if(world.getBlockId(i1, j1, k1) == Block.dirt.blockID && world.getBlockLightValue(i1, j1 + 1, k1) >= 4 && Block.lightOpacity[l1] <= 2) {
+                  CraftWorld bworld = world.getWorld();
+                  BlockState blockState = bworld.getBlockAt(i1, j1, k1).getState();
+                  blockState.setTypeId(this.blockID);
+                  BlockSpreadEvent event = new BlockSpreadEvent(blockState.getBlock(), bworld.getBlockAt(i, j, k), blockState);
+                  world.getServer().getPluginManager().callEvent(event);
+                  if(!event.isCancelled()) {
+                     blockState.update(true);
+                  }
                }
             }
          }
-
       }
+
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
-      return Block.dirt.idDropped(0, var2, var3);
+   public int idDropped(int i, Random random, int j) {
+      return Block.dirt.idDropped(0, random, j);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockNetherStalk.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockNetherStalk.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockNetherStalk.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockNetherStalk.java
--- mcp-mcdev/net/minecraft/src/BlockNetherStalk.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockNetherStalk.java	2012-11-29 20:44:42.000000000 -0800
@@ -7,65 +7,66 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class BlockNetherStalk extends BlockFlower {
 
-   protected BlockNetherStalk(int var1) {
-      super(var1, 226);
+   protected BlockNetherStalk(int i) {
+      super(i, 226);
       this.setTickRandomly(true);
-      float var2 = 0.5F;
-      this.setBlockBounds(0.5F - var2, 0.0F, 0.5F - var2, 0.5F + var2, 0.25F, 0.5F + var2);
+      float f = 0.5F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.25F, 0.5F + f);
       this.setCreativeTab((CreativeTabs)null);
    }
 
-   protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-      return var1 == Block.slowSand.blockID;
+   protected boolean canThisPlantGrowOnThisBlockID(int i) {
+      return i == Block.slowSand.blockID;
    }
 
-   public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-      return this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
+   public boolean canBlockStay(World world, int i, int j, int k) {
+      return this.canThisPlantGrowOnThisBlockID(world.getBlockId(i, j - 1, k));
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      int var6 = var1.getBlockMetadata(var2, var3, var4);
-      if(var6 < 3 && var5.nextInt(10) == 0) {
-         ++var6;
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      int l = world.getBlockMetadata(i, j, k);
+      if(l < 3 && random.nextInt(10) == 0) {
+         ++l;
+         CraftEventFactory.handleBlockGrowEvent(world, i, j, k, this.blockID, l);
       }
 
-      super.updateTick(var1, var2, var3, var4, var5);
+      super.updateTick(world, i, j, k, random);
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      return var2 >= 3?this.blockIndexInTexture + 2:(var2 > 0?this.blockIndexInTexture + 1:this.blockIndexInTexture);
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      return j >= 3?this.blockIndexInTexture + 2:(j > 0?this.blockIndexInTexture + 1:this.blockIndexInTexture);
    }
 
    public int getRenderType() {
       return 6;
    }
 
-   public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-      if(!var1.isRemote) {
-         int var8 = 1;
-         if(var5 >= 3) {
-            var8 = 2 + var1.rand.nextInt(3);
-            if(var7 > 0) {
-               var8 += var1.rand.nextInt(var7 + 1);
+   public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f, int i1) {
+      if(!world.isRemote) {
+         int j1 = 1;
+         if(l >= 3) {
+            j1 = 2 + world.rand.nextInt(3);
+            if(i1 > 0) {
+               j1 += world.rand.nextInt(i1 + 1);
             }
          }
 
-         for(int var9 = 0; var9 < var8; ++var9) {
-            this.dropBlockAsItem_do(var1, var2, var3, var4, new ItemStack(Item.netherStalkSeeds));
+         for(int k1 = 0; k1 < j1; ++k1) {
+            this.dropBlockAsItem_do(world, i, j, k, new ItemStack(Item.netherStalkSeeds));
          }
-
       }
+
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return 0;
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 0;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockNetherrack.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockNetherrack.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockNetherrack.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockNetherrack.java
--- mcp-mcdev/net/minecraft/src/BlockNetherrack.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockNetherrack.java	2012-11-29 20:44:42.000000000 -0800
@@ -3,11 +3,23 @@
 import net.minecraft.src.Block;
 import net.minecraft.src.CreativeTabs;
 import net.minecraft.src.Material;
+import net.minecraft.src.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockNetherrack extends Block {
 
-   public BlockNetherrack(int var1, int var2) {
-      super(var1, var2, Material.rock);
+   public BlockNetherrack(int i, int j) {
+      super(i, j, Material.rock);
       this.setCreativeTab(CreativeTabs.tabBlock);
    }
+
+   public void doPhysics(World world, int i, int j, int k, int l) {
+      if(Block.blocksList[l] != null && Block.blocksList[l].canProvidePower()) {
+         org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+         int power = block.getBlockPower();
+         BlockRedstoneEvent event = new BlockRedstoneEvent(block, power, power);
+         world.getServer().getPluginManager().callEvent(event);
+      }
+
+   }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockOre.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockOre.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockOre.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockOre.java
--- mcp-mcdev/net/minecraft/src/BlockOre.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockOre.java	2012-11-29 20:44:42.000000000 -0800
@@ -10,52 +10,56 @@
 
 public class BlockOre extends Block {
 
-   public BlockOre(int var1, int var2) {
-      super(var1, var2, Material.rock);
+   public BlockOre(int i, int j) {
+      super(i, j, Material.rock);
       this.setCreativeTab(CreativeTabs.tabBlock);
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return this.blockID == Block.oreCoal.blockID?Item.coal.shiftedIndex:(this.blockID == Block.oreDiamond.blockID?Item.diamond.shiftedIndex:(this.blockID == Block.oreLapis.blockID?Item.dyePowder.shiftedIndex:(this.blockID == Block.oreEmerald.blockID?Item.emerald.shiftedIndex:this.blockID)));
    }
 
-   public int quantityDropped(Random var1) {
-      return this.blockID == Block.oreLapis.blockID?4 + var1.nextInt(5):1;
+   public int quantityDropped(Random random) {
+      return this.blockID == Block.oreLapis.blockID?4 + random.nextInt(5):1;
    }
 
-   public int quantityDroppedWithBonus(int var1, Random var2) {
-      if(var1 > 0 && this.blockID != this.idDropped(0, var2, var1)) {
-         int var3 = var2.nextInt(var1 + 2) - 1;
-         if(var3 < 0) {
-            var3 = 0;
+   public int quantityDroppedWithBonus(int i, Random random) {
+      if(i > 0 && this.blockID != this.idDropped(0, random, i)) {
+         int j = random.nextInt(i + 2) - 1;
+         if(j < 0) {
+            j = 0;
          }
 
-         return this.quantityDropped(var2) * (var3 + 1);
+         return this.quantityDropped(random) * (j + 1);
       } else {
-         return this.quantityDropped(var2);
+         return this.quantityDropped(random);
       }
    }
 
-   public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-      super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6, var7);
-      if(this.idDropped(var5, var1.rand, var7) != this.blockID) {
-         int var8 = 0;
+   public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f, int i1) {
+      super.dropBlockAsItemWithChance(world, i, j, k, l, f, i1);
+   }
+
+   public int getExpDrop(World world, int l, int i1) {
+      if(this.idDropped(l, world.rand, i1) != this.blockID) {
+         int j1 = 0;
          if(this.blockID == Block.oreCoal.blockID) {
-            var8 = MathHelper.getRandomIntegerInRange(var1.rand, 0, 2);
+            j1 = MathHelper.getRandomIntegerInRange(world.rand, 0, 2);
          } else if(this.blockID == Block.oreDiamond.blockID) {
-            var8 = MathHelper.getRandomIntegerInRange(var1.rand, 3, 7);
+            j1 = MathHelper.getRandomIntegerInRange(world.rand, 3, 7);
          } else if(this.blockID == Block.oreEmerald.blockID) {
-            var8 = MathHelper.getRandomIntegerInRange(var1.rand, 3, 7);
+            j1 = MathHelper.getRandomIntegerInRange(world.rand, 3, 7);
          } else if(this.blockID == Block.oreLapis.blockID) {
-            var8 = MathHelper.getRandomIntegerInRange(var1.rand, 2, 5);
+            j1 = MathHelper.getRandomIntegerInRange(world.rand, 2, 5);
          }
 
-         this.dropXpOnBlockBreak(var1, var2, var3, var4, var8);
+         return j1;
+      } else {
+         return 0;
       }
-
    }
 
-   public int damageDropped(int var1) {
+   public int damageDropped(int i) {
       return this.blockID == Block.oreLapis.blockID?4:0;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockPistonBase.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPistonBase.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockPistonBase.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPistonBase.java
--- mcp-mcdev/net/minecraft/src/BlockPistonBase.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPistonBase.java	2012-11-29 20:44:41.000000000 -0800
@@ -16,23 +16,26 @@
 import net.minecraft.src.TileEntity;
 import net.minecraft.src.TileEntityPiston;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.event.block.BlockPistonExtendEvent;
+import org.bukkit.event.block.BlockPistonRetractEvent;
 
 public class BlockPistonBase extends Block {
 
    private boolean isSticky;
 
 
-   public BlockPistonBase(int var1, int var2, boolean var3) {
-      super(var1, var2, Material.piston);
-      this.isSticky = var3;
+   public BlockPistonBase(int i, int j, boolean flag) {
+      super(i, j, Material.piston);
+      this.isSticky = flag;
       this.setStepSound(soundStoneFootstep);
       this.setHardness(0.5F);
       this.setCreativeTab(CreativeTabs.tabRedstone);
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      int var3 = getOrientation(var2);
-      return var3 > 5?this.blockIndexInTexture:(var1 == var3?(!isExtended(var2) && this.minX <= 0.0D && this.minY <= 0.0D && this.minZ <= 0.0D && this.maxX >= 1.0D && this.maxY >= 1.0D && this.maxZ >= 1.0D?this.blockIndexInTexture:110):(var1 == Facing.faceToSide[var3]?109:108));
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      int k = getOrientation(j);
+      return k > 5?this.blockIndexInTexture:(i == k?(!isExtended(j) && this.minX <= 0.0D && this.minY <= 0.0D && this.minZ <= 0.0D && this.maxX >= 1.0D && this.maxY >= 1.0D && this.maxZ >= 1.0D?this.blockIndexInTexture:110):(i == Facing.faceToSide[k]?109:108));
    }
 
    public int getRenderType() {
@@ -43,118 +46,133 @@
       return false;
    }
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
       return false;
    }
 
-   public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
-      int var6 = determineOrientation(var1, var2, var3, var4, (EntityPlayer)var5);
-      var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-      if(!var1.isRemote) {
-         this.updatePistonState(var1, var2, var3, var4);
+   public void onBlockPlacedBy(World world, int i, int j, int k, EntityLiving entityliving) {
+      int l = determineOrientation(world, i, j, k, (EntityPlayer)entityliving);
+      world.setBlockMetadataWithNotify(i, j, k, l);
+      if(!world.isRemote) {
+         this.updatePistonState(world, i, j, k);
       }
 
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(!var1.isRemote) {
-         this.updatePistonState(var1, var2, var3, var4);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(!world.isRemote) {
+         this.updatePistonState(world, i, j, k);
       }
 
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      if(!var1.isRemote && var1.getBlockTileEntity(var2, var3, var4) == null) {
-         this.updatePistonState(var1, var2, var3, var4);
+   public void onBlockAdded(World world, int i, int j, int k) {
+      if(!world.isRemote && world.getBlockTileEntity(i, j, k) == null) {
+         this.updatePistonState(world, i, j, k);
       }
 
    }
 
-   private void updatePistonState(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      int var6 = getOrientation(var5);
-      if(var6 != 7) {
-         boolean var7 = this.isIndirectlyPowered(var1, var2, var3, var4, var6);
-         if(var7 && !isExtended(var5)) {
-            if(canExtend(var1, var2, var3, var4, var6)) {
-               var1.addBlockEvent(var2, var3, var4, this.blockID, 0, var6);
+   private void updatePistonState(World world, int i, int j, int k) {
+      int l = world.getBlockMetadata(i, j, k);
+      int i1 = getOrientation(l);
+      if(i1 != 7) {
+         boolean flag = this.isIndirectlyPowered(world, i, j, k, i1);
+         if(flag && !isExtended(l)) {
+            int block1 = i(world, i, j, k, i1);
+            if(block1 >= 0) {
+               org.bukkit.block.Block event2 = world.getWorld().getBlockAt(i, j, k);
+               BlockPistonExtendEvent event1 = new BlockPistonExtendEvent(event2, block1, CraftBlock.notchToBlockFace(i1));
+               world.getServer().getPluginManager().callEvent(event1);
+               if(event1.isCancelled()) {
+                  return;
+               }
+
+               world.addBlockEvent(i, j, k, this.blockID, 0, i1);
+            }
+         } else if(!flag && isExtended(l)) {
+            org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+            BlockPistonRetractEvent event = new BlockPistonRetractEvent(block, CraftBlock.notchToBlockFace(i1));
+            world.getServer().getPluginManager().callEvent(event);
+            if(event.isCancelled()) {
+               return;
             }
-         } else if(!var7 && isExtended(var5)) {
-            var1.addBlockEvent(var2, var3, var4, this.blockID, 1, var6);
-         }
 
+            world.addBlockEvent(i, j, k, this.blockID, 1, i1);
+         }
       }
+
    }
 
-   private boolean isIndirectlyPowered(World var1, int var2, int var3, int var4, int var5) {
-      return var5 != 0 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3 - 1, var4, 0)?true:(var5 != 1 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3 + 1, var4, 1)?true:(var5 != 2 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 - 1, 2)?true:(var5 != 3 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 + 1, 3)?true:(var5 != 5 && var1.isBlockIndirectlyProvidingPowerTo(var2 + 1, var3, var4, 5)?true:(var5 != 4 && var1.isBlockIndirectlyProvidingPowerTo(var2 - 1, var3, var4, 4)?true:(var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4, 0)?true:(var1.isBlockIndirectlyProvidingPowerTo(var2, var3 + 2, var4, 1)?true:(var1.isBlockIndirectlyProvidingPowerTo(var2, var3 + 1, var4 - 1, 2)?true:(var1.isBlockIndirectlyProvidingPowerTo(var2, var3 + 1, var4 + 1, 3)?true:(var1.isBlockIndirectlyProvidingPowerTo(var2 - 1, var3 + 1, var4, 4)?true:var1.isBlockIndirectlyProvidingPowerTo(var2 + 1, var3 + 1, var4, 5)))))))))));
+   private boolean isIndirectlyPowered(World world, int i, int j, int k, int l) {
+      return l != 0 && world.isBlockIndirectlyProvidingPowerTo(i, j - 1, k, 0)?true:(l != 1 && world.isBlockIndirectlyProvidingPowerTo(i, j + 1, k, 1)?true:(l != 2 && world.isBlockIndirectlyProvidingPowerTo(i, j, k - 1, 2)?true:(l != 3 && world.isBlockIndirectlyProvidingPowerTo(i, j, k + 1, 3)?true:(l != 5 && world.isBlockIndirectlyProvidingPowerTo(i + 1, j, k, 5)?true:(l != 4 && world.isBlockIndirectlyProvidingPowerTo(i - 1, j, k, 4)?true:(world.isBlockIndirectlyProvidingPowerTo(i, j, k, 0)?true:(world.isBlockIndirectlyProvidingPowerTo(i, j + 2, k, 1)?true:(world.isBlockIndirectlyProvidingPowerTo(i, j + 1, k - 1, 2)?true:(world.isBlockIndirectlyProvidingPowerTo(i, j + 1, k + 1, 3)?true:(world.isBlockIndirectlyProvidingPowerTo(i - 1, j + 1, k, 4)?true:world.isBlockIndirectlyProvidingPowerTo(i + 1, j + 1, k, 5)))))))))));
    }
 
-   public void onBlockEventReceived(World var1, int var2, int var3, int var4, int var5, int var6) {
-      if(var5 == 0) {
-         var1.setBlockMetadata(var2, var3, var4, var6 | 8);
+   public void onBlockEventReceived(World world, int i, int j, int k, int l, int i1) {
+      if(l == 0) {
+         world.setBlockMetadata(i, j, k, i1 | 8);
       } else {
-         var1.setBlockMetadata(var2, var3, var4, var6);
+         world.setBlockMetadata(i, j, k, i1);
       }
 
-      if(var5 == 0) {
-         if(this.tryExtend(var1, var2, var3, var4, var6)) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, var6 | 8);
-            var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "tile.piston.out", 0.5F, var1.rand.nextFloat() * 0.25F + 0.6F);
+      if(l == 0) {
+         if(this.tryExtend(world, i, j, k, i1)) {
+            world.setBlockMetadataWithNotify(i, j, k, i1 | 8);
+            world.playSoundEffect((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "tile.piston.out", 0.5F, world.rand.nextFloat() * 0.25F + 0.6F);
          } else {
-            var1.setBlockMetadata(var2, var3, var4, var6);
+            world.setBlockMetadata(i, j, k, i1);
          }
-      } else if(var5 == 1) {
-         TileEntity var7 = var1.getBlockTileEntity(var2 + Facing.offsetsXForSide[var6], var3 + Facing.offsetsYForSide[var6], var4 + Facing.offsetsZForSide[var6]);
-         if(var7 instanceof TileEntityPiston) {
-            ((TileEntityPiston)var7).clearPistonTileEntity();
+      } else if(l == 1) {
+         TileEntity tileentity = world.getBlockTileEntity(i + Facing.offsetsXForSide[i1], j + Facing.offsetsYForSide[i1], k + Facing.offsetsZForSide[i1]);
+         if(tileentity instanceof TileEntityPiston) {
+            ((TileEntityPiston)tileentity).clearPistonTileEntity();
          }
 
-         var1.setBlockAndMetadata(var2, var3, var4, Block.pistonMoving.blockID, var6);
-         var1.setBlockTileEntity(var2, var3, var4, BlockPistonMoving.getTileEntity(this.blockID, var6, var6, false, true));
+         world.setBlockAndMetadata(i, j, k, Block.pistonMoving.blockID, i1);
+         world.setBlockTileEntity(i, j, k, BlockPistonMoving.getTileEntity(this.blockID, i1, i1, false, true));
          if(this.isSticky) {
-            int var8 = var2 + Facing.offsetsXForSide[var6] * 2;
-            int var9 = var3 + Facing.offsetsYForSide[var6] * 2;
-            int var10 = var4 + Facing.offsetsZForSide[var6] * 2;
-            int var11 = var1.getBlockId(var8, var9, var10);
-            int var12 = var1.getBlockMetadata(var8, var9, var10);
-            boolean var13 = false;
-            if(var11 == Block.pistonMoving.blockID) {
-               TileEntity var14 = var1.getBlockTileEntity(var8, var9, var10);
-               if(var14 instanceof TileEntityPiston) {
-                  TileEntityPiston var15 = (TileEntityPiston)var14;
-                  if(var15.getPistonOrientation() == var6 && var15.isExtending()) {
-                     var15.clearPistonTileEntity();
-                     var11 = var15.getStoredBlockID();
-                     var12 = var15.getBlockMetadata();
-                     var13 = true;
+            int j1 = i + Facing.offsetsXForSide[i1] * 2;
+            int k1 = j + Facing.offsetsYForSide[i1] * 2;
+            int l1 = k + Facing.offsetsZForSide[i1] * 2;
+            int i2 = world.getBlockId(j1, k1, l1);
+            int j2 = world.getBlockMetadata(j1, k1, l1);
+            boolean flag = false;
+            if(i2 == Block.pistonMoving.blockID) {
+               TileEntity tileentity1 = world.getBlockTileEntity(j1, k1, l1);
+               if(tileentity1 instanceof TileEntityPiston) {
+                  TileEntityPiston tileentitypiston = (TileEntityPiston)tileentity1;
+                  if(tileentitypiston.getPistonOrientation() == i1 && tileentitypiston.isExtending()) {
+                     tileentitypiston.clearPistonTileEntity();
+                     i2 = tileentitypiston.getStoredBlockID();
+                     j2 = tileentitypiston.getBlockMetadata();
+                     flag = true;
                   }
                }
             }
 
-            if(!var13 && var11 > 0 && canPushBlock(var11, var1, var8, var9, var10, false) && (Block.blocksList[var11].getMobilityFlag() == 0 || var11 == Block.pistonBase.blockID || var11 == Block.pistonStickyBase.blockID)) {
-               var2 += Facing.offsetsXForSide[var6];
-               var3 += Facing.offsetsYForSide[var6];
-               var4 += Facing.offsetsZForSide[var6];
-               var1.setBlockAndMetadata(var2, var3, var4, Block.pistonMoving.blockID, var12);
-               var1.setBlockTileEntity(var2, var3, var4, BlockPistonMoving.getTileEntity(var11, var12, var6, false, false));
-               var1.setBlockWithNotify(var8, var9, var10, 0);
-            } else if(!var13) {
-               var1.setBlockWithNotify(var2 + Facing.offsetsXForSide[var6], var3 + Facing.offsetsYForSide[var6], var4 + Facing.offsetsZForSide[var6], 0);
+            if(!flag && i2 > 0 && canPushBlock(i2, world, j1, k1, l1, false) && (Block.blocksList[i2].getMobilityFlag() == 0 || i2 == Block.pistonBase.blockID || i2 == Block.pistonStickyBase.blockID)) {
+               i += Facing.offsetsXForSide[i1];
+               j += Facing.offsetsYForSide[i1];
+               k += Facing.offsetsZForSide[i1];
+               world.setBlockAndMetadata(i, j, k, Block.pistonMoving.blockID, j2);
+               world.setBlockTileEntity(i, j, k, BlockPistonMoving.getTileEntity(i2, j2, i1, false, false));
+               world.setBlockWithNotify(j1, k1, l1, 0);
+            } else if(!flag) {
+               world.setBlockWithNotify(i + Facing.offsetsXForSide[i1], j + Facing.offsetsYForSide[i1], k + Facing.offsetsZForSide[i1], 0);
             }
          } else {
-            var1.setBlockWithNotify(var2 + Facing.offsetsXForSide[var6], var3 + Facing.offsetsYForSide[var6], var4 + Facing.offsetsZForSide[var6], 0);
+            world.setBlockWithNotify(i + Facing.offsetsXForSide[i1], j + Facing.offsetsYForSide[i1], k + Facing.offsetsZForSide[i1], 0);
          }
 
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "tile.piston.in", 0.5F, var1.rand.nextFloat() * 0.15F + 0.6F);
+         world.playSoundEffect((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "tile.piston.in", 0.5F, world.rand.nextFloat() * 0.15F + 0.6F);
       }
 
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      if(isExtended(var5)) {
-         switch(getOrientation(var5)) {
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k);
+      if(isExtended(l)) {
+         switch(getOrientation(l)) {
          case 0:
             this.setBlockBounds(0.0F, 0.25F, 0.0F, 1.0F, 1.0F, 1.0F);
             break;
@@ -183,157 +201,157 @@
       this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
    }
 
-   public void addCollidingBlockToList(World var1, int var2, int var3, int var4, AxisAlignedBB var5, List var6, Entity var7) {
+   public void addCollidingBlockToList(World world, int i, int j, int k, AxisAlignedBB axisalignedbb, List list, Entity entity) {
       this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-      super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+      super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-      this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-      return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
+      this.setBlockBoundsBasedOnState(world, i, j, k);
+      return super.getCollisionBoundingBoxFromPool(world, i, j, k);
    }
 
    public boolean renderAsNormalBlock() {
       return false;
    }
 
-   public static int getOrientation(int var0) {
-      return var0 & 7;
+   public static int getOrientation(int i) {
+      return (i & 7) >= Facing.faceToSide.length?0:i & 7;
    }
 
-   public static boolean isExtended(int var0) {
-      return (var0 & 8) != 0;
+   public static boolean isExtended(int i) {
+      return (i & 8) != 0;
    }
 
-   public static int determineOrientation(World var0, int var1, int var2, int var3, EntityPlayer var4) {
-      if(MathHelper.abs((float)var4.posX - (float)var1) < 2.0F && MathHelper.abs((float)var4.posZ - (float)var3) < 2.0F) {
-         double var5 = var4.posY + 1.82D - (double)var4.yOffset;
-         if(var5 - (double)var2 > 2.0D) {
+   public static int determineOrientation(World world, int i, int j, int k, EntityPlayer entityhuman) {
+      if(MathHelper.abs((float)entityhuman.posX - (float)i) < 2.0F && MathHelper.abs((float)entityhuman.posZ - (float)k) < 2.0F) {
+         double d0 = entityhuman.posY + 1.82D - (double)entityhuman.yOffset;
+         if(d0 - (double)j > 2.0D) {
             return 1;
          }
 
-         if((double)var2 - var5 > 0.0D) {
+         if((double)j - d0 > 0.0D) {
             return 0;
          }
       }
 
-      int var7 = MathHelper.floor_double((double)(var4.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
-      return var7 == 0?2:(var7 == 1?5:(var7 == 2?3:(var7 == 3?4:0)));
+      int l = MathHelper.floor_double((double)(entityhuman.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
+      return l == 0?2:(l == 1?5:(l == 2?3:(l == 3?4:0)));
    }
 
-   private static boolean canPushBlock(int var0, World var1, int var2, int var3, int var4, boolean var5) {
-      if(var0 == Block.obsidian.blockID) {
+   private static boolean canPushBlock(int i, World world, int j, int k, int l, boolean flag) {
+      if(i == Block.obsidian.blockID) {
          return false;
       } else {
-         if(var0 != Block.pistonBase.blockID && var0 != Block.pistonStickyBase.blockID) {
-            if(Block.blocksList[var0].getBlockHardness(var1, var2, var3, var4) == -1.0F) {
+         if(i != Block.pistonBase.blockID && i != Block.pistonStickyBase.blockID) {
+            if(Block.blocksList[i].getBlockHardness(world, j, k, l) == -1.0F) {
                return false;
             }
 
-            if(Block.blocksList[var0].getMobilityFlag() == 2) {
+            if(Block.blocksList[i].getMobilityFlag() == 2) {
                return false;
             }
 
-            if(!var5 && Block.blocksList[var0].getMobilityFlag() == 1) {
+            if(!flag && Block.blocksList[i].getMobilityFlag() == 1) {
                return false;
             }
-         } else if(isExtended(var1.getBlockMetadata(var2, var3, var4))) {
+         } else if(isExtended(world.getBlockMetadata(j, k, l))) {
             return false;
          }
 
-         return !(Block.blocksList[var0] instanceof BlockContainer);
+         return !(Block.blocksList[i] instanceof BlockContainer);
       }
    }
 
-   private static boolean canExtend(World var0, int var1, int var2, int var3, int var4) {
-      int var5 = var1 + Facing.offsetsXForSide[var4];
-      int var6 = var2 + Facing.offsetsYForSide[var4];
-      int var7 = var3 + Facing.offsetsZForSide[var4];
-      int var8 = 0;
+   private static int i(World world, int i, int j, int k, int l) {
+      int i1 = i + Facing.offsetsXForSide[l];
+      int j1 = j + Facing.offsetsYForSide[l];
+      int k1 = k + Facing.offsetsZForSide[l];
+      int l1 = 0;
 
       while(true) {
-         if(var8 < 13) {
-            if(var6 <= 0 || var6 >= 255) {
-               return false;
+         if(l1 < 13) {
+            if(j1 <= 0 || j1 >= 255) {
+               return -1;
             }
 
-            int var9 = var0.getBlockId(var5, var6, var7);
-            if(var9 != 0) {
-               if(!canPushBlock(var9, var0, var5, var6, var7, true)) {
-                  return false;
+            int i2 = world.getBlockId(i1, j1, k1);
+            if(i2 != 0) {
+               if(!canPushBlock(i2, world, i1, j1, k1, true)) {
+                  return -1;
                }
 
-               if(Block.blocksList[var9].getMobilityFlag() != 1) {
-                  if(var8 == 12) {
-                     return false;
+               if(Block.blocksList[i2].getMobilityFlag() != 1) {
+                  if(l1 == 12) {
+                     return -1;
                   }
 
-                  var5 += Facing.offsetsXForSide[var4];
-                  var6 += Facing.offsetsYForSide[var4];
-                  var7 += Facing.offsetsZForSide[var4];
-                  ++var8;
+                  i1 += Facing.offsetsXForSide[l];
+                  j1 += Facing.offsetsYForSide[l];
+                  k1 += Facing.offsetsZForSide[l];
+                  ++l1;
                   continue;
                }
             }
          }
 
-         return true;
+         return l1;
       }
    }
 
-   private boolean tryExtend(World var1, int var2, int var3, int var4, int var5) {
-      int var6 = var2 + Facing.offsetsXForSide[var5];
-      int var7 = var3 + Facing.offsetsYForSide[var5];
-      int var8 = var4 + Facing.offsetsZForSide[var5];
-      int var9 = 0;
+   private boolean tryExtend(World world, int i, int j, int k, int l) {
+      int i1 = i + Facing.offsetsXForSide[l];
+      int j1 = j + Facing.offsetsYForSide[l];
+      int k1 = k + Facing.offsetsZForSide[l];
+      int l1 = 0;
 
       while(true) {
-         int var10;
-         if(var9 < 13) {
-            if(var7 <= 0 || var7 >= 255) {
+         int i2;
+         if(l1 < 13) {
+            if(j1 <= 0 || j1 >= 255) {
                return false;
             }
 
-            var10 = var1.getBlockId(var6, var7, var8);
-            if(var10 != 0) {
-               if(!canPushBlock(var10, var1, var6, var7, var8, true)) {
+            i2 = world.getBlockId(i1, j1, k1);
+            if(i2 != 0) {
+               if(!canPushBlock(i2, world, i1, j1, k1, true)) {
                   return false;
                }
 
-               if(Block.blocksList[var10].getMobilityFlag() != 1) {
-                  if(var9 == 12) {
+               if(Block.blocksList[i2].getMobilityFlag() != 1) {
+                  if(l1 == 12) {
                      return false;
                   }
 
-                  var6 += Facing.offsetsXForSide[var5];
-                  var7 += Facing.offsetsYForSide[var5];
-                  var8 += Facing.offsetsZForSide[var5];
-                  ++var9;
+                  i1 += Facing.offsetsXForSide[l];
+                  j1 += Facing.offsetsYForSide[l];
+                  k1 += Facing.offsetsZForSide[l];
+                  ++l1;
                   continue;
                }
 
-               Block.blocksList[var10].dropBlockAsItem(var1, var6, var7, var8, var1.getBlockMetadata(var6, var7, var8), 0);
-               var1.setBlockWithNotify(var6, var7, var8, 0);
+               Block.blocksList[i2].dropBlockAsItem(world, i1, j1, k1, world.getBlockMetadata(i1, j1, k1), 0);
+               world.setBlockWithNotify(i1, j1, k1, 0);
             }
          }
 
-         while(var6 != var2 || var7 != var3 || var8 != var4) {
-            var9 = var6 - Facing.offsetsXForSide[var5];
-            var10 = var7 - Facing.offsetsYForSide[var5];
-            int var11 = var8 - Facing.offsetsZForSide[var5];
-            int var12 = var1.getBlockId(var9, var10, var11);
-            int var13 = var1.getBlockMetadata(var9, var10, var11);
-            if(var12 == this.blockID && var9 == var2 && var10 == var3 && var11 == var4) {
-               var1.setBlockAndMetadataWithUpdate(var6, var7, var8, Block.pistonMoving.blockID, var5 | (this.isSticky?8:0), false);
-               var1.setBlockTileEntity(var6, var7, var8, BlockPistonMoving.getTileEntity(Block.pistonExtension.blockID, var5 | (this.isSticky?8:0), var5, true, false));
+         while(i1 != i || j1 != j || k1 != k) {
+            l1 = i1 - Facing.offsetsXForSide[l];
+            i2 = j1 - Facing.offsetsYForSide[l];
+            int j2 = k1 - Facing.offsetsZForSide[l];
+            int k2 = world.getBlockId(l1, i2, j2);
+            int l2 = world.getBlockMetadata(l1, i2, j2);
+            if(k2 == this.blockID && l1 == i && i2 == j && j2 == k) {
+               world.setBlockAndMetadataWithUpdate(i1, j1, k1, Block.pistonMoving.blockID, l | (this.isSticky?8:0), false);
+               world.setBlockTileEntity(i1, j1, k1, BlockPistonMoving.getTileEntity(Block.pistonExtension.blockID, l | (this.isSticky?8:0), l, true, false));
             } else {
-               var1.setBlockAndMetadataWithUpdate(var6, var7, var8, Block.pistonMoving.blockID, var13, false);
-               var1.setBlockTileEntity(var6, var7, var8, BlockPistonMoving.getTileEntity(var12, var13, var5, true, false));
+               world.setBlockAndMetadataWithUpdate(i1, j1, k1, Block.pistonMoving.blockID, l2, false);
+               world.setBlockTileEntity(i1, j1, k1, BlockPistonMoving.getTileEntity(k2, l2, l, true, false));
             }
 
-            var6 = var9;
-            var7 = var10;
-            var8 = var11;
+            i1 = l1;
+            j1 = i2;
+            k1 = j2;
          }
 
          return true;
Binary files mcp-mcdev/net/minecraft/src/BlockPistonExtension.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPistonExtension.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockPistonExtension.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPistonExtension.java
--- mcp-mcdev/net/minecraft/src/BlockPistonExtension.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPistonExtension.java	2012-11-29 20:44:41.000000000 -0800
@@ -16,32 +16,34 @@
    private int headTexture = -1;
 
 
-   public BlockPistonExtension(int var1, int var2) {
-      super(var1, var2, Material.piston);
+   public BlockPistonExtension(int i, int j) {
+      super(i, j, Material.piston);
       this.setStepSound(soundStoneFootstep);
       this.setHardness(0.5F);
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      super.breakBlock(var1, var2, var3, var4, var5, var6);
-      int var7 = Facing.faceToSide[getDirectionMeta(var6)];
-      var2 += Facing.offsetsXForSide[var7];
-      var3 += Facing.offsetsYForSide[var7];
-      var4 += Facing.offsetsZForSide[var7];
-      int var8 = var1.getBlockId(var2, var3, var4);
-      if(var8 == Block.pistonBase.blockID || var8 == Block.pistonStickyBase.blockID) {
-         var6 = var1.getBlockMetadata(var2, var3, var4);
-         if(BlockPistonBase.isExtended(var6)) {
-            Block.blocksList[var8].dropBlockAsItem(var1, var2, var3, var4, var6, 0);
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      super.breakBlock(world, i, j, k, l, i1);
+      if((i1 & 7) < Facing.faceToSide.length) {
+         int j1 = Facing.faceToSide[getDirectionMeta(i1)];
+         i += Facing.offsetsXForSide[j1];
+         j += Facing.offsetsYForSide[j1];
+         k += Facing.offsetsZForSide[j1];
+         int k1 = world.getBlockId(i, j, k);
+         if(k1 == Block.pistonBase.blockID || k1 == Block.pistonStickyBase.blockID) {
+            i1 = world.getBlockMetadata(i, j, k);
+            if(BlockPistonBase.isExtended(i1)) {
+               Block.blocksList[k1].dropBlockAsItem(world, i, j, k, i1, 0);
+               world.setBlockWithNotify(i, j, k, 0);
+            }
          }
-      }
 
+      }
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      int var3 = getDirectionMeta(var2);
-      return var1 == var3?(this.headTexture >= 0?this.headTexture:((var2 & 8) != 0?this.blockIndexInTexture - 1:this.blockIndexInTexture)):(var3 < 6 && var1 == Facing.faceToSide[var3]?107:108);
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      int k = getDirectionMeta(j);
+      return i == k?(this.headTexture >= 0?this.headTexture:((j & 8) != 0?this.blockIndexInTexture - 1:this.blockIndexInTexture)):(k < 6 && i == Facing.faceToSide[k]?107:108);
    }
 
    public int getRenderType() {
@@ -56,64 +58,64 @@
       return false;
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
       return false;
    }
 
-   public boolean canPlaceBlockOnSide(World var1, int var2, int var3, int var4, int var5) {
+   public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l) {
       return false;
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 0;
    }
 
-   public void addCollidingBlockToList(World var1, int var2, int var3, int var4, AxisAlignedBB var5, List var6, Entity var7) {
-      int var8 = var1.getBlockMetadata(var2, var3, var4);
-      switch(getDirectionMeta(var8)) {
+   public void addCollidingBlockToList(World world, int i, int j, int k, AxisAlignedBB axisalignedbb, List list, Entity entity) {
+      int l = world.getBlockMetadata(i, j, k);
+      switch(getDirectionMeta(l)) {
       case 0:
          this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.25F, 1.0F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          this.setBlockBounds(0.375F, 0.25F, 0.375F, 0.625F, 1.0F, 0.625F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          break;
       case 1:
          this.setBlockBounds(0.0F, 0.75F, 0.0F, 1.0F, 1.0F, 1.0F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          this.setBlockBounds(0.375F, 0.0F, 0.375F, 0.625F, 0.75F, 0.625F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          break;
       case 2:
          this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.25F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          this.setBlockBounds(0.25F, 0.375F, 0.25F, 0.75F, 0.625F, 1.0F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          break;
       case 3:
          this.setBlockBounds(0.0F, 0.0F, 0.75F, 1.0F, 1.0F, 1.0F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          this.setBlockBounds(0.25F, 0.375F, 0.0F, 0.75F, 0.625F, 0.75F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          break;
       case 4:
          this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.25F, 1.0F, 1.0F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          this.setBlockBounds(0.375F, 0.25F, 0.25F, 0.625F, 0.75F, 1.0F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          break;
       case 5:
          this.setBlockBounds(0.75F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
          this.setBlockBounds(0.0F, 0.375F, 0.25F, 0.75F, 0.625F, 0.75F);
-         super.addCollidingBlockToList(var1, var2, var3, var4, var5, var6, var7);
+         super.addCollidingBlockToList(world, i, j, k, axisalignedbb, list, entity);
       }
 
       this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      switch(getDirectionMeta(var5)) {
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k);
+      switch(getDirectionMeta(l)) {
       case 0:
          this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.25F, 1.0F);
          break;
@@ -135,18 +137,20 @@
 
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      int var6 = getDirectionMeta(var1.getBlockMetadata(var2, var3, var4));
-      int var7 = var1.getBlockId(var2 - Facing.offsetsXForSide[var6], var3 - Facing.offsetsYForSide[var6], var4 - Facing.offsetsZForSide[var6]);
-      if(var7 != Block.pistonBase.blockID && var7 != Block.pistonStickyBase.blockID) {
-         var1.setBlockWithNotify(var2, var3, var4, 0);
-      } else {
-         Block.blocksList[var7].onNeighborBlockChange(var1, var2 - Facing.offsetsXForSide[var6], var3 - Facing.offsetsYForSide[var6], var4 - Facing.offsetsZForSide[var6], var5);
-      }
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      int i1 = getDirectionMeta(world.getBlockMetadata(i, j, k));
+      if((i1 & 7) < Facing.faceToSide.length) {
+         int j1 = world.getBlockId(i - Facing.offsetsXForSide[i1], j - Facing.offsetsYForSide[i1], k - Facing.offsetsZForSide[i1]);
+         if(j1 != Block.pistonBase.blockID && j1 != Block.pistonStickyBase.blockID) {
+            world.setBlockWithNotify(i, j, k, 0);
+         } else {
+            Block.blocksList[j1].onNeighborBlockChange(world, i - Facing.offsetsXForSide[i1], j - Facing.offsetsYForSide[i1], k - Facing.offsetsZForSide[i1], l);
+         }
 
+      }
    }
 
-   public static int getDirectionMeta(int var0) {
-      return var0 & 7;
+   public static int getDirectionMeta(int i) {
+      return i & 7;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockPortal.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPortal.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockPortal.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPortal.java
--- mcp-mcdev/net/minecraft/src/BlockPortal.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPortal.java	2012-11-29 20:44:41.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.HashSet;
 import java.util.Random;
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.Block;
@@ -9,47 +10,52 @@
 import net.minecraft.src.ItemMonsterPlacer;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.entity.EntityPortalEnterEvent;
+import org.bukkit.event.world.PortalCreateEvent;
+import org.bukkit.event.world.PortalCreateEvent.CreateReason;
 
 public class BlockPortal extends BlockBreakable {
 
-   public BlockPortal(int var1, int var2) {
-      super(var1, var2, Material.portal, false);
+   public BlockPortal(int i, int j) {
+      super(i, j, Material.portal, false);
       this.setTickRandomly(true);
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      super.updateTick(var1, var2, var3, var4, var5);
-      if(var1.provider.isSurfaceWorld() && var5.nextInt(2000) < var1.difficultySetting) {
-         int var6;
-         for(var6 = var3; !var1.doesBlockHaveSolidTopSurface(var2, var6, var4) && var6 > 0; --var6) {
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      super.updateTick(world, i, j, k, random);
+      if(world.provider.isSurfaceWorld() && random.nextInt(2000) < world.difficultySetting) {
+         int l;
+         for(l = j; !world.doesBlockHaveSolidTopSurface(i, l, k) && l > 0; --l) {
             ;
          }
 
-         if(var6 > 0 && !var1.isBlockNormalCube(var2, var6 + 1, var4)) {
-            Entity var7 = ItemMonsterPlacer.spawnCreature(var1, 57, (double)var2 + 0.5D, (double)var6 + 1.1D, (double)var4 + 0.5D);
-            if(var7 != null) {
-               var7.timeUntilPortal = var7.getPortalCooldown();
+         if(l > 0 && !world.isBlockNormalCube(i, l + 1, k)) {
+            Entity entity = ItemMonsterPlacer.spawnCreature(world, 57, (double)i + 0.5D, (double)l + 1.1D, (double)k + 0.5D);
+            if(entity != null) {
+               entity.timeUntilPortal = entity.getPortalCooldown();
             }
          }
       }
 
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      float var5;
-      float var6;
-      if(var1.getBlockId(var2 - 1, var3, var4) != this.blockID && var1.getBlockId(var2 + 1, var3, var4) != this.blockID) {
-         var5 = 0.125F;
-         var6 = 0.5F;
-         this.setBlockBounds(0.5F - var5, 0.0F, 0.5F - var6, 0.5F + var5, 1.0F, 0.5F + var6);
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      float f;
+      float f1;
+      if(iblockaccess.getBlockId(i - 1, j, k) != this.blockID && iblockaccess.getBlockId(i + 1, j, k) != this.blockID) {
+         f = 0.125F;
+         f1 = 0.5F;
+         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f1, 0.5F + f, 1.0F, 0.5F + f1);
       } else {
-         var5 = 0.5F;
-         var6 = 0.125F;
-         this.setBlockBounds(0.5F - var5, 0.0F, 0.5F - var6, 0.5F + var5, 1.0F, 0.5F + var6);
+         f = 0.5F;
+         f1 = 0.125F;
+         this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f1, 0.5F + f, 1.0F, 0.5F + f1);
       }
 
    }
@@ -62,101 +68,117 @@
       return false;
    }
 
-   public boolean tryToCreatePortal(World var1, int var2, int var3, int var4) {
-      byte var5 = 0;
-      byte var6 = 0;
-      if(var1.getBlockId(var2 - 1, var3, var4) == Block.obsidian.blockID || var1.getBlockId(var2 + 1, var3, var4) == Block.obsidian.blockID) {
-         var5 = 1;
+   public boolean tryToCreatePortal(World world, int i, int j, int k) {
+      byte b0 = 0;
+      byte b1 = 0;
+      if(world.getBlockId(i - 1, j, k) == Block.obsidian.blockID || world.getBlockId(i + 1, j, k) == Block.obsidian.blockID) {
+         b0 = 1;
       }
 
-      if(var1.getBlockId(var2, var3, var4 - 1) == Block.obsidian.blockID || var1.getBlockId(var2, var3, var4 + 1) == Block.obsidian.blockID) {
-         var6 = 1;
+      if(world.getBlockId(i, j, k - 1) == Block.obsidian.blockID || world.getBlockId(i, j, k + 1) == Block.obsidian.blockID) {
+         b1 = 1;
       }
 
-      if(var5 == var6) {
+      if(b0 == b1) {
          return false;
       } else {
-         if(var1.getBlockId(var2 - var5, var3, var4 - var6) == 0) {
-            var2 -= var5;
-            var4 -= var6;
-         }
-
-         int var7;
-         int var8;
-         for(var7 = -1; var7 <= 2; ++var7) {
-            for(var8 = -1; var8 <= 3; ++var8) {
-               boolean var9 = var7 == -1 || var7 == 2 || var8 == -1 || var8 == 3;
-               if(var7 != -1 && var7 != 2 || var8 != -1 && var8 != 3) {
-                  int var10 = var1.getBlockId(var2 + var5 * var7, var3 + var8, var4 + var6 * var7);
-                  if(var9) {
-                     if(var10 != Block.obsidian.blockID) {
+         HashSet blocks = new HashSet();
+         CraftWorld bworld = world.getWorld();
+         if(world.getBlockId(i - b0, j, k - b1) == 0) {
+            i -= b0;
+            k -= b1;
+         }
+
+         int l;
+         int i1;
+         for(l = -1; l <= 2; ++l) {
+            for(i1 = -1; i1 <= 3; ++i1) {
+               boolean event = l == -1 || l == 2 || i1 == -1 || i1 == 3;
+               if(l != -1 && l != 2 || i1 != -1 && i1 != 3) {
+                  int j1 = world.getBlockId(i + b0 * l, j + i1, k + b1 * l);
+                  if(event) {
+                     if(j1 != Block.obsidian.blockID) {
                         return false;
                      }
-                  } else if(var10 != 0 && var10 != Block.fire.blockID) {
+
+                     blocks.add(bworld.getBlockAt(i + b0 * l, j + i1, k + b1 * l));
+                  } else if(j1 != 0 && j1 != Block.fire.blockID) {
                      return false;
                   }
                }
             }
          }
 
-         var1.editingBlocks = true;
-
-         for(var7 = 0; var7 < 2; ++var7) {
-            for(var8 = 0; var8 < 3; ++var8) {
-               var1.setBlockWithNotify(var2 + var5 * var7, var3 + var8, var4 + var6 * var7, Block.portal.blockID);
+         for(l = 0; l < 2; ++l) {
+            for(i1 = 0; i1 < 3; ++i1) {
+               blocks.add(bworld.getBlockAt(i + b0 * l, j + i1, k + b1 * l));
             }
          }
 
-         var1.editingBlocks = false;
-         return true;
+         PortalCreateEvent var13 = new PortalCreateEvent(blocks, bworld, CreateReason.FIRE);
+         world.getServer().getPluginManager().callEvent(var13);
+         if(var13.isCancelled()) {
+            return false;
+         } else {
+            world.editingBlocks = true;
+
+            for(l = 0; l < 2; ++l) {
+               for(i1 = 0; i1 < 3; ++i1) {
+                  world.setBlockWithNotify(i + b0 * l, j + i1, k + b1 * l, Block.portal.blockID);
+               }
+            }
+
+            world.editingBlocks = false;
+            return true;
+         }
       }
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      byte var6 = 0;
-      byte var7 = 1;
-      if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID || var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-         var6 = 1;
-         var7 = 0;
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      byte b0 = 0;
+      byte b1 = 1;
+      if(world.getBlockId(i - 1, j, k) == this.blockID || world.getBlockId(i + 1, j, k) == this.blockID) {
+         b0 = 1;
+         b1 = 0;
       }
 
-      int var8;
-      for(var8 = var3; var1.getBlockId(var2, var8 - 1, var4) == this.blockID; --var8) {
+      int i1;
+      for(i1 = j; world.getBlockId(i, i1 - 1, k) == this.blockID; --i1) {
          ;
       }
 
-      if(var1.getBlockId(var2, var8 - 1, var4) != Block.obsidian.blockID) {
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+      if(world.getBlockId(i, i1 - 1, k) != Block.obsidian.blockID) {
+         world.setBlockWithNotify(i, j, k, 0);
       } else {
-         int var9;
-         for(var9 = 1; var9 < 4 && var1.getBlockId(var2, var8 + var9, var4) == this.blockID; ++var9) {
+         int j1;
+         for(j1 = 1; j1 < 4 && world.getBlockId(i, i1 + j1, k) == this.blockID; ++j1) {
             ;
          }
 
-         if(var9 == 3 && var1.getBlockId(var2, var8 + var9, var4) == Block.obsidian.blockID) {
-            boolean var10 = var1.getBlockId(var2 - 1, var3, var4) == this.blockID || var1.getBlockId(var2 + 1, var3, var4) == this.blockID;
-            boolean var11 = var1.getBlockId(var2, var3, var4 - 1) == this.blockID || var1.getBlockId(var2, var3, var4 + 1) == this.blockID;
-            if(var10 && var11) {
-               var1.setBlockWithNotify(var2, var3, var4, 0);
-            } else {
-               if((var1.getBlockId(var2 + var6, var3, var4 + var7) != Block.obsidian.blockID || var1.getBlockId(var2 - var6, var3, var4 - var7) != this.blockID) && (var1.getBlockId(var2 - var6, var3, var4 - var7) != Block.obsidian.blockID || var1.getBlockId(var2 + var6, var3, var4 + var7) != this.blockID)) {
-                  var1.setBlockWithNotify(var2, var3, var4, 0);
-               }
-
+         if(j1 == 3 && world.getBlockId(i, i1 + j1, k) == Block.obsidian.blockID) {
+            boolean flag = world.getBlockId(i - 1, j, k) == this.blockID || world.getBlockId(i + 1, j, k) == this.blockID;
+            boolean flag1 = world.getBlockId(i, j, k - 1) == this.blockID || world.getBlockId(i, j, k + 1) == this.blockID;
+            if(flag && flag1) {
+               world.setBlockWithNotify(i, j, k, 0);
+            } else if((world.getBlockId(i + b0, j, k + b1) != Block.obsidian.blockID || world.getBlockId(i - b0, j, k - b1) != this.blockID) && (world.getBlockId(i - b0, j, k - b1) != Block.obsidian.blockID || world.getBlockId(i + b0, j, k + b1) != this.blockID)) {
+               world.setBlockWithNotify(i, j, k, 0);
             }
          } else {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+            world.setBlockWithNotify(i, j, k, 0);
          }
       }
+
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 0;
    }
 
-   public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-      if(var5.ridingEntity == null && var5.riddenByEntity == null) {
-         var5.setInPortal();
+   public void onEntityCollidedWithBlock(World world, int i, int j, int k, Entity entity) {
+      if(entity.ridingEntity == null && entity.riddenByEntity == null) {
+         EntityPortalEnterEvent event = new EntityPortalEnterEvent(entity.getBukkitEntity(), new Location(world.getWorld(), (double)i, (double)j, (double)k));
+         world.getServer().getPluginManager().callEvent(event);
+         entity.setInPortal();
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/BlockPressurePlate.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPressurePlate.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockPressurePlate.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPressurePlate.java
--- mcp-mcdev/net/minecraft/src/BlockPressurePlate.java	2012-11-29 21:15:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPressurePlate.java	2012-11-29 20:44:41.000000000 -0800
@@ -12,28 +12,36 @@
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.EnumMobType;
 import net.minecraft.src.IBlockAccess;
+import net.minecraft.src.ItemStack;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.BlockRedstoneEvent;
+import org.bukkit.event.entity.EntityInteractEvent;
+import org.bukkit.plugin.PluginManager;
 
 public class BlockPressurePlate extends Block {
 
    private EnumMobType triggerMobType;
 
 
-   protected BlockPressurePlate(int var1, int var2, EnumMobType var3, Material var4) {
-      super(var1, var2, var4);
-      this.triggerMobType = var3;
+   protected BlockPressurePlate(int i, int j, EnumMobType enummobtype, Material material) {
+      super(i, j, material);
+      this.triggerMobType = enummobtype;
       this.setCreativeTab(CreativeTabs.tabRedstone);
       this.setTickRandomly(true);
-      float var5 = 0.0625F;
-      this.setBlockBounds(var5, 0.0F, var5, 1.0F - var5, 0.03125F, 1.0F - var5);
+      float f = 0.0625F;
+      this.setBlockBounds(f, 0.0F, f, 1.0F - f, 0.03125F, 1.0F - f);
    }
 
    public int tickRate() {
       return 20;
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
@@ -45,120 +53,151 @@
       return false;
    }
 
-   public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
+   public boolean getBlocksMovement(IBlockAccess iblockaccess, int i, int j, int k) {
       return true;
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      return var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) || BlockFence.isIdAFence(var1.getBlockId(var2, var3 - 1, var4));
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      return world.doesBlockHaveSolidTopSurface(i, j - 1, k) || BlockFence.isIdAFence(world.getBlockId(i, j - 1, k));
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      boolean var6 = false;
-      if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && !BlockFence.isIdAFence(var1.getBlockId(var2, var3 - 1, var4))) {
-         var6 = true;
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      boolean flag = false;
+      if(!world.doesBlockHaveSolidTopSurface(i, j - 1, k) && !BlockFence.isIdAFence(world.getBlockId(i, j - 1, k))) {
+         flag = true;
       }
 
-      if(var6) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+      if(flag) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
       }
 
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote) {
-         if(var1.getBlockMetadata(var2, var3, var4) != 0) {
-            this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-         }
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote && world.getBlockMetadata(i, j, k) != 0) {
+         this.setStateIfMobInteractsWithPlate(world, i, j, k);
       }
+
    }
 
-   public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-      if(!var1.isRemote) {
-         if(var1.getBlockMetadata(var2, var3, var4) != 1) {
-            this.setStateIfMobInteractsWithPlate(var1, var2, var3, var4);
-         }
+   public void onEntityCollidedWithBlock(World world, int i, int j, int k, Entity entity) {
+      if(!world.isRemote && world.getBlockMetadata(i, j, k) != 1) {
+         this.setStateIfMobInteractsWithPlate(world, i, j, k);
       }
+
    }
 
-   private void setStateIfMobInteractsWithPlate(World var1, int var2, int var3, int var4) {
-      boolean var5 = var1.getBlockMetadata(var2, var3, var4) == 1;
-      boolean var6 = false;
-      float var7 = 0.125F;
-      List var8 = null;
+   private void setStateIfMobInteractsWithPlate(World world, int i, int j, int k) {
+      boolean flag = world.getBlockMetadata(i, j, k) == 1;
+      boolean flag1 = false;
+      float f = 0.125F;
+      List list = null;
       if(this.triggerMobType == EnumMobType.everything) {
-         var8 = var1.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+         list = world.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)i + f), (double)j, (double)((float)k + f), (double)((float)(i + 1) - f), (double)j + 0.25D, (double)((float)(k + 1) - f)));
       }
 
       if(this.triggerMobType == EnumMobType.mobs) {
-         var8 = var1.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+         list = world.getEntitiesWithinAABB(EntityLiving.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)i + f), (double)j, (double)((float)k + f), (double)((float)(i + 1) - f), (double)j + 0.25D, (double)((float)(k + 1) - f)));
       }
 
       if(this.triggerMobType == EnumMobType.players) {
-         var8 = var1.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)var2 + var7), (double)var3, (double)((float)var4 + var7), (double)((float)(var2 + 1) - var7), (double)var3 + 0.25D, (double)((float)(var4 + 1) - var7)));
+         list = world.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)i + f), (double)j, (double)((float)k + f), (double)((float)(i + 1) - f), (double)j + 0.25D, (double)((float)(k + 1) - f)));
       }
 
-      if(!var8.isEmpty()) {
-         Iterator var9 = var8.iterator();
+      if(!list.isEmpty()) {
+         Iterator bworld = list.iterator();
 
-         while(var9.hasNext()) {
-            Entity var10 = (Entity)var9.next();
-            if(!var10.doesEntityNotTriggerPressurePlate()) {
-               var6 = true;
+         while(bworld.hasNext()) {
+            Entity manager = (Entity)bworld.next();
+            if(!manager.doesEntityNotTriggerPressurePlate()) {
+               flag1 = true;
                break;
             }
          }
       }
 
-      if(var6 && !var5) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.3F, 0.6F);
+      CraftWorld bworld1 = world.getWorld();
+      PluginManager manager1 = world.getServer().getPluginManager();
+      if(flag != flag1) {
+         if(flag1) {
+            Iterator eventRedstone = list.iterator();
+
+            while(eventRedstone.hasNext()) {
+               Object object = eventRedstone.next();
+               if(object != null) {
+                  Object cancellable;
+                  if(object instanceof EntityPlayer) {
+                     cancellable = CraftEventFactory.callPlayerInteractEvent((EntityPlayer)object, Action.PHYSICAL, i, j, k, -1, (ItemStack)null);
+                  } else {
+                     if(!(object instanceof Entity)) {
+                        continue;
+                     }
+
+                     cancellable = new EntityInteractEvent(((Entity)object).getBukkitEntity(), bworld1.getBlockAt(i, j, k));
+                     manager1.callEvent((EntityInteractEvent)cancellable);
+                  }
+
+                  if(((Cancellable)cancellable).isCancelled()) {
+                     return;
+                  }
+               }
+            }
+         }
+
+         BlockRedstoneEvent eventRedstone1 = new BlockRedstoneEvent(bworld1.getBlockAt(i, j, k), flag?1:0, flag1?1:0);
+         manager1.callEvent(eventRedstone1);
+         flag1 = eventRedstone1.getNewCurrent() > 0;
+      }
+
+      if(flag1 && !flag) {
+         world.setBlockMetadataWithNotify(i, j, k, 1);
+         world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+         world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
+         world.playSoundEffect((double)i + 0.5D, (double)j + 0.1D, (double)k + 0.5D, "random.click", 0.3F, 0.6F);
       }
 
-      if(!var6 && var5) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.3F, 0.5F);
+      if(!flag1 && flag) {
+         world.setBlockMetadataWithNotify(i, j, k, 0);
+         world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+         world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
+         world.playSoundEffect((double)i + 0.5D, (double)j + 0.1D, (double)k + 0.5D, "random.click", 0.3F, 0.5F);
       }
 
-      if(var6) {
-         var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+      if(flag1) {
+         world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
       }
 
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      if(var6 > 0) {
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      if(i1 > 0) {
+         world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
       }
 
-      super.breakBlock(var1, var2, var3, var4, var5, var6);
+      super.breakBlock(world, i, j, k, l, i1);
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      boolean var5 = var1.getBlockMetadata(var2, var3, var4) == 1;
-      float var6 = 0.0625F;
-      if(var5) {
-         this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 0.03125F, 1.0F - var6);
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      boolean flag = iblockaccess.getBlockMetadata(i, j, k) == 1;
+      float f = 0.0625F;
+      if(flag) {
+         this.setBlockBounds(f, 0.0F, f, 1.0F - f, 0.03125F, 1.0F - f);
       } else {
-         this.setBlockBounds(var6, 0.0F, var6, 1.0F - var6, 0.0625F, 1.0F - var6);
+         this.setBlockBounds(f, 0.0F, f, 1.0F - f, 0.0625F, 1.0F - f);
       }
 
    }
 
-   public boolean isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return var1.getBlockMetadata(var2, var3, var4) > 0;
+   public boolean isProvidingWeakPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return iblockaccess.getBlockMetadata(i, j, k) > 0;
    }
 
-   public boolean isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return var1.getBlockMetadata(var2, var3, var4) == 0?false:var5 == 1;
+   public boolean isProvidingStrongPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return iblockaccess.getBlockMetadata(i, j, k) == 0?false:l == 1;
    }
 
    public boolean canProvidePower() {
@@ -166,10 +205,10 @@
    }
 
    public void setBlockBoundsForItemRender() {
-      float var1 = 0.5F;
-      float var2 = 0.125F;
-      float var3 = 0.5F;
-      this.setBlockBounds(0.5F - var1, 0.5F - var2, 0.5F - var3, 0.5F + var1, 0.5F + var2, 0.5F + var3);
+      float f = 0.5F;
+      float f1 = 0.125F;
+      float f2 = 0.5F;
+      this.setBlockBounds(0.5F - f, 0.5F - f1, 0.5F - f2, 0.5F + f, 0.5F + f1, 0.5F + f2);
    }
 
    public int getMobilityFlag() {
Binary files mcp-mcdev/net/minecraft/src/BlockPumpkin.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPumpkin.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockPumpkin.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPumpkin.java
--- mcp-mcdev/net/minecraft/src/BlockPumpkin.java	2012-11-29 21:15:21.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockPumpkin.java	2012-11-29 20:44:41.000000000 -0800
@@ -9,103 +9,110 @@
 import net.minecraft.src.Material;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.block.BlockRedstoneEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public class BlockPumpkin extends BlockDirectional {
 
    private boolean blockType;
 
 
-   protected BlockPumpkin(int var1, int var2, boolean var3) {
-      super(var1, Material.pumpkin);
-      this.blockIndexInTexture = var2;
+   protected BlockPumpkin(int i, int j, boolean flag) {
+      super(i, Material.pumpkin);
+      this.blockIndexInTexture = j;
       this.setTickRandomly(true);
-      this.blockType = var3;
+      this.blockType = flag;
       this.setCreativeTab(CreativeTabs.tabBlock);
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      if(var1 == 1) {
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      if(i == 1) {
          return this.blockIndexInTexture;
-      } else if(var1 == 0) {
+      } else if(i == 0) {
          return this.blockIndexInTexture;
       } else {
-         int var3 = this.blockIndexInTexture + 1 + 16;
+         int k = this.blockIndexInTexture + 1 + 16;
          if(this.blockType) {
-            ++var3;
+            ++k;
          }
 
-         return var2 == 2 && var1 == 2?var3:(var2 == 3 && var1 == 5?var3:(var2 == 0 && var1 == 3?var3:(var2 == 1 && var1 == 4?var3:this.blockIndexInTexture + 16)));
+         return j == 2 && i == 2?k:(j == 3 && i == 5?k:(j == 0 && i == 3?k:(j == 1 && i == 4?k:this.blockIndexInTexture + 16)));
       }
    }
 
-   public int getBlockTextureFromSide(int var1) {
-      return var1 == 1?this.blockIndexInTexture:(var1 == 0?this.blockIndexInTexture:(var1 == 3?this.blockIndexInTexture + 1 + 16:this.blockIndexInTexture + 16));
+   public int getBlockTextureFromSide(int i) {
+      return i == 1?this.blockIndexInTexture:(i == 0?this.blockIndexInTexture:(i == 3?this.blockIndexInTexture + 1 + 16:this.blockIndexInTexture + 16));
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      super.onBlockAdded(var1, var2, var3, var4);
-      if(var1.getBlockId(var2, var3 - 1, var4) == Block.blockSnow.blockID && var1.getBlockId(var2, var3 - 2, var4) == Block.blockSnow.blockID) {
-         if(!var1.isRemote) {
-            var1.setBlock(var2, var3, var4, 0);
-            var1.setBlock(var2, var3 - 1, var4, 0);
-            var1.setBlock(var2, var3 - 2, var4, 0);
-            EntitySnowman var9 = new EntitySnowman(var1);
-            var9.setLocationAndAngles((double)var2 + 0.5D, (double)var3 - 1.95D, (double)var4 + 0.5D, 0.0F, 0.0F);
-            var1.spawnEntityInWorld(var9);
-            var1.notifyBlockChange(var2, var3, var4, 0);
-            var1.notifyBlockChange(var2, var3 - 1, var4, 0);
-            var1.notifyBlockChange(var2, var3 - 2, var4, 0);
-         }
-
-         for(int var10 = 0; var10 < 120; ++var10) {
-            var1.spawnParticle("snowshovel", (double)var2 + var1.rand.nextDouble(), (double)(var3 - 2) + var1.rand.nextDouble() * 2.5D, (double)var4 + var1.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
-         }
-      } else if(var1.getBlockId(var2, var3 - 1, var4) == Block.blockSteel.blockID && var1.getBlockId(var2, var3 - 2, var4) == Block.blockSteel.blockID) {
-         boolean var5 = var1.getBlockId(var2 - 1, var3 - 1, var4) == Block.blockSteel.blockID && var1.getBlockId(var2 + 1, var3 - 1, var4) == Block.blockSteel.blockID;
-         boolean var6 = var1.getBlockId(var2, var3 - 1, var4 - 1) == Block.blockSteel.blockID && var1.getBlockId(var2, var3 - 1, var4 + 1) == Block.blockSteel.blockID;
-         if(var5 || var6) {
-            var1.setBlock(var2, var3, var4, 0);
-            var1.setBlock(var2, var3 - 1, var4, 0);
-            var1.setBlock(var2, var3 - 2, var4, 0);
-            if(var5) {
-               var1.setBlock(var2 - 1, var3 - 1, var4, 0);
-               var1.setBlock(var2 + 1, var3 - 1, var4, 0);
-            } else {
-               var1.setBlock(var2, var3 - 1, var4 - 1, 0);
-               var1.setBlock(var2, var3 - 1, var4 + 1, 0);
+   public void onBlockAdded(World world, int i, int j, int k) {
+      super.onBlockAdded(world, i, j, k);
+      if(!world.editingBlocks) {
+         if(world.getBlockId(i, j - 1, k) == Block.blockSnow.blockID && world.getBlockId(i, j - 2, k) == Block.blockSnow.blockID) {
+            if(!world.isRemote) {
+               BlockStateListPopulator var10 = new BlockStateListPopulator(world.getWorld());
+               var10.setTypeId(i, j, k, 0);
+               var10.setTypeId(i, j - 1, k, 0);
+               var10.setTypeId(i, j - 2, k, 0);
+               EntitySnowman var12 = new EntitySnowman(world);
+               var12.setLocationAndAngles((double)i + 0.5D, (double)j - 1.95D, (double)k + 0.5D, 0.0F, 0.0F);
+               if(world.addEntity(var12, SpawnReason.BUILD_SNOWMAN)) {
+                  var10.updateList();
+               }
             }
 
-            EntityIronGolem var7 = new EntityIronGolem(var1);
-            var7.setPlayerCreated(true);
-            var7.setLocationAndAngles((double)var2 + 0.5D, (double)var3 - 1.95D, (double)var4 + 0.5D, 0.0F, 0.0F);
-            var1.spawnEntityInWorld(var7);
-
-            for(int var8 = 0; var8 < 120; ++var8) {
-               var1.spawnParticle("snowballpoof", (double)var2 + var1.rand.nextDouble(), (double)(var3 - 2) + var1.rand.nextDouble() * 3.9D, (double)var4 + var1.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+            for(int var11 = 0; var11 < 120; ++var11) {
+               world.spawnParticle("snowshovel", (double)i + world.rand.nextDouble(), (double)(j - 2) + world.rand.nextDouble() * 2.5D, (double)k + world.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
             }
+         } else if(world.getBlockId(i, j - 1, k) == Block.blockSteel.blockID && world.getBlockId(i, j - 2, k) == Block.blockSteel.blockID) {
+            boolean flag = world.getBlockId(i - 1, j - 1, k) == Block.blockSteel.blockID && world.getBlockId(i + 1, j - 1, k) == Block.blockSteel.blockID;
+            boolean flag1 = world.getBlockId(i, j - 1, k - 1) == Block.blockSteel.blockID && world.getBlockId(i, j - 1, k + 1) == Block.blockSteel.blockID;
+            if(flag || flag1) {
+               BlockStateListPopulator blockList = new BlockStateListPopulator(world.getWorld());
+               blockList.setTypeId(i, j, k, 0);
+               blockList.setTypeId(i, j - 1, k, 0);
+               blockList.setTypeId(i, j - 2, k, 0);
+               if(flag) {
+                  blockList.setTypeId(i - 1, j - 1, k, 0);
+                  blockList.setTypeId(i + 1, j - 1, k, 0);
+               } else {
+                  blockList.setTypeId(i, j - 1, k - 1, 0);
+                  blockList.setTypeId(i, j - 1, k + 1, 0);
+               }
+
+               EntityIronGolem entityirongolem = new EntityIronGolem(world);
+               entityirongolem.setPlayerCreated(true);
+               entityirongolem.setLocationAndAngles((double)i + 0.5D, (double)j - 1.95D, (double)k + 0.5D, 0.0F, 0.0F);
+               if(world.addEntity(entityirongolem, SpawnReason.BUILD_IRONGOLEM)) {
+                  for(int i1 = 0; i1 < 120; ++i1) {
+                     world.spawnParticle("snowballpoof", (double)i + world.rand.nextDouble(), (double)(j - 2) + world.rand.nextDouble() * 3.9D, (double)k + world.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+                  }
 
-            var1.notifyBlockChange(var2, var3, var4, 0);
-            var1.notifyBlockChange(var2, var3 - 1, var4, 0);
-            var1.notifyBlockChange(var2, var3 - 2, var4, 0);
-            if(var5) {
-               var1.notifyBlockChange(var2 - 1, var3 - 1, var4, 0);
-               var1.notifyBlockChange(var2 + 1, var3 - 1, var4, 0);
-            } else {
-               var1.notifyBlockChange(var2, var3 - 1, var4 - 1, 0);
-               var1.notifyBlockChange(var2, var3 - 1, var4 + 1, 0);
+                  blockList.updateList();
+               }
             }
          }
-      }
 
+      }
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockId(var2, var3, var4);
-      return (var5 == 0 || Block.blocksList[var5].blockMaterial.isReplaceable()) && var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4);
-   }
-
-   public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
-      int var6 = MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 2.5D) & 3;
-      var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      int l = world.getBlockId(i, j, k);
+      return (l == 0 || Block.blocksList[l].blockMaterial.isReplaceable()) && world.doesBlockHaveSolidTopSurface(i, j - 1, k);
+   }
+
+   public void onBlockPlacedBy(World world, int i, int j, int k, EntityLiving entityliving) {
+      int l = MathHelper.floor_double((double)(entityliving.rotationYaw * 4.0F / 360.0F) + 2.5D) & 3;
+      world.setBlockMetadataWithNotify(i, j, k, l);
+   }
+
+   public void doPhysics(World world, int i, int j, int k, int l) {
+      if(Block.blocksList[l] != null && Block.blocksList[l].canProvidePower()) {
+         org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+         int power = block.getBlockPower();
+         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, power, power);
+         world.getServer().getPluginManager().callEvent(eventRedstone);
+      }
+
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockRedstoneLight.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneLight.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockRedstoneLight.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneLight.java
--- mcp-mcdev/net/minecraft/src/BlockRedstoneLight.java	2012-11-29 21:15:21.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneLight.java	2012-11-29 20:44:40.000000000 -0800
@@ -4,52 +4,65 @@
 import net.minecraft.src.Block;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class BlockRedstoneLight extends Block {
 
    private final boolean powered;
 
 
-   public BlockRedstoneLight(int var1, boolean var2) {
-      super(var1, 211, Material.redstoneLight);
-      this.powered = var2;
-      if(var2) {
+   public BlockRedstoneLight(int i, boolean flag) {
+      super(i, 211, Material.redstoneLight);
+      this.powered = flag;
+      if(flag) {
          this.setLightValue(1.0F);
          ++this.blockIndexInTexture;
       }
 
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      if(!var1.isRemote) {
-         if(this.powered && !var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-            var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, 4);
-         } else if(!this.powered && var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-            var1.setBlockWithNotify(var2, var3, var4, Block.redstoneLampActive.blockID);
+   public void onBlockAdded(World world, int i, int j, int k) {
+      if(!world.isRemote) {
+         if(this.powered && !world.isBlockIndirectlyGettingPowered(i, j, k)) {
+            world.scheduleBlockUpdate(i, j, k, this.blockID, 4);
+         } else if(!this.powered && world.isBlockIndirectlyGettingPowered(i, j, k)) {
+            if(CraftEventFactory.callRedstoneChange(world, i, j, k, 0, 15).getNewCurrent() != 15) {
+               return;
+            }
+
+            world.setBlockWithNotify(i, j, k, Block.redstoneLampActive.blockID);
          }
       }
 
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(!var1.isRemote) {
-         if(this.powered && !var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-            var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, 4);
-         } else if(!this.powered && var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-            var1.setBlockWithNotify(var2, var3, var4, Block.redstoneLampActive.blockID);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(!world.isRemote) {
+         if(this.powered && !world.isBlockIndirectlyGettingPowered(i, j, k)) {
+            world.scheduleBlockUpdate(i, j, k, this.blockID, 4);
+         } else if(!this.powered && world.isBlockIndirectlyGettingPowered(i, j, k)) {
+            if(CraftEventFactory.callRedstoneChange(world, i, j, k, 0, 15).getNewCurrent() != 15) {
+               return;
+            }
+
+            world.setBlockWithNotify(i, j, k, Block.redstoneLampActive.blockID);
          }
       }
 
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote && this.powered && !var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-         var1.setBlockWithNotify(var2, var3, var4, Block.redstoneLampIdle.blockID);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote && this.powered && !world.isBlockIndirectlyGettingPowered(i, j, k)) {
+         if(CraftEventFactory.callRedstoneChange(world, i, j, k, 15, 0).getNewCurrent() != 0) {
+            return;
+         }
+
+         world.setBlockWithNotify(i, j, k, Block.redstoneLampIdle.blockID);
       }
 
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Block.redstoneLampIdle.blockID;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockRedstoneOre.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneOre.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockRedstoneOre.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneOre.java
--- mcp-mcdev/net/minecraft/src/BlockRedstoneOre.java	2012-11-29 21:15:21.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneOre.java	2012-11-29 20:44:40.000000000 -0800
@@ -8,116 +8,137 @@
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.entity.EntityInteractEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
 
 public class BlockRedstoneOre extends Block {
 
    private boolean glowing;
 
 
-   public BlockRedstoneOre(int var1, int var2, boolean var3) {
-      super(var1, var2, Material.rock);
-      if(var3) {
+   public BlockRedstoneOre(int i, int j, boolean flag) {
+      super(i, j, Material.rock);
+      if(flag) {
          this.setTickRandomly(true);
       }
 
-      this.glowing = var3;
+      this.glowing = flag;
    }
 
    public int tickRate() {
       return 30;
    }
 
-   public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-      this.glow(var1, var2, var3, var4);
-      super.onBlockClicked(var1, var2, var3, var4, var5);
-   }
-
-   public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-      this.glow(var1, var2, var3, var4);
-      super.onEntityWalking(var1, var2, var3, var4, var5);
+   public void onBlockClicked(World world, int i, int j, int k, EntityPlayer entityhuman) {
+      this.glow(world, i, j, k);
+      super.onBlockClicked(world, i, j, k, entityhuman);
+   }
+
+   public void onEntityWalking(World world, int i, int j, int k, Entity entity) {
+      if(entity instanceof EntityPlayer) {
+         PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent((EntityPlayer)entity, Action.PHYSICAL, i, j, k, -1, (ItemStack)null);
+         if(!event.isCancelled()) {
+            this.glow(world, i, j, k);
+            super.onEntityWalking(world, i, j, k, entity);
+         }
+      } else {
+         EntityInteractEvent event1 = new EntityInteractEvent(entity.getBukkitEntity(), world.getWorld().getBlockAt(i, j, k));
+         world.getServer().getPluginManager().callEvent(event1);
+         if(!event1.isCancelled()) {
+            this.glow(world, i, j, k);
+            super.onEntityWalking(world, i, j, k, entity);
+         }
+      }
+
    }
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-      this.glow(var1, var2, var3, var4);
-      return super.onBlockActivated(var1, var2, var3, var4, var5, var6, var7, var8, var9);
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
+      this.glow(world, i, j, k);
+      return super.onBlockActivated(world, i, j, k, entityhuman, l, f, f1, f2);
    }
 
-   private void glow(World var1, int var2, int var3, int var4) {
-      this.sparkle(var1, var2, var3, var4);
+   private void glow(World world, int i, int j, int k) {
+      this.sparkle(world, i, j, k);
       if(this.blockID == Block.oreRedstone.blockID) {
-         var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstoneGlowing.blockID);
+         world.setBlockWithNotify(i, j, k, Block.oreRedstoneGlowing.blockID);
       }
 
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+   public void updateTick(World world, int i, int j, int k, Random random) {
       if(this.blockID == Block.oreRedstoneGlowing.blockID) {
-         var1.setBlockWithNotify(var2, var3, var4, Block.oreRedstone.blockID);
+         world.setBlockWithNotify(i, j, k, Block.oreRedstone.blockID);
       }
 
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Item.redstone.shiftedIndex;
    }
 
-   public int quantityDroppedWithBonus(int var1, Random var2) {
-      return this.quantityDropped(var2) + var2.nextInt(var1 + 1);
+   public int quantityDroppedWithBonus(int i, Random random) {
+      return this.quantityDropped(random) + random.nextInt(i + 1);
+   }
+
+   public int quantityDropped(Random random) {
+      return 4 + random.nextInt(2);
    }
 
-   public int quantityDropped(Random var1) {
-      return 4 + var1.nextInt(2);
+   public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f, int i1) {
+      super.dropBlockAsItemWithChance(world, i, j, k, l, f, i1);
    }
 
-   public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-      super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6, var7);
-      if(this.idDropped(var5, var1.rand, var7) != this.blockID) {
-         int var8 = 1 + var1.rand.nextInt(5);
-         this.dropXpOnBlockBreak(var1, var2, var3, var4, var8);
+   public int getExpDrop(World world, int l, int i1) {
+      if(this.idDropped(l, world.rand, i1) != this.blockID) {
+         int j1 = 1 + world.rand.nextInt(5);
+         return j1;
+      } else {
+         return 0;
       }
-
    }
 
-   private void sparkle(World var1, int var2, int var3, int var4) {
-      Random var5 = var1.rand;
-      double var6 = 0.0625D;
+   private void sparkle(World world, int i, int j, int k) {
+      Random random = world.rand;
+      double d0 = 0.0625D;
 
-      for(int var8 = 0; var8 < 6; ++var8) {
-         double var9 = (double)((float)var2 + var5.nextFloat());
-         double var11 = (double)((float)var3 + var5.nextFloat());
-         double var13 = (double)((float)var4 + var5.nextFloat());
-         if(var8 == 0 && !var1.isBlockOpaqueCube(var2, var3 + 1, var4)) {
-            var11 = (double)(var3 + 1) + var6;
+      for(int l = 0; l < 6; ++l) {
+         double d1 = (double)((float)i + random.nextFloat());
+         double d2 = (double)((float)j + random.nextFloat());
+         double d3 = (double)((float)k + random.nextFloat());
+         if(l == 0 && !world.isBlockOpaqueCube(i, j + 1, k)) {
+            d2 = (double)(j + 1) + d0;
          }
 
-         if(var8 == 1 && !var1.isBlockOpaqueCube(var2, var3 - 1, var4)) {
-            var11 = (double)(var3 + 0) - var6;
+         if(l == 1 && !world.isBlockOpaqueCube(i, j - 1, k)) {
+            d2 = (double)(j + 0) - d0;
          }
 
-         if(var8 == 2 && !var1.isBlockOpaqueCube(var2, var3, var4 + 1)) {
-            var13 = (double)(var4 + 1) + var6;
+         if(l == 2 && !world.isBlockOpaqueCube(i, j, k + 1)) {
+            d3 = (double)(k + 1) + d0;
          }
 
-         if(var8 == 3 && !var1.isBlockOpaqueCube(var2, var3, var4 - 1)) {
-            var13 = (double)(var4 + 0) - var6;
+         if(l == 3 && !world.isBlockOpaqueCube(i, j, k - 1)) {
+            d3 = (double)(k + 0) - d0;
          }
 
-         if(var8 == 4 && !var1.isBlockOpaqueCube(var2 + 1, var3, var4)) {
-            var9 = (double)(var2 + 1) + var6;
+         if(l == 4 && !world.isBlockOpaqueCube(i + 1, j, k)) {
+            d1 = (double)(i + 1) + d0;
          }
 
-         if(var8 == 5 && !var1.isBlockOpaqueCube(var2 - 1, var3, var4)) {
-            var9 = (double)(var2 + 0) - var6;
+         if(l == 5 && !world.isBlockOpaqueCube(i - 1, j, k)) {
+            d1 = (double)(i + 0) - d0;
          }
 
-         if(var9 < (double)var2 || var9 > (double)(var2 + 1) || var11 < 0.0D || var11 > (double)(var3 + 1) || var13 < (double)var4 || var13 > (double)(var4 + 1)) {
-            var1.spawnParticle("reddust", var9, var11, var13, 0.0D, 0.0D, 0.0D);
+         if(d1 < (double)i || d1 > (double)(i + 1) || d2 < 0.0D || d2 > (double)(j + 1) || d3 < (double)k || d3 > (double)(k + 1)) {
+            world.spawnParticle("reddust", d1, d2, d3, 0.0D, 0.0D, 0.0D);
          }
       }
 
    }
 
-   protected ItemStack createStackedBlock(int var1) {
+   protected ItemStack createStackedBlock(int i) {
       return new ItemStack(Block.oreRedstone);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockRedstoneTorch.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneTorch.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockRedstoneTorch.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneTorch.java
--- mcp-mcdev/net/minecraft/src/BlockRedstoneTorch.java	2012-11-29 21:15:21.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneTorch.java	2012-11-29 20:44:40.000000000 -0800
@@ -11,6 +11,8 @@
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.RedstoneUpdateInfo;
 import net.minecraft.src.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
+import org.bukkit.plugin.PluginManager;
 
 public class BlockRedstoneTorch extends BlockTorch {
 
@@ -18,27 +20,27 @@
    private static Map redstoneUpdateInfoCache = new HashMap();
 
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-      return var1 == 1?Block.redstoneWire.getBlockTextureFromSideAndMetadata(var1, var2):super.getBlockTextureFromSideAndMetadata(var1, var2);
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
+      return i == 1?Block.redstoneWire.getBlockTextureFromSideAndMetadata(i, j):super.getBlockTextureFromSideAndMetadata(i, j);
    }
 
-   private boolean checkForBurnout(World var1, int var2, int var3, int var4, boolean var5) {
-      if(!redstoneUpdateInfoCache.containsKey(var1)) {
-         redstoneUpdateInfoCache.put(var1, new ArrayList());
+   private boolean checkForBurnout(World world, int i, int j, int k, boolean flag) {
+      if(!redstoneUpdateInfoCache.containsKey(world)) {
+         redstoneUpdateInfoCache.put(world, new ArrayList());
       }
 
-      List var6 = (List)redstoneUpdateInfoCache.get(var1);
-      if(var5) {
-         var6.add(new RedstoneUpdateInfo(var2, var3, var4, var1.getTotalWorldTime()));
+      List list = (List)redstoneUpdateInfoCache.get(world);
+      if(flag) {
+         list.add(new RedstoneUpdateInfo(i, j, k, world.getTotalWorldTime()));
       }
 
-      int var7 = 0;
+      int l = 0;
 
-      for(int var8 = 0; var8 < var6.size(); ++var8) {
-         RedstoneUpdateInfo var9 = (RedstoneUpdateInfo)var6.get(var8);
-         if(var9.x == var2 && var9.y == var3 && var9.z == var4) {
-            ++var7;
-            if(var7 >= 8) {
+      for(int i1 = 0; i1 < list.size(); ++i1) {
+         RedstoneUpdateInfo redstoneupdateinfo = (RedstoneUpdateInfo)list.get(i1);
+         if(redstoneupdateinfo.x == i && redstoneupdateinfo.y == j && redstoneupdateinfo.z == k) {
+            ++l;
+            if(l >= 8) {
                return true;
             }
          }
@@ -47,9 +49,9 @@
       return false;
    }
 
-   protected BlockRedstoneTorch(int var1, int var2, boolean var3) {
-      super(var1, var2);
-      this.torchActive = var3;
+   protected BlockRedstoneTorch(int i, int j, boolean flag) {
+      super(i, j);
+      this.torchActive = flag;
       this.setTickRandomly(true);
       this.setCreativeTab((CreativeTabs)null);
    }
@@ -58,86 +60,106 @@
       return 2;
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      if(var1.getBlockMetadata(var2, var3, var4) == 0) {
-         super.onBlockAdded(var1, var2, var3, var4);
+   public void onBlockAdded(World world, int i, int j, int k) {
+      if(world.getBlockMetadata(i, j, k) == 0) {
+         super.onBlockAdded(world, i, j, k);
       }
 
       if(this.torchActive) {
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j + 1, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i - 1, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i + 1, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j, k - 1, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j, k + 1, this.blockID);
       }
 
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
       if(this.torchActive) {
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j + 1, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i - 1, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i + 1, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j, k - 1, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j, k + 1, this.blockID);
       }
 
    }
 
-   public boolean isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+   public boolean isProvidingWeakPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
       if(!this.torchActive) {
          return false;
       } else {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         return var6 == 5 && var5 == 1?false:(var6 == 3 && var5 == 3?false:(var6 == 4 && var5 == 2?false:(var6 == 1 && var5 == 5?false:var6 != 2 || var5 != 4)));
+         int i1 = iblockaccess.getBlockMetadata(i, j, k);
+         return i1 == 5 && l == 1?false:(i1 == 3 && l == 3?false:(i1 == 4 && l == 2?false:(i1 == 1 && l == 5?false:i1 != 2 || l != 4)));
       }
    }
 
-   private boolean isIndirectlyPowered(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      return var5 == 5 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3 - 1, var4, 0)?true:(var5 == 3 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 - 1, 2)?true:(var5 == 4 && var1.isBlockIndirectlyProvidingPowerTo(var2, var3, var4 + 1, 3)?true:(var5 == 1 && var1.isBlockIndirectlyProvidingPowerTo(var2 - 1, var3, var4, 4)?true:var5 == 2 && var1.isBlockIndirectlyProvidingPowerTo(var2 + 1, var3, var4, 5))));
+   private boolean isIndirectlyPowered(World world, int i, int j, int k) {
+      int l = world.getBlockMetadata(i, j, k);
+      return l == 5 && world.isBlockIndirectlyProvidingPowerTo(i, j - 1, k, 0)?true:(l == 3 && world.isBlockIndirectlyProvidingPowerTo(i, j, k - 1, 2)?true:(l == 4 && world.isBlockIndirectlyProvidingPowerTo(i, j, k + 1, 3)?true:(l == 1 && world.isBlockIndirectlyProvidingPowerTo(i - 1, j, k, 4)?true:l == 2 && world.isBlockIndirectlyProvidingPowerTo(i + 1, j, k, 5))));
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      boolean var6 = this.isIndirectlyPowered(var1, var2, var3, var4);
-      List var7 = (List)redstoneUpdateInfoCache.get(var1);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      boolean flag = this.isIndirectlyPowered(world, i, j, k);
+      List list = (List)redstoneUpdateInfoCache.get(world);
 
-      while(var7 != null && !var7.isEmpty() && var1.getTotalWorldTime() - ((RedstoneUpdateInfo)var7.get(0)).updateTime > 60L) {
-         var7.remove(0);
+      while(list != null && !list.isEmpty() && world.getTotalWorldTime() - ((RedstoneUpdateInfo)list.get(0)).updateTime > 60L) {
+         list.remove(0);
       }
 
+      PluginManager manager = world.getServer().getPluginManager();
+      org.bukkit.block.Block block = world.getWorld().getBlockAt(i, j, k);
+      int oldCurrent = this.torchActive?15:0;
+      BlockRedstoneEvent event = new BlockRedstoneEvent(block, oldCurrent, oldCurrent);
       if(this.torchActive) {
-         if(var6) {
-            var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.torchRedstoneIdle.blockID, var1.getBlockMetadata(var2, var3, var4));
-            if(this.checkForBurnout(var1, var2, var3, var4, true)) {
-               var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.fizz", 0.5F, 2.6F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.8F);
-
-               for(int var8 = 0; var8 < 5; ++var8) {
-                  double var9 = (double)var2 + var5.nextDouble() * 0.6D + 0.2D;
-                  double var11 = (double)var3 + var5.nextDouble() * 0.6D + 0.2D;
-                  double var13 = (double)var4 + var5.nextDouble() * 0.6D + 0.2D;
-                  var1.spawnParticle("smoke", var9, var11, var13, 0.0D, 0.0D, 0.0D);
+         if(flag) {
+            if(oldCurrent != 0) {
+               event.setNewCurrent(0);
+               manager.callEvent(event);
+               if(event.getNewCurrent() != 0) {
+                  return;
+               }
+            }
+
+            world.setBlockAndMetadataWithNotify(i, j, k, Block.torchRedstoneIdle.blockID, world.getBlockMetadata(i, j, k));
+            if(this.checkForBurnout(world, i, j, k, true)) {
+               world.playSoundEffect((double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), "random.fizz", 0.5F, 2.6F + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8F);
+
+               for(int l = 0; l < 5; ++l) {
+                  double d0 = (double)i + random.nextDouble() * 0.6D + 0.2D;
+                  double d1 = (double)j + random.nextDouble() * 0.6D + 0.2D;
+                  double d2 = (double)k + random.nextDouble() * 0.6D + 0.2D;
+                  world.spawnParticle("smoke", d0, d1, d2, 0.0D, 0.0D, 0.0D);
                }
             }
          }
-      } else if(!var6 && !this.checkForBurnout(var1, var2, var3, var4, false)) {
-         var1.setBlockAndMetadataWithNotify(var2, var3, var4, Block.torchRedstoneActive.blockID, var1.getBlockMetadata(var2, var3, var4));
+      } else if(!flag && !this.checkForBurnout(world, i, j, k, false)) {
+         if(oldCurrent != 15) {
+            event.setNewCurrent(15);
+            manager.callEvent(event);
+            if(event.getNewCurrent() != 15) {
+               return;
+            }
+         }
+
+         world.setBlockAndMetadataWithNotify(i, j, k, Block.torchRedstoneActive.blockID, world.getBlockMetadata(i, j, k));
       }
 
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-      var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      super.onNeighborBlockChange(world, i, j, k, l);
+      world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
    }
 
-   public boolean isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return var5 == 0?this.isProvidingWeakPower(var1, var2, var3, var4, var5):false;
+   public boolean isProvidingStrongPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return l == 0?this.isProvidingWeakPower(iblockaccess, i, j, k, l):false;
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Block.torchRedstoneActive.blockID;
    }
 
Binary files mcp-mcdev/net/minecraft/src/BlockRedstoneWire.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneWire.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockRedstoneWire.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneWire.java
--- mcp-mcdev/net/minecraft/src/BlockRedstoneWire.java	2012-11-29 21:15:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockRedstoneWire.java	2012-11-29 20:44:40.000000000 -0800
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 import java.util.ArrayList;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Random;
 import java.util.Set;
 import net.minecraft.src.AxisAlignedBB;
@@ -12,23 +12,24 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockRedstoneWire extends Block {
 
    private boolean wiresProvidePower = true;
-   private Set blocksNeedingUpdate = new HashSet();
+   private Set blocksNeedingUpdate = new LinkedHashSet();
 
 
-   public BlockRedstoneWire(int var1, int var2) {
-      super(var1, var2, Material.circuits);
+   public BlockRedstoneWire(int i, int j) {
+      super(i, j, Material.circuits);
       this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.0625F, 1.0F);
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
       return this.blockIndexInTexture;
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
@@ -44,291 +45,301 @@
       return 5;
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      return var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) || var1.getBlockId(var2, var3 - 1, var4) == Block.glowStone.blockID;
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      return world.doesBlockHaveSolidTopSurface(i, j - 1, k) || world.getBlockId(i, j - 1, k) == Block.glowStone.blockID;
    }
 
-   private void updateAndPropagateCurrentStrength(World var1, int var2, int var3, int var4) {
-      this.calculateCurrentChanges(var1, var2, var3, var4, var2, var3, var4);
-      ArrayList var5 = new ArrayList(this.blocksNeedingUpdate);
+   private void updateAndPropagateCurrentStrength(World world, int i, int j, int k) {
+      this.calculateCurrentChanges(world, i, j, k, i, j, k);
+      ArrayList arraylist = new ArrayList(this.blocksNeedingUpdate);
       this.blocksNeedingUpdate.clear();
 
-      for(int var6 = 0; var6 < var5.size(); ++var6) {
-         ChunkPosition var7 = (ChunkPosition)var5.get(var6);
-         var1.notifyBlocksOfNeighborChange(var7.x, var7.y, var7.z, this.blockID);
+      for(int l = 0; l < arraylist.size(); ++l) {
+         ChunkPosition chunkposition = (ChunkPosition)arraylist.get(l);
+         world.notifyBlocksOfNeighborChange(chunkposition.x, chunkposition.y, chunkposition.z, this.blockID);
       }
 
    }
 
-   private void calculateCurrentChanges(World var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-      int var8 = var1.getBlockMetadata(var2, var3, var4);
-      int var9 = 0;
+   private void calculateCurrentChanges(World world, int i, int j, int k, int l, int i1, int j1) {
+      int k1 = world.getBlockMetadata(i, j, k);
+      int l1 = 0;
       this.wiresProvidePower = false;
-      boolean var10 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
+      boolean flag = world.isBlockIndirectlyGettingPowered(i, j, k);
       this.wiresProvidePower = true;
-      int var11;
-      int var12;
-      int var13;
-      if(var10) {
-         var9 = 15;
+      int i2;
+      int j2;
+      int k2;
+      if(flag) {
+         l1 = 15;
       } else {
-         for(var11 = 0; var11 < 4; ++var11) {
-            var12 = var2;
-            var13 = var4;
-            if(var11 == 0) {
-               var12 = var2 - 1;
+         for(i2 = 0; i2 < 4; ++i2) {
+            j2 = i;
+            k2 = k;
+            if(i2 == 0) {
+               j2 = i - 1;
             }
 
-            if(var11 == 1) {
-               ++var12;
+            if(i2 == 1) {
+               ++j2;
             }
 
-            if(var11 == 2) {
-               var13 = var4 - 1;
+            if(i2 == 2) {
+               k2 = k - 1;
             }
 
-            if(var11 == 3) {
-               ++var13;
+            if(i2 == 3) {
+               ++k2;
             }
 
-            if(var12 != var5 || var3 != var6 || var13 != var7) {
-               var9 = this.getMaxCurrentStrength(var1, var12, var3, var13, var9);
+            if(j2 != l || j != i1 || k2 != j1) {
+               l1 = this.getMaxCurrentStrength(world, j2, j, k2, l1);
             }
 
-            if(var1.isBlockNormalCube(var12, var3, var13) && !var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-               if(var12 != var5 || var3 + 1 != var6 || var13 != var7) {
-                  var9 = this.getMaxCurrentStrength(var1, var12, var3 + 1, var13, var9);
+            if(world.isBlockNormalCube(j2, j, k2) && !world.isBlockNormalCube(i, j + 1, k)) {
+               if(j2 != l || j + 1 != i1 || k2 != j1) {
+                  l1 = this.getMaxCurrentStrength(world, j2, j + 1, k2, l1);
                }
-            } else if(!var1.isBlockNormalCube(var12, var3, var13) && (var12 != var5 || var3 - 1 != var6 || var13 != var7)) {
-               var9 = this.getMaxCurrentStrength(var1, var12, var3 - 1, var13, var9);
+            } else if(!world.isBlockNormalCube(j2, j, k2) && (j2 != l || j - 1 != i1 || k2 != j1)) {
+               l1 = this.getMaxCurrentStrength(world, j2, j - 1, k2, l1);
             }
          }
 
-         if(var9 > 0) {
-            --var9;
+         if(l1 > 0) {
+            --l1;
          } else {
-            var9 = 0;
+            l1 = 0;
          }
       }
 
-      if(var8 != var9) {
-         var1.editingBlocks = true;
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var9);
-         var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-         var1.editingBlocks = false;
+      if(k1 != l1) {
+         BlockRedstoneEvent l2 = new BlockRedstoneEvent(world.getWorld().getBlockAt(i, j, k), k1, l1);
+         world.getServer().getPluginManager().callEvent(l2);
+         l1 = l2.getNewCurrent();
+      }
+
+      if(k1 != l1) {
+         world.editingBlocks = true;
+         world.setBlockMetadataWithNotify(i, j, k, l1);
+         world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
+         world.editingBlocks = false;
 
-         for(var11 = 0; var11 < 4; ++var11) {
-            var12 = var2;
-            var13 = var4;
-            int var14 = var3 - 1;
-            if(var11 == 0) {
-               var12 = var2 - 1;
+         for(i2 = 0; i2 < 4; ++i2) {
+            j2 = i;
+            k2 = k;
+            int var17 = j - 1;
+            if(i2 == 0) {
+               j2 = i - 1;
             }
 
-            if(var11 == 1) {
-               ++var12;
+            if(i2 == 1) {
+               ++j2;
             }
 
-            if(var11 == 2) {
-               var13 = var4 - 1;
+            if(i2 == 2) {
+               k2 = k - 1;
             }
 
-            if(var11 == 3) {
-               ++var13;
+            if(i2 == 3) {
+               ++k2;
             }
 
-            if(var1.isBlockNormalCube(var12, var3, var13)) {
-               var14 += 2;
+            if(world.isBlockNormalCube(j2, j, k2)) {
+               var17 += 2;
             }
 
-            boolean var15 = false;
-            int var16 = this.getMaxCurrentStrength(var1, var12, var3, var13, -1);
-            var9 = var1.getBlockMetadata(var2, var3, var4);
-            if(var9 > 0) {
-               --var9;
+            boolean flag1 = false;
+            int i3 = this.getMaxCurrentStrength(world, j2, j, k2, -1);
+            l1 = world.getBlockMetadata(i, j, k);
+            if(l1 > 0) {
+               --l1;
             }
 
-            if(var16 >= 0 && var16 != var9) {
-               this.calculateCurrentChanges(var1, var12, var3, var13, var2, var3, var4);
+            if(i3 >= 0 && i3 != l1) {
+               this.calculateCurrentChanges(world, j2, j, k2, i, j, k);
             }
 
-            var16 = this.getMaxCurrentStrength(var1, var12, var14, var13, -1);
-            var9 = var1.getBlockMetadata(var2, var3, var4);
-            if(var9 > 0) {
-               --var9;
+            i3 = this.getMaxCurrentStrength(world, j2, var17, k2, -1);
+            l1 = world.getBlockMetadata(i, j, k);
+            if(l1 > 0) {
+               --l1;
             }
 
-            if(var16 >= 0 && var16 != var9) {
-               this.calculateCurrentChanges(var1, var12, var14, var13, var2, var3, var4);
+            if(i3 >= 0 && i3 != l1) {
+               this.calculateCurrentChanges(world, j2, var17, k2, i, j, k);
             }
          }
 
-         if(var8 < var9 || var9 == 0) {
-            this.blocksNeedingUpdate.add(new ChunkPosition(var2, var3, var4));
-            this.blocksNeedingUpdate.add(new ChunkPosition(var2 - 1, var3, var4));
-            this.blocksNeedingUpdate.add(new ChunkPosition(var2 + 1, var3, var4));
-            this.blocksNeedingUpdate.add(new ChunkPosition(var2, var3 - 1, var4));
-            this.blocksNeedingUpdate.add(new ChunkPosition(var2, var3 + 1, var4));
-            this.blocksNeedingUpdate.add(new ChunkPosition(var2, var3, var4 - 1));
-            this.blocksNeedingUpdate.add(new ChunkPosition(var2, var3, var4 + 1));
+         if(k1 < l1 || l1 == 0) {
+            this.blocksNeedingUpdate.add(new ChunkPosition(i, j, k));
+            this.blocksNeedingUpdate.add(new ChunkPosition(i - 1, j, k));
+            this.blocksNeedingUpdate.add(new ChunkPosition(i + 1, j, k));
+            this.blocksNeedingUpdate.add(new ChunkPosition(i, j - 1, k));
+            this.blocksNeedingUpdate.add(new ChunkPosition(i, j + 1, k));
+            this.blocksNeedingUpdate.add(new ChunkPosition(i, j, k - 1));
+            this.blocksNeedingUpdate.add(new ChunkPosition(i, j, k + 1));
          }
       }
 
    }
 
-   private void notifyWireNeighborsOfNeighborChange(World var1, int var2, int var3, int var4) {
-      if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
+   private void notifyWireNeighborsOfNeighborChange(World world, int i, int j, int k) {
+      if(world.getBlockId(i, j, k) == this.blockID) {
+         world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i - 1, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i + 1, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j, k - 1, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j, k + 1, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j + 1, k, this.blockID);
       }
+
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      super.onBlockAdded(var1, var2, var3, var4);
-      if(!var1.isRemote) {
-         this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-         var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-         this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-         this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-         this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-         if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
-         } else {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
-         }
+   public void onBlockAdded(World world, int i, int j, int k) {
+      if(!world.editingBlocks) {
+         super.onBlockAdded(world, i, j, k);
+         if(!world.isRemote) {
+            this.updateAndPropagateCurrentStrength(world, i, j, k);
+            world.notifyBlocksOfNeighborChange(i, j + 1, k, this.blockID);
+            world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+            this.notifyWireNeighborsOfNeighborChange(world, i - 1, j, k);
+            this.notifyWireNeighborsOfNeighborChange(world, i + 1, j, k);
+            this.notifyWireNeighborsOfNeighborChange(world, i, j, k - 1);
+            this.notifyWireNeighborsOfNeighborChange(world, i, j, k + 1);
+            if(world.isBlockNormalCube(i - 1, j, k)) {
+               this.notifyWireNeighborsOfNeighborChange(world, i - 1, j + 1, k);
+            } else {
+               this.notifyWireNeighborsOfNeighborChange(world, i - 1, j - 1, k);
+            }
 
-         if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
-         } else {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
-         }
+            if(world.isBlockNormalCube(i + 1, j, k)) {
+               this.notifyWireNeighborsOfNeighborChange(world, i + 1, j + 1, k);
+            } else {
+               this.notifyWireNeighborsOfNeighborChange(world, i + 1, j - 1, k);
+            }
 
-         if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
-         } else {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
-         }
+            if(world.isBlockNormalCube(i, j, k - 1)) {
+               this.notifyWireNeighborsOfNeighborChange(world, i, j + 1, k - 1);
+            } else {
+               this.notifyWireNeighborsOfNeighborChange(world, i, j - 1, k - 1);
+            }
 
-         if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
-         } else {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
+            if(world.isBlockNormalCube(i, j, k + 1)) {
+               this.notifyWireNeighborsOfNeighborChange(world, i, j + 1, k + 1);
+            } else {
+               this.notifyWireNeighborsOfNeighborChange(world, i, j - 1, k + 1);
+            }
          }
 
       }
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      super.breakBlock(var1, var2, var3, var4, var5, var6);
-      if(!var1.isRemote) {
-         var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-         this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-         this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-         this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-         this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-         this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-         if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      super.breakBlock(world, i, j, k, l, i1);
+      if(!world.isRemote) {
+         world.notifyBlocksOfNeighborChange(i, j + 1, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j - 1, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i + 1, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i - 1, j, k, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j, k + 1, this.blockID);
+         world.notifyBlocksOfNeighborChange(i, j, k - 1, this.blockID);
+         this.updateAndPropagateCurrentStrength(world, i, j, k);
+         this.notifyWireNeighborsOfNeighborChange(world, i - 1, j, k);
+         this.notifyWireNeighborsOfNeighborChange(world, i + 1, j, k);
+         this.notifyWireNeighborsOfNeighborChange(world, i, j, k - 1);
+         this.notifyWireNeighborsOfNeighborChange(world, i, j, k + 1);
+         if(world.isBlockNormalCube(i - 1, j, k)) {
+            this.notifyWireNeighborsOfNeighborChange(world, i - 1, j + 1, k);
          } else {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
+            this.notifyWireNeighborsOfNeighborChange(world, i - 1, j - 1, k);
          }
 
-         if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
+         if(world.isBlockNormalCube(i + 1, j, k)) {
+            this.notifyWireNeighborsOfNeighborChange(world, i + 1, j + 1, k);
          } else {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
+            this.notifyWireNeighborsOfNeighborChange(world, i + 1, j - 1, k);
          }
 
-         if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
+         if(world.isBlockNormalCube(i, j, k - 1)) {
+            this.notifyWireNeighborsOfNeighborChange(world, i, j + 1, k - 1);
          } else {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
+            this.notifyWireNeighborsOfNeighborChange(world, i, j - 1, k - 1);
          }
 
-         if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
+         if(world.isBlockNormalCube(i, j, k + 1)) {
+            this.notifyWireNeighborsOfNeighborChange(world, i, j + 1, k + 1);
          } else {
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
+            this.notifyWireNeighborsOfNeighborChange(world, i, j - 1, k + 1);
          }
-
       }
+
    }
 
-   private int getMaxCurrentStrength(World var1, int var2, int var3, int var4, int var5) {
-      if(var1.getBlockId(var2, var3, var4) != this.blockID) {
-         return var5;
+   public int getMaxCurrentStrength(World world, int i, int j, int k, int l) {
+      if(world.getBlockId(i, j, k) != this.blockID) {
+         return l;
       } else {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         return var6 > var5?var6:var5;
+         int i1 = world.getBlockMetadata(i, j, k);
+         return i1 > l?i1:l;
       }
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(!var1.isRemote) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         boolean var7 = this.canPlaceBlockAt(var1, var2, var3, var4);
-         if(var7) {
-            this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(!world.isRemote) {
+         int i1 = world.getBlockMetadata(i, j, k);
+         boolean flag = this.canPlaceBlockAt(world, i, j, k);
+         if(flag) {
+            this.updateAndPropagateCurrentStrength(world, i, j, k);
          } else {
-            this.dropBlockAsItem(var1, var2, var3, var4, var6, 0);
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+            this.dropBlockAsItem(world, i, j, k, i1, 0);
+            world.setBlockWithNotify(i, j, k, 0);
          }
 
-         super.onNeighborBlockChange(var1, var2, var3, var4, var5);
+         super.onNeighborBlockChange(world, i, j, k, l);
       }
+
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Item.redstone.shiftedIndex;
    }
 
-   public boolean isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return !this.wiresProvidePower?false:this.isProvidingWeakPower(var1, var2, var3, var4, var5);
+   public boolean isProvidingStrongPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return !this.wiresProvidePower?false:this.isProvidingWeakPower(iblockaccess, i, j, k, l);
    }
 
-   public boolean isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+   public boolean isProvidingWeakPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
       if(!this.wiresProvidePower) {
          return false;
-      } else if(var1.getBlockMetadata(var2, var3, var4) == 0) {
+      } else if(iblockaccess.getBlockMetadata(i, j, k) == 0) {
          return false;
-      } else if(var5 == 1) {
+      } else if(l == 1) {
          return true;
       } else {
-         boolean var6 = isPoweredOrRepeater(var1, var2 - 1, var3, var4, 1) || !var1.isBlockNormalCube(var2 - 1, var3, var4) && isPoweredOrRepeater(var1, var2 - 1, var3 - 1, var4, -1);
-         boolean var7 = isPoweredOrRepeater(var1, var2 + 1, var3, var4, 3) || !var1.isBlockNormalCube(var2 + 1, var3, var4) && isPoweredOrRepeater(var1, var2 + 1, var3 - 1, var4, -1);
-         boolean var8 = isPoweredOrRepeater(var1, var2, var3, var4 - 1, 2) || !var1.isBlockNormalCube(var2, var3, var4 - 1) && isPoweredOrRepeater(var1, var2, var3 - 1, var4 - 1, -1);
-         boolean var9 = isPoweredOrRepeater(var1, var2, var3, var4 + 1, 0) || !var1.isBlockNormalCube(var2, var3, var4 + 1) && isPoweredOrRepeater(var1, var2, var3 - 1, var4 + 1, -1);
-         if(!var1.isBlockNormalCube(var2, var3 + 1, var4)) {
-            if(var1.isBlockNormalCube(var2 - 1, var3, var4) && isPoweredOrRepeater(var1, var2 - 1, var3 + 1, var4, -1)) {
-               var6 = true;
+         boolean flag = isPoweredOrRepeater(iblockaccess, i - 1, j, k, 1) || !iblockaccess.isBlockNormalCube(i - 1, j, k) && isPoweredOrRepeater(iblockaccess, i - 1, j - 1, k, -1);
+         boolean flag1 = isPoweredOrRepeater(iblockaccess, i + 1, j, k, 3) || !iblockaccess.isBlockNormalCube(i + 1, j, k) && isPoweredOrRepeater(iblockaccess, i + 1, j - 1, k, -1);
+         boolean flag2 = isPoweredOrRepeater(iblockaccess, i, j, k - 1, 2) || !iblockaccess.isBlockNormalCube(i, j, k - 1) && isPoweredOrRepeater(iblockaccess, i, j - 1, k - 1, -1);
+         boolean flag3 = isPoweredOrRepeater(iblockaccess, i, j, k + 1, 0) || !iblockaccess.isBlockNormalCube(i, j, k + 1) && isPoweredOrRepeater(iblockaccess, i, j - 1, k + 1, -1);
+         if(!iblockaccess.isBlockNormalCube(i, j + 1, k)) {
+            if(iblockaccess.isBlockNormalCube(i - 1, j, k) && isPoweredOrRepeater(iblockaccess, i - 1, j + 1, k, -1)) {
+               flag = true;
             }
 
-            if(var1.isBlockNormalCube(var2 + 1, var3, var4) && isPoweredOrRepeater(var1, var2 + 1, var3 + 1, var4, -1)) {
-               var7 = true;
+            if(iblockaccess.isBlockNormalCube(i + 1, j, k) && isPoweredOrRepeater(iblockaccess, i + 1, j + 1, k, -1)) {
+               flag1 = true;
             }
 
-            if(var1.isBlockNormalCube(var2, var3, var4 - 1) && isPoweredOrRepeater(var1, var2, var3 + 1, var4 - 1, -1)) {
-               var8 = true;
+            if(iblockaccess.isBlockNormalCube(i, j, k - 1) && isPoweredOrRepeater(iblockaccess, i, j + 1, k - 1, -1)) {
+               flag2 = true;
             }
 
-            if(var1.isBlockNormalCube(var2, var3, var4 + 1) && isPoweredOrRepeater(var1, var2, var3 + 1, var4 + 1, -1)) {
-               var9 = true;
+            if(iblockaccess.isBlockNormalCube(i, j, k + 1) && isPoweredOrRepeater(iblockaccess, i, j + 1, k + 1, -1)) {
+               flag3 = true;
             }
          }
 
-         return !var8 && !var7 && !var6 && !var9 && var5 >= 2 && var5 <= 5?true:(var5 == 2 && var8 && !var6 && !var7?true:(var5 == 3 && var9 && !var6 && !var7?true:(var5 == 4 && var6 && !var8 && !var9?true:var5 == 5 && var7 && !var8 && !var9)));
+         return !flag2 && !flag1 && !flag && !flag3 && l >= 2 && l <= 5?true:(l == 2 && flag2 && !flag && !flag1?true:(l == 3 && flag3 && !flag && !flag1?true:(l == 4 && flag && !flag2 && !flag3?true:l == 5 && flag1 && !flag2 && !flag3)));
       }
    }
 
@@ -336,28 +347,28 @@
       return this.wiresProvidePower;
    }
 
-   public static boolean isPowerProviderOrWire(IBlockAccess var0, int var1, int var2, int var3, int var4) {
-      int var5 = var0.getBlockId(var1, var2, var3);
-      if(var5 == Block.redstoneWire.blockID) {
+   public static boolean isPowerProviderOrWire(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      int i1 = iblockaccess.getBlockId(i, j, k);
+      if(i1 == Block.redstoneWire.blockID) {
          return true;
-      } else if(var5 == 0) {
+      } else if(i1 == 0) {
          return false;
-      } else if(var5 != Block.redstoneRepeaterIdle.blockID && var5 != Block.redstoneRepeaterActive.blockID) {
-         return Block.blocksList[var5].canProvidePower() && var4 != -1;
+      } else if(i1 != Block.redstoneRepeaterIdle.blockID && i1 != Block.redstoneRepeaterActive.blockID) {
+         return Block.blocksList[i1].canProvidePower() && l != -1;
       } else {
-         int var6 = var0.getBlockMetadata(var1, var2, var3);
-         return var4 == (var6 & 3) || var4 == Direction.footInvisibleFaceRemap[var6 & 3];
+         int j1 = iblockaccess.getBlockMetadata(i, j, k);
+         return l == (j1 & 3) || l == Direction.footInvisibleFaceRemap[j1 & 3];
       }
    }
 
-   public static boolean isPoweredOrRepeater(IBlockAccess var0, int var1, int var2, int var3, int var4) {
-      if(isPowerProviderOrWire(var0, var1, var2, var3, var4)) {
+   public static boolean isPoweredOrRepeater(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      if(isPowerProviderOrWire(iblockaccess, i, j, k, l)) {
          return true;
       } else {
-         int var5 = var0.getBlockId(var1, var2, var3);
-         if(var5 == Block.redstoneRepeaterActive.blockID) {
-            int var6 = var0.getBlockMetadata(var1, var2, var3);
-            return var4 == (var6 & 3);
+         int i1 = iblockaccess.getBlockId(i, j, k);
+         if(i1 == Block.redstoneRepeaterActive.blockID) {
+            int j1 = iblockaccess.getBlockMetadata(i, j, k);
+            return l == (j1 & 3);
          } else {
             return false;
          }
Binary files mcp-mcdev/net/minecraft/src/BlockReed.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockReed.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockReed.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockReed.java
--- mcp-mcdev/net/minecraft/src/BlockReed.java	2012-11-29 21:15:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockReed.java	2012-11-29 20:44:40.000000000 -0800
@@ -6,63 +6,64 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class BlockReed extends Block {
 
-   protected BlockReed(int var1, int var2) {
-      super(var1, Material.plants);
-      this.blockIndexInTexture = var2;
-      float var3 = 0.375F;
-      this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 1.0F, 0.5F + var3);
+   protected BlockReed(int i, int j) {
+      super(i, Material.plants);
+      this.blockIndexInTexture = j;
+      float f = 0.375F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 1.0F, 0.5F + f);
       this.setTickRandomly(true);
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(var1.isAirBlock(var2, var3 + 1, var4)) {
-         int var6;
-         for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(world.isAirBlock(i, j + 1, k)) {
+         int l;
+         for(l = 1; world.getBlockId(i, j - l, k) == this.blockID; ++l) {
             ;
          }
 
-         if(var6 < 3) {
-            int var7 = var1.getBlockMetadata(var2, var3, var4);
-            if(var7 == 15) {
-               var1.setBlockWithNotify(var2, var3 + 1, var4, this.blockID);
-               var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+         if(l < 3) {
+            int i1 = world.getBlockMetadata(i, j, k);
+            if(i1 == 15) {
+               CraftEventFactory.handleBlockGrowEvent(world, i, j + 1, k, this.blockID, 0);
+               world.setBlockMetadataWithNotify(i, j, k, 0);
             } else {
-               var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
+               world.setBlockMetadataWithNotify(i, j, k, i1 + 1);
             }
          }
       }
 
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockId(var2, var3 - 1, var4);
-      return var5 == this.blockID?true:(var5 != Block.grass.blockID && var5 != Block.dirt.blockID && var5 != Block.sand.blockID?false:(var1.getBlockMaterial(var2 - 1, var3 - 1, var4) == Material.water?true:(var1.getBlockMaterial(var2 + 1, var3 - 1, var4) == Material.water?true:(var1.getBlockMaterial(var2, var3 - 1, var4 - 1) == Material.water?true:var1.getBlockMaterial(var2, var3 - 1, var4 + 1) == Material.water))));
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      int l = world.getBlockId(i, j - 1, k);
+      return l == this.blockID?true:(l != Block.grass.blockID && l != Block.dirt.blockID && l != Block.sand.blockID?false:(world.getBlockMaterial(i - 1, j - 1, k) == Material.water?true:(world.getBlockMaterial(i + 1, j - 1, k) == Material.water?true:(world.getBlockMaterial(i, j - 1, k - 1) == Material.water?true:world.getBlockMaterial(i, j - 1, k + 1) == Material.water))));
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      this.checkBlockCoordValid(var1, var2, var3, var4);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      this.checkBlockCoordValid(world, i, j, k);
    }
 
-   protected final void checkBlockCoordValid(World var1, int var2, int var3, int var4) {
-      if(!this.canBlockStay(var1, var2, var3, var4)) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   protected final void checkBlockCoordValid(World world, int i, int j, int k) {
+      if(!this.canBlockStay(world, i, j, k)) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
       }
 
    }
 
-   public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-      return this.canPlaceBlockAt(var1, var2, var3, var4);
+   public boolean canBlockStay(World world, int i, int j, int k) {
+      return this.canPlaceBlockAt(world, i, j, k);
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Item.reed.shiftedIndex;
    }
 
Binary files mcp-mcdev/net/minecraft/src/BlockSand.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSand.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockSand.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSand.java
--- mcp-mcdev/net/minecraft/src/BlockSand.java	2012-11-29 21:15:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSand.java	2012-11-29 20:44:40.000000000 -0800
@@ -12,72 +12,72 @@
    public static boolean fallInstantly = false;
 
 
-   public BlockSand(int var1, int var2) {
-      super(var1, var2, Material.sand);
+   public BlockSand(int i, int j) {
+      super(i, j, Material.sand);
       this.setCreativeTab(CreativeTabs.tabBlock);
    }
 
-   public BlockSand(int var1, int var2, Material var3) {
-      super(var1, var2, var3);
+   public BlockSand(int i, int j, Material material) {
+      super(i, j, material);
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+   public void onBlockAdded(World world, int i, int j, int k) {
+      world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote) {
-         this.tryToFall(var1, var2, var3, var4);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote) {
+         this.tryToFall(world, i, j, k);
       }
 
    }
 
-   private void tryToFall(World var1, int var2, int var3, int var4) {
-      if(canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
-         byte var8 = 32;
-         if(!fallInstantly && var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-            if(!var1.isRemote) {
-               EntityFallingSand var9 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID, var1.getBlockMetadata(var2, var3, var4));
-               this.onStartFalling(var9);
-               var1.spawnEntityInWorld(var9);
+   private void tryToFall(World world, int i, int j, int k) {
+      if(canFallBelow(world, i, j - 1, k) && j >= 0) {
+         byte b0 = 32;
+         if(!fallInstantly && world.checkChunksExist(i - b0, j - b0, k - b0, i + b0, j + b0, k + b0)) {
+            if(!world.isRemote) {
+               EntityFallingSand entityfallingblock = new EntityFallingSand(world, (double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), this.blockID, world.getBlockMetadata(i, j, k));
+               this.onStartFalling(entityfallingblock);
+               world.spawnEntityInWorld(entityfallingblock);
             }
          } else {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+            world.setBlockWithNotify(i, j, k, 0);
 
-            while(canFallBelow(var1, var2, var3 - 1, var4) && var3 > 0) {
-               --var3;
+            while(canFallBelow(world, i, j - 1, k) && j > 0) {
+               --j;
             }
 
-            if(var3 > 0) {
-               var1.setBlockWithNotify(var2, var3, var4, this.blockID);
+            if(j > 0) {
+               world.setBlockWithNotify(i, j, k, this.blockID);
             }
          }
       }
 
    }
 
-   protected void onStartFalling(EntityFallingSand var1) {}
+   protected void onStartFalling(EntityFallingSand entityfallingblock) {}
 
    public int tickRate() {
       return 5;
    }
 
-   public static boolean canFallBelow(World var0, int var1, int var2, int var3) {
-      int var4 = var0.getBlockId(var1, var2, var3);
-      if(var4 == 0) {
+   public static boolean canFallBelow(World world, int i, int j, int k) {
+      int l = world.getBlockId(i, j, k);
+      if(l == 0) {
          return true;
-      } else if(var4 == Block.fire.blockID) {
+      } else if(l == Block.fire.blockID) {
          return true;
       } else {
-         Material var5 = Block.blocksList[var4].blockMaterial;
-         return var5 == Material.water?true:var5 == Material.lava;
+         Material material = Block.blocksList[l].blockMaterial;
+         return material == Material.water?true:material == Material.lava;
       }
    }
 
-   public void onFinishFalling(World var1, int var2, int var3, int var4, int var5) {}
+   public void onFinishFalling(World world, int i, int j, int k, int l) {}
 
 }
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: BlockSapling$TreeGenerator.class
Binary files mcp-mcdev/net/minecraft/src/BlockSapling.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSapling.class differ
Only in mcp-mcdev/net/minecraft/src: BlockSapling.java
Binary files mcp-mcdev/net/minecraft/src/BlockSign.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSign.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockSign.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSign.java
--- mcp-mcdev/net/minecraft/src/BlockSign.java	2012-11-29 21:15:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSign.java	2012-11-29 20:44:39.000000000 -0800
@@ -2,12 +2,14 @@
 
 import java.util.Random;
 import net.minecraft.src.AxisAlignedBB;
+import net.minecraft.src.Block;
 import net.minecraft.src.BlockContainer;
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Item;
 import net.minecraft.src.Material;
 import net.minecraft.src.TileEntity;
 import net.minecraft.src.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockSign extends BlockContainer {
 
@@ -15,46 +17,46 @@
    private boolean isFreestanding;
 
 
-   protected BlockSign(int var1, Class var2, boolean var3) {
-      super(var1, Material.wood);
-      this.isFreestanding = var3;
+   protected BlockSign(int i, Class oclass, boolean flag) {
+      super(i, Material.wood);
+      this.isFreestanding = flag;
       this.blockIndexInTexture = 4;
-      this.signEntityClass = var2;
-      float var4 = 0.25F;
-      float var5 = 1.0F;
-      this.setBlockBounds(0.5F - var4, 0.0F, 0.5F - var4, 0.5F + var4, var5, 0.5F + var4);
+      this.signEntityClass = oclass;
+      float f = 0.25F;
+      float f1 = 1.0F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f1, 0.5F + f);
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
       if(!this.isFreestanding) {
-         int var5 = var1.getBlockMetadata(var2, var3, var4);
-         float var6 = 0.28125F;
-         float var7 = 0.78125F;
-         float var8 = 0.0F;
-         float var9 = 1.0F;
-         float var10 = 0.125F;
+         int l = iblockaccess.getBlockMetadata(i, j, k);
+         float f = 0.28125F;
+         float f1 = 0.78125F;
+         float f2 = 0.0F;
+         float f3 = 1.0F;
+         float f4 = 0.125F;
          this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-         if(var5 == 2) {
-            this.setBlockBounds(var8, var6, 1.0F - var10, var9, var7, 1.0F);
+         if(l == 2) {
+            this.setBlockBounds(f2, f, 1.0F - f4, f3, f1, 1.0F);
          }
 
-         if(var5 == 3) {
-            this.setBlockBounds(var8, var6, 0.0F, var9, var7, var10);
+         if(l == 3) {
+            this.setBlockBounds(f2, f, 0.0F, f3, f1, f4);
          }
 
-         if(var5 == 4) {
-            this.setBlockBounds(1.0F - var10, var6, var8, 1.0F, var7, var9);
+         if(l == 4) {
+            this.setBlockBounds(1.0F - f4, f, f2, 1.0F, f1, f3);
          }
 
-         if(var5 == 5) {
-            this.setBlockBounds(0.0F, var6, var8, var10, var7, var9);
+         if(l == 5) {
+            this.setBlockBounds(0.0F, f, f2, f4, f1, f3);
          }
-
       }
+
    }
 
    public int getRenderType() {
@@ -65,7 +67,7 @@
       return false;
    }
 
-   public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
+   public boolean getBlocksMovement(IBlockAccess iblockaccess, int i, int j, int k) {
       return true;
    }
 
@@ -73,7 +75,7 @@
       return false;
    }
 
-   public TileEntity createNewTileEntity(World var1) {
+   public TileEntity createNewTileEntity(World world) {
       try {
          return (TileEntity)this.signEntityClass.newInstance();
       } catch (Exception var3) {
@@ -81,41 +83,48 @@
       }
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Item.sign.shiftedIndex;
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      boolean var6 = false;
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      boolean flag = false;
       if(this.isFreestanding) {
-         if(!var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
-            var6 = true;
+         if(!world.getBlockMaterial(i, j - 1, k).isSolid()) {
+            flag = true;
          }
       } else {
-         int var7 = var1.getBlockMetadata(var2, var3, var4);
-         var6 = true;
-         if(var7 == 2 && var1.getBlockMaterial(var2, var3, var4 + 1).isSolid()) {
-            var6 = false;
+         int block = world.getBlockMetadata(i, j, k);
+         flag = true;
+         if(block == 2 && world.getBlockMaterial(i, j, k + 1).isSolid()) {
+            flag = false;
          }
 
-         if(var7 == 3 && var1.getBlockMaterial(var2, var3, var4 - 1).isSolid()) {
-            var6 = false;
+         if(block == 3 && world.getBlockMaterial(i, j, k - 1).isSolid()) {
+            flag = false;
          }
 
-         if(var7 == 4 && var1.getBlockMaterial(var2 + 1, var3, var4).isSolid()) {
-            var6 = false;
+         if(block == 4 && world.getBlockMaterial(i + 1, j, k).isSolid()) {
+            flag = false;
          }
 
-         if(var7 == 5 && var1.getBlockMaterial(var2 - 1, var3, var4).isSolid()) {
-            var6 = false;
+         if(block == 5 && world.getBlockMaterial(i - 1, j, k).isSolid()) {
+            flag = false;
          }
       }
 
-      if(var6) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+      if(flag) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
+      }
+
+      super.onNeighborBlockChange(world, i, j, k, l);
+      if(Block.blocksList[l] != null && Block.blocksList[l].canProvidePower()) {
+         org.bukkit.block.Block block1 = world.getWorld().getBlockAt(i, j, k);
+         int power = block1.getBlockPower();
+         BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block1, power, power);
+         world.getServer().getPluginManager().callEvent(eventRedstone);
       }
 
-      super.onNeighborBlockChange(var1, var2, var3, var4, var5);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockSkull.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSkull.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockSkull.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSkull.java
--- mcp-mcdev/net/minecraft/src/BlockSkull.java	2012-11-29 21:15:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSkull.java	2012-11-29 20:44:39.000000000 -0800
@@ -16,11 +16,13 @@
 import net.minecraft.src.TileEntity;
 import net.minecraft.src.TileEntitySkull;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public class BlockSkull extends BlockContainer {
 
-   protected BlockSkull(int var1) {
-      super(var1, Material.circuits);
+   protected BlockSkull(int i) {
+      super(i, Material.circuits);
       this.blockIndexInTexture = 104;
       this.setBlockBounds(0.25F, 0.0F, 0.25F, 0.75F, 0.5F, 0.75F);
    }
@@ -37,9 +39,9 @@
       return false;
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4) & 7;
-      switch(var5) {
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k) & 7;
+      switch(l) {
       case 1:
       default:
          this.setBlockBounds(0.25F, 0.0F, 0.25F, 0.75F, 0.5F, 0.75F);
@@ -59,133 +61,128 @@
 
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-      this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-      return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
+      this.setBlockBoundsBasedOnState(world, i, j, k);
+      return super.getCollisionBoundingBoxFromPool(world, i, j, k);
    }
 
-   public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
-      int var6 = MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 2.5D) & 3;
-      var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+   public void onBlockPlacedBy(World world, int i, int j, int k, EntityLiving entityliving) {
+      int l = MathHelper.floor_double((double)(entityliving.rotationYaw * 4.0F / 360.0F) + 2.5D) & 3;
+      world.setBlockMetadataWithNotify(i, j, k, l);
    }
 
-   public TileEntity createNewTileEntity(World var1) {
+   public TileEntity createNewTileEntity(World world) {
       return new TileEntitySkull();
    }
 
-   public int getDamageValue(World var1, int var2, int var3, int var4) {
-      TileEntity var5 = var1.getBlockTileEntity(var2, var3, var4);
-      return var5 != null && var5 instanceof TileEntitySkull?((TileEntitySkull)var5).func_82117_a():super.getDamageValue(var1, var2, var3, var4);
-   }
-
-   public int damageDropped(int var1) {
-      return var1;
+   public int getDamageValue(World world, int i, int j, int k) {
+      TileEntity tileentity = world.getBlockTileEntity(i, j, k);
+      return tileentity != null && tileentity instanceof TileEntitySkull?((TileEntitySkull)tileentity).func_82117_a():super.getDamageValue(world, i, j, k);
+   }
+
+   public int damageDropped(int i) {
+      return i;
+   }
+
+   public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f, int i1) {
+      if(world.rand.nextFloat() < f) {
+         ItemStack itemstack = new ItemStack(Item.skull.shiftedIndex, 1, this.getDamageValue(world, i, j, k));
+         TileEntitySkull tileentityskull = (TileEntitySkull)world.getBlockTileEntity(i, j, k);
+         if(tileentityskull.func_82117_a() == 3 && tileentityskull.func_82120_c() != null && tileentityskull.func_82120_c().length() > 0) {
+            itemstack.setTagCompound(new NBTTagCompound());
+            itemstack.getTagCompound().setString("SkullOwner", tileentityskull.func_82120_c());
+         }
+
+         this.dropBlockAsItem_do(world, i, j, k, itemstack);
+      }
+
    }
 
-   public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {}
-
-   public void onBlockHarvested(World var1, int var2, int var3, int var4, int var5, EntityPlayer var6) {
-      if(var6.capabilities.isCreativeMode) {
-         var5 |= 8;
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
+   public void onBlockHarvested(World world, int i, int j, int k, int l, EntityPlayer entityhuman) {
+      if(entityhuman.capabilities.isCreativeMode) {
+         l |= 8;
+         world.setBlockMetadataWithNotify(i, j, k, l);
       }
 
-      super.onBlockHarvested(var1, var2, var3, var4, var5, var6);
+      super.onBlockHarvested(world, i, j, k, l, entityhuman);
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      if(!var1.isRemote) {
-         if((var6 & 8) == 0) {
-            ItemStack var7 = new ItemStack(Item.skull.shiftedIndex, 1, this.getDamageValue(var1, var2, var3, var4));
-            TileEntitySkull var8 = (TileEntitySkull)var1.getBlockTileEntity(var2, var3, var4);
-            if(var8.func_82117_a() == 3 && var8.func_82120_c() != null && var8.func_82120_c().length() > 0) {
-               var7.setTagCompound(new NBTTagCompound());
-               var7.getTagCompound().setString("SkullOwner", var8.func_82120_c());
-            }
-
-            this.dropBlockAsItem_do(var1, var2, var3, var4, var7);
-         }
-
-         super.breakBlock(var1, var2, var3, var4, var5, var6);
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      if(!world.isRemote) {
+         super.breakBlock(world, i, j, k, l, i1);
       }
+
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Item.skull.shiftedIndex;
    }
 
-   public void makeWither(World var1, int var2, int var3, int var4, TileEntitySkull var5) {
-      if(var5.func_82117_a() == 1 && var3 >= 2 && var1.difficultySetting > 0) {
-         int var6 = Block.slowSand.blockID;
-
-         int var7;
-         EntityWither var8;
-         int var9;
-         for(var7 = -2; var7 <= 0; ++var7) {
-            if(var1.getBlockId(var2, var3 - 1, var4 + var7) == var6 && var1.getBlockId(var2, var3 - 1, var4 + var7 + 1) == var6 && var1.getBlockId(var2, var3 - 2, var4 + var7 + 1) == var6 && var1.getBlockId(var2, var3 - 1, var4 + var7 + 2) == var6 && this.func_82528_d(var1, var2, var3, var4 + var7, 1) && this.func_82528_d(var1, var2, var3, var4 + var7 + 1, 1) && this.func_82528_d(var1, var2, var3, var4 + var7 + 2, 1)) {
-               var1.setBlockMetadata(var2, var3, var4 + var7, 8);
-               var1.setBlockMetadata(var2, var3, var4 + var7 + 1, 8);
-               var1.setBlockMetadata(var2, var3, var4 + var7 + 2, 8);
-               var1.setBlock(var2, var3, var4 + var7, 0);
-               var1.setBlock(var2, var3, var4 + var7 + 1, 0);
-               var1.setBlock(var2, var3, var4 + var7 + 2, 0);
-               var1.setBlock(var2, var3 - 1, var4 + var7, 0);
-               var1.setBlock(var2, var3 - 1, var4 + var7 + 1, 0);
-               var1.setBlock(var2, var3 - 1, var4 + var7 + 2, 0);
-               var1.setBlock(var2, var3 - 2, var4 + var7 + 1, 0);
-               if(!var1.isRemote) {
-                  var8 = new EntityWither(var1);
-                  var8.setLocationAndAngles((double)var2 + 0.5D, (double)var3 - 1.45D, (double)(var4 + var7) + 1.5D, 90.0F, 0.0F);
-                  var8.renderYawOffset = 90.0F;
-                  var8.func_82206_m();
-                  var1.spawnEntityInWorld(var8);
+   public void makeWither(World world, int i, int j, int k, TileEntitySkull tileentityskull) {
+      if(tileentityskull.func_82117_a() == 1 && j >= 2 && world.difficultySetting > 0) {
+         int l = Block.slowSand.blockID;
+
+         int i1;
+         BlockStateListPopulator blockList;
+         EntityWither entitywither;
+         int j1;
+         for(i1 = -2; i1 <= 0; ++i1) {
+            if(world.getBlockId(i, j - 1, k + i1) == l && world.getBlockId(i, j - 1, k + i1 + 1) == l && world.getBlockId(i, j - 2, k + i1 + 1) == l && world.getBlockId(i, j - 1, k + i1 + 2) == l && this.func_82528_d(world, i, j, k + i1, 1) && this.func_82528_d(world, i, j, k + i1 + 1, 1) && this.func_82528_d(world, i, j, k + i1 + 2, 1)) {
+               blockList = new BlockStateListPopulator(world.getWorld());
+               world.setBlockMetadata(i, j, k + i1, 8);
+               world.setBlockMetadata(i, j, k + i1 + 1, 8);
+               world.setBlockMetadata(i, j, k + i1 + 2, 8);
+               blockList.setTypeId(i, j, k + i1, 0);
+               blockList.setTypeId(i, j, k + i1 + 1, 0);
+               blockList.setTypeId(i, j, k + i1 + 2, 0);
+               blockList.setTypeId(i, j - 1, k + i1, 0);
+               blockList.setTypeId(i, j - 1, k + i1 + 1, 0);
+               blockList.setTypeId(i, j - 1, k + i1 + 2, 0);
+               blockList.setTypeId(i, j - 2, k + i1 + 1, 0);
+               if(!world.isRemote) {
+                  entitywither = new EntityWither(world);
+                  entitywither.setLocationAndAngles((double)i + 0.5D, (double)j - 1.45D, (double)(k + i1) + 1.5D, 90.0F, 0.0F);
+                  entitywither.renderYawOffset = 90.0F;
+                  entitywither.func_82206_m();
+                  if(world.addEntity(entitywither, SpawnReason.BUILD_WITHER)) {
+                     blockList.updateList();
+                  }
                }
 
-               for(var9 = 0; var9 < 120; ++var9) {
-                  var1.spawnParticle("snowballpoof", (double)var2 + var1.rand.nextDouble(), (double)(var3 - 2) + var1.rand.nextDouble() * 3.9D, (double)(var4 + var7 + 1) + var1.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+               for(j1 = 0; j1 < 120; ++j1) {
+                  world.spawnParticle("snowballpoof", (double)i + world.rand.nextDouble(), (double)(j - 2) + world.rand.nextDouble() * 3.9D, (double)(k + i1 + 1) + world.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
                }
 
-               var1.notifyBlockChange(var2, var3, var4 + var7, 0);
-               var1.notifyBlockChange(var2, var3, var4 + var7 + 1, 0);
-               var1.notifyBlockChange(var2, var3, var4 + var7 + 2, 0);
-               var1.notifyBlockChange(var2, var3 - 1, var4 + var7, 0);
-               var1.notifyBlockChange(var2, var3 - 1, var4 + var7 + 1, 0);
-               var1.notifyBlockChange(var2, var3 - 1, var4 + var7 + 2, 0);
-               var1.notifyBlockChange(var2, var3 - 2, var4 + var7 + 1, 0);
                return;
             }
          }
 
-         for(var7 = -2; var7 <= 0; ++var7) {
-            if(var1.getBlockId(var2 + var7, var3 - 1, var4) == var6 && var1.getBlockId(var2 + var7 + 1, var3 - 1, var4) == var6 && var1.getBlockId(var2 + var7 + 1, var3 - 2, var4) == var6 && var1.getBlockId(var2 + var7 + 2, var3 - 1, var4) == var6 && this.func_82528_d(var1, var2 + var7, var3, var4, 1) && this.func_82528_d(var1, var2 + var7 + 1, var3, var4, 1) && this.func_82528_d(var1, var2 + var7 + 2, var3, var4, 1)) {
-               var1.setBlockMetadata(var2 + var7, var3, var4, 8);
-               var1.setBlockMetadata(var2 + var7 + 1, var3, var4, 8);
-               var1.setBlockMetadata(var2 + var7 + 2, var3, var4, 8);
-               var1.setBlock(var2 + var7, var3, var4, 0);
-               var1.setBlock(var2 + var7 + 1, var3, var4, 0);
-               var1.setBlock(var2 + var7 + 2, var3, var4, 0);
-               var1.setBlock(var2 + var7, var3 - 1, var4, 0);
-               var1.setBlock(var2 + var7 + 1, var3 - 1, var4, 0);
-               var1.setBlock(var2 + var7 + 2, var3 - 1, var4, 0);
-               var1.setBlock(var2 + var7 + 1, var3 - 2, var4, 0);
-               if(!var1.isRemote) {
-                  var8 = new EntityWither(var1);
-                  var8.setLocationAndAngles((double)(var2 + var7) + 1.5D, (double)var3 - 1.45D, (double)var4 + 0.5D, 0.0F, 0.0F);
-                  var8.func_82206_m();
-                  var1.spawnEntityInWorld(var8);
+         for(i1 = -2; i1 <= 0; ++i1) {
+            if(world.getBlockId(i + i1, j - 1, k) == l && world.getBlockId(i + i1 + 1, j - 1, k) == l && world.getBlockId(i + i1 + 1, j - 2, k) == l && world.getBlockId(i + i1 + 2, j - 1, k) == l && this.func_82528_d(world, i + i1, j, k, 1) && this.func_82528_d(world, i + i1 + 1, j, k, 1) && this.func_82528_d(world, i + i1 + 2, j, k, 1)) {
+               blockList = new BlockStateListPopulator(world.getWorld());
+               world.setBlockMetadata(i + i1, j, k, 8);
+               world.setBlockMetadata(i + i1 + 1, j, k, 8);
+               world.setBlockMetadata(i + i1 + 2, j, k, 8);
+               blockList.setTypeId(i + i1, j, k, 0);
+               blockList.setTypeId(i + i1 + 1, j, k, 0);
+               blockList.setTypeId(i + i1 + 2, j, k, 0);
+               blockList.setTypeId(i + i1, j - 1, k, 0);
+               blockList.setTypeId(i + i1 + 1, j - 1, k, 0);
+               blockList.setTypeId(i + i1 + 2, j - 1, k, 0);
+               blockList.setTypeId(i + i1 + 1, j - 2, k, 0);
+               if(!world.isRemote) {
+                  entitywither = new EntityWither(world);
+                  entitywither.setLocationAndAngles((double)(i + i1) + 1.5D, (double)j - 1.45D, (double)k + 0.5D, 0.0F, 0.0F);
+                  entitywither.func_82206_m();
+                  if(world.addEntity(entitywither, SpawnReason.BUILD_WITHER)) {
+                     blockList.updateList();
+                  }
                }
 
-               for(var9 = 0; var9 < 120; ++var9) {
-                  var1.spawnParticle("snowballpoof", (double)(var2 + var7 + 1) + var1.rand.nextDouble(), (double)(var3 - 2) + var1.rand.nextDouble() * 3.9D, (double)var4 + var1.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+               for(j1 = 0; j1 < 120; ++j1) {
+                  world.spawnParticle("snowballpoof", (double)(i + i1 + 1) + world.rand.nextDouble(), (double)(j - 2) + world.rand.nextDouble() * 3.9D, (double)k + world.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
                }
 
-               var1.notifyBlockChange(var2 + var7, var3, var4, 0);
-               var1.notifyBlockChange(var2 + var7 + 1, var3, var4, 0);
-               var1.notifyBlockChange(var2 + var7 + 2, var3, var4, 0);
-               var1.notifyBlockChange(var2 + var7, var3 - 1, var4, 0);
-               var1.notifyBlockChange(var2 + var7 + 1, var3 - 1, var4, 0);
-               var1.notifyBlockChange(var2 + var7 + 2, var3 - 1, var4, 0);
-               var1.notifyBlockChange(var2 + var7 + 1, var3 - 2, var4, 0);
                return;
             }
          }
@@ -193,12 +190,12 @@
 
    }
 
-   private boolean func_82528_d(World var1, int var2, int var3, int var4, int var5) {
-      if(var1.getBlockId(var2, var3, var4) != this.blockID) {
+   private boolean func_82528_d(World world, int i, int j, int k, int l) {
+      if(world.getBlockId(i, j, k) != this.blockID) {
          return false;
       } else {
-         TileEntity var6 = var1.getBlockTileEntity(var2, var3, var4);
-         return var6 != null && var6 instanceof TileEntitySkull?((TileEntitySkull)var6).func_82117_a() == var5:false;
+         TileEntity tileentity = world.getBlockTileEntity(i, j, k);
+         return tileentity != null && tileentity instanceof TileEntitySkull?((TileEntitySkull)tileentity).func_82117_a() == l:false;
       }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockSnow.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSnow.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockSnow.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSnow.java
--- mcp-mcdev/net/minecraft/src/BlockSnow.java	2012-11-29 21:15:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockSnow.java	2012-11-29 20:44:39.000000000 -0800
@@ -12,19 +12,20 @@
 import net.minecraft.src.Material;
 import net.minecraft.src.StatList;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class BlockSnow extends Block {
 
-   protected BlockSnow(int var1, int var2) {
-      super(var1, var2, Material.snow);
+   protected BlockSnow(int i, int j) {
+      super(i, j, Material.snow);
       this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
       this.setTickRandomly(true);
       this.setCreativeTab(CreativeTabs.tabDecorations);
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4) & 7;
-      return var5 >= 3?AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)((float)var3 + 0.5F), (double)var4 + this.maxZ):null;
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
+      int l = world.getBlockMetadata(i, j, k) & 7;
+      return l >= 3?AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)i + this.minX, (double)j + this.minY, (double)k + this.minZ, (double)i + this.maxX, (double)((float)j + 0.5F), (double)k + this.maxZ):null;
    }
 
    public boolean isOpaqueCube() {
@@ -35,50 +36,55 @@
       return false;
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4) & 7;
-      float var6 = (float)(2 * (1 + var5)) / 16.0F;
-      this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, var6, 1.0F);
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k) & 7;
+      float f = (float)(2 * (1 + l)) / 16.0F;
+      this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, f, 1.0F);
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockId(var2, var3 - 1, var4);
-      return var5 != 0 && (var5 == Block.leaves.blockID || Block.blocksList[var5].isOpaqueCube())?var1.getBlockMaterial(var2, var3 - 1, var4).blocksMovement():false;
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      int l = world.getBlockId(i, j - 1, k);
+      return l != 0 && (l == Block.leaves.blockID || Block.blocksList[l].isOpaqueCube())?world.getBlockMaterial(i, j - 1, k).blocksMovement():false;
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      this.canSnowStay(var1, var2, var3, var4);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      this.canSnowStay(world, i, j, k);
    }
 
-   private boolean canSnowStay(World var1, int var2, int var3, int var4) {
-      if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   private boolean canSnowStay(World world, int i, int j, int k) {
+      if(!this.canPlaceBlockAt(world, i, j, k)) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlock(i, j, k, 0);
+         world.markBlockForUpdate(i, j, k);
          return false;
       } else {
          return true;
       }
    }
 
-   public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
-      int var7 = Item.snowball.shiftedIndex;
-      this.dropBlockAsItem_do(var1, var3, var4, var5, new ItemStack(var7, 1, 0));
-      var1.setBlockWithNotify(var3, var4, var5, 0);
-      var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
+   public void harvestBlock(World world, EntityPlayer entityhuman, int i, int j, int k, int l) {
+      int i1 = Item.snowball.shiftedIndex;
+      this.dropBlockAsItem_do(world, i, j, k, new ItemStack(i1, 1, 0));
+      world.setBlockWithNotify(i, j, k, 0);
+      entityhuman.addStat(StatList.mineBlockStatArray[this.blockID], 1);
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Item.snowball.shiftedIndex;
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 0;
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(var1.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4) > 11) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(world.getSavedLightValue(EnumSkyBlock.Block, i, j, k) > 11) {
+         if(CraftEventFactory.callBlockFadeEvent(world.getWorld().getBlockAt(i, j, k), 0).isCancelled()) {
+            return;
+         }
+
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/BlockStationary.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockStationary.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockStationary.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockStationary.java
--- mcp-mcdev/net/minecraft/src/BlockStationary.java	2012-11-29 21:15:19.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockStationary.java	2012-11-29 20:44:39.000000000 -0800
@@ -6,77 +6,95 @@
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockIgniteEvent;
+import org.bukkit.event.block.BlockIgniteEvent.IgniteCause;
 
 public class BlockStationary extends BlockFluid {
 
-   protected BlockStationary(int var1, Material var2) {
-      super(var1, var2);
+   protected BlockStationary(int i, Material material) {
+      super(i, material);
       this.setTickRandomly(false);
-      if(var2 == Material.lava) {
+      if(material == Material.lava) {
          this.setTickRandomly(true);
       }
 
    }
 
-   public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
+   public boolean getBlocksMovement(IBlockAccess iblockaccess, int i, int j, int k) {
       return this.blockMaterial != Material.lava;
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-      if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-         this.setNotStationary(var1, var2, var3, var4);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      super.onNeighborBlockChange(world, i, j, k, l);
+      if(world.getBlockId(i, j, k) == this.blockID) {
+         this.setNotStationary(world, i, j, k);
       }
 
    }
 
-   private void setNotStationary(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      var1.editingBlocks = true;
-      var1.setBlockAndMetadata(var2, var3, var4, this.blockID - 1, var5);
-      var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-      var1.scheduleBlockUpdate(var2, var3, var4, this.blockID - 1, this.tickRate());
-      var1.editingBlocks = false;
+   private void setNotStationary(World world, int i, int j, int k) {
+      int l = world.getBlockMetadata(i, j, k);
+      world.editingBlocks = true;
+      world.setBlockAndMetadata(i, j, k, this.blockID - 1, l);
+      world.markBlockRangeForRenderUpdate(i, j, k, i, j, k);
+      world.scheduleBlockUpdate(i, j, k, this.blockID - 1, this.tickRate());
+      world.editingBlocks = false;
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+   public void updateTick(World world, int i, int j, int k, Random random) {
       if(this.blockMaterial == Material.lava) {
-         int var6 = var5.nextInt(3);
-
-         int var7;
-         int var8;
-         for(var7 = 0; var7 < var6; ++var7) {
-            var2 += var5.nextInt(3) - 1;
-            ++var3;
-            var4 += var5.nextInt(3) - 1;
-            var8 = var1.getBlockId(var2, var3, var4);
-            if(var8 == 0) {
-               if(this.isFlammable(var1, var2 - 1, var3, var4) || this.isFlammable(var1, var2 + 1, var3, var4) || this.isFlammable(var1, var2, var3, var4 - 1) || this.isFlammable(var1, var2, var3, var4 + 1) || this.isFlammable(var1, var2, var3 - 1, var4) || this.isFlammable(var1, var2, var3 + 1, var4)) {
-                  var1.setBlockWithNotify(var2, var3, var4, Block.fire.blockID);
-                  return;
+         int l = random.nextInt(3);
+         CraftWorld bworld = world.getWorld();
+         IgniteCause igniteCause = IgniteCause.LAVA;
+         int i1 = 0;
+
+         while(true) {
+            int j1;
+            if(i1 >= l) {
+               if(l == 0) {
+                  i1 = i;
+                  j1 = k;
+
+                  for(int var13 = 0; var13 < 3; ++var13) {
+                     i = i1 + random.nextInt(3) - 1;
+                     k = j1 + random.nextInt(3) - 1;
+                     if(world.isAirBlock(i, j + 1, k) && this.isFlammable(world, i, j, k)) {
+                        org.bukkit.block.Block block = bworld.getBlockAt(i, j + 1, k);
+                        if(block.getTypeId() == Block.fire.blockID || !((BlockIgniteEvent)CraftEventFactory.callEvent(new BlockIgniteEvent(block, igniteCause, (Player)null))).isCancelled()) {
+                           world.setBlockWithNotify(i, j + 1, k, Block.fire.blockID);
+                        }
+                     }
+                  }
                }
-            } else if(Block.blocksList[var8].blockMaterial.blocksMovement()) {
-               return;
+               break;
             }
-         }
 
-         if(var6 == 0) {
-            var7 = var2;
-            var8 = var4;
-
-            for(int var9 = 0; var9 < 3; ++var9) {
-               var2 = var7 + var5.nextInt(3) - 1;
-               var4 = var8 + var5.nextInt(3) - 1;
-               if(var1.isAirBlock(var2, var3 + 1, var4) && this.isFlammable(var1, var2, var3, var4)) {
-                  var1.setBlockWithNotify(var2, var3 + 1, var4, Block.fire.blockID);
+            i += random.nextInt(3) - 1;
+            ++j;
+            k += random.nextInt(3) - 1;
+            j1 = world.getBlockId(i, j, k);
+            if(j1 == 0) {
+               if(this.isFlammable(world, i - 1, j, k) || this.isFlammable(world, i + 1, j, k) || this.isFlammable(world, i, j, k - 1) || this.isFlammable(world, i, j, k + 1) || this.isFlammable(world, i, j - 1, k) || this.isFlammable(world, i, j + 1, k)) {
+                  org.bukkit.block.Block k1 = bworld.getBlockAt(i, j, k);
+                  if(k1.getTypeId() == Block.fire.blockID || !((BlockIgniteEvent)CraftEventFactory.callEvent(new BlockIgniteEvent(k1, igniteCause, (Player)null))).isCancelled()) {
+                     world.setBlockWithNotify(i, j, k, Block.fire.blockID);
+                     return;
+                  }
                }
+            } else if(Block.blocksList[j1].blockMaterial.blocksMovement()) {
+               return;
             }
+
+            ++i1;
          }
       }
 
    }
 
-   private boolean isFlammable(World var1, int var2, int var3, int var4) {
-      return var1.getBlockMaterial(var2, var3, var4).getCanBurn();
+   private boolean isFlammable(World world, int i, int j, int k) {
+      return world.getBlockMaterial(i, j, k).getCanBurn();
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockStem.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockStem.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockStem.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockStem.java
--- mcp-mcdev/net/minecraft/src/BlockStem.java	2012-11-29 21:15:19.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockStem.java	2012-11-29 20:44:39.000000000 -0800
@@ -8,73 +8,74 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class BlockStem extends BlockFlower {
 
    private Block fruitType;
 
 
-   protected BlockStem(int var1, Block var2) {
-      super(var1, 111);
-      this.fruitType = var2;
+   protected BlockStem(int i, Block block) {
+      super(i, 111);
+      this.fruitType = block;
       this.setTickRandomly(true);
-      float var3 = 0.125F;
-      this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 0.25F, 0.5F + var3);
+      float f = 0.125F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.25F, 0.5F + f);
       this.setCreativeTab((CreativeTabs)null);
    }
 
-   protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-      return var1 == Block.tilledField.blockID;
+   protected boolean canThisPlantGrowOnThisBlockID(int i) {
+      return i == Block.tilledField.blockID;
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      super.updateTick(var1, var2, var3, var4, var5);
-      if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9) {
-         float var6 = this.getGrowthModifier(var1, var2, var3, var4);
-         if(var5.nextInt((int)(25.0F / var6) + 1) == 0) {
-            int var7 = var1.getBlockMetadata(var2, var3, var4);
-            if(var7 < 7) {
-               ++var7;
-               var1.setBlockMetadataWithNotify(var2, var3, var4, var7);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      super.updateTick(world, i, j, k, random);
+      if(world.getBlockLightValue(i, j + 1, k) >= 9) {
+         float f = this.getGrowthModifier(world, i, j, k);
+         if(random.nextInt((int)(25.0F / f) + 1) == 0) {
+            int l = world.getBlockMetadata(i, j, k);
+            if(l < 7) {
+               ++l;
+               CraftEventFactory.handleBlockGrowEvent(world, i, j, k, this.blockID, l);
             } else {
-               if(var1.getBlockId(var2 - 1, var3, var4) == this.fruitType.blockID) {
+               if(world.getBlockId(i - 1, j, k) == this.fruitType.blockID) {
                   return;
                }
 
-               if(var1.getBlockId(var2 + 1, var3, var4) == this.fruitType.blockID) {
+               if(world.getBlockId(i + 1, j, k) == this.fruitType.blockID) {
                   return;
                }
 
-               if(var1.getBlockId(var2, var3, var4 - 1) == this.fruitType.blockID) {
+               if(world.getBlockId(i, j, k - 1) == this.fruitType.blockID) {
                   return;
                }
 
-               if(var1.getBlockId(var2, var3, var4 + 1) == this.fruitType.blockID) {
+               if(world.getBlockId(i, j, k + 1) == this.fruitType.blockID) {
                   return;
                }
 
-               int var8 = var5.nextInt(4);
-               int var9 = var2;
-               int var10 = var4;
-               if(var8 == 0) {
-                  var9 = var2 - 1;
+               int i1 = random.nextInt(4);
+               int j1 = i;
+               int k1 = k;
+               if(i1 == 0) {
+                  j1 = i - 1;
                }
 
-               if(var8 == 1) {
-                  ++var9;
+               if(i1 == 1) {
+                  ++j1;
                }
 
-               if(var8 == 2) {
-                  var10 = var4 - 1;
+               if(i1 == 2) {
+                  k1 = k - 1;
                }
 
-               if(var8 == 3) {
-                  ++var10;
+               if(i1 == 3) {
+                  ++k1;
                }
 
-               int var11 = var1.getBlockId(var9, var3 - 1, var10);
-               if(var1.getBlockId(var9, var3, var10) == 0 && (var11 == Block.tilledField.blockID || var11 == Block.dirt.blockID || var11 == Block.grass.blockID)) {
-                  var1.setBlockWithNotify(var9, var3, var10, this.fruitType.blockID);
+               int l1 = world.getBlockId(j1, j - 1, k1);
+               if(world.getBlockId(j1, j, k1) == 0 && (l1 == Block.tilledField.blockID || l1 == Block.dirt.blockID || l1 == Block.grass.blockID)) {
+                  CraftEventFactory.handleBlockGrowEvent(world, j1, j, k1, this.fruitType.blockID, 0);
                }
             }
          }
@@ -82,95 +83,95 @@
 
    }
 
-   public void fertilizeStem(World var1, int var2, int var3, int var4) {
-      var1.setBlockMetadataWithNotify(var2, var3, var4, 7);
+   public void fertilizeStem(World world, int i, int j, int k) {
+      world.setBlockMetadataWithNotify(i, j, k, 7);
    }
 
-   private float getGrowthModifier(World var1, int var2, int var3, int var4) {
-      float var5 = 1.0F;
-      int var6 = var1.getBlockId(var2, var3, var4 - 1);
-      int var7 = var1.getBlockId(var2, var3, var4 + 1);
-      int var8 = var1.getBlockId(var2 - 1, var3, var4);
-      int var9 = var1.getBlockId(var2 + 1, var3, var4);
-      int var10 = var1.getBlockId(var2 - 1, var3, var4 - 1);
-      int var11 = var1.getBlockId(var2 + 1, var3, var4 - 1);
-      int var12 = var1.getBlockId(var2 + 1, var3, var4 + 1);
-      int var13 = var1.getBlockId(var2 - 1, var3, var4 + 1);
-      boolean var14 = var8 == this.blockID || var9 == this.blockID;
-      boolean var15 = var6 == this.blockID || var7 == this.blockID;
-      boolean var16 = var10 == this.blockID || var11 == this.blockID || var12 == this.blockID || var13 == this.blockID;
-
-      for(int var17 = var2 - 1; var17 <= var2 + 1; ++var17) {
-         for(int var18 = var4 - 1; var18 <= var4 + 1; ++var18) {
-            int var19 = var1.getBlockId(var17, var3 - 1, var18);
-            float var20 = 0.0F;
-            if(var19 == Block.tilledField.blockID) {
-               var20 = 1.0F;
-               if(var1.getBlockMetadata(var17, var3 - 1, var18) > 0) {
-                  var20 = 3.0F;
+   private float getGrowthModifier(World world, int i, int j, int k) {
+      float f = 1.0F;
+      int l = world.getBlockId(i, j, k - 1);
+      int i1 = world.getBlockId(i, j, k + 1);
+      int j1 = world.getBlockId(i - 1, j, k);
+      int k1 = world.getBlockId(i + 1, j, k);
+      int l1 = world.getBlockId(i - 1, j, k - 1);
+      int i2 = world.getBlockId(i + 1, j, k - 1);
+      int j2 = world.getBlockId(i + 1, j, k + 1);
+      int k2 = world.getBlockId(i - 1, j, k + 1);
+      boolean flag = j1 == this.blockID || k1 == this.blockID;
+      boolean flag1 = l == this.blockID || i1 == this.blockID;
+      boolean flag2 = l1 == this.blockID || i2 == this.blockID || j2 == this.blockID || k2 == this.blockID;
+
+      for(int l2 = i - 1; l2 <= i + 1; ++l2) {
+         for(int i3 = k - 1; i3 <= k + 1; ++i3) {
+            int j3 = world.getBlockId(l2, j - 1, i3);
+            float f1 = 0.0F;
+            if(j3 == Block.tilledField.blockID) {
+               f1 = 1.0F;
+               if(world.getBlockMetadata(l2, j - 1, i3) > 0) {
+                  f1 = 3.0F;
                }
             }
 
-            if(var17 != var2 || var18 != var4) {
-               var20 /= 4.0F;
+            if(l2 != i || i3 != k) {
+               f1 /= 4.0F;
             }
 
-            var5 += var20;
+            f += f1;
          }
       }
 
-      if(var16 || var14 && var15) {
-         var5 /= 2.0F;
+      if(flag2 || flag && flag1) {
+         f /= 2.0F;
       }
 
-      return var5;
+      return f;
    }
 
-   public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+   public int getBlockTextureFromSideAndMetadata(int i, int j) {
       return this.blockIndexInTexture;
    }
 
    public void setBlockBoundsForItemRender() {
-      float var1 = 0.125F;
-      this.setBlockBounds(0.5F - var1, 0.0F, 0.5F - var1, 0.5F + var1, 0.25F, 0.5F + var1);
+      float f = 0.125F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.25F, 0.5F + f);
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      this.maxY = (double)((float)(var1.getBlockMetadata(var2, var3, var4) * 2 + 2) / 16.0F);
-      float var5 = 0.125F;
-      this.setBlockBounds(0.5F - var5, 0.0F, 0.5F - var5, 0.5F + var5, (float)this.maxY, 0.5F + var5);
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      this.maxY = (double)((float)(iblockaccess.getBlockMetadata(i, j, k) * 2 + 2) / 16.0F);
+      float f = 0.125F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, (float)this.maxY, 0.5F + f);
    }
 
    public int getRenderType() {
       return 19;
    }
 
-   public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-      super.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6, var7);
-      if(!var1.isRemote) {
-         Item var8 = null;
+   public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f, int i1) {
+      super.dropBlockAsItemWithChance(world, i, j, k, l, f, i1);
+      if(!world.isRemote) {
+         Item item = null;
          if(this.fruitType == Block.pumpkin) {
-            var8 = Item.pumpkinSeeds;
+            item = Item.pumpkinSeeds;
          }
 
          if(this.fruitType == Block.melon) {
-            var8 = Item.melonSeeds;
+            item = Item.melonSeeds;
          }
 
-         for(int var9 = 0; var9 < 3; ++var9) {
-            if(var1.rand.nextInt(15) <= var5) {
-               this.dropBlockAsItem_do(var1, var2, var3, var4, new ItemStack(var8));
+         for(int j1 = 0; j1 < 3; ++j1) {
+            if(world.rand.nextInt(15) <= l) {
+               this.dropBlockAsItem_do(world, i, j, k, new ItemStack(item));
             }
          }
-
       }
+
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return -1;
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 1;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockTNT.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTNT.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockTNT.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTNT.java
--- mcp-mcdev/net/minecraft/src/BlockTNT.java	2012-11-29 21:15:19.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTNT.java	2012-11-29 20:44:39.000000000 -0800
@@ -14,77 +14,76 @@
 
 public class BlockTNT extends Block {
 
-   public BlockTNT(int var1, int var2) {
-      super(var1, var2, Material.tnt);
+   public BlockTNT(int i, int j) {
+      super(i, j, Material.tnt);
       this.setCreativeTab(CreativeTabs.tabRedstone);
    }
 
-   public int getBlockTextureFromSide(int var1) {
-      return var1 == 0?this.blockIndexInTexture + 2:(var1 == 1?this.blockIndexInTexture + 1:this.blockIndexInTexture);
+   public int getBlockTextureFromSide(int i) {
+      return i == 0?this.blockIndexInTexture + 2:(i == 1?this.blockIndexInTexture + 1:this.blockIndexInTexture);
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      super.onBlockAdded(var1, var2, var3, var4);
-      if(var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-         this.onBlockDestroyedByPlayer(var1, var2, var3, var4, 1);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void onBlockAdded(World world, int i, int j, int k) {
+      super.onBlockAdded(world, i, j, k);
+      if(!world.editingBlocks && world.isBlockIndirectlyGettingPowered(i, j, k)) {
+         this.onBlockDestroyedByPlayer(world, i, j, k, 1);
+         world.setBlockWithNotify(i, j, k, 0);
       }
 
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(var5 > 0 && Block.blocksList[var5].canProvidePower() && var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-         this.onBlockDestroyedByPlayer(var1, var2, var3, var4, 1);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(l > 0 && Block.blocksList[l].canProvidePower() && world.isBlockIndirectlyGettingPowered(i, j, k)) {
+         this.onBlockDestroyedByPlayer(world, i, j, k, 1);
+         world.setBlockWithNotify(i, j, k, 0);
       }
 
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 1;
    }
 
-   public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-      if(!var1.isRemote) {
-         EntityTNTPrimed var5 = new EntityTNTPrimed(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F));
-         var5.fuse = var1.rand.nextInt(var5.fuse / 4) + var5.fuse / 8;
-         var1.spawnEntityInWorld(var5);
+   public void onBlockDestroyedByExplosion(World world, int i, int j, int k) {
+      if(!world.isRemote) {
+         EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F));
+         entitytntprimed.fuse = world.rand.nextInt(entitytntprimed.fuse / 4) + entitytntprimed.fuse / 8;
+         world.spawnEntityInWorld(entitytntprimed);
       }
+
    }
 
-   public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-      if(!var1.isRemote) {
-         if((var5 & 1) == 1) {
-            EntityTNTPrimed var6 = new EntityTNTPrimed(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F));
-            var1.spawnEntityInWorld(var6);
-            var1.playSoundAtEntity(var6, "random.fuse", 1.0F, 1.0F);
-         }
-
+   public void onBlockDestroyedByPlayer(World world, int i, int j, int k, int l) {
+      if(!world.isRemote && (l & 1) == 1) {
+         EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F));
+         world.spawnEntityInWorld(entitytntprimed);
+         world.playSoundAtEntity(entitytntprimed, "random.fuse", 1.0F, 1.0F);
       }
+
    }
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-      if(var5.getCurrentEquippedItem() != null && var5.getCurrentEquippedItem().itemID == Item.flintAndSteel.shiftedIndex) {
-         this.onBlockDestroyedByPlayer(var1, var2, var3, var4, 1);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
+      if(entityhuman.getCurrentEquippedItem() != null && entityhuman.getCurrentEquippedItem().itemID == Item.flintAndSteel.shiftedIndex) {
+         this.onBlockDestroyedByPlayer(world, i, j, k, 1);
+         world.setBlockWithNotify(i, j, k, 0);
          return true;
       } else {
-         return super.onBlockActivated(var1, var2, var3, var4, var5, var6, var7, var8, var9);
+         return super.onBlockActivated(world, i, j, k, entityhuman, l, f, f1, f2);
       }
    }
 
-   public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-      if(var5 instanceof EntityArrow && !var1.isRemote) {
-         EntityArrow var6 = (EntityArrow)var5;
-         if(var6.isBurning()) {
-            this.onBlockDestroyedByPlayer(var1, var2, var3, var4, 1);
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void onEntityCollidedWithBlock(World world, int i, int j, int k, Entity entity) {
+      if(entity instanceof EntityArrow && !world.isRemote) {
+         EntityArrow entityarrow = (EntityArrow)entity;
+         if(entityarrow.isBurning()) {
+            this.onBlockDestroyedByPlayer(world, i, j, k, 1);
+            world.setBlockWithNotify(i, j, k, 0);
          }
       }
 
    }
 
-   public boolean func_85103_a(Explosion var1) {
+   public boolean func_85103_a(Explosion explosion) {
       return false;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockTrapDoor.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTrapDoor.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockTrapDoor.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTrapDoor.java
--- mcp-mcdev/net/minecraft/src/BlockTrapDoor.java	2012-11-29 21:15:19.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTrapDoor.java	2012-11-29 20:44:38.000000000 -0800
@@ -11,19 +11,21 @@
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockTrapDoor extends Block {
 
-   protected BlockTrapDoor(int var1, Material var2) {
-      super(var1, var2);
+   protected BlockTrapDoor(int i, Material material) {
+      super(i, material);
       this.blockIndexInTexture = 84;
-      if(var2 == Material.iron) {
+      if(material == Material.iron) {
          ++this.blockIndexInTexture;
       }
 
-      float var3 = 0.5F;
-      float var4 = 1.0F;
-      this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var4, 0.5F + var3);
+      float f = 0.5F;
+      float f1 = 1.0F;
+      this.setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f1, 0.5F + f);
       this.setCreativeTab(CreativeTabs.tabRedstone);
    }
 
@@ -35,178 +37,186 @@
       return false;
    }
 
-   public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
-      return !isTrapdoorOpen(var1.getBlockMetadata(var2, var3, var4));
+   public boolean getBlocksMovement(IBlockAccess iblockaccess, int i, int j, int k) {
+      return !isTrapdoorOpen(iblockaccess.getBlockMetadata(i, j, k));
    }
 
    public int getRenderType() {
       return 0;
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-      this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-      return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
+      this.setBlockBoundsBasedOnState(world, i, j, k);
+      return super.getCollisionBoundingBoxFromPool(world, i, j, k);
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      this.setBlockBoundsForBlockRender(var1.getBlockMetadata(var2, var3, var4));
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      this.setBlockBoundsForBlockRender(iblockaccess.getBlockMetadata(i, j, k));
    }
 
    public void setBlockBoundsForItemRender() {
-      float var1 = 0.1875F;
-      this.setBlockBounds(0.0F, 0.5F - var1 / 2.0F, 0.0F, 1.0F, 0.5F + var1 / 2.0F, 1.0F);
+      float f = 0.1875F;
+      this.setBlockBounds(0.0F, 0.5F - f / 2.0F, 0.0F, 1.0F, 0.5F + f / 2.0F, 1.0F);
    }
 
-   public void setBlockBoundsForBlockRender(int var1) {
-      float var2 = 0.1875F;
-      if((var1 & 8) != 0) {
-         this.setBlockBounds(0.0F, 1.0F - var2, 0.0F, 1.0F, 1.0F, 1.0F);
+   public void setBlockBoundsForBlockRender(int i) {
+      float f = 0.1875F;
+      if((i & 8) != 0) {
+         this.setBlockBounds(0.0F, 1.0F - f, 0.0F, 1.0F, 1.0F, 1.0F);
       } else {
-         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, var2, 1.0F);
+         this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, f, 1.0F);
       }
 
-      if(isTrapdoorOpen(var1)) {
-         if((var1 & 3) == 0) {
-            this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
+      if(isTrapdoorOpen(i)) {
+         if((i & 3) == 0) {
+            this.setBlockBounds(0.0F, 0.0F, 1.0F - f, 1.0F, 1.0F, 1.0F);
          }
 
-         if((var1 & 3) == 1) {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
+         if((i & 3) == 1) {
+            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f);
          }
 
-         if((var1 & 3) == 2) {
-            this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+         if((i & 3) == 2) {
+            this.setBlockBounds(1.0F - f, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
          }
 
-         if((var1 & 3) == 3) {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
+         if((i & 3) == 3) {
+            this.setBlockBounds(0.0F, 0.0F, 0.0F, f, 1.0F, 1.0F);
          }
       }
 
    }
 
-   public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {}
+   public void onBlockClicked(World world, int i, int j, int k, EntityPlayer entityhuman) {}
 
-   public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
+   public boolean onBlockActivated(World world, int i, int j, int k, EntityPlayer entityhuman, int l, float f, float f1, float f2) {
       if(this.blockMaterial == Material.iron) {
          return true;
       } else {
-         int var10 = var1.getBlockMetadata(var2, var3, var4);
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var10 ^ 4);
-         var1.playAuxSFXAtEntity(var5, 1003, var2, var3, var4, 0);
+         int i1 = world.getBlockMetadata(i, j, k);
+         world.setBlockMetadataWithNotify(i, j, k, i1 ^ 4);
+         world.playAuxSFXAtEntity(entityhuman, 1003, i, j, k, 0);
          return true;
       }
    }
 
-   public void onPoweredBlockChange(World var1, int var2, int var3, int var4, boolean var5) {
-      int var6 = var1.getBlockMetadata(var2, var3, var4);
-      boolean var7 = (var6 & 4) > 0;
-      if(var7 != var5) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var6 ^ 4);
-         var1.playAuxSFXAtEntity((EntityPlayer)null, 1003, var2, var3, var4, 0);
+   public void onPoweredBlockChange(World world, int i, int j, int k, boolean flag) {
+      int l = world.getBlockMetadata(i, j, k);
+      boolean flag1 = (l & 4) > 0;
+      if(flag1 != flag) {
+         world.setBlockMetadataWithNotify(i, j, k, l ^ 4);
+         world.playAuxSFXAtEntity((EntityPlayer)null, 1003, i, j, k, 0);
       }
+
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(!var1.isRemote) {
-         int var6 = var1.getBlockMetadata(var2, var3, var4);
-         int var7 = var2;
-         int var8 = var4;
-         if((var6 & 3) == 0) {
-            var8 = var4 + 1;
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(!world.isRemote) {
+         int i1 = world.getBlockMetadata(i, j, k);
+         int j1 = i;
+         int k1 = k;
+         if((i1 & 3) == 0) {
+            k1 = k + 1;
          }
 
-         if((var6 & 3) == 1) {
-            --var8;
+         if((i1 & 3) == 1) {
+            --k1;
          }
 
-         if((var6 & 3) == 2) {
-            var7 = var2 + 1;
+         if((i1 & 3) == 2) {
+            j1 = i + 1;
          }
 
-         if((var6 & 3) == 3) {
-            --var7;
+         if((i1 & 3) == 3) {
+            --j1;
          }
 
-         if(!isValidSupportBlock(var1.getBlockId(var7, var3, var8))) {
-            var1.setBlockWithNotify(var2, var3, var4, 0);
-            this.dropBlockAsItem(var1, var2, var3, var4, var6, 0);
+         if(!isValidSupportBlock(world.getBlockId(j1, j, k1))) {
+            world.setBlockWithNotify(i, j, k, 0);
+            this.dropBlockAsItem(world, i, j, k, i1, 0);
          }
 
-         boolean var9 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
-         if(var9 || var5 > 0 && Block.blocksList[var5].canProvidePower()) {
-            this.onPoweredBlockChange(var1, var2, var3, var4, var9);
+         if(l == 0 || l > 0 && Block.blocksList[l] != null && Block.blocksList[l].canProvidePower()) {
+            CraftWorld bworld = world.getWorld();
+            org.bukkit.block.Block block = bworld.getBlockAt(i, j, k);
+            int power = block.getBlockPower();
+            int oldPower = (world.getBlockMetadata(i, j, k) & 4) > 0?15:0;
+            if(oldPower == 0 ^ power == 0 || Block.blocksList[l] != null && Block.blocksList[l].canProvidePower()) {
+               BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, oldPower, power);
+               world.getServer().getPluginManager().callEvent(eventRedstone);
+               this.onPoweredBlockChange(world, i, j, k, eventRedstone.getNewCurrent() > 0);
+            }
          }
-
       }
+
    }
 
-   public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3 var5, Vec3 var6) {
-      this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-      return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
+   public MovingObjectPosition collisionRayTrace(World world, int i, int j, int k, Vec3 vec3d, Vec3 vec3d1) {
+      this.setBlockBoundsBasedOnState(world, i, j, k);
+      return super.collisionRayTrace(world, i, j, k, vec3d, vec3d1);
    }
 
-   public int func_85104_a(World var1, int var2, int var3, int var4, int var5, float var6, float var7, float var8, int var9) {
-      int var10 = 0;
-      if(var5 == 2) {
-         var10 = 0;
+   public int func_85104_a(World world, int i, int j, int k, int l, float f, float f1, float f2, int i1) {
+      int j1 = 0;
+      if(l == 2) {
+         j1 = 0;
       }
 
-      if(var5 == 3) {
-         var10 = 1;
+      if(l == 3) {
+         j1 = 1;
       }
 
-      if(var5 == 4) {
-         var10 = 2;
+      if(l == 4) {
+         j1 = 2;
       }
 
-      if(var5 == 5) {
-         var10 = 3;
+      if(l == 5) {
+         j1 = 3;
       }
 
-      if(var5 != 1 && var5 != 0 && var7 > 0.5F) {
-         var10 |= 8;
+      if(l != 1 && l != 0 && f1 > 0.5F) {
+         j1 |= 8;
       }
 
-      return var10;
+      return j1;
    }
 
-   public boolean canPlaceBlockOnSide(World var1, int var2, int var3, int var4, int var5) {
-      if(var5 == 0) {
+   public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l) {
+      if(l == 0) {
          return false;
-      } else if(var5 == 1) {
+      } else if(l == 1) {
          return false;
       } else {
-         if(var5 == 2) {
-            ++var4;
+         if(l == 2) {
+            ++k;
          }
 
-         if(var5 == 3) {
-            --var4;
+         if(l == 3) {
+            --k;
          }
 
-         if(var5 == 4) {
-            ++var2;
+         if(l == 4) {
+            ++i;
          }
 
-         if(var5 == 5) {
-            --var2;
+         if(l == 5) {
+            --i;
          }
 
-         return isValidSupportBlock(var1.getBlockId(var2, var3, var4));
+         return isValidSupportBlock(world.getBlockId(i, j, k));
       }
    }
 
-   public static boolean isTrapdoorOpen(int var0) {
-      return (var0 & 4) != 0;
+   public static boolean isTrapdoorOpen(int i) {
+      return (i & 4) != 0;
    }
 
-   private static boolean isValidSupportBlock(int var0) {
-      if(var0 <= 0) {
+   private static boolean isValidSupportBlock(int i) {
+      if(i <= 0) {
          return false;
       } else {
-         Block var1 = Block.blocksList[var0];
-         return var1 != null && var1.blockMaterial.isOpaque() && var1.renderAsNormalBlock() || var1 == Block.glowStone || var1 instanceof BlockHalfSlab || var1 instanceof BlockStairs;
+         Block block = Block.blocksList[i];
+         return block != null && block.blockMaterial.isOpaque() && block.renderAsNormalBlock() || block == Block.glowStone || block instanceof BlockHalfSlab || block instanceof BlockStairs;
       }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/BlockTripWire.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTripWire.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockTripWire.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTripWire.java
--- mcp-mcdev/net/minecraft/src/BlockTripWire.java	2012-11-29 21:15:19.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTripWire.java	2012-11-29 20:44:38.000000000 -0800
@@ -10,13 +10,20 @@
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Item;
+import net.minecraft.src.ItemStack;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.entity.EntityInteractEvent;
+import org.bukkit.plugin.PluginManager;
 
 public class BlockTripWire extends Block {
 
-   public BlockTripWire(int var1) {
-      super(var1, 173, Material.circuits);
+   public BlockTripWire(int i) {
+      super(i, 173, Material.circuits);
       this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.15625F, 1.0F);
       this.setTickRandomly(true);
    }
@@ -25,7 +32,7 @@
       return 10;
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
@@ -41,28 +48,28 @@
       return 30;
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return Item.silk.shiftedIndex;
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      int var6 = var1.getBlockMetadata(var2, var3, var4);
-      boolean var7 = (var6 & 2) == 2;
-      boolean var8 = !var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4);
-      if(var7 != var8) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var6, 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      int i1 = world.getBlockMetadata(i, j, k);
+      boolean flag = (i1 & 2) == 2;
+      boolean flag1 = !world.doesBlockHaveSolidTopSurface(i, j - 1, k);
+      if(flag != flag1) {
+         this.dropBlockAsItem(world, i, j, k, i1, 0);
+         world.setBlockWithNotify(i, j, k, 0);
       }
 
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      boolean var6 = (var5 & 4) == 4;
-      boolean var7 = (var5 & 2) == 2;
-      if(!var7) {
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k);
+      boolean flag = (l & 4) == 4;
+      boolean flag1 = (l & 2) == 2;
+      if(!flag1) {
          this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.09375F, 1.0F);
-      } else if(!var6) {
+      } else if(!flag) {
          this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
       } else {
          this.setBlockBounds(0.0F, 0.0625F, 0.0F, 1.0F, 0.15625F, 1.0F);
@@ -70,102 +77,125 @@
 
    }
 
-   public void onBlockAdded(World var1, int var2, int var3, int var4) {
-      int var5 = var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4)?0:2;
-      var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
-      this.func_72149_e(var1, var2, var3, var4, var5);
+   public void onBlockAdded(World world, int i, int j, int k) {
+      int l = world.doesBlockHaveSolidTopSurface(i, j - 1, k)?0:2;
+      world.setBlockMetadataWithNotify(i, j, k, l);
+      this.func_72149_e(world, i, j, k, l);
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      this.func_72149_e(var1, var2, var3, var4, var6 | 1);
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      this.func_72149_e(world, i, j, k, i1 | 1);
    }
 
-   public void onBlockHarvested(World var1, int var2, int var3, int var4, int var5, EntityPlayer var6) {
-      if(!var1.isRemote) {
-         if(var6.getCurrentEquippedItem() != null && var6.getCurrentEquippedItem().itemID == Item.shears.shiftedIndex) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, var5 | 8);
-         }
-
+   public void onBlockHarvested(World world, int i, int j, int k, int l, EntityPlayer entityhuman) {
+      if(!world.isRemote && entityhuman.getCurrentEquippedItem() != null && entityhuman.getCurrentEquippedItem().itemID == Item.shears.shiftedIndex) {
+         world.setBlockMetadataWithNotify(i, j, k, l | 8);
       }
+
    }
 
-   private void func_72149_e(World var1, int var2, int var3, int var4, int var5) {
-      int var6 = 0;
+   private void func_72149_e(World world, int i, int j, int k, int l) {
+      int i1 = 0;
 
-      while(var6 < 2) {
-         int var7 = 1;
+      while(i1 < 2) {
+         int j1 = 1;
 
          while(true) {
-            if(var7 < 42) {
-               int var8 = var2 + Direction.offsetX[var6] * var7;
-               int var9 = var4 + Direction.offsetZ[var6] * var7;
-               int var10 = var1.getBlockId(var8, var3, var9);
-               if(var10 == Block.tripWireSource.blockID) {
-                  int var11 = var1.getBlockMetadata(var8, var3, var9) & 3;
-                  if(var11 == Direction.footInvisibleFaceRemap[var6]) {
-                     Block.tripWireSource.func_72143_a(var1, var8, var3, var9, var10, var1.getBlockMetadata(var8, var3, var9), true, var7, var5);
+            if(j1 < 42) {
+               int k1 = i + Direction.offsetX[i1] * j1;
+               int l1 = k + Direction.offsetZ[i1] * j1;
+               int i2 = world.getBlockId(k1, j, l1);
+               if(i2 == Block.tripWireSource.blockID) {
+                  int j2 = world.getBlockMetadata(k1, j, l1) & 3;
+                  if(j2 == Direction.footInvisibleFaceRemap[i1]) {
+                     Block.tripWireSource.func_72143_a(world, k1, j, l1, i2, world.getBlockMetadata(k1, j, l1), true, j1, l);
                   }
-               } else if(var10 == Block.tripWire.blockID) {
-                  ++var7;
+               } else if(i2 == Block.tripWire.blockID) {
+                  ++j1;
                   continue;
                }
             }
 
-            ++var6;
+            ++i1;
             break;
          }
       }
 
    }
 
-   public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-      if(!var1.isRemote) {
-         if((var1.getBlockMetadata(var2, var3, var4) & 1) != 1) {
-            this.updateTripWireState(var1, var2, var3, var4);
-         }
+   public void onEntityCollidedWithBlock(World world, int i, int j, int k, Entity entity) {
+      if(!world.isRemote && (world.getBlockMetadata(i, j, k) & 1) != 1) {
+         this.updateTripWireState(world, i, j, k);
       }
+
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote) {
-         if((var1.getBlockMetadata(var2, var3, var4) & 1) == 1) {
-            this.updateTripWireState(var1, var2, var3, var4);
-         }
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote && (world.getBlockMetadata(i, j, k) & 1) == 1) {
+         this.updateTripWireState(world, i, j, k);
       }
+
    }
 
-   private void updateTripWireState(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      boolean var6 = (var5 & 1) == 1;
-      boolean var7 = false;
-      List var8 = var1.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)var2 + this.minX, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ));
-      if(!var8.isEmpty()) {
-         Iterator var9 = var8.iterator();
-
-         while(var9.hasNext()) {
-            Entity var10 = (Entity)var9.next();
-            if(!var10.doesEntityNotTriggerPressurePlate()) {
-               var7 = true;
+   private void updateTripWireState(World world, int i, int j, int k) {
+      int l = world.getBlockMetadata(i, j, k);
+      boolean flag = (l & 1) == 1;
+      boolean flag1 = false;
+      List list = world.getEntitiesWithinAABBExcludingEntity((Entity)null, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)i + this.minX, (double)j + this.minY, (double)k + this.minZ, (double)i + this.maxX, (double)j + this.maxY, (double)k + this.maxZ));
+      if(!list.isEmpty()) {
+         Iterator bworld = list.iterator();
+
+         while(bworld.hasNext()) {
+            Entity manager = (Entity)bworld.next();
+            if(!manager.doesEntityNotTriggerPressurePlate()) {
+               flag1 = true;
                break;
             }
          }
       }
 
-      if(var7 && !var6) {
-         var5 |= 1;
+      CraftWorld bworld1 = world.getWorld();
+      PluginManager manager1 = world.getServer().getPluginManager();
+      if(flag != flag1 && flag1) {
+         Iterator i$ = list.iterator();
+
+         while(i$.hasNext()) {
+            Object object = i$.next();
+            if(object != null) {
+               Object cancellable;
+               if(object instanceof EntityPlayer) {
+                  cancellable = CraftEventFactory.callPlayerInteractEvent((EntityPlayer)object, Action.PHYSICAL, i, j, k, -1, (ItemStack)null);
+               } else {
+                  if(!(object instanceof Entity)) {
+                     continue;
+                  }
+
+                  cancellable = new EntityInteractEvent(((Entity)object).getBukkitEntity(), bworld1.getBlockAt(i, j, k));
+                  manager1.callEvent((EntityInteractEvent)cancellable);
+               }
+
+               if(((Cancellable)cancellable).isCancelled()) {
+                  return;
+               }
+            }
+         }
+      }
+
+      if(flag1 && !flag) {
+         l |= 1;
       }
 
-      if(!var7 && var6) {
-         var5 &= -2;
+      if(!flag1 && flag) {
+         l &= -2;
       }
 
-      if(var7 != var6) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var5);
-         this.func_72149_e(var1, var2, var3, var4, var5);
+      if(flag1 != flag) {
+         world.setBlockMetadataWithNotify(i, j, k, l);
+         this.func_72149_e(world, i, j, k, l);
       }
 
-      if(var7) {
-         var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate());
+      if(flag1) {
+         world.scheduleBlockUpdate(i, j, k, this.blockID, this.tickRate());
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/BlockTripWireSource.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTripWireSource.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockTripWireSource.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTripWireSource.java
--- mcp-mcdev/net/minecraft/src/BlockTripWireSource.java	2012-11-29 21:15:19.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockTripWireSource.java	2012-11-29 20:44:38.000000000 -0800
@@ -8,16 +8,17 @@
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
 public class BlockTripWireSource extends Block {
 
-   public BlockTripWireSource(int var1) {
-      super(var1, 172, Material.circuits);
+   public BlockTripWireSource(int i) {
+      super(i, 172, Material.circuits);
       this.setCreativeTab(CreativeTabs.tabRedstone);
       this.setTickRandomly(true);
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
@@ -37,248 +38,251 @@
       return 10;
    }
 
-   public boolean canPlaceBlockOnSide(World var1, int var2, int var3, int var4, int var5) {
-      return var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)?true:(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)?true:(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)?true:var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)));
+   public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l) {
+      return l == 2 && world.isBlockNormalCube(i, j, k + 1)?true:(l == 3 && world.isBlockNormalCube(i, j, k - 1)?true:(l == 4 && world.isBlockNormalCube(i + 1, j, k)?true:l == 5 && world.isBlockNormalCube(i - 1, j, k)));
    }
 
-   public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-      return var1.isBlockNormalCube(var2 - 1, var3, var4)?true:(var1.isBlockNormalCube(var2 + 1, var3, var4)?true:(var1.isBlockNormalCube(var2, var3, var4 - 1)?true:var1.isBlockNormalCube(var2, var3, var4 + 1)));
+   public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+      return world.isBlockNormalCube(i - 1, j, k)?true:(world.isBlockNormalCube(i + 1, j, k)?true:(world.isBlockNormalCube(i, j, k - 1)?true:world.isBlockNormalCube(i, j, k + 1)));
    }
 
-   public int func_85104_a(World var1, int var2, int var3, int var4, int var5, float var6, float var7, float var8, int var9) {
-      byte var10 = 0;
-      if(var5 == 2 && var1.isBlockNormalCubeDefault(var2, var3, var4 + 1, true)) {
-         var10 = 2;
+   public int func_85104_a(World world, int i, int j, int k, int l, float f, float f1, float f2, int i1) {
+      byte b0 = 0;
+      if(l == 2 && world.isBlockNormalCubeDefault(i, j, k + 1, true)) {
+         b0 = 2;
       }
 
-      if(var5 == 3 && var1.isBlockNormalCubeDefault(var2, var3, var4 - 1, true)) {
-         var10 = 0;
+      if(l == 3 && world.isBlockNormalCubeDefault(i, j, k - 1, true)) {
+         b0 = 0;
       }
 
-      if(var5 == 4 && var1.isBlockNormalCubeDefault(var2 + 1, var3, var4, true)) {
-         var10 = 1;
+      if(l == 4 && world.isBlockNormalCubeDefault(i + 1, j, k, true)) {
+         b0 = 1;
       }
 
-      if(var5 == 5 && var1.isBlockNormalCubeDefault(var2 - 1, var3, var4, true)) {
-         var10 = 3;
+      if(l == 5 && world.isBlockNormalCubeDefault(i - 1, j, k, true)) {
+         b0 = 3;
       }
 
-      return var10;
+      return b0;
    }
 
-   public void func_85105_g(World var1, int var2, int var3, int var4, int var5) {
-      this.func_72143_a(var1, var2, var3, var4, this.blockID, var5, false, -1, 0);
+   public void func_85105_g(World world, int i, int j, int k, int l) {
+      this.func_72143_a(world, i, j, k, this.blockID, l, false, -1, 0);
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(var5 != this.blockID) {
-         if(this.func_72144_l(var1, var2, var3, var4)) {
-            int var6 = var1.getBlockMetadata(var2, var3, var4);
-            int var7 = var6 & 3;
-            boolean var8 = false;
-            if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var7 == 3) {
-               var8 = true;
-            }
-
-            if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var7 == 1) {
-               var8 = true;
-            }
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(l != this.blockID && this.func_72144_l(world, i, j, k)) {
+         int i1 = world.getBlockMetadata(i, j, k);
+         int j1 = i1 & 3;
+         boolean flag = false;
+         if(!world.isBlockNormalCube(i - 1, j, k) && j1 == 3) {
+            flag = true;
+         }
 
-            if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var7 == 0) {
-               var8 = true;
-            }
+         if(!world.isBlockNormalCube(i + 1, j, k) && j1 == 1) {
+            flag = true;
+         }
 
-            if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var7 == 2) {
-               var8 = true;
-            }
+         if(!world.isBlockNormalCube(i, j, k - 1) && j1 == 0) {
+            flag = true;
+         }
 
-            if(var8) {
-               this.dropBlockAsItem(var1, var2, var3, var4, var6, 0);
-               var1.setBlockWithNotify(var2, var3, var4, 0);
-            }
+         if(!world.isBlockNormalCube(i, j, k + 1) && j1 == 2) {
+            flag = true;
          }
 
+         if(flag) {
+            this.dropBlockAsItem(world, i, j, k, i1, 0);
+            world.setBlockWithNotify(i, j, k, 0);
+         }
       }
+
    }
 
-   public void func_72143_a(World var1, int var2, int var3, int var4, int var5, int var6, boolean var7, int var8, int var9) {
-      int var10 = var6 & 3;
-      boolean var11 = (var6 & 4) == 4;
-      boolean var12 = (var6 & 8) == 8;
-      boolean var13 = var5 == Block.tripWireSource.blockID;
-      boolean var14 = false;
-      boolean var15 = !var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4);
-      int var16 = Direction.offsetX[var10];
-      int var17 = Direction.offsetZ[var10];
-      int var18 = 0;
-      int[] var19 = new int[42];
-
-      int var21;
-      int var20;
-      int var23;
-      int var22;
-      int var24;
-      for(var20 = 1; var20 < 42; ++var20) {
-         var21 = var2 + var16 * var20;
-         var22 = var4 + var17 * var20;
-         var23 = var1.getBlockId(var21, var3, var22);
-         if(var23 == Block.tripWireSource.blockID) {
-            var24 = var1.getBlockMetadata(var21, var3, var22);
-            if((var24 & 3) == Direction.footInvisibleFaceRemap[var10]) {
-               var18 = var20;
+   public void func_72143_a(World world, int i, int j, int k, int l, int i1, boolean flag, int j1, int k1) {
+      int l1 = i1 & 3;
+      boolean flag1 = (i1 & 4) == 4;
+      boolean flag2 = (i1 & 8) == 8;
+      boolean flag3 = l == Block.tripWireSource.blockID;
+      boolean flag4 = false;
+      boolean flag5 = !world.doesBlockHaveSolidTopSurface(i, j - 1, k);
+      int i2 = Direction.offsetX[l1];
+      int j2 = Direction.offsetZ[l1];
+      int k2 = 0;
+      int[] aint = new int[42];
+
+      int l2;
+      int i3;
+      int j3;
+      int k3;
+      int l3;
+      for(i3 = 1; i3 < 42; ++i3) {
+         l2 = i + i2 * i3;
+         k3 = k + j2 * i3;
+         j3 = world.getBlockId(l2, j, k3);
+         if(j3 == Block.tripWireSource.blockID) {
+            l3 = world.getBlockMetadata(l2, j, k3);
+            if((l3 & 3) == Direction.footInvisibleFaceRemap[l1]) {
+               k2 = i3;
             }
             break;
          }
 
-         if(var23 != Block.tripWire.blockID && var20 != var8) {
-            var19[var20] = -1;
-            var13 = false;
+         if(j3 != Block.tripWire.blockID && i3 != j1) {
+            aint[i3] = -1;
+            flag3 = false;
          } else {
-            var24 = var20 == var8?var9:var1.getBlockMetadata(var21, var3, var22);
-            boolean var25 = (var24 & 8) != 8;
-            boolean var26 = (var24 & 1) == 1;
-            boolean var27 = (var24 & 2) == 2;
-            var13 &= var27 == var15;
-            var14 |= var25 && var26;
-            var19[var20] = var24;
-            if(var20 == var8) {
-               var1.scheduleBlockUpdate(var2, var3, var4, var5, this.tickRate());
-               var13 &= var25;
+            l3 = i3 == j1?k1:world.getBlockMetadata(l2, j, k3);
+            boolean block = (l3 & 8) != 8;
+            boolean eventRedstone = (l3 & 1) == 1;
+            boolean flag8 = (l3 & 2) == 2;
+            flag3 &= flag8 == flag5;
+            flag4 |= block && eventRedstone;
+            aint[i3] = l3;
+            if(i3 == j1) {
+               world.scheduleBlockUpdate(i, j, k, l, this.tickRate());
+               flag3 &= block;
             }
          }
       }
 
-      var13 &= var18 > 1;
-      var14 &= var13;
-      var20 = (var13?4:0) | (var14?8:0);
-      var6 = var10 | var20;
-      if(var18 > 0) {
-         var21 = var2 + var16 * var18;
-         var22 = var4 + var17 * var18;
-         var23 = Direction.footInvisibleFaceRemap[var10];
-         var1.setBlockMetadataWithNotify(var21, var3, var22, var23 | var20);
-         this.notifyNeighborOfChange(var1, var21, var3, var22, var23);
-         this.playSoundEffect(var1, var21, var3, var22, var13, var14, var11, var12);
-      }
-
-      this.playSoundEffect(var1, var2, var3, var4, var13, var14, var11, var12);
-      if(var5 > 0) {
-         var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-         if(var7) {
-            this.notifyNeighborOfChange(var1, var2, var3, var4, var10);
+      flag3 &= k2 > 1;
+      flag4 &= flag3;
+      i3 = (flag3?4:0) | (flag4?8:0);
+      i1 = l1 | i3;
+      if(k2 > 0) {
+         l2 = i + i2 * k2;
+         k3 = k + j2 * k2;
+         j3 = Direction.footInvisibleFaceRemap[l1];
+         world.setBlockMetadataWithNotify(l2, j, k3, j3 | i3);
+         this.notifyNeighborOfChange(world, l2, j, k3, j3);
+         this.playSoundEffect(world, l2, j, k3, flag3, flag4, flag1, flag2);
+      }
+
+      org.bukkit.block.Block var28 = world.getWorld().getBlockAt(i, j, k);
+      BlockRedstoneEvent var29 = new BlockRedstoneEvent(var28, 1, 0);
+      world.getServer().getPluginManager().callEvent(var29);
+      if(var29.getNewCurrent() <= 0) {
+         this.playSoundEffect(world, i, j, k, flag3, flag4, flag1, flag2);
+         if(l > 0) {
+            world.setBlockMetadataWithNotify(i, j, k, i1);
+            if(flag) {
+               this.notifyNeighborOfChange(world, i, j, k, l1);
+            }
          }
-      }
 
-      if(var11 != var13) {
-         for(var21 = 1; var21 < var18; ++var21) {
-            var22 = var2 + var16 * var21;
-            var23 = var4 + var17 * var21;
-            var24 = var19[var21];
-            if(var24 >= 0) {
-               if(var13) {
-                  var24 |= 4;
-               } else {
-                  var24 &= -5;
-               }
+         if(flag1 != flag3) {
+            for(l2 = 1; l2 < k2; ++l2) {
+               k3 = i + i2 * l2;
+               j3 = k + j2 * l2;
+               l3 = aint[l2];
+               if(l3 >= 0) {
+                  if(flag3) {
+                     l3 |= 4;
+                  } else {
+                     l3 &= -5;
+                  }
 
-               var1.setBlockMetadataWithNotify(var22, var3, var23, var24);
+                  world.setBlockMetadataWithNotify(k3, j, j3, l3);
+               }
             }
          }
-      }
 
+      }
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      this.func_72143_a(var1, var2, var3, var4, this.blockID, var1.getBlockMetadata(var2, var3, var4), true, -1, 0);
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      this.func_72143_a(world, i, j, k, this.blockID, world.getBlockMetadata(i, j, k), true, -1, 0);
    }
 
-   private void playSoundEffect(World var1, int var2, int var3, int var4, boolean var5, boolean var6, boolean var7, boolean var8) {
-      if(var6 && !var8) {
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.4F, 0.6F);
-      } else if(!var6 && var8) {
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.4F, 0.5F);
-      } else if(var5 && !var7) {
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.click", 0.4F, 0.7F);
-      } else if(!var5 && var7) {
-         var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.1D, (double)var4 + 0.5D, "random.bowhit", 0.4F, 1.2F / (var1.rand.nextFloat() * 0.2F + 0.9F));
+   private void playSoundEffect(World world, int i, int j, int k, boolean flag, boolean flag1, boolean flag2, boolean flag3) {
+      if(flag1 && !flag3) {
+         world.playSoundEffect((double)i + 0.5D, (double)j + 0.1D, (double)k + 0.5D, "random.click", 0.4F, 0.6F);
+      } else if(!flag1 && flag3) {
+         world.playSoundEffect((double)i + 0.5D, (double)j + 0.1D, (double)k + 0.5D, "random.click", 0.4F, 0.5F);
+      } else if(flag && !flag2) {
+         world.playSoundEffect((double)i + 0.5D, (double)j + 0.1D, (double)k + 0.5D, "random.click", 0.4F, 0.7F);
+      } else if(!flag && flag2) {
+         world.playSoundEffect((double)i + 0.5D, (double)j + 0.1D, (double)k + 0.5D, "random.bowhit", 0.4F, 1.2F / (world.rand.nextFloat() * 0.2F + 0.9F));
       }
 
    }
 
-   private void notifyNeighborOfChange(World var1, int var2, int var3, int var4, int var5) {
-      var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-      if(var5 == 3) {
-         var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-      } else if(var5 == 1) {
-         var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-      } else if(var5 == 0) {
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-      } else if(var5 == 2) {
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+   private void notifyNeighborOfChange(World world, int i, int j, int k, int l) {
+      world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+      if(l == 3) {
+         world.notifyBlocksOfNeighborChange(i - 1, j, k, this.blockID);
+      } else if(l == 1) {
+         world.notifyBlocksOfNeighborChange(i + 1, j, k, this.blockID);
+      } else if(l == 0) {
+         world.notifyBlocksOfNeighborChange(i, j, k - 1, this.blockID);
+      } else if(l == 2) {
+         world.notifyBlocksOfNeighborChange(i, j, k + 1, this.blockID);
       }
 
    }
 
-   private boolean func_72144_l(World var1, int var2, int var3, int var4) {
-      if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   private boolean func_72144_l(World world, int i, int j, int k) {
+      if(!this.canPlaceBlockAt(world, i, j, k)) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
          return false;
       } else {
          return true;
       }
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4) & 3;
-      float var6 = 0.1875F;
-      if(var5 == 3) {
-         this.setBlockBounds(0.0F, 0.2F, 0.5F - var6, var6 * 2.0F, 0.8F, 0.5F + var6);
-      } else if(var5 == 1) {
-         this.setBlockBounds(1.0F - var6 * 2.0F, 0.2F, 0.5F - var6, 1.0F, 0.8F, 0.5F + var6);
-      } else if(var5 == 0) {
-         this.setBlockBounds(0.5F - var6, 0.2F, 0.0F, 0.5F + var6, 0.8F, var6 * 2.0F);
-      } else if(var5 == 2) {
-         this.setBlockBounds(0.5F - var6, 0.2F, 1.0F - var6 * 2.0F, 0.5F + var6, 0.8F, 1.0F);
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k) & 3;
+      float f = 0.1875F;
+      if(l == 3) {
+         this.setBlockBounds(0.0F, 0.2F, 0.5F - f, f * 2.0F, 0.8F, 0.5F + f);
+      } else if(l == 1) {
+         this.setBlockBounds(1.0F - f * 2.0F, 0.2F, 0.5F - f, 1.0F, 0.8F, 0.5F + f);
+      } else if(l == 0) {
+         this.setBlockBounds(0.5F - f, 0.2F, 0.0F, 0.5F + f, 0.8F, f * 2.0F);
+      } else if(l == 2) {
+         this.setBlockBounds(0.5F - f, 0.2F, 1.0F - f * 2.0F, 0.5F + f, 0.8F, 1.0F);
       }
 
    }
 
-   public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-      boolean var7 = (var6 & 4) == 4;
-      boolean var8 = (var6 & 8) == 8;
-      if(var7 || var8) {
-         this.func_72143_a(var1, var2, var3, var4, 0, var6, false, -1, 0);
-      }
-
-      if(var8) {
-         var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-         int var9 = var6 & 3;
-         if(var9 == 3) {
-            var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-         } else if(var9 == 1) {
-            var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-         } else if(var9 == 0) {
-            var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-         } else if(var9 == 2) {
-            var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+   public void breakBlock(World world, int i, int j, int k, int l, int i1) {
+      boolean flag = (i1 & 4) == 4;
+      boolean flag1 = (i1 & 8) == 8;
+      if(flag || flag1) {
+         this.func_72143_a(world, i, j, k, 0, i1, false, -1, 0);
+      }
+
+      if(flag1) {
+         world.notifyBlocksOfNeighborChange(i, j, k, this.blockID);
+         int j1 = i1 & 3;
+         if(j1 == 3) {
+            world.notifyBlocksOfNeighborChange(i - 1, j, k, this.blockID);
+         } else if(j1 == 1) {
+            world.notifyBlocksOfNeighborChange(i + 1, j, k, this.blockID);
+         } else if(j1 == 0) {
+            world.notifyBlocksOfNeighborChange(i, j, k - 1, this.blockID);
+         } else if(j1 == 2) {
+            world.notifyBlocksOfNeighborChange(i, j, k + 1, this.blockID);
          }
       }
 
-      super.breakBlock(var1, var2, var3, var4, var5, var6);
+      super.breakBlock(world, i, j, k, l, i1);
    }
 
-   public boolean isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      return (var1.getBlockMetadata(var2, var3, var4) & 8) == 8;
+   public boolean isProvidingWeakPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      return (iblockaccess.getBlockMetadata(i, j, k) & 8) == 8;
    }
 
-   public boolean isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-      int var6 = var1.getBlockMetadata(var2, var3, var4);
-      if((var6 & 8) != 8) {
+   public boolean isProvidingStrongPower(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+      int i1 = iblockaccess.getBlockMetadata(i, j, k);
+      if((i1 & 8) != 8) {
          return false;
       } else {
-         int var7 = var6 & 3;
-         return var7 == 2 && var5 == 2?true:(var7 == 0 && var5 == 3?true:(var7 == 1 && var5 == 4?true:var7 == 3 && var5 == 5));
+         int j1 = i1 & 3;
+         return j1 == 2 && l == 2?true:(j1 == 0 && l == 3?true:(j1 == 1 && l == 4?true:j1 == 3 && l == 5));
       }
    }
 
Binary files mcp-mcdev/net/minecraft/src/BlockVine.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockVine.class differ
diff -ur mcp-mcdev/net/minecraft/src/BlockVine.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockVine.java
--- mcp-mcdev/net/minecraft/src/BlockVine.java	2012-11-29 21:15:19.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/BlockVine.java	2012-11-29 20:44:38.000000000 -0800
@@ -12,11 +12,12 @@
 import net.minecraft.src.Material;
 import net.minecraft.src.StatList;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class BlockVine extends Block {
 
-   public BlockVine(int var1) {
-      super(var1, 143, Material.vine);
+   public BlockVine(int i) {
+      super(i, 143, Material.vine);
       this.setTickRandomly(true);
       this.setCreativeTab(CreativeTabs.tabDecorations);
    }
@@ -37,213 +38,223 @@
       return false;
    }
 
-   public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      float var6 = 1.0F;
-      float var7 = 1.0F;
-      float var8 = 1.0F;
-      float var9 = 0.0F;
-      float var10 = 0.0F;
-      float var11 = 0.0F;
-      boolean var12 = var5 > 0;
-      if((var5 & 2) != 0) {
-         var9 = Math.max(var9, 0.0625F);
-         var6 = 0.0F;
-         var7 = 0.0F;
-         var10 = 1.0F;
-         var8 = 0.0F;
-         var11 = 1.0F;
-         var12 = true;
-      }
-
-      if((var5 & 8) != 0) {
-         var6 = Math.min(var6, 0.9375F);
-         var9 = 1.0F;
-         var7 = 0.0F;
-         var10 = 1.0F;
-         var8 = 0.0F;
-         var11 = 1.0F;
-         var12 = true;
-      }
-
-      if((var5 & 4) != 0) {
-         var11 = Math.max(var11, 0.0625F);
-         var8 = 0.0F;
-         var6 = 0.0F;
-         var9 = 1.0F;
-         var7 = 0.0F;
-         var10 = 1.0F;
-         var12 = true;
-      }
-
-      if((var5 & 1) != 0) {
-         var8 = Math.min(var8, 0.9375F);
-         var11 = 1.0F;
-         var6 = 0.0F;
-         var9 = 1.0F;
-         var7 = 0.0F;
-         var10 = 1.0F;
-         var12 = true;
-      }
-
-      if(!var12 && this.canBePlacedOn(var1.getBlockId(var2, var3 + 1, var4))) {
-         var7 = Math.min(var7, 0.9375F);
-         var10 = 1.0F;
-         var6 = 0.0F;
-         var9 = 1.0F;
-         var8 = 0.0F;
-         var11 = 1.0F;
+   public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+      int l = iblockaccess.getBlockMetadata(i, j, k);
+      float f = 1.0F;
+      float f1 = 1.0F;
+      float f2 = 1.0F;
+      float f3 = 0.0F;
+      float f4 = 0.0F;
+      float f5 = 0.0F;
+      boolean flag = l > 0;
+      if((l & 2) != 0) {
+         f3 = Math.max(f3, 0.0625F);
+         f = 0.0F;
+         f1 = 0.0F;
+         f4 = 1.0F;
+         f2 = 0.0F;
+         f5 = 1.0F;
+         flag = true;
+      }
+
+      if((l & 8) != 0) {
+         f = Math.min(f, 0.9375F);
+         f3 = 1.0F;
+         f1 = 0.0F;
+         f4 = 1.0F;
+         f2 = 0.0F;
+         f5 = 1.0F;
+         flag = true;
+      }
+
+      if((l & 4) != 0) {
+         f5 = Math.max(f5, 0.0625F);
+         f2 = 0.0F;
+         f = 0.0F;
+         f3 = 1.0F;
+         f1 = 0.0F;
+         f4 = 1.0F;
+         flag = true;
+      }
+
+      if((l & 1) != 0) {
+         f2 = Math.min(f2, 0.9375F);
+         f5 = 1.0F;
+         f = 0.0F;
+         f3 = 1.0F;
+         f1 = 0.0F;
+         f4 = 1.0F;
+         flag = true;
+      }
+
+      if(!flag && this.canBePlacedOn(iblockaccess.getBlockId(i, j + 1, k))) {
+         f1 = Math.min(f1, 0.9375F);
+         f4 = 1.0F;
+         f = 0.0F;
+         f3 = 1.0F;
+         f2 = 0.0F;
+         f5 = 1.0F;
       }
 
-      this.setBlockBounds(var6, var7, var8, var9, var10, var11);
+      this.setBlockBounds(f, f1, f2, f3, f4, f5);
    }
 
-   public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+   public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
       return null;
    }
 
-   public boolean canPlaceBlockOnSide(World var1, int var2, int var3, int var4, int var5) {
-      switch(var5) {
+   public boolean canPlaceBlockOnSide(World world, int i, int j, int k, int l) {
+      switch(l) {
       case 1:
-         return this.canBePlacedOn(var1.getBlockId(var2, var3 + 1, var4));
+         return this.canBePlacedOn(world.getBlockId(i, j + 1, k));
       case 2:
-         return this.canBePlacedOn(var1.getBlockId(var2, var3, var4 + 1));
+         return this.canBePlacedOn(world.getBlockId(i, j, k + 1));
       case 3:
-         return this.canBePlacedOn(var1.getBlockId(var2, var3, var4 - 1));
+         return this.canBePlacedOn(world.getBlockId(i, j, k - 1));
       case 4:
-         return this.canBePlacedOn(var1.getBlockId(var2 + 1, var3, var4));
+         return this.canBePlacedOn(world.getBlockId(i + 1, j, k));
       case 5:
-         return this.canBePlacedOn(var1.getBlockId(var2 - 1, var3, var4));
+         return this.canBePlacedOn(world.getBlockId(i - 1, j, k));
       default:
          return false;
       }
    }
 
-   private boolean canBePlacedOn(int var1) {
-      if(var1 == 0) {
+   private boolean canBePlacedOn(int i) {
+      if(i == 0) {
          return false;
       } else {
-         Block var2 = Block.blocksList[var1];
-         return var2.renderAsNormalBlock() && var2.blockMaterial.blocksMovement();
+         Block block = Block.blocksList[i];
+         return block.renderAsNormalBlock() && block.blockMaterial.blocksMovement();
       }
    }
 
-   private boolean canVineStay(World var1, int var2, int var3, int var4) {
-      int var5 = var1.getBlockMetadata(var2, var3, var4);
-      int var6 = var5;
-      if(var5 > 0) {
-         for(int var7 = 0; var7 <= 3; ++var7) {
-            int var8 = 1 << var7;
-            if((var5 & var8) != 0 && !this.canBePlacedOn(var1.getBlockId(var2 + Direction.offsetX[var7], var3, var4 + Direction.offsetZ[var7])) && (var1.getBlockId(var2, var3 + 1, var4) != this.blockID || (var1.getBlockMetadata(var2, var3 + 1, var4) & var8) == 0)) {
-               var6 &= ~var8;
+   private boolean canVineStay(World world, int i, int j, int k) {
+      int l = world.getBlockMetadata(i, j, k);
+      int i1 = l;
+      if(l > 0) {
+         for(int j1 = 0; j1 <= 3; ++j1) {
+            int k1 = 1 << j1;
+            if((l & k1) != 0 && !this.canBePlacedOn(world.getBlockId(i + Direction.offsetX[j1], j, k + Direction.offsetZ[j1])) && (world.getBlockId(i, j + 1, k) != this.blockID || (world.getBlockMetadata(i, j + 1, k) & k1) == 0)) {
+               i1 &= ~k1;
             }
          }
       }
 
-      if(var6 == 0 && !this.canBePlacedOn(var1.getBlockId(var2, var3 + 1, var4))) {
+      if(i1 == 0 && !this.canBePlacedOn(world.getBlockId(i, j + 1, k))) {
          return false;
       } else {
-         if(var6 != var5) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
+         if(i1 != l) {
+            world.setBlockMetadataWithNotify(i, j, k, i1);
          }
 
          return true;
       }
    }
 
-   public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-      if(!var1.isRemote && !this.canVineStay(var1, var2, var3, var4)) {
-         this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-         var1.setBlockWithNotify(var2, var3, var4, 0);
+   public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+      if(!world.isRemote && !this.canVineStay(world, i, j, k)) {
+         this.dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k), 0);
+         world.setBlockWithNotify(i, j, k, 0);
       }
 
    }
 
-   public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-      if(!var1.isRemote && var1.rand.nextInt(4) == 0) {
-         byte var6 = 4;
-         int var7 = 5;
-         boolean var8 = false;
-
-         int var9;
-         int var10;
-         int var11;
-         label138:
-         for(var9 = var2 - var6; var9 <= var2 + var6; ++var9) {
-            for(var10 = var4 - var6; var10 <= var4 + var6; ++var10) {
-               for(var11 = var3 - 1; var11 <= var3 + 1; ++var11) {
-                  if(var1.getBlockId(var9, var11, var10) == this.blockID) {
-                     --var7;
-                     if(var7 <= 0) {
-                        var8 = true;
-                        break label138;
+   public void updateTick(World world, int i, int j, int k, Random random) {
+      if(!world.isRemote && world.rand.nextInt(4) == 0) {
+         byte b0 = 4;
+         int l = 5;
+         boolean flag = false;
+
+         int i1;
+         int j1;
+         int k1;
+         label135:
+         for(i1 = i - b0; i1 <= i + b0; ++i1) {
+            for(j1 = k - b0; j1 <= k + b0; ++j1) {
+               for(k1 = j - 1; k1 <= j + 1; ++k1) {
+                  if(world.getBlockId(i1, k1, j1) == this.blockID) {
+                     --l;
+                     if(l <= 0) {
+                        flag = true;
+                        break label135;
                      }
                   }
                }
             }
          }
 
-         var9 = var1.getBlockMetadata(var2, var3, var4);
-         var10 = var1.rand.nextInt(6);
-         var11 = Direction.vineGrowth[var10];
-         int var12;
-         int var13;
-         if(var10 == 1 && var3 < 255 && var1.isAirBlock(var2, var3 + 1, var4)) {
-            if(var8) {
+         i1 = world.getBlockMetadata(i, j, k);
+         j1 = world.rand.nextInt(6);
+         k1 = Direction.vineGrowth[j1];
+         int l1;
+         int i2;
+         org.bukkit.block.Block source;
+         if(j1 == 1 && j < 255 && world.isAirBlock(i, j + 1, k)) {
+            if(flag) {
                return;
             }
 
-            var12 = var1.rand.nextInt(16) & var9;
-            if(var12 > 0) {
-               for(var13 = 0; var13 <= 3; ++var13) {
-                  if(!this.canBePlacedOn(var1.getBlockId(var2 + Direction.offsetX[var13], var3 + 1, var4 + Direction.offsetZ[var13]))) {
-                     var12 &= ~(1 << var13);
+            l1 = world.rand.nextInt(16) & i1;
+            if(l1 > 0) {
+               for(i2 = 0; i2 <= 3; ++i2) {
+                  if(!this.canBePlacedOn(world.getBlockId(i + Direction.offsetX[i2], j + 1, k + Direction.offsetZ[i2]))) {
+                     l1 &= ~(1 << i2);
                   }
                }
 
-               if(var12 > 0) {
-                  var1.setBlockAndMetadataWithNotify(var2, var3 + 1, var4, this.blockID, var12);
+               if(l1 > 0) {
+                  org.bukkit.block.Block var17 = world.getWorld().getBlockAt(i, j, k);
+                  source = world.getWorld().getBlockAt(i, j + 1, k);
+                  CraftEventFactory.handleBlockSpreadEvent(source, var17, this.blockID, i2);
                }
             }
          } else {
-            int var14;
-            if(var10 >= 2 && var10 <= 5 && (var9 & 1 << var11) == 0) {
-               if(var8) {
+            int j2;
+            org.bukkit.block.Block block;
+            if(j1 >= 2 && j1 <= 5 && (i1 & 1 << k1) == 0) {
+               if(flag) {
                   return;
                }
 
-               var12 = var1.getBlockId(var2 + Direction.offsetX[var11], var3, var4 + Direction.offsetZ[var11]);
-               if(var12 != 0 && Block.blocksList[var12] != null) {
-                  if(Block.blocksList[var12].blockMaterial.isOpaque() && Block.blocksList[var12].renderAsNormalBlock()) {
-                     var1.setBlockMetadataWithNotify(var2, var3, var4, var9 | 1 << var11);
+               l1 = world.getBlockId(i + Direction.offsetX[k1], j, k + Direction.offsetZ[k1]);
+               if(l1 != 0 && Block.blocksList[l1] != null) {
+                  if(Block.blocksList[l1].blockMaterial.isOpaque() && Block.blocksList[l1].renderAsNormalBlock()) {
+                     world.setBlockMetadataWithNotify(i, j, k, i1 | 1 << k1);
                   }
                } else {
-                  var13 = var11 + 1 & 3;
-                  var14 = var11 + 3 & 3;
-                  if((var9 & 1 << var13) != 0 && this.canBePlacedOn(var1.getBlockId(var2 + Direction.offsetX[var11] + Direction.offsetX[var13], var3, var4 + Direction.offsetZ[var11] + Direction.offsetZ[var13]))) {
-                     var1.setBlockAndMetadataWithNotify(var2 + Direction.offsetX[var11], var3, var4 + Direction.offsetZ[var11], this.blockID, 1 << var13);
-                  } else if((var9 & 1 << var14) != 0 && this.canBePlacedOn(var1.getBlockId(var2 + Direction.offsetX[var11] + Direction.offsetX[var14], var3, var4 + Direction.offsetZ[var11] + Direction.offsetZ[var14]))) {
-                     var1.setBlockAndMetadataWithNotify(var2 + Direction.offsetX[var11], var3, var4 + Direction.offsetZ[var11], this.blockID, 1 << var14);
-                  } else if((var9 & 1 << var13) != 0 && var1.isAirBlock(var2 + Direction.offsetX[var11] + Direction.offsetX[var13], var3, var4 + Direction.offsetZ[var11] + Direction.offsetZ[var13]) && this.canBePlacedOn(var1.getBlockId(var2 + Direction.offsetX[var13], var3, var4 + Direction.offsetZ[var13]))) {
-                     var1.setBlockAndMetadataWithNotify(var2 + Direction.offsetX[var11] + Direction.offsetX[var13], var3, var4 + Direction.offsetZ[var11] + Direction.offsetZ[var13], this.blockID, 1 << (var11 + 2 & 3));
-                  } else if((var9 & 1 << var14) != 0 && var1.isAirBlock(var2 + Direction.offsetX[var11] + Direction.offsetX[var14], var3, var4 + Direction.offsetZ[var11] + Direction.offsetZ[var14]) && this.canBePlacedOn(var1.getBlockId(var2 + Direction.offsetX[var14], var3, var4 + Direction.offsetZ[var14]))) {
-                     var1.setBlockAndMetadataWithNotify(var2 + Direction.offsetX[var11] + Direction.offsetX[var14], var3, var4 + Direction.offsetZ[var11] + Direction.offsetZ[var14], this.blockID, 1 << (var11 + 2 & 3));
-                  } else if(this.canBePlacedOn(var1.getBlockId(var2 + Direction.offsetX[var11], var3 + 1, var4 + Direction.offsetZ[var11]))) {
-                     var1.setBlockAndMetadataWithNotify(var2 + Direction.offsetX[var11], var3, var4 + Direction.offsetZ[var11], this.blockID, 0);
+                  i2 = k1 + 1 & 3;
+                  j2 = k1 + 3 & 3;
+                  source = world.getWorld().getBlockAt(i, j, k);
+                  block = world.getWorld().getBlockAt(i + Direction.offsetX[k1], j, k + Direction.offsetZ[k1]);
+                  if((i1 & 1 << i2) != 0 && this.canBePlacedOn(world.getBlockId(i + Direction.offsetX[k1] + Direction.offsetX[i2], j, k + Direction.offsetZ[k1] + Direction.offsetZ[i2]))) {
+                     CraftEventFactory.handleBlockSpreadEvent(block, source, this.blockID, 1 << i2);
+                  } else if((i1 & 1 << j2) != 0 && this.canBePlacedOn(world.getBlockId(i + Direction.offsetX[k1] + Direction.offsetX[j2], j, k + Direction.offsetZ[k1] + Direction.offsetZ[j2]))) {
+                     CraftEventFactory.handleBlockSpreadEvent(block, source, this.blockID, 1 << j2);
+                  } else if((i1 & 1 << i2) != 0 && world.isAirBlock(i + Direction.offsetX[k1] + Direction.offsetX[i2], j, k + Direction.offsetZ[k1] + Direction.offsetZ[i2]) && this.canBePlacedOn(world.getBlockId(i + Direction.offsetX[i2], j, k + Direction.offsetZ[i2]))) {
+                     block = world.getWorld().getBlockAt(i + Direction.offsetX[k1] + Direction.offsetX[i2], j, k + Direction.offsetZ[k1] + Direction.offsetZ[i2]);
+                     CraftEventFactory.handleBlockSpreadEvent(block, source, this.blockID, 1 << (k1 + 2 & 3));
+                  } else if((i1 & 1 << j2) != 0 && world.isAirBlock(i + Direction.offsetX[k1] + Direction.offsetX[j2], j, k + Direction.offsetZ[k1] + Direction.offsetZ[j2]) && this.canBePlacedOn(world.getBlockId(i + Direction.offsetX[j2], j, k + Direction.offsetZ[j2]))) {
+                     block = world.getWorld().getBlockAt(i + Direction.offsetX[k1] + Direction.offsetX[j2], j, k + Direction.offsetZ[k1] + Direction.offsetZ[j2]);
+                     CraftEventFactory.handleBlockSpreadEvent(block, source, this.blockID, 1 << (k1 + 2 & 3));
+                  } else if(this.canBePlacedOn(world.getBlockId(i + Direction.offsetX[k1], j + 1, k + Direction.offsetZ[k1]))) {
+                     CraftEventFactory.handleBlockSpreadEvent(block, source, this.blockID, 0);
                   }
                }
-            } else if(var3 > 1) {
-               var12 = var1.getBlockId(var2, var3 - 1, var4);
-               if(var12 == 0) {
-                  var13 = var1.rand.nextInt(16) & var9;
-                  if(var13 > 0) {
-                     var1.setBlockAndMetadataWithNotify(var2, var3 - 1, var4, this.blockID, var13);
+            } else if(j > 1) {
+               l1 = world.getBlockId(i, j - 1, k);
+               if(l1 == 0) {
+                  i2 = world.rand.nextInt(16) & i1;
+                  if(i2 > 0) {
+                     source = world.getWorld().getBlockAt(i, j, k);
+                     block = world.getWorld().getBlockAt(i, j - 1, k);
+                     CraftEventFactory.handleBlockSpreadEvent(block, source, this.blockID, i2);
                   }
-               } else if(var12 == this.blockID) {
-                  var13 = var1.rand.nextInt(16) & var9;
-                  var14 = var1.getBlockMetadata(var2, var3 - 1, var4);
-                  if(var14 != (var14 | var13)) {
-                     var1.setBlockMetadataWithNotify(var2, var3 - 1, var4, var14 | var13);
+               } else if(l1 == this.blockID) {
+                  i2 = world.rand.nextInt(16) & i1;
+                  j2 = world.getBlockMetadata(i, j - 1, k);
+                  if(j2 != (j2 | i2)) {
+                     world.setBlockMetadataWithNotify(i, j - 1, k, j2 | i2);
                   }
                }
             }
@@ -252,39 +263,39 @@
 
    }
 
-   public int func_85104_a(World var1, int var2, int var3, int var4, int var5, float var6, float var7, float var8, int var9) {
-      byte var10 = 0;
-      switch(var5) {
+   public int func_85104_a(World world, int i, int j, int k, int l, float f, float f1, float f2, int i1) {
+      byte b0 = 0;
+      switch(l) {
       case 2:
-         var10 = 1;
+         b0 = 1;
          break;
       case 3:
-         var10 = 4;
+         b0 = 4;
          break;
       case 4:
-         var10 = 8;
+         b0 = 8;
          break;
       case 5:
-         var10 = 2;
+         b0 = 2;
       }
 
-      return var10 != 0?var10:var9;
+      return b0 != 0?b0:i1;
    }
 
-   public int idDropped(int var1, Random var2, int var3) {
+   public int idDropped(int i, Random random, int j) {
       return 0;
    }
 
-   public int quantityDropped(Random var1) {
+   public int quantityDropped(Random random) {
       return 0;
    }
 
-   public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
-      if(!var1.isRemote && var2.getCurrentEquippedItem() != null && var2.getCurrentEquippedItem().itemID == Item.shears.shiftedIndex) {
-         var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
-         this.dropBlockAsItem_do(var1, var3, var4, var5, new ItemStack(Block.vine, 1, 0));
+   public void harvestBlock(World world, EntityPlayer entityhuman, int i, int j, int k, int l) {
+      if(!world.isRemote && entityhuman.getCurrentEquippedItem() != null && entityhuman.getCurrentEquippedItem().itemID == Item.shears.shiftedIndex) {
+         entityhuman.addStat(StatList.mineBlockStatArray[this.blockID], 1);
+         this.dropBlockAsItem_do(world, i, j, k, new ItemStack(Block.vine, 1, 0));
       } else {
-         super.harvestBlock(var1, var2, var3, var4, var5, var6);
+         super.harvestBlock(world, entityhuman, i, j, k, l);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/CallableSuspiciousClasses.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CallableSuspiciousClasses.class differ
diff -ur mcp-mcdev/net/minecraft/src/CallableSuspiciousClasses.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CallableSuspiciousClasses.java
--- mcp-mcdev/net/minecraft/src/CallableSuspiciousClasses.java	2012-11-29 21:15:18.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CallableSuspiciousClasses.java	2012-11-29 20:44:37.000000000 -0800
@@ -36,7 +36,7 @@
          Class var9 = (Class)var8.next();
          if(var9 != null) {
             String var10 = var9.getCanonicalName();
-            if(var10 != null && !var10.startsWith("org.lwjgl.") && !var10.startsWith("paulscode.") && !var10.startsWith("org.bouncycastle.") && !var10.startsWith("argo.") && !var10.startsWith("com.jcraft.") && !var10.equals("util.GLX")) {
+            if(var10 != null && !var10.startsWith("org.lwjgl.") && !var10.startsWith("paulscode.") && !var10.startsWith("net.minecraft.org.bouncycastle.") && !var10.startsWith("argo.") && !var10.startsWith("com.jcraft.") && !var10.equals("util.GLX")) {
                if(var5) {
                   if(var10.length() <= 3 || var10.equals("net.minecraft.client.MinecraftApplet") || var10.equals("net.minecraft.client.Minecraft") || var10.equals("net.minecraft.client.ClientBrandRetriever") || var10.equals("net.minecraft.server.MinecraftServer")) {
                      continue;
Binary files mcp-mcdev/net/minecraft/src/Chunk.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Chunk.class differ
diff -ur mcp-mcdev/net/minecraft/src/Chunk.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Chunk.java
--- mcp-mcdev/net/minecraft/src/Chunk.java	2012-11-29 21:15:18.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Chunk.java	2012-11-29 20:44:37.000000000 -0800
@@ -1,6 +1,5 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -11,9 +10,12 @@
 import net.minecraft.src.BiomeGenBase;
 import net.minecraft.src.Block;
 import net.minecraft.src.BlockContainer;
+import net.minecraft.src.BlockPistonBase;
 import net.minecraft.src.ChunkCoordIntPair;
 import net.minecraft.src.ChunkPosition;
+import net.minecraft.src.EmptyChunk;
 import net.minecraft.src.Entity;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.EnumSkyBlock;
 import net.minecraft.src.ExtendedBlockStorage;
 import net.minecraft.src.IChunkProvider;
@@ -23,6 +25,10 @@
 import net.minecraft.src.TileEntity;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldChunkManager;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.util.UnsafeList;
 
 public class Chunk {
 
@@ -47,9 +53,11 @@
    public int field_82912_p;
    private int queuedLightChecks;
    boolean field_76653_p;
+   public org.bukkit.Chunk bukkitChunk;
+   public boolean mustSave;
 
 
-   public Chunk(World var1, int var2, int var3) {
+   public Chunk(World world, int i, int j) {
       this.storageArrays = new ExtendedBlockStorage[16];
       this.blockBiomeArray = new byte[256];
       this.precipitationHeightMap = new int[256];
@@ -65,34 +73,38 @@
       this.queuedLightChecks = 4096;
       this.field_76653_p = false;
       this.entityLists = new List[16];
-      this.worldObj = var1;
-      this.xPosition = var2;
-      this.zPosition = var3;
+      this.worldObj = world;
+      this.xPosition = i;
+      this.zPosition = j;
       this.heightMap = new int[256];
 
-      for(int var4 = 0; var4 < this.entityLists.length; ++var4) {
-         this.entityLists[var4] = new ArrayList();
+      for(int k = 0; k < this.entityLists.length; ++k) {
+         this.entityLists[k] = new UnsafeList();
       }
 
       Arrays.fill(this.precipitationHeightMap, -999);
       Arrays.fill(this.blockBiomeArray, (byte)-1);
+      if(!(this instanceof EmptyChunk)) {
+         this.bukkitChunk = new CraftChunk(this);
+      }
+
    }
 
-   public Chunk(World var1, byte[] var2, int var3, int var4) {
-      this(var1, var3, var4);
-      int var5 = var2.length / 256;
+   public Chunk(World world, byte[] abyte, int i, int j) {
+      this(world, i, j);
+      int k = abyte.length / 256;
 
-      for(int var6 = 0; var6 < 16; ++var6) {
-         for(int var7 = 0; var7 < 16; ++var7) {
-            for(int var8 = 0; var8 < var5; ++var8) {
-               byte var9 = var2[var6 << 11 | var7 << 7 | var8];
-               if(var9 != 0) {
-                  int var10 = var8 >> 4;
-                  if(this.storageArrays[var10] == null) {
-                     this.storageArrays[var10] = new ExtendedBlockStorage(var10 << 4);
+      for(int l = 0; l < 16; ++l) {
+         for(int i1 = 0; i1 < 16; ++i1) {
+            for(int j1 = 0; j1 < k; ++j1) {
+               byte b0 = abyte[l << 11 | i1 << 7 | j1];
+               if(b0 != 0) {
+                  int k1 = j1 >> 4;
+                  if(this.storageArrays[k1] == null) {
+                     this.storageArrays[k1] = new ExtendedBlockStorage(k1 << 4);
                   }
 
-                  this.storageArrays[var10].setExtBlockID(var6, var8 & 15, var7, var9);
+                  this.storageArrays[k1].setExtBlockID(l, j1 & 15, i1, b0);
                }
             }
          }
@@ -100,18 +112,18 @@
 
    }
 
-   public boolean isAtLocation(int var1, int var2) {
-      return var1 == this.xPosition && var2 == this.zPosition;
+   public boolean isAtLocation(int i, int j) {
+      return i == this.xPosition && j == this.zPosition;
    }
 
-   public int getHeightValue(int var1, int var2) {
-      return this.heightMap[var2 << 4 | var1];
+   public int getHeightValue(int i, int j) {
+      return this.heightMap[j << 4 | i];
    }
 
    public int getTopFilledSegment() {
-      for(int var1 = this.storageArrays.length - 1; var1 >= 0; --var1) {
-         if(this.storageArrays[var1] != null) {
-            return this.storageArrays[var1].getYLocation();
+      for(int i = this.storageArrays.length - 1; i >= 0; --i) {
+         if(this.storageArrays[i] != null) {
+            return this.storageArrays[i].getYLocation();
          }
       }
 
@@ -123,50 +135,50 @@
    }
 
    public void generateSkylightMap() {
-      int var1 = this.getTopFilledSegment();
+      int i = this.getTopFilledSegment();
       this.field_82912_p = Integer.MAX_VALUE;
 
-      int var2;
-      int var3;
-      for(var2 = 0; var2 < 16; ++var2) {
-         var3 = 0;
-
-         while(var3 < 16) {
-            this.precipitationHeightMap[var2 + (var3 << 4)] = -999;
-            int var4 = var1 + 16 - 1;
+      int j;
+      int k;
+      for(j = 0; j < 16; ++j) {
+         k = 0;
+
+         while(k < 16) {
+            this.precipitationHeightMap[j + (k << 4)] = -999;
+            int l = i + 16 - 1;
 
             while(true) {
-               if(var4 > 0) {
-                  if(this.getBlockLightOpacity(var2, var4 - 1, var3) == 0) {
-                     --var4;
+               if(l > 0) {
+                  if(this.getBlockLightOpacity(j, l - 1, k) == 0) {
+                     --l;
                      continue;
                   }
 
-                  this.heightMap[var3 << 4 | var2] = var4;
-                  if(var4 < this.field_82912_p) {
-                     this.field_82912_p = var4;
+                  this.heightMap[k << 4 | j] = l;
+                  if(l < this.field_82912_p) {
+                     this.field_82912_p = l;
                   }
                }
 
                if(!this.worldObj.provider.hasNoSky) {
-                  var4 = 15;
-                  int var5 = var1 + 16 - 1;
+                  l = 15;
+                  int i1 = i + 16 - 1;
 
                   do {
-                     var4 -= this.getBlockLightOpacity(var2, var5, var3);
-                     if(var4 > 0) {
-                        ExtendedBlockStorage var6 = this.storageArrays[var5 >> 4];
-                        if(var6 != null) {
-                           var6.setExtSkylightValue(var2, var5 & 15, var3, var4);
-                           this.worldObj.markBlockForRenderUpdate((this.xPosition << 4) + var2, var5, (this.zPosition << 4) + var3);
+                     l -= this.getBlockLightOpacity(j, i1, k);
+                     if(l > 0) {
+                        ExtendedBlockStorage chunksection = this.storageArrays[i1 >> 4];
+                        if(chunksection != null) {
+                           chunksection.setExtSkylightValue(j, i1 & 15, k, l);
+                           this.worldObj.markBlockForRenderUpdate((this.xPosition << 4) + j, i1, (this.zPosition << 4) + k);
                         }
                      }
 
-                     --var5;
-                  } while(var5 > 0 && var4 > 0);
+                     --i1;
+                  } while(i1 > 0 && l > 0);
                }
 
-               ++var3;
+               ++k;
                break;
             }
          }
@@ -174,50 +186,50 @@
 
       this.isModified = true;
 
-      for(var2 = 0; var2 < 16; ++var2) {
-         for(var3 = 0; var3 < 16; ++var3) {
-            this.propagateSkylightOcclusion(var2, var3);
+      for(j = 0; j < 16; ++j) {
+         for(k = 0; k < 16; ++k) {
+            this.propagateSkylightOcclusion(j, k);
          }
       }
 
    }
 
-   private void propagateSkylightOcclusion(int var1, int var2) {
-      this.updateSkylightColumns[var1 + var2 * 16] = true;
+   private void propagateSkylightOcclusion(int i, int j) {
+      this.updateSkylightColumns[i + j * 16] = true;
       this.isGapLightingUpdated = true;
    }
 
    private void updateSkylight_do() {
       this.worldObj.theProfiler.startSection("recheckGaps");
       if(this.worldObj.doChunksNearChunkExist(this.xPosition * 16 + 8, 0, this.zPosition * 16 + 8, 16)) {
-         for(int var1 = 0; var1 < 16; ++var1) {
-            for(int var2 = 0; var2 < 16; ++var2) {
-               if(this.updateSkylightColumns[var1 + var2 * 16]) {
-                  this.updateSkylightColumns[var1 + var2 * 16] = false;
-                  int var3 = this.getHeightValue(var1, var2);
-                  int var4 = this.xPosition * 16 + var1;
-                  int var5 = this.zPosition * 16 + var2;
-                  int var6 = this.worldObj.func_82734_g(var4 - 1, var5);
-                  int var7 = this.worldObj.func_82734_g(var4 + 1, var5);
-                  int var8 = this.worldObj.func_82734_g(var4, var5 - 1);
-                  int var9 = this.worldObj.func_82734_g(var4, var5 + 1);
-                  if(var7 < var6) {
-                     var6 = var7;
-                  }
-
-                  if(var8 < var6) {
-                     var6 = var8;
-                  }
-
-                  if(var9 < var6) {
-                     var6 = var9;
-                  }
-
-                  this.checkSkylightNeighborHeight(var4, var5, var6);
-                  this.checkSkylightNeighborHeight(var4 - 1, var5, var3);
-                  this.checkSkylightNeighborHeight(var4 + 1, var5, var3);
-                  this.checkSkylightNeighborHeight(var4, var5 - 1, var3);
-                  this.checkSkylightNeighborHeight(var4, var5 + 1, var3);
+         for(int i = 0; i < 16; ++i) {
+            for(int j = 0; j < 16; ++j) {
+               if(this.updateSkylightColumns[i + j * 16]) {
+                  this.updateSkylightColumns[i + j * 16] = false;
+                  int k = this.getHeightValue(i, j);
+                  int l = this.xPosition * 16 + i;
+                  int i1 = this.zPosition * 16 + j;
+                  int j1 = this.worldObj.func_82734_g(l - 1, i1);
+                  int k1 = this.worldObj.func_82734_g(l + 1, i1);
+                  int l1 = this.worldObj.func_82734_g(l, i1 - 1);
+                  int i2 = this.worldObj.func_82734_g(l, i1 + 1);
+                  if(k1 < j1) {
+                     j1 = k1;
+                  }
+
+                  if(l1 < j1) {
+                     j1 = l1;
+                  }
+
+                  if(i2 < j1) {
+                     j1 = i2;
+                  }
+
+                  this.checkSkylightNeighborHeight(l, i1, j1);
+                  this.checkSkylightNeighborHeight(l - 1, i1, k);
+                  this.checkSkylightNeighborHeight(l + 1, i1, k);
+                  this.checkSkylightNeighborHeight(l, i1 - 1, k);
+                  this.checkSkylightNeighborHeight(l, i1 + 1, k);
                }
             }
          }
@@ -228,20 +240,20 @@
       this.worldObj.theProfiler.endSection();
    }
 
-   private void checkSkylightNeighborHeight(int var1, int var2, int var3) {
-      int var4 = this.worldObj.getHeightValue(var1, var2);
-      if(var4 > var3) {
-         this.updateSkylightNeighborHeight(var1, var2, var3, var4 + 1);
-      } else if(var4 < var3) {
-         this.updateSkylightNeighborHeight(var1, var2, var4, var3 + 1);
+   private void checkSkylightNeighborHeight(int i, int j, int k) {
+      int l = this.worldObj.getHeightValue(i, j);
+      if(l > k) {
+         this.updateSkylightNeighborHeight(i, j, k, l + 1);
+      } else if(l < k) {
+         this.updateSkylightNeighborHeight(i, j, l, k + 1);
       }
 
    }
 
-   private void updateSkylightNeighborHeight(int var1, int var2, int var3, int var4) {
-      if(var4 > var3 && this.worldObj.doChunksNearChunkExist(var1, 0, var2, 16)) {
-         for(int var5 = var3; var5 < var4; ++var5) {
-            this.worldObj.updateLightByType(EnumSkyBlock.Sky, var1, var5, var2);
+   private void updateSkylightNeighborHeight(int i, int j, int k, int l) {
+      if(l > k && this.worldObj.doChunksNearChunkExist(i, 0, j, 16)) {
+         for(int i1 = k; i1 < l; ++i1) {
+            this.worldObj.updateLightByType(EnumSkyBlock.Sky, i, i1, j);
          }
 
          this.isModified = true;
@@ -249,192 +261,197 @@
 
    }
 
-   private void relightBlock(int var1, int var2, int var3) {
-      int var4 = this.heightMap[var3 << 4 | var1] & 255;
-      int var5 = var4;
-      if(var2 > var4) {
-         var5 = var2;
-      }
-
-      while(var5 > 0 && this.getBlockLightOpacity(var1, var5 - 1, var3) == 0) {
-         --var5;
-      }
-
-      if(var5 != var4) {
-         this.worldObj.markBlocksDirtyVertical(var1 + this.xPosition * 16, var3 + this.zPosition * 16, var5, var4);
-         this.heightMap[var3 << 4 | var1] = var5;
-         int var6 = this.xPosition * 16 + var1;
-         int var7 = this.zPosition * 16 + var3;
-         int var8;
-         int var12;
+   private void relightBlock(int i, int j, int k) {
+      int l = this.heightMap[k << 4 | i] & 255;
+      int i1 = l;
+      if(j > l) {
+         i1 = j;
+      }
+
+      while(i1 > 0 && this.getBlockLightOpacity(i, i1 - 1, k) == 0) {
+         --i1;
+      }
+
+      if(i1 != l) {
+         this.worldObj.markBlocksDirtyVertical(i + this.xPosition * 16, k + this.zPosition * 16, i1, l);
+         this.heightMap[k << 4 | i] = i1;
+         int j1 = this.xPosition * 16 + i;
+         int k1 = this.zPosition * 16 + k;
+         int l1;
+         int i2;
          if(!this.worldObj.provider.hasNoSky) {
-            ExtendedBlockStorage var9;
-            if(var5 < var4) {
-               for(var8 = var5; var8 < var4; ++var8) {
-                  var9 = this.storageArrays[var8 >> 4];
-                  if(var9 != null) {
-                     var9.setExtSkylightValue(var1, var8 & 15, var3, 15);
-                     this.worldObj.markBlockForRenderUpdate((this.xPosition << 4) + var1, var8, (this.zPosition << 4) + var3);
+            ExtendedBlockStorage j2;
+            if(i1 < l) {
+               for(l1 = i1; l1 < l; ++l1) {
+                  j2 = this.storageArrays[l1 >> 4];
+                  if(j2 != null) {
+                     j2.setExtSkylightValue(i, l1 & 15, k, 15);
+                     this.worldObj.markBlockForRenderUpdate((this.xPosition << 4) + i, l1, (this.zPosition << 4) + k);
                   }
                }
             } else {
-               for(var8 = var4; var8 < var5; ++var8) {
-                  var9 = this.storageArrays[var8 >> 4];
-                  if(var9 != null) {
-                     var9.setExtSkylightValue(var1, var8 & 15, var3, 0);
-                     this.worldObj.markBlockForRenderUpdate((this.xPosition << 4) + var1, var8, (this.zPosition << 4) + var3);
+               for(l1 = l; l1 < i1; ++l1) {
+                  j2 = this.storageArrays[l1 >> 4];
+                  if(j2 != null) {
+                     j2.setExtSkylightValue(i, l1 & 15, k, 0);
+                     this.worldObj.markBlockForRenderUpdate((this.xPosition << 4) + i, l1, (this.zPosition << 4) + k);
                   }
                }
             }
 
-            var8 = 15;
+            l1 = 15;
 
-            while(var5 > 0 && var8 > 0) {
-               --var5;
-               var12 = this.getBlockLightOpacity(var1, var5, var3);
-               if(var12 == 0) {
-                  var12 = 1;
+            while(i1 > 0 && l1 > 0) {
+               --i1;
+               i2 = this.getBlockLightOpacity(i, i1, k);
+               if(i2 == 0) {
+                  i2 = 1;
                }
 
-               var8 -= var12;
-               if(var8 < 0) {
-                  var8 = 0;
+               l1 -= i2;
+               if(l1 < 0) {
+                  l1 = 0;
                }
 
-               ExtendedBlockStorage var10 = this.storageArrays[var5 >> 4];
-               if(var10 != null) {
-                  var10.setExtSkylightValue(var1, var5 & 15, var3, var8);
+               ExtendedBlockStorage chunksection1 = this.storageArrays[i1 >> 4];
+               if(chunksection1 != null) {
+                  chunksection1.setExtSkylightValue(i, i1 & 15, k, l1);
                }
             }
          }
 
-         var8 = this.heightMap[var3 << 4 | var1];
-         var12 = var4;
-         int var13 = var8;
-         if(var8 < var4) {
-            var12 = var8;
-            var13 = var4;
+         l1 = this.heightMap[k << 4 | i];
+         i2 = l;
+         int var12 = l1;
+         if(l1 < l) {
+            i2 = l1;
+            var12 = l;
          }
 
-         if(var8 < this.field_82912_p) {
-            this.field_82912_p = var8;
+         if(l1 < this.field_82912_p) {
+            this.field_82912_p = l1;
          }
 
          if(!this.worldObj.provider.hasNoSky) {
-            this.updateSkylightNeighborHeight(var6 - 1, var7, var12, var13);
-            this.updateSkylightNeighborHeight(var6 + 1, var7, var12, var13);
-            this.updateSkylightNeighborHeight(var6, var7 - 1, var12, var13);
-            this.updateSkylightNeighborHeight(var6, var7 + 1, var12, var13);
-            this.updateSkylightNeighborHeight(var6, var7, var12, var13);
+            this.updateSkylightNeighborHeight(j1 - 1, k1, i2, var12);
+            this.updateSkylightNeighborHeight(j1 + 1, k1, i2, var12);
+            this.updateSkylightNeighborHeight(j1, k1 - 1, i2, var12);
+            this.updateSkylightNeighborHeight(j1, k1 + 1, i2, var12);
+            this.updateSkylightNeighborHeight(j1, k1, i2, var12);
          }
 
          this.isModified = true;
       }
+
    }
 
-   public int getBlockLightOpacity(int var1, int var2, int var3) {
-      return Block.lightOpacity[this.getBlockID(var1, var2, var3)];
+   public int getBlockLightOpacity(int i, int j, int k) {
+      return Block.lightOpacity[this.getBlockID(i, j, k)];
    }
 
-   public int getBlockID(int var1, int var2, int var3) {
-      if(var2 >> 4 >= this.storageArrays.length) {
+   public int getBlockID(int i, int j, int k) {
+      if(j >> 4 >= this.storageArrays.length) {
          return 0;
       } else {
-         ExtendedBlockStorage var4 = this.storageArrays[var2 >> 4];
-         return var4 != null?var4.getExtBlockID(var1, var2 & 15, var3):0;
+         ExtendedBlockStorage chunksection = this.storageArrays[j >> 4];
+         return chunksection != null?chunksection.getExtBlockID(i, j & 15, k):0;
       }
    }
 
-   public int getBlockMetadata(int var1, int var2, int var3) {
-      if(var2 >> 4 >= this.storageArrays.length) {
+   public int getBlockMetadata(int i, int j, int k) {
+      if(j >> 4 >= this.storageArrays.length) {
          return 0;
       } else {
-         ExtendedBlockStorage var4 = this.storageArrays[var2 >> 4];
-         return var4 != null?var4.getExtBlockMetadata(var1, var2 & 15, var3):0;
+         ExtendedBlockStorage chunksection = this.storageArrays[j >> 4];
+         return chunksection != null?chunksection.getExtBlockMetadata(i, j & 15, k):0;
       }
    }
 
-   public boolean setBlockID(int var1, int var2, int var3, int var4) {
-      return this.setBlockIDWithMetadata(var1, var2, var3, var4, 0);
+   public boolean setBlockID(int i, int j, int k, int l) {
+      return this.setBlockIDWithMetadata(i, j, k, l, 0);
    }
 
-   public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
-      int var6 = var3 << 4 | var1;
-      if(var2 >= this.precipitationHeightMap[var6] - 1) {
-         this.precipitationHeightMap[var6] = -999;
+   public boolean setBlockIDWithMetadata(int i, int j, int k, int l, int i1) {
+      int j1 = k << 4 | i;
+      if(j >= this.precipitationHeightMap[j1] - 1) {
+         this.precipitationHeightMap[j1] = -999;
       }
 
-      int var7 = this.heightMap[var6];
-      int var8 = this.getBlockID(var1, var2, var3);
-      int var9 = this.getBlockMetadata(var1, var2, var3);
-      if(var8 == var4 && var9 == var5) {
+      int k1 = this.heightMap[j1];
+      int l1 = this.getBlockID(i, j, k);
+      int i2 = this.getBlockMetadata(i, j, k);
+      if(l1 == l && i2 == i1) {
          return false;
       } else {
-         ExtendedBlockStorage var10 = this.storageArrays[var2 >> 4];
-         boolean var11 = false;
-         if(var10 == null) {
-            if(var4 == 0) {
+         ExtendedBlockStorage chunksection = this.storageArrays[j >> 4];
+         boolean flag = false;
+         if(chunksection == null) {
+            if(l == 0) {
                return false;
             }
 
-            var10 = this.storageArrays[var2 >> 4] = new ExtendedBlockStorage(var2 >> 4 << 4);
-            var11 = var2 >= var7;
+            chunksection = this.storageArrays[j >> 4] = new ExtendedBlockStorage(j >> 4 << 4);
+            flag = j >= k1;
          }
 
-         int var12 = this.xPosition * 16 + var1;
-         int var13 = this.zPosition * 16 + var3;
-         if(var8 != 0 && !this.worldObj.isRemote) {
-            Block.blocksList[var8].onSetBlockIDWithMetaData(this.worldObj, var12, var2, var13, var9);
+         int j2 = this.xPosition * 16 + i;
+         int k2 = this.zPosition * 16 + k;
+         if(l1 != 0 && !this.worldObj.isRemote) {
+            Block.blocksList[l1].onSetBlockIDWithMetaData(this.worldObj, j2, j, k2, i2);
          }
 
-         var10.setExtBlockID(var1, var2 & 15, var3, var4);
-         if(var8 != 0) {
+         chunksection.setExtBlockID(i, j & 15, k, l);
+         if(l1 != 0) {
             if(!this.worldObj.isRemote) {
-               Block.blocksList[var8].breakBlock(this.worldObj, var12, var2, var13, var8, var9);
-            } else if(Block.blocksList[var8] instanceof BlockContainer && var8 != var4) {
-               this.worldObj.removeBlockTileEntity(var12, var2, var13);
+               Block.blocksList[l1].breakBlock(this.worldObj, j2, j, k2, l1, i2);
+            } else if(Block.blocksList[l1] instanceof BlockContainer && l1 != l) {
+               this.worldObj.removeBlockTileEntity(j2, j, k2);
             }
          }
 
-         if(var10.getExtBlockID(var1, var2 & 15, var3) != var4) {
+         if(chunksection.getExtBlockID(i, j & 15, k) != l) {
             return false;
          } else {
-            var10.setExtBlockMetadata(var1, var2 & 15, var3, var5);
-            if(var11) {
+            chunksection.setExtBlockMetadata(i, j & 15, k, i1);
+            if(flag) {
                this.generateSkylightMap();
             } else {
-               if(Block.lightOpacity[var4 & 4095] > 0) {
-                  if(var2 >= var7) {
-                     this.relightBlock(var1, var2 + 1, var3);
+               if(Block.lightOpacity[l & 4095] > 0) {
+                  if(j >= k1) {
+                     this.relightBlock(i, j + 1, k);
                   }
-               } else if(var2 == var7 - 1) {
-                  this.relightBlock(var1, var2, var3);
+               } else if(j == k1 - 1) {
+                  this.relightBlock(i, j, k);
                }
 
-               this.propagateSkylightOcclusion(var1, var3);
+               this.propagateSkylightOcclusion(i, k);
             }
 
-            TileEntity var14;
-            if(var4 != 0) {
-               if(!this.worldObj.isRemote) {
-                  Block.blocksList[var4].onBlockAdded(this.worldObj, var12, var2, var13);
+            TileEntity tileentity;
+            if(l != 0) {
+               if(!this.worldObj.isRemote && (!(Block.blocksList[l] instanceof BlockPistonBase) || i2 != 0)) {
+                  Block.blocksList[l].onBlockAdded(this.worldObj, j2, j, k2);
                }
 
-               if(Block.blocksList[var4] instanceof BlockContainer) {
-                  var14 = this.getChunkBlockTileEntity(var1, var2, var3);
-                  if(var14 == null) {
-                     var14 = ((BlockContainer)Block.blocksList[var4]).createNewTileEntity(this.worldObj);
-                     this.worldObj.setBlockTileEntity(var12, var2, var13, var14);
+               if(Block.blocksList[l] instanceof BlockContainer) {
+                  if(this.getBlockID(i, j, k) != l) {
+                     return false;
                   }
 
-                  if(var14 != null) {
-                     var14.updateContainingBlockInfo();
+                  tileentity = this.getChunkBlockTileEntity(i, j, k);
+                  if(tileentity == null) {
+                     tileentity = ((BlockContainer)Block.blocksList[l]).createNewTileEntity(this.worldObj);
+                     this.worldObj.setBlockTileEntity(j2, j, k2, tileentity);
+                  }
+
+                  if(tileentity != null) {
+                     tileentity.updateContainingBlockInfo();
                   }
                }
-            } else if(var8 > 0 && Block.blocksList[var8] instanceof BlockContainer) {
-               var14 = this.getChunkBlockTileEntity(var1, var2, var3);
-               if(var14 != null) {
-                  var14.updateContainingBlockInfo();
+            } else if(l1 > 0 && Block.blocksList[l1] instanceof BlockContainer) {
+               tileentity = this.getChunkBlockTileEntity(i, j, k);
+               if(tileentity != null) {
+                  tileentity.updateContainingBlockInfo();
                }
             }
 
@@ -444,23 +461,23 @@
       }
    }
 
-   public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
-      ExtendedBlockStorage var5 = this.storageArrays[var2 >> 4];
-      if(var5 == null) {
+   public boolean setBlockMetadata(int i, int j, int k, int l) {
+      ExtendedBlockStorage chunksection = this.storageArrays[j >> 4];
+      if(chunksection == null) {
          return false;
       } else {
-         int var6 = var5.getExtBlockMetadata(var1, var2 & 15, var3);
-         if(var6 == var4) {
+         int i1 = chunksection.getExtBlockMetadata(i, j & 15, k);
+         if(i1 == l) {
             return false;
          } else {
             this.isModified = true;
-            var5.setExtBlockMetadata(var1, var2 & 15, var3, var4);
-            int var7 = var5.getExtBlockID(var1, var2 & 15, var3);
-            if(var7 > 0 && Block.blocksList[var7] instanceof BlockContainer) {
-               TileEntity var8 = this.getChunkBlockTileEntity(var1, var2, var3);
-               if(var8 != null) {
-                  var8.updateContainingBlockInfo();
-                  var8.blockMetadata = var4;
+            chunksection.setExtBlockMetadata(i, j & 15, k, l);
+            int j1 = chunksection.getExtBlockID(i, j & 15, k);
+            if(j1 > 0 && Block.blocksList[j1] instanceof BlockContainer) {
+               TileEntity tileentity = this.getChunkBlockTileEntity(i, j, k);
+               if(tileentity != null) {
+                  tileentity.updateContainingBlockInfo();
+                  tileentity.blockMetadata = l;
                }
             }
 
@@ -469,148 +486,153 @@
       }
    }
 
-   public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-      ExtendedBlockStorage var5 = this.storageArrays[var3 >> 4];
-      return var5 == null?(this.canBlockSeeTheSky(var2, var3, var4)?var1.defaultLightValue:0):(var1 == EnumSkyBlock.Sky?var5.getExtSkylightValue(var2, var3 & 15, var4):(var1 == EnumSkyBlock.Block?var5.getExtBlocklightValue(var2, var3 & 15, var4):var1.defaultLightValue));
+   public int getSavedLightValue(EnumSkyBlock enumskyblock, int i, int j, int k) {
+      ExtendedBlockStorage chunksection = this.storageArrays[j >> 4];
+      return chunksection == null?(this.canBlockSeeTheSky(i, j, k)?enumskyblock.defaultLightValue:0):(enumskyblock == EnumSkyBlock.Sky?chunksection.getExtSkylightValue(i, j & 15, k):(enumskyblock == EnumSkyBlock.Block?chunksection.getExtBlocklightValue(i, j & 15, k):enumskyblock.defaultLightValue));
    }
 
-   public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-      ExtendedBlockStorage var6 = this.storageArrays[var3 >> 4];
-      if(var6 == null) {
-         var6 = this.storageArrays[var3 >> 4] = new ExtendedBlockStorage(var3 >> 4 << 4);
+   public void setLightValue(EnumSkyBlock enumskyblock, int i, int j, int k, int l) {
+      ExtendedBlockStorage chunksection = this.storageArrays[j >> 4];
+      if(chunksection == null) {
+         chunksection = this.storageArrays[j >> 4] = new ExtendedBlockStorage(j >> 4 << 4);
          this.generateSkylightMap();
       }
 
       this.isModified = true;
-      if(var1 == EnumSkyBlock.Sky) {
+      if(enumskyblock == EnumSkyBlock.Sky) {
          if(!this.worldObj.provider.hasNoSky) {
-            var6.setExtSkylightValue(var2, var3 & 15, var4, var5);
+            chunksection.setExtSkylightValue(i, j & 15, k, l);
          }
-      } else if(var1 == EnumSkyBlock.Block) {
-         var6.setExtBlocklightValue(var2, var3 & 15, var4, var5);
+      } else if(enumskyblock == EnumSkyBlock.Block) {
+         chunksection.setExtBlocklightValue(i, j & 15, k, l);
       }
 
    }
 
-   public int getBlockLightValue(int var1, int var2, int var3, int var4) {
-      ExtendedBlockStorage var5 = this.storageArrays[var2 >> 4];
-      if(var5 == null) {
-         return !this.worldObj.provider.hasNoSky && var4 < EnumSkyBlock.Sky.defaultLightValue?EnumSkyBlock.Sky.defaultLightValue - var4:0;
-      } else {
-         int var6 = this.worldObj.provider.hasNoSky?0:var5.getExtSkylightValue(var1, var2 & 15, var3);
-         if(var6 > 0) {
+   public int getBlockLightValue(int i, int j, int k, int l) {
+      ExtendedBlockStorage chunksection = this.storageArrays[j >> 4];
+      if(chunksection != null) {
+         int i1 = this.worldObj.provider.hasNoSky?0:chunksection.getExtSkylightValue(i, j & 15, k);
+         if(i1 > 0) {
             isLit = true;
          }
 
-         var6 -= var4;
-         int var7 = var5.getExtBlocklightValue(var1, var2 & 15, var3);
-         if(var7 > var6) {
-            var6 = var7;
+         i1 -= l;
+         int j1 = chunksection.getExtBlocklightValue(i, j & 15, k);
+         if(j1 > i1) {
+            i1 = j1;
          }
 
-         return var6;
+         return i1;
+      } else {
+         return !this.worldObj.provider.hasNoSky && l < EnumSkyBlock.Sky.defaultLightValue?EnumSkyBlock.Sky.defaultLightValue - l:0;
       }
    }
 
-   public void addEntity(Entity var1) {
+   public void addEntity(Entity entity) {
       this.hasEntities = true;
-      int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-      int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-      if(var2 != this.xPosition || var3 != this.zPosition) {
-         System.out.println("Wrong location! " + var1);
-         Thread.dumpStack();
+      int i = MathHelper.floor_double(entity.posX / 16.0D);
+      int j = MathHelper.floor_double(entity.posZ / 16.0D);
+      if(i != this.xPosition || j != this.zPosition) {
+         Bukkit.getLogger().warning("Wrong location for " + entity + " in world \'" + this.worldObj.getWorld().getName() + "\'!");
+         Bukkit.getLogger().warning("Entity is at " + entity.posX + "," + entity.posZ + " (chunk " + i + "," + j + ") but was stored in chunk " + this.xPosition + "," + this.zPosition);
       }
 
-      int var4 = MathHelper.floor_double(var1.posY / 16.0D);
-      if(var4 < 0) {
-         var4 = 0;
+      int k = MathHelper.floor_double(entity.posY / 16.0D);
+      if(k < 0) {
+         k = 0;
       }
 
-      if(var4 >= this.entityLists.length) {
-         var4 = this.entityLists.length - 1;
+      if(k >= this.entityLists.length) {
+         k = this.entityLists.length - 1;
       }
 
-      var1.addedToChunk = true;
-      var1.chunkCoordX = this.xPosition;
-      var1.chunkCoordY = var4;
-      var1.chunkCoordZ = this.zPosition;
-      this.entityLists[var4].add(var1);
+      entity.addedToChunk = true;
+      entity.chunkCoordX = this.xPosition;
+      entity.chunkCoordY = k;
+      entity.chunkCoordZ = this.zPosition;
+      this.entityLists[k].add(entity);
    }
 
-   public void removeEntity(Entity var1) {
-      this.removeEntityAtIndex(var1, var1.chunkCoordY);
+   public void removeEntity(Entity entity) {
+      this.removeEntityAtIndex(entity, entity.chunkCoordY);
    }
 
-   public void removeEntityAtIndex(Entity var1, int var2) {
-      if(var2 < 0) {
-         var2 = 0;
+   public void removeEntityAtIndex(Entity entity, int i) {
+      if(i < 0) {
+         i = 0;
       }
 
-      if(var2 >= this.entityLists.length) {
-         var2 = this.entityLists.length - 1;
+      if(i >= this.entityLists.length) {
+         i = this.entityLists.length - 1;
       }
 
-      this.entityLists[var2].remove(var1);
+      this.entityLists[i].remove(entity);
    }
 
-   public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-      return var2 >= this.heightMap[var3 << 4 | var1];
+   public boolean canBlockSeeTheSky(int i, int j, int k) {
+      return j >= this.heightMap[k << 4 | i];
    }
 
-   public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
-      ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
-      TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
-      if(var5 == null) {
-         int var6 = this.getBlockID(var1, var2, var3);
-         if(var6 <= 0 || !Block.blocksList[var6].hasTileEntity()) {
+   public TileEntity getChunkBlockTileEntity(int i, int j, int k) {
+      ChunkPosition chunkposition = new ChunkPosition(i, j, k);
+      TileEntity tileentity = (TileEntity)this.chunkTileEntityMap.get(chunkposition);
+      if(tileentity == null) {
+         int l = this.getBlockID(i, j, k);
+         if(l <= 0 || !Block.blocksList[l].hasTileEntity()) {
             return null;
          }
 
-         if(var5 == null) {
-            var5 = ((BlockContainer)Block.blocksList[var6]).createNewTileEntity(this.worldObj);
-            this.worldObj.setBlockTileEntity(this.xPosition * 16 + var1, var2, this.zPosition * 16 + var3, var5);
+         if(tileentity == null) {
+            tileentity = ((BlockContainer)Block.blocksList[l]).createNewTileEntity(this.worldObj);
+            this.worldObj.setBlockTileEntity(this.xPosition * 16 + i, j, this.zPosition * 16 + k, tileentity);
          }
 
-         var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
+         tileentity = (TileEntity)this.chunkTileEntityMap.get(chunkposition);
       }
 
-      if(var5 != null && var5.isInvalid()) {
-         this.chunkTileEntityMap.remove(var4);
+      if(tileentity != null && tileentity.isInvalid()) {
+         this.chunkTileEntityMap.remove(chunkposition);
          return null;
       } else {
-         return var5;
+         return tileentity;
       }
    }
 
-   public void addTileEntity(TileEntity var1) {
-      int var2 = var1.xCoord - this.xPosition * 16;
-      int var3 = var1.yCoord;
-      int var4 = var1.zCoord - this.zPosition * 16;
-      this.setChunkBlockTileEntity(var2, var3, var4, var1);
+   public void addTileEntity(TileEntity tileentity) {
+      int i = tileentity.xCoord - this.xPosition * 16;
+      int j = tileentity.yCoord;
+      int k = tileentity.zCoord - this.zPosition * 16;
+      this.setChunkBlockTileEntity(i, j, k, tileentity);
       if(this.isChunkLoaded) {
-         this.worldObj.loadedTileEntityList.add(var1);
+         this.worldObj.loadedTileEntityList.add(tileentity);
       }
 
    }
 
-   public void setChunkBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-      ChunkPosition var5 = new ChunkPosition(var1, var2, var3);
-      var4.setWorldObj(this.worldObj);
-      var4.xCoord = this.xPosition * 16 + var1;
-      var4.yCoord = var2;
-      var4.zCoord = this.zPosition * 16 + var3;
-      if(this.getBlockID(var1, var2, var3) != 0 && Block.blocksList[this.getBlockID(var1, var2, var3)] instanceof BlockContainer) {
-         var4.validate();
-         this.chunkTileEntityMap.put(var5, var4);
+   public void setChunkBlockTileEntity(int i, int j, int k, TileEntity tileentity) {
+      ChunkPosition chunkposition = new ChunkPosition(i, j, k);
+      tileentity.setWorldObj(this.worldObj);
+      tileentity.xCoord = this.xPosition * 16 + i;
+      tileentity.yCoord = j;
+      tileentity.zCoord = this.zPosition * 16 + k;
+      if(this.getBlockID(i, j, k) != 0 && Block.blocksList[this.getBlockID(i, j, k)] instanceof BlockContainer) {
+         tileentity.validate();
+         this.chunkTileEntityMap.put(chunkposition, tileentity);
+      } else {
+         System.out.println("Attempted to place a tile entity (" + tileentity + ") at " + tileentity.xCoord + "," + tileentity.yCoord + "," + tileentity.zCoord + " (" + org.bukkit.Material.getMaterial(this.getBlockID(i, j, k)) + ") where there was no entity tile!");
+         System.out.println("Chunk coordinates: " + this.xPosition * 16 + "," + this.zPosition * 16);
+         (new Exception()).printStackTrace();
       }
+
    }
 
-   public void removeChunkBlockTileEntity(int var1, int var2, int var3) {
-      ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
+   public void removeChunkBlockTileEntity(int i, int j, int k) {
+      ChunkPosition chunkposition = new ChunkPosition(i, j, k);
       if(this.isChunkLoaded) {
-         TileEntity var5 = (TileEntity)this.chunkTileEntityMap.remove(var4);
-         if(var5 != null) {
-            var5.invalidate();
+         TileEntity tileentity = (TileEntity)this.chunkTileEntityMap.remove(chunkposition);
+         if(tileentity != null) {
+            tileentity.invalidate();
          }
       }
 
@@ -620,23 +642,34 @@
       this.isChunkLoaded = true;
       this.worldObj.addTileEntity(this.chunkTileEntityMap.values());
 
-      for(int var1 = 0; var1 < this.entityLists.length; ++var1) {
-         this.worldObj.addLoadedEntities(this.entityLists[var1]);
+      for(int i = 0; i < this.entityLists.length; ++i) {
+         this.worldObj.addLoadedEntities(this.entityLists[i]);
       }
 
    }
 
    public void onChunkUnload() {
       this.isChunkLoaded = false;
-      Iterator var1 = this.chunkTileEntityMap.values().iterator();
+      Iterator iterator = this.chunkTileEntityMap.values().iterator();
 
-      while(var1.hasNext()) {
-         TileEntity var2 = (TileEntity)var1.next();
-         this.worldObj.markTileEntityForDespawn(var2);
+      while(iterator.hasNext()) {
+         TileEntity i = (TileEntity)iterator.next();
+         this.worldObj.markTileEntityForDespawn(i);
       }
 
-      for(int var3 = 0; var3 < this.entityLists.length; ++var3) {
-         this.worldObj.unloadEntities(this.entityLists[var3]);
+      for(int var7 = 0; var7 < this.entityLists.length; ++var7) {
+         Iterator iter = this.entityLists[var7].iterator();
+
+         while(iter.hasNext()) {
+            Entity entity = (Entity)iter.next();
+            int cx = Location.locToBlock(entity.posX) >> 4;
+            int cz = Location.locToBlock(entity.posZ) >> 4;
+            if(entity instanceof EntityPlayerMP && (cx != this.xPosition || cz != this.zPosition)) {
+               iter.remove();
+            }
+         }
+
+         this.worldObj.unloadEntities(this.entityLists[var7]);
       }
 
    }
@@ -645,30 +678,30 @@
       this.isModified = true;
    }
 
-   public void getEntitiesWithinAABBForEntity(Entity var1, AxisAlignedBB var2, List var3) {
-      int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-      int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-      if(var4 < 0) {
-         var4 = 0;
-      }
-
-      if(var5 >= this.entityLists.length) {
-         var5 = this.entityLists.length - 1;
-      }
-
-      for(int var6 = var4; var6 <= var5; ++var6) {
-         List var7 = this.entityLists[var6];
-
-         for(int var8 = 0; var8 < var7.size(); ++var8) {
-            Entity var9 = (Entity)var7.get(var8);
-            if(var9 != var1 && var9.boundingBox.intersectsWith(var2)) {
-               var3.add(var9);
-               Entity[] var10 = var9.getParts();
-               if(var10 != null) {
-                  for(int var11 = 0; var11 < var10.length; ++var11) {
-                     var9 = var10[var11];
-                     if(var9 != var1 && var9.boundingBox.intersectsWith(var2)) {
-                        var3.add(var9);
+   public void getEntitiesWithinAABBForEntity(Entity entity, AxisAlignedBB axisalignedbb, List list) {
+      int i = MathHelper.floor_double((axisalignedbb.minY - 2.0D) / 16.0D);
+      int j = MathHelper.floor_double((axisalignedbb.maxY + 2.0D) / 16.0D);
+      if(i < 0) {
+         i = 0;
+      }
+
+      if(j >= this.entityLists.length) {
+         j = this.entityLists.length - 1;
+      }
+
+      for(int k = i; k <= j; ++k) {
+         List list1 = this.entityLists[k];
+
+         for(int l = 0; l < list1.size(); ++l) {
+            Entity entity1 = (Entity)list1.get(l);
+            if(entity1 != entity && entity1.boundingBox.intersectsWith(axisalignedbb)) {
+               list.add(entity1);
+               Entity[] aentity = entity1.getParts();
+               if(aentity != null) {
+                  for(int i1 = 0; i1 < aentity.length; ++i1) {
+                     entity1 = aentity[i1];
+                     if(entity1 != entity && entity1.boundingBox.intersectsWith(axisalignedbb)) {
+                        list.add(entity1);
                      }
                   }
                }
@@ -678,36 +711,36 @@
 
    }
 
-   public void getEntitiesOfTypeWithinAAAB(Class var1, AxisAlignedBB var2, List var3, IEntitySelector var4) {
-      int var5 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-      int var6 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-      if(var5 < 0) {
-         var5 = 0;
-      } else if(var5 >= this.entityLists.length) {
-         var5 = this.entityLists.length - 1;
+   public void getEntitiesOfTypeWithinAAAB(Class oclass, AxisAlignedBB axisalignedbb, List list, IEntitySelector ientityselector) {
+      int i = MathHelper.floor_double((axisalignedbb.minY - 2.0D) / 16.0D);
+      int j = MathHelper.floor_double((axisalignedbb.maxY + 2.0D) / 16.0D);
+      if(i < 0) {
+         i = 0;
+      } else if(i >= this.entityLists.length) {
+         i = this.entityLists.length - 1;
       }
 
-      if(var6 >= this.entityLists.length) {
-         var6 = this.entityLists.length - 1;
-      } else if(var6 < 0) {
-         var6 = 0;
+      if(j >= this.entityLists.length) {
+         j = this.entityLists.length - 1;
+      } else if(j < 0) {
+         j = 0;
       }
 
-      for(int var7 = var5; var7 <= var6; ++var7) {
-         List var8 = this.entityLists[var7];
+      for(int k = i; k <= j; ++k) {
+         List list1 = this.entityLists[k];
 
-         for(int var9 = 0; var9 < var8.size(); ++var9) {
-            Entity var10 = (Entity)var8.get(var9);
-            if(var1.isAssignableFrom(var10.getClass()) && var10.boundingBox.intersectsWith(var2) && (var4 == null || var4.isEntityApplicable(var10))) {
-               var3.add(var10);
+         for(int l = 0; l < list1.size(); ++l) {
+            Entity entity = (Entity)list1.get(l);
+            if(oclass.isAssignableFrom(entity.getClass()) && entity.boundingBox.intersectsWith(axisalignedbb) && (ientityselector == null || ientityselector.isEntityApplicable(entity))) {
+               list.add(entity);
             }
          }
       }
 
    }
 
-   public boolean needsSaving(boolean var1) {
-      if(var1) {
+   public boolean needsSaving(boolean flag) {
+      if(flag) {
          if(this.hasEntities && this.worldObj.getTotalWorldTime() != this.lastSaveTime) {
             return true;
          }
@@ -718,54 +751,54 @@
       return this.isModified;
    }
 
-   public Random getRandomWithSeed(long var1) {
-      return new Random(this.worldObj.getSeed() + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ var1);
+   public Random getRandomWithSeed(long i) {
+      return new Random(this.worldObj.getSeed() + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ i);
    }
 
    public boolean isEmpty() {
       return false;
    }
 
-   public void populateChunk(IChunkProvider var1, IChunkProvider var2, int var3, int var4) {
-      if(!this.isTerrainPopulated && var1.chunkExists(var3 + 1, var4 + 1) && var1.chunkExists(var3, var4 + 1) && var1.chunkExists(var3 + 1, var4)) {
-         var1.populate(var2, var3, var4);
+   public void populateChunk(IChunkProvider ichunkprovider, IChunkProvider ichunkprovider1, int i, int j) {
+      if(!this.isTerrainPopulated && ichunkprovider.chunkExists(i + 1, j + 1) && ichunkprovider.chunkExists(i, j + 1) && ichunkprovider.chunkExists(i + 1, j)) {
+         ichunkprovider.populate(ichunkprovider1, i, j);
       }
 
-      if(var1.chunkExists(var3 - 1, var4) && !var1.provideChunk(var3 - 1, var4).isTerrainPopulated && var1.chunkExists(var3 - 1, var4 + 1) && var1.chunkExists(var3, var4 + 1) && var1.chunkExists(var3 - 1, var4 + 1)) {
-         var1.populate(var2, var3 - 1, var4);
+      if(ichunkprovider.chunkExists(i - 1, j) && !ichunkprovider.provideChunk(i - 1, j).isTerrainPopulated && ichunkprovider.chunkExists(i - 1, j + 1) && ichunkprovider.chunkExists(i, j + 1) && ichunkprovider.chunkExists(i - 1, j + 1)) {
+         ichunkprovider.populate(ichunkprovider1, i - 1, j);
       }
 
-      if(var1.chunkExists(var3, var4 - 1) && !var1.provideChunk(var3, var4 - 1).isTerrainPopulated && var1.chunkExists(var3 + 1, var4 - 1) && var1.chunkExists(var3 + 1, var4 - 1) && var1.chunkExists(var3 + 1, var4)) {
-         var1.populate(var2, var3, var4 - 1);
+      if(ichunkprovider.chunkExists(i, j - 1) && !ichunkprovider.provideChunk(i, j - 1).isTerrainPopulated && ichunkprovider.chunkExists(i + 1, j - 1) && ichunkprovider.chunkExists(i + 1, j - 1) && ichunkprovider.chunkExists(i + 1, j)) {
+         ichunkprovider.populate(ichunkprovider1, i, j - 1);
       }
 
-      if(var1.chunkExists(var3 - 1, var4 - 1) && !var1.provideChunk(var3 - 1, var4 - 1).isTerrainPopulated && var1.chunkExists(var3, var4 - 1) && var1.chunkExists(var3 - 1, var4)) {
-         var1.populate(var2, var3 - 1, var4 - 1);
+      if(ichunkprovider.chunkExists(i - 1, j - 1) && !ichunkprovider.provideChunk(i - 1, j - 1).isTerrainPopulated && ichunkprovider.chunkExists(i, j - 1) && ichunkprovider.chunkExists(i - 1, j)) {
+         ichunkprovider.populate(ichunkprovider1, i - 1, j - 1);
       }
 
    }
 
-   public int getPrecipitationHeight(int var1, int var2) {
-      int var3 = var1 | var2 << 4;
-      int var4 = this.precipitationHeightMap[var3];
-      if(var4 == -999) {
-         int var5 = this.getTopFilledSegment() + 15;
-         var4 = -1;
+   public int getPrecipitationHeight(int i, int j) {
+      int k = i | j << 4;
+      int l = this.precipitationHeightMap[k];
+      if(l == -999) {
+         int i1 = this.getTopFilledSegment() + 15;
+         l = -1;
 
-         while(var5 > 0 && var4 == -1) {
-            int var6 = this.getBlockID(var1, var5, var2);
-            Material var7 = var6 == 0?Material.air:Block.blocksList[var6].blockMaterial;
-            if(!var7.blocksMovement() && !var7.isLiquid()) {
-               --var5;
+         while(i1 > 0 && l == -1) {
+            int j1 = this.getBlockID(i, i1, j);
+            Material material = j1 == 0?Material.air:Block.blocksList[j1].blockMaterial;
+            if(!material.blocksMovement() && !material.isLiquid()) {
+               --i1;
             } else {
-               var4 = var5 + 1;
+               l = i1 + 1;
             }
          }
 
-         this.precipitationHeightMap[var3] = var4;
+         this.precipitationHeightMap[k] = l;
       }
 
-      return var4;
+      return l;
    }
 
    public void updateSkylight() {
@@ -779,18 +812,18 @@
       return new ChunkCoordIntPair(this.xPosition, this.zPosition);
    }
 
-   public boolean getAreLevelsEmpty(int var1, int var2) {
-      if(var1 < 0) {
-         var1 = 0;
+   public boolean getAreLevelsEmpty(int i, int j) {
+      if(i < 0) {
+         i = 0;
       }
 
-      if(var2 >= 256) {
-         var2 = 255;
+      if(j >= 256) {
+         j = 255;
       }
 
-      for(int var3 = var1; var3 <= var2; var3 += 16) {
-         ExtendedBlockStorage var4 = this.storageArrays[var3 >> 4];
-         if(var4 != null && !var4.isEmpty()) {
+      for(int k = i; k <= j; k += 16) {
+         ExtendedBlockStorage chunksection = this.storageArrays[k >> 4];
+         if(chunksection != null && !chunksection.isEmpty()) {
             return false;
          }
       }
@@ -798,27 +831,27 @@
       return true;
    }
 
-   public void setStorageArrays(ExtendedBlockStorage[] var1) {
-      this.storageArrays = var1;
+   public void setStorageArrays(ExtendedBlockStorage[] achunksection) {
+      this.storageArrays = achunksection;
    }
 
-   public BiomeGenBase getBiomeGenForWorldCoords(int var1, int var2, WorldChunkManager var3) {
-      int var4 = this.blockBiomeArray[var2 << 4 | var1] & 255;
-      if(var4 == 255) {
-         BiomeGenBase var5 = var3.getBiomeGenAt((this.xPosition << 4) + var1, (this.zPosition << 4) + var2);
-         var4 = var5.biomeID;
-         this.blockBiomeArray[var2 << 4 | var1] = (byte)(var4 & 255);
+   public BiomeGenBase getBiomeGenForWorldCoords(int i, int j, WorldChunkManager worldchunkmanager) {
+      int k = this.blockBiomeArray[j << 4 | i] & 255;
+      if(k == 255) {
+         BiomeGenBase biomebase = worldchunkmanager.getBiomeGenAt((this.xPosition << 4) + i, (this.zPosition << 4) + j);
+         k = biomebase.biomeID;
+         this.blockBiomeArray[j << 4 | i] = (byte)(k & 255);
       }
 
-      return BiomeGenBase.biomeList[var4] == null?BiomeGenBase.plains:BiomeGenBase.biomeList[var4];
+      return BiomeGenBase.biomeList[k] == null?BiomeGenBase.plains:BiomeGenBase.biomeList[k];
    }
 
    public byte[] getBiomeArray() {
       return this.blockBiomeArray;
    }
 
-   public void setBiomeArray(byte[] var1) {
-      this.blockBiomeArray = var1;
+   public void setBiomeArray(byte[] abyte) {
+      this.blockBiomeArray = abyte;
    }
 
    public void resetRelightChecks() {
@@ -826,46 +859,46 @@
    }
 
    public void enqueueRelightChecks() {
-      for(int var1 = 0; var1 < 8; ++var1) {
+      for(int i = 0; i < 8; ++i) {
          if(this.queuedLightChecks >= 4096) {
             return;
          }
 
-         int var2 = this.queuedLightChecks % 16;
-         int var3 = this.queuedLightChecks / 16 % 16;
-         int var4 = this.queuedLightChecks / 256;
+         int j = this.queuedLightChecks % 16;
+         int k = this.queuedLightChecks / 16 % 16;
+         int l = this.queuedLightChecks / 256;
          ++this.queuedLightChecks;
-         int var5 = (this.xPosition << 4) + var3;
-         int var6 = (this.zPosition << 4) + var4;
+         int i1 = (this.xPosition << 4) + k;
+         int j1 = (this.zPosition << 4) + l;
 
-         for(int var7 = 0; var7 < 16; ++var7) {
-            int var8 = (var2 << 4) + var7;
-            if(this.storageArrays[var2] == null && (var7 == 0 || var7 == 15 || var3 == 0 || var3 == 15 || var4 == 0 || var4 == 15) || this.storageArrays[var2] != null && this.storageArrays[var2].getExtBlockID(var3, var7, var4) == 0) {
-               if(Block.lightValue[this.worldObj.getBlockId(var5, var8 - 1, var6)] > 0) {
-                  this.worldObj.updateAllLightTypes(var5, var8 - 1, var6);
+         for(int k1 = 0; k1 < 16; ++k1) {
+            int l1 = (j << 4) + k1;
+            if(this.storageArrays[j] == null && (k1 == 0 || k1 == 15 || k == 0 || k == 15 || l == 0 || l == 15) || this.storageArrays[j] != null && this.storageArrays[j].getExtBlockID(k, k1, l) == 0) {
+               if(Block.lightValue[this.worldObj.getBlockId(i1, l1 - 1, j1)] > 0) {
+                  this.worldObj.updateAllLightTypes(i1, l1 - 1, j1);
                }
 
-               if(Block.lightValue[this.worldObj.getBlockId(var5, var8 + 1, var6)] > 0) {
-                  this.worldObj.updateAllLightTypes(var5, var8 + 1, var6);
+               if(Block.lightValue[this.worldObj.getBlockId(i1, l1 + 1, j1)] > 0) {
+                  this.worldObj.updateAllLightTypes(i1, l1 + 1, j1);
                }
 
-               if(Block.lightValue[this.worldObj.getBlockId(var5 - 1, var8, var6)] > 0) {
-                  this.worldObj.updateAllLightTypes(var5 - 1, var8, var6);
+               if(Block.lightValue[this.worldObj.getBlockId(i1 - 1, l1, j1)] > 0) {
+                  this.worldObj.updateAllLightTypes(i1 - 1, l1, j1);
                }
 
-               if(Block.lightValue[this.worldObj.getBlockId(var5 + 1, var8, var6)] > 0) {
-                  this.worldObj.updateAllLightTypes(var5 + 1, var8, var6);
+               if(Block.lightValue[this.worldObj.getBlockId(i1 + 1, l1, j1)] > 0) {
+                  this.worldObj.updateAllLightTypes(i1 + 1, l1, j1);
                }
 
-               if(Block.lightValue[this.worldObj.getBlockId(var5, var8, var6 - 1)] > 0) {
-                  this.worldObj.updateAllLightTypes(var5, var8, var6 - 1);
+               if(Block.lightValue[this.worldObj.getBlockId(i1, l1, j1 - 1)] > 0) {
+                  this.worldObj.updateAllLightTypes(i1, l1, j1 - 1);
                }
 
-               if(Block.lightValue[this.worldObj.getBlockId(var5, var8, var6 + 1)] > 0) {
-                  this.worldObj.updateAllLightTypes(var5, var8, var6 + 1);
+               if(Block.lightValue[this.worldObj.getBlockId(i1, l1, j1 + 1)] > 0) {
+                  this.worldObj.updateAllLightTypes(i1, l1, j1 + 1);
                }
 
-               this.worldObj.updateAllLightTypes(var5, var8, var6);
+               this.worldObj.updateAllLightTypes(i1, l1, j1);
             }
          }
       }
Binary files mcp-mcdev/net/minecraft/src/ChunkProviderServer.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ChunkProviderServer.class differ
diff -ur mcp-mcdev/net/minecraft/src/ChunkProviderServer.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ChunkProviderServer.java
--- mcp-mcdev/net/minecraft/src/ChunkProviderServer.java	2012-11-29 21:15:16.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ChunkProviderServer.java	2012-11-29 20:44:35.000000000 -0800
@@ -1,13 +1,11 @@
 package net.minecraft.src;
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Set;
+import java.util.Random;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.src.BlockSand;
 import net.minecraft.src.Chunk;
-import net.minecraft.src.ChunkCoordIntPair;
 import net.minecraft.src.ChunkCoordinates;
 import net.minecraft.src.ChunkPosition;
 import net.minecraft.src.CrashReport;
@@ -17,114 +15,147 @@
 import net.minecraft.src.IChunkLoader;
 import net.minecraft.src.IChunkProvider;
 import net.minecraft.src.IProgressUpdate;
-import net.minecraft.src.LongHashMap;
-import net.minecraft.src.MinecraftException;
 import net.minecraft.src.ReportedException;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldServer;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.craftbukkit.util.LongHashSet;
+import org.bukkit.craftbukkit.util.LongObjectHashMap;
+import org.bukkit.event.world.ChunkLoadEvent;
+import org.bukkit.event.world.ChunkPopulateEvent;
+import org.bukkit.event.world.ChunkUnloadEvent;
+import org.bukkit.generator.BlockPopulator;
 
 public class ChunkProviderServer implements IChunkProvider {
 
-   private Set droppedChunksSet = new HashSet();
-   private Chunk dummyChunk;
-   private IChunkProvider serverChunkGenerator;
+   public LongHashSet droppedChunksSet = new LongHashSet();
+   public Chunk dummyChunk;
+   public IChunkProvider serverChunkGenerator;
    private IChunkLoader chunkLoader;
-   public boolean chunkLoadOverride = true;
-   private LongHashMap id2ChunkMap = new LongHashMap();
-   private List loadedChunks = new ArrayList();
-   private WorldServer world;
+   public boolean chunkLoadOverride = false;
+   public LongObjectHashMap id2ChunkMap = new LongObjectHashMap();
+   public WorldServer world;
 
 
-   public ChunkProviderServer(WorldServer var1, IChunkLoader var2, IChunkProvider var3) {
-      this.dummyChunk = new EmptyChunk(var1, 0, 0);
-      this.world = var1;
-      this.chunkLoader = var2;
-      this.serverChunkGenerator = var3;
+   public ChunkProviderServer(WorldServer worldserver, IChunkLoader ichunkloader, IChunkProvider ichunkprovider) {
+      this.dummyChunk = new EmptyChunk(worldserver, 0, 0);
+      this.world = worldserver;
+      this.chunkLoader = ichunkloader;
+      this.serverChunkGenerator = ichunkprovider;
    }
 
-   public boolean chunkExists(int var1, int var2) {
-      return this.id2ChunkMap.containsItem(ChunkCoordIntPair.chunkXZ2Int(var1, var2));
+   public boolean chunkExists(int i, int j) {
+      return this.id2ChunkMap.containsKey(LongHash.toLong(i, j));
    }
 
-   public void dropChunk(int var1, int var2) {
+   public void dropChunk(int i, int j) {
       if(this.world.provider.canRespawnHere()) {
-         ChunkCoordinates var3 = this.world.getSpawnPoint();
-         int var4 = var1 * 16 + 8 - var3.posX;
-         int var5 = var2 * 16 + 8 - var3.posZ;
-         short var6 = 128;
-         if(var4 < -var6 || var4 > var6 || var5 < -var6 || var5 > var6) {
-            this.droppedChunksSet.add(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(var1, var2)));
+         ChunkCoordinates c = this.world.getSpawnPoint();
+         int k = i * 16 + 8 - c.posX;
+         int l = j * 16 + 8 - c.posZ;
+         short short1 = 128;
+         if(k < -short1 || k > short1 || l < -short1 || l > short1 || !this.world.keepSpawnInMemory) {
+            this.droppedChunksSet.add(i, j);
+            Chunk c1 = (Chunk)this.id2ChunkMap.get(LongHash.toLong(i, j));
+            if(c1 != null) {
+               c1.mustSave = true;
+            }
          }
       } else {
-         this.droppedChunksSet.add(Long.valueOf(ChunkCoordIntPair.chunkXZ2Int(var1, var2)));
+         this.droppedChunksSet.add(i, j);
+         Chunk c2 = (Chunk)this.id2ChunkMap.get(LongHash.toLong(i, j));
+         if(c2 != null) {
+            c2.mustSave = true;
+         }
       }
 
    }
 
    public void unloadAllChunks() {
-      Iterator var1 = this.loadedChunks.iterator();
+      Iterator iterator = this.id2ChunkMap.values().iterator();
 
-      while(var1.hasNext()) {
-         Chunk var2 = (Chunk)var1.next();
-         this.dropChunk(var2.xPosition, var2.zPosition);
+      while(iterator.hasNext()) {
+         Chunk chunk = (Chunk)iterator.next();
+         this.dropChunk(chunk.xPosition, chunk.zPosition);
       }
 
    }
 
-   public Chunk loadChunk(int var1, int var2) {
-      long var3 = ChunkCoordIntPair.chunkXZ2Int(var1, var2);
-      this.droppedChunksSet.remove(Long.valueOf(var3));
-      Chunk var5 = (Chunk)this.id2ChunkMap.getValueByKey(var3);
-      if(var5 == null) {
-         var5 = this.loadChunkFromFile(var1, var2);
-         if(var5 == null) {
+   public Chunk loadChunk(int i, int j) {
+      this.droppedChunksSet.remove(i, j);
+      Chunk chunk = (Chunk)this.id2ChunkMap.get(LongHash.toLong(i, j));
+      boolean newChunk = false;
+      if(chunk == null) {
+         chunk = this.loadChunkFromFile(i, j);
+         if(chunk == null) {
             if(this.serverChunkGenerator == null) {
-               var5 = this.dummyChunk;
+               chunk = this.dummyChunk;
             } else {
                try {
-                  var5 = this.serverChunkGenerator.provideChunk(var1, var2);
-               } catch (Throwable var9) {
-                  CrashReport var7 = CrashReport.func_85055_a(var9, "Exception generating new chunk");
-                  CrashReportCategory var8 = var7.func_85058_a("Chunk to be generated");
-                  var8.addCrashSection("Location", String.format("%d,%d", new Object[]{Integer.valueOf(var1), Integer.valueOf(var2)}));
-                  var8.addCrashSection("Position hash", Long.valueOf(var3));
-                  var8.addCrashSection("Generator", this.serverChunkGenerator.makeString());
-                  throw new ReportedException(var7);
+                  chunk = this.serverChunkGenerator.provideChunk(i, j);
+               } catch (Throwable var8) {
+                  CrashReport crashreport = CrashReport.func_85055_a(var8, "Exception generating new chunk");
+                  CrashReportCategory crashreportsystemdetails = crashreport.func_85058_a("Chunk to be generated");
+                  crashreportsystemdetails.addCrashSection("Location", String.format("%d,%d", new Object[]{Integer.valueOf(i), Integer.valueOf(j)}));
+                  crashreportsystemdetails.addCrashSection("Position hash", Long.valueOf(LongHash.toLong(i, j)));
+                  crashreportsystemdetails.addCrashSection("Generator", this.serverChunkGenerator.makeString());
+                  throw new ReportedException(crashreport);
                }
             }
+
+            newChunk = true;
          }
 
-         this.id2ChunkMap.add(var3, var5);
-         this.loadedChunks.add(var5);
-         if(var5 != null) {
-            var5.onChunkLoad();
+         this.id2ChunkMap.put(LongHash.toLong(i, j), chunk);
+         if(chunk != null) {
+            chunk.onChunkLoad();
          }
 
-         var5.populateChunk(this, this, var1, var2);
+         CraftServer server = this.world.getServer();
+         if(server != null) {
+            server.getPluginManager().callEvent(new ChunkLoadEvent(chunk.bukkitChunk, newChunk));
+         }
+
+         chunk.populateChunk(this, this, i, j);
       }
 
-      return var5;
+      return chunk;
    }
 
-   public Chunk provideChunk(int var1, int var2) {
-      Chunk var3 = (Chunk)this.id2ChunkMap.getValueByKey(ChunkCoordIntPair.chunkXZ2Int(var1, var2));
-      return var3 == null?(!this.world.findingSpawnPoint && !this.chunkLoadOverride?this.dummyChunk:this.loadChunk(var1, var2)):var3;
+   public Chunk provideChunk(int i, int j) {
+      Chunk chunk = (Chunk)this.id2ChunkMap.get(LongHash.toLong(i, j));
+      chunk = chunk == null?(!this.world.findingSpawnPoint && !this.chunkLoadOverride?this.dummyChunk:this.loadChunk(i, j)):chunk;
+      if(chunk == this.dummyChunk) {
+         return chunk;
+      } else {
+         if(i != chunk.xPosition || j != chunk.zPosition) {
+            MinecraftServer.logger.severe("Chunk (" + chunk.xPosition + ", " + chunk.zPosition + ") stored at  (" + i + ", " + j + ") in world \'" + this.world.getWorld().getName() + "\'");
+            MinecraftServer.logger.severe(chunk.getClass().getName());
+            Throwable ex = new Throwable();
+            ex.fillInStackTrace();
+            ex.printStackTrace();
+         }
+
+         return chunk;
+      }
    }
 
-   private Chunk loadChunkFromFile(int var1, int var2) {
+   public Chunk loadChunkFromFile(int i, int j) {
       if(this.chunkLoader == null) {
          return null;
       } else {
          try {
-            Chunk var3 = this.chunkLoader.loadChunk(this.world, var1, var2);
-            if(var3 != null) {
-               var3.lastSaveTime = this.world.getTotalWorldTime();
+            Chunk exception = this.chunkLoader.loadChunk(this.world, i, j);
+            if(exception != null) {
+               exception.lastSaveTime = this.world.getTotalWorldTime();
                if(this.serverChunkGenerator != null) {
-                  this.serverChunkGenerator.recreateStructures(var1, var2);
+                  this.serverChunkGenerator.recreateStructures(i, j);
                }
             }
 
-            return var3;
+            return exception;
          } catch (Exception var4) {
             var4.printStackTrace();
             return null;
@@ -132,63 +163,80 @@
       }
    }
 
-   private void saveChunkExtraData(Chunk var1) {
+   public void saveChunkExtraData(Chunk chunk) {
       if(this.chunkLoader != null) {
          try {
-            this.chunkLoader.saveExtraChunkData(this.world, var1);
+            this.chunkLoader.saveExtraChunkData(this.world, chunk);
          } catch (Exception var3) {
             var3.printStackTrace();
          }
-
       }
+
    }
 
-   private void saveChunkData(Chunk var1) {
+   public void saveChunkData(Chunk chunk) {
       if(this.chunkLoader != null) {
          try {
-            var1.lastSaveTime = this.world.getTotalWorldTime();
-            this.chunkLoader.saveChunk(this.world, var1);
-         } catch (IOException var3) {
+            chunk.lastSaveTime = this.world.getTotalWorldTime();
+            this.chunkLoader.saveChunk(this.world, chunk);
+         } catch (Exception var3) {
             var3.printStackTrace();
-         } catch (MinecraftException var4) {
-            var4.printStackTrace();
          }
-
       }
+
    }
 
-   public void populate(IChunkProvider var1, int var2, int var3) {
-      Chunk var4 = this.provideChunk(var2, var3);
-      if(!var4.isTerrainPopulated) {
-         var4.isTerrainPopulated = true;
+   public void populate(IChunkProvider ichunkprovider, int i, int j) {
+      Chunk chunk = this.provideChunk(i, j);
+      if(!chunk.isTerrainPopulated) {
+         chunk.isTerrainPopulated = true;
          if(this.serverChunkGenerator != null) {
-            this.serverChunkGenerator.populate(var1, var2, var3);
-            var4.setChunkModified();
+            this.serverChunkGenerator.populate(ichunkprovider, i, j);
+            BlockSand.fallInstantly = true;
+            Random random = new Random();
+            random.setSeed(this.world.getSeed());
+            long xRand = random.nextLong() / 2L * 2L + 1L;
+            long zRand = random.nextLong() / 2L * 2L + 1L;
+            random.setSeed((long)i * xRand + (long)j * zRand ^ this.world.getSeed());
+            CraftWorld world = this.world.getWorld();
+            if(world != null) {
+               Iterator i$ = world.getPopulators().iterator();
+
+               while(i$.hasNext()) {
+                  BlockPopulator populator = (BlockPopulator)i$.next();
+                  populator.populate(world, random, chunk.bukkitChunk);
+               }
+            }
+
+            BlockSand.fallInstantly = false;
+            this.world.getServer().getPluginManager().callEvent(new ChunkPopulateEvent(chunk.bukkitChunk));
+            chunk.setChunkModified();
          }
       }
 
    }
 
-   public boolean saveChunks(boolean var1, IProgressUpdate var2) {
-      int var3 = 0;
-
-      for(int var4 = 0; var4 < this.loadedChunks.size(); ++var4) {
-         Chunk var5 = (Chunk)this.loadedChunks.get(var4);
-         if(var1) {
-            this.saveChunkExtraData(var5);
+   public boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate) {
+      int i = 0;
+      Iterator iterator = this.id2ChunkMap.values().iterator();
+
+      while(iterator.hasNext()) {
+         Chunk chunk = (Chunk)iterator.next();
+         if(flag) {
+            this.saveChunkExtraData(chunk);
          }
 
-         if(var5.needsSaving(var1)) {
-            this.saveChunkData(var5);
-            var5.isModified = false;
-            ++var3;
-            if(var3 == 24 && !var1) {
+         if(chunk.needsSaving(flag)) {
+            this.saveChunkData(chunk);
+            chunk.isModified = false;
+            ++i;
+            if(i == 24 && !flag) {
                return false;
             }
          }
       }
 
-      if(var1) {
+      if(flag) {
          if(this.chunkLoader == null) {
             return true;
          }
@@ -201,16 +249,20 @@
 
    public boolean unload100OldestChunks() {
       if(!this.world.levelSaving) {
-         for(int var1 = 0; var1 < 100; ++var1) {
-            if(!this.droppedChunksSet.isEmpty()) {
-               Long var2 = (Long)this.droppedChunksSet.iterator().next();
-               Chunk var3 = (Chunk)this.id2ChunkMap.getValueByKey(var2.longValue());
-               var3.onChunkUnload();
-               this.saveChunkData(var3);
-               this.saveChunkExtraData(var3);
-               this.droppedChunksSet.remove(var2);
-               this.id2ChunkMap.remove(var2.longValue());
-               this.loadedChunks.remove(var3);
+         CraftServer server = this.world.getServer();
+
+         for(int i = 0; i < 100 && !this.droppedChunksSet.isEmpty(); ++i) {
+            long chunkcoordinates = this.droppedChunksSet.popFirst();
+            Chunk chunk = (Chunk)this.id2ChunkMap.get(chunkcoordinates);
+            if(chunk != null) {
+               ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk);
+               server.getPluginManager().callEvent(event);
+               if(!event.isCancelled()) {
+                  chunk.onChunkUnload();
+                  this.saveChunkData(chunk);
+                  this.saveChunkExtraData(chunk);
+                  this.id2ChunkMap.remove(chunkcoordinates);
+               }
             }
          }
 
@@ -227,20 +279,20 @@
    }
 
    public String makeString() {
-      return "ServerChunkCache: " + this.id2ChunkMap.getNumHashElements() + " Drop: " + this.droppedChunksSet.size();
+      return "ServerChunkCache: " + this.id2ChunkMap.values().size() + " Drop: " + this.droppedChunksSet.size();
    }
 
-   public List getPossibleCreatures(EnumCreatureType var1, int var2, int var3, int var4) {
-      return this.serverChunkGenerator.getPossibleCreatures(var1, var2, var3, var4);
+   public List getPossibleCreatures(EnumCreatureType enumcreaturetype, int i, int j, int k) {
+      return this.serverChunkGenerator.getPossibleCreatures(enumcreaturetype, i, j, k);
    }
 
-   public ChunkPosition findClosestStructure(World var1, String var2, int var3, int var4, int var5) {
-      return this.serverChunkGenerator.findClosestStructure(var1, var2, var3, var4, var5);
+   public ChunkPosition findClosestStructure(World world, String s, int i, int j, int k) {
+      return this.serverChunkGenerator.findClosestStructure(world, s, i, j, k);
    }
 
    public int getLoadedChunkCount() {
-      return this.id2ChunkMap.getNumHashElements();
+      return this.id2ChunkMap.values().size();
    }
 
-   public void recreateStructures(int var1, int var2) {}
+   public void recreateStructures(int i, int j) {}
 }
Binary files mcp-mcdev/net/minecraft/src/ConsoleLogFormatter.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ConsoleLogFormatter.class differ
diff -ur mcp-mcdev/net/minecraft/src/ConsoleLogFormatter.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ConsoleLogFormatter.java
--- mcp-mcdev/net/minecraft/src/ConsoleLogFormatter.java	2012-11-29 21:15:11.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ConsoleLogFormatter.java	2012-11-29 20:44:30.000000000 -0800
@@ -6,41 +6,48 @@
 import java.util.logging.Formatter;
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
+import java.util.regex.Pattern;
 
 final class ConsoleLogFormatter extends Formatter {
 
    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+   private Pattern pattern = Pattern.compile("\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]");
+   private boolean strip = false;
 
 
-   public String format(LogRecord var1) {
-      StringBuilder var2 = new StringBuilder();
-      var2.append(this.dateFormat.format(Long.valueOf(var1.getMillis())));
-      Level var3 = var1.getLevel();
-      if(var3 == Level.FINEST) {
-         var2.append(" [FINEST] ");
-      } else if(var3 == Level.FINER) {
-         var2.append(" [FINER] ");
-      } else if(var3 == Level.FINE) {
-         var2.append(" [FINE] ");
-      } else if(var3 == Level.INFO) {
-         var2.append(" [INFO] ");
-      } else if(var3 == Level.WARNING) {
-         var2.append(" [WARNING] ");
-      } else if(var3 == Level.SEVERE) {
-         var2.append(" [SEVERE] ");
-      } else if(var3 == Level.SEVERE) {
-         var2.append(" [").append(var3.getLocalizedName()).append("] ");
+   ConsoleLogFormatter(boolean strip) {
+      this.strip = strip;
+   }
+
+   public String format(LogRecord logrecord) {
+      StringBuilder stringbuilder = new StringBuilder();
+      stringbuilder.append(this.dateFormat.format(Long.valueOf(logrecord.getMillis())));
+      Level level = logrecord.getLevel();
+      if(level == Level.FINEST) {
+         stringbuilder.append(" [FINEST] ");
+      } else if(level == Level.FINER) {
+         stringbuilder.append(" [FINER] ");
+      } else if(level == Level.FINE) {
+         stringbuilder.append(" [FINE] ");
+      } else if(level == Level.INFO) {
+         stringbuilder.append(" [INFO] ");
+      } else if(level == Level.WARNING) {
+         stringbuilder.append(" [WARNING] ");
+      } else if(level == Level.SEVERE) {
+         stringbuilder.append(" [SEVERE] ");
+      } else {
+         stringbuilder.append(" [").append(level.getLocalizedName()).append("] ");
       }
 
-      var2.append(var1.getMessage());
-      var2.append('\n');
-      Throwable var4 = var1.getThrown();
-      if(var4 != null) {
-         StringWriter var5 = new StringWriter();
-         var4.printStackTrace(new PrintWriter(var5));
-         var2.append(var5.toString());
+      stringbuilder.append(this.formatMessage(logrecord));
+      stringbuilder.append('\n');
+      Throwable throwable = logrecord.getThrown();
+      if(throwable != null) {
+         StringWriter stringwriter = new StringWriter();
+         throwable.printStackTrace(new PrintWriter(stringwriter));
+         stringbuilder.append(stringwriter.toString());
       }
 
-      return var2.toString();
+      return this.strip?this.pattern.matcher(stringbuilder.toString()).replaceAll(""):stringbuilder.toString();
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ConsoleLogManager.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ConsoleLogManager.class differ
diff -ur mcp-mcdev/net/minecraft/src/ConsoleLogManager.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ConsoleLogManager.java
--- mcp-mcdev/net/minecraft/src/ConsoleLogManager.java	2012-11-29 21:15:11.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ConsoleLogManager.java	2012-11-29 20:44:30.000000000 -0800
@@ -1,29 +1,104 @@
 package net.minecraft.src;
 
-import java.util.logging.ConsoleHandler;
+import java.io.File;
+import java.io.IOException;
 import java.util.logging.FileHandler;
+import java.util.logging.Handler;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.ConsoleLogFormatter;
+import org.bukkit.craftbukkit.util.ShortConsoleLogFormatter;
+import org.bukkit.craftbukkit.util.TerminalConsoleHandler;
 
 public class ConsoleLogManager {
 
    public static Logger logger = Logger.getLogger("Minecraft");
+   public static Logger global = Logger.getLogger("");
 
 
-   public static void init() {
-      ConsoleLogFormatter var0 = new ConsoleLogFormatter();
+   public static void init(MinecraftServer server) {
+      ConsoleLogFormatter consolelogformatter = new ConsoleLogFormatter(server.options.has("log-strip-color"));
       logger.setUseParentHandlers(false);
-      ConsoleHandler var1 = new ConsoleHandler();
-      var1.setFormatter(var0);
-      logger.addHandler(var1);
+      TerminalConsoleHandler consolehandler = new TerminalConsoleHandler(server.reader);
+      Handler[] exception = global.getHandlers();
+      int tmpDir = exception.length;
+
+      for(int homeDir = 0; homeDir < tmpDir; ++homeDir) {
+         Handler parent = exception[homeDir];
+         global.removeHandler(parent);
+      }
+
+      consolehandler.setFormatter(new ShortConsoleLogFormatter(server));
+      global.addHandler(consolehandler);
+      logger.addHandler(consolehandler);
 
       try {
-         FileHandler var2 = new FileHandler("server.log", true);
-         var2.setFormatter(var0);
-         logger.addHandler(var2);
-      } catch (Exception var3) {
-         logger.log(Level.WARNING, "Failed to log to server.log", var3);
+         String var15 = (String)server.options.valueOf("log-pattern");
+         String var16 = System.getProperty("java.io.tmpdir");
+         String var17 = System.getProperty("user.home");
+         if(var16 == null) {
+            var16 = var17;
+         }
+
+         File var18 = (new File(var15)).getParentFile();
+         StringBuilder fixedPattern = new StringBuilder();
+         String parentPath = "";
+         if(var18 != null) {
+            parentPath = var18.getPath();
+         }
+
+         int i = 0;
+
+         while(i < parentPath.length()) {
+            char limit = parentPath.charAt(i);
+            char count = 0;
+            if(i + 1 < parentPath.length()) {
+               count = Character.toLowerCase(var15.charAt(i + 1));
+            }
+
+            if(limit == 37) {
+               if(count == 104) {
+                  i += 2;
+                  fixedPattern.append(var17);
+                  continue;
+               }
+
+               if(count == 116) {
+                  i += 2;
+                  fixedPattern.append(var16);
+                  continue;
+               }
+
+               if(count == 37) {
+                  i += 2;
+                  fixedPattern.append("%%");
+                  continue;
+               }
+
+               if(count != 0) {
+                  throw new IOException("log-pattern can only use %t and %h for directories, got %" + count);
+               }
+            }
+
+            fixedPattern.append(limit);
+            ++i;
+         }
+
+         var18 = new File(fixedPattern.toString());
+         if(var18 != null) {
+            var18.mkdirs();
+         }
+
+         int var19 = ((Integer)server.options.valueOf("log-limit")).intValue();
+         int var20 = ((Integer)server.options.valueOf("log-count")).intValue();
+         boolean append = ((Boolean)server.options.valueOf("log-append")).booleanValue();
+         FileHandler filehandler = new FileHandler(var15, var19, var20, append);
+         filehandler.setFormatter(consolelogformatter);
+         logger.addHandler(filehandler);
+         global.addHandler(filehandler);
+      } catch (Exception var14) {
+         logger.log(Level.WARNING, "Failed to log to server.log", var14);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/Container.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Container.class differ
diff -ur mcp-mcdev/net/minecraft/src/Container.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Container.java
--- mcp-mcdev/net/minecraft/src/Container.java	2012-11-29 21:15:11.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Container.java	2012-11-29 20:44:30.000000000 -0800
@@ -10,6 +10,9 @@
 import net.minecraft.src.InventoryPlayer;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.Slot;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.inventory.InventoryView;
 
 public abstract class Container {
 
@@ -19,321 +22,341 @@
    private short transactionID = 0;
    protected List crafters = new ArrayList();
    private Set playerList = new HashSet();
+   public boolean checkReachable = true;
 
 
-   protected Slot addSlotToContainer(Slot var1) {
-      var1.slotNumber = this.inventorySlots.size();
-      this.inventorySlots.add(var1);
+   public abstract InventoryView getBukkitView();
+
+   public void transferTo(Container other, CraftHumanEntity player) {
+      InventoryView source = this.getBukkitView();
+      InventoryView destination = other.getBukkitView();
+      ((CraftInventory)source.getTopInventory()).getInventory().onClose(player);
+      ((CraftInventory)source.getBottomInventory()).getInventory().onClose(player);
+      ((CraftInventory)destination.getTopInventory()).getInventory().onOpen(player);
+      ((CraftInventory)destination.getBottomInventory()).getInventory().onOpen(player);
+   }
+
+   protected Slot addSlotToContainer(Slot slot) {
+      slot.slotNumber = this.inventorySlots.size();
+      this.inventorySlots.add(slot);
       this.inventoryItemStacks.add((Object)null);
-      return var1;
+      return slot;
    }
 
-   public void onCraftGuiOpened(ICrafting var1) {
-      if(this.crafters.contains(var1)) {
+   public void onCraftGuiOpened(ICrafting icrafting) {
+      if(this.crafters.contains(icrafting)) {
          throw new IllegalArgumentException("Listener already listening");
       } else {
-         this.crafters.add(var1);
-         var1.updateCraftingInventory(this, this.getInventory());
+         this.crafters.add(icrafting);
+         icrafting.updateCraftingInventory(this, this.getInventory());
          this.updateCraftingResults();
       }
    }
 
    public List getInventory() {
-      ArrayList var1 = new ArrayList();
+      ArrayList arraylist = new ArrayList();
 
-      for(int var2 = 0; var2 < this.inventorySlots.size(); ++var2) {
-         var1.add(((Slot)this.inventorySlots.get(var2)).getStack());
+      for(int i = 0; i < this.inventorySlots.size(); ++i) {
+         arraylist.add(((Slot)this.inventorySlots.get(i)).getStack());
       }
 
-      return var1;
+      return arraylist;
    }
 
    public void updateCraftingResults() {
-      for(int var1 = 0; var1 < this.inventorySlots.size(); ++var1) {
-         ItemStack var2 = ((Slot)this.inventorySlots.get(var1)).getStack();
-         ItemStack var3 = (ItemStack)this.inventoryItemStacks.get(var1);
-         if(!ItemStack.areItemStacksEqual(var3, var2)) {
-            var3 = var2 == null?null:var2.copy();
-            this.inventoryItemStacks.set(var1, var3);
+      for(int i = 0; i < this.inventorySlots.size(); ++i) {
+         ItemStack itemstack = ((Slot)this.inventorySlots.get(i)).getStack();
+         ItemStack itemstack1 = (ItemStack)this.inventoryItemStacks.get(i);
+         if(!ItemStack.areItemStacksEqual(itemstack1, itemstack)) {
+            itemstack1 = itemstack == null?null:itemstack.copy();
+            this.inventoryItemStacks.set(i, itemstack1);
 
-            for(int var4 = 0; var4 < this.crafters.size(); ++var4) {
-               ((ICrafting)this.crafters.get(var4)).sendSlotContents(this, var1, var3);
+            for(int j = 0; j < this.crafters.size(); ++j) {
+               ((ICrafting)this.crafters.get(j)).sendSlotContents(this, i, itemstack1);
             }
          }
       }
 
    }
 
-   public boolean enchantItem(EntityPlayer var1, int var2) {
+   public boolean enchantItem(EntityPlayer entityhuman, int i) {
       return false;
    }
 
-   public Slot getSlotFromInventory(IInventory var1, int var2) {
-      for(int var3 = 0; var3 < this.inventorySlots.size(); ++var3) {
-         Slot var4 = (Slot)this.inventorySlots.get(var3);
-         if(var4.isHere(var1, var2)) {
-            return var4;
+   public Slot getSlotFromInventory(IInventory iinventory, int i) {
+      for(int j = 0; j < this.inventorySlots.size(); ++j) {
+         Slot slot = (Slot)this.inventorySlots.get(j);
+         if(slot.isHere(iinventory, i)) {
+            return slot;
          }
       }
 
       return null;
    }
 
-   public Slot getSlot(int var1) {
-      return (Slot)this.inventorySlots.get(var1);
+   public Slot getSlot(int i) {
+      return (Slot)this.inventorySlots.get(i);
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      Slot var3 = (Slot)this.inventorySlots.get(var2);
-      return var3 != null?var3.getStack():null;
-   }
-
-   public ItemStack slotClick(int var1, int var2, int var3, EntityPlayer var4) {
-      ItemStack var5 = null;
-      InventoryPlayer var6 = var4.inventory;
-      Slot var7;
-      ItemStack var8;
-      int var10;
-      ItemStack var11;
-      if((var3 == 0 || var3 == 1) && (var2 == 0 || var2 == 1)) {
-         if(var1 == -999) {
-            if(var6.getItemStack() != null && var1 == -999) {
-               if(var2 == 0) {
-                  var4.dropPlayerItem(var6.getItemStack());
-                  var6.setItemStack((ItemStack)null);
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      return slot != null?slot.getStack():null;
+   }
+
+   public ItemStack slotClick(int i, int j, int k, EntityPlayer entityhuman) {
+      ItemStack itemstack = null;
+      InventoryPlayer playerinventory = entityhuman.inventory;
+      Slot slot;
+      ItemStack itemstack1;
+      int l;
+      ItemStack itemstack2;
+      if((k == 0 || k == 1) && (j == 0 || j == 1)) {
+         ItemStack flag1;
+         if(i == -999) {
+            if(playerinventory.getItemStack() != null && i == -999) {
+               if(j == 0) {
+                  entityhuman.dropPlayerItem(playerinventory.getItemStack());
+                  playerinventory.setItemStack((ItemStack)null);
                }
 
-               if(var2 == 1) {
-                  var4.dropPlayerItem(var6.getItemStack().splitStack(1));
-                  if(var6.getItemStack().stackSize == 0) {
-                     var6.setItemStack((ItemStack)null);
+               if(j == 1) {
+                  flag1 = playerinventory.getItemStack();
+                  if(flag1.stackSize > 0) {
+                     entityhuman.dropPlayerItem(flag1.splitStack(1));
+                  }
+
+                  if(flag1.stackSize == 0) {
+                     playerinventory.setItemStack((ItemStack)null);
                   }
                }
             }
-         } else if(var3 == 1) {
-            var7 = (Slot)this.inventorySlots.get(var1);
-            if(var7 != null && var7.canTakeStack(var4)) {
-               var8 = this.transferStackInSlot(var4, var1);
-               if(var8 != null) {
-                  int var12 = var8.itemID;
-                  var5 = var8.copy();
-                  if(var7 != null && var7.getStack() != null && var7.getStack().itemID == var12) {
-                     this.retrySlotClick(var1, var2, true, var4);
+         } else if(k == 1) {
+            slot = (Slot)this.inventorySlots.get(i);
+            if(slot != null && slot.canTakeStack(entityhuman)) {
+               itemstack1 = this.transferStackInSlot(entityhuman, i);
+               if(itemstack1 != null) {
+                  int flag2 = itemstack1.itemID;
+                  itemstack = itemstack1.copy();
+                  if(slot != null && slot.getStack() != null && slot.getStack().itemID == flag2) {
+                     this.retrySlotClick(i, j, true, entityhuman);
                   }
                }
             }
          } else {
-            if(var1 < 0) {
+            if(i < 0) {
                return null;
             }
 
-            var7 = (Slot)this.inventorySlots.get(var1);
-            if(var7 != null) {
-               var8 = var7.getStack();
-               ItemStack var13 = var6.getItemStack();
-               if(var8 != null) {
-                  var5 = var8.copy();
+            slot = (Slot)this.inventorySlots.get(i);
+            if(slot != null) {
+               itemstack1 = slot.getStack();
+               flag1 = playerinventory.getItemStack();
+               if(itemstack1 != null) {
+                  itemstack = itemstack1.copy();
                }
 
-               if(var8 == null) {
-                  if(var13 != null && var7.isItemValid(var13)) {
-                     var10 = var2 == 0?var13.stackSize:1;
-                     if(var10 > var7.getSlotStackLimit()) {
-                        var10 = var7.getSlotStackLimit();
+               if(itemstack1 == null) {
+                  if(flag1 != null && slot.isItemValid(flag1)) {
+                     l = j == 0?flag1.stackSize:1;
+                     if(l > slot.getSlotStackLimit()) {
+                        l = slot.getSlotStackLimit();
+                     }
+
+                     if(flag1.stackSize >= l) {
+                        slot.putStack(flag1.splitStack(l));
                      }
 
-                     var7.putStack(var13.splitStack(var10));
-                     if(var13.stackSize == 0) {
-                        var6.setItemStack((ItemStack)null);
+                     if(flag1.stackSize == 0) {
+                        playerinventory.setItemStack((ItemStack)null);
                      }
                   }
-               } else if(var7.canTakeStack(var4)) {
-                  if(var13 == null) {
-                     var10 = var2 == 0?var8.stackSize:(var8.stackSize + 1) / 2;
-                     var11 = var7.decrStackSize(var10);
-                     var6.setItemStack(var11);
-                     if(var8.stackSize == 0) {
-                        var7.putStack((ItemStack)null);
+               } else if(slot.canTakeStack(entityhuman)) {
+                  if(flag1 == null) {
+                     l = j == 0?itemstack1.stackSize:(itemstack1.stackSize + 1) / 2;
+                     itemstack2 = slot.decrStackSize(l);
+                     playerinventory.setItemStack(itemstack2);
+                     if(itemstack1.stackSize == 0) {
+                        slot.putStack((ItemStack)null);
                      }
 
-                     var7.onPickupFromSlot(var4, var6.getItemStack());
-                  } else if(var7.isItemValid(var13)) {
-                     if(var8.itemID == var13.itemID && (!var8.getHasSubtypes() || var8.getItemDamage() == var13.getItemDamage()) && ItemStack.areItemStackTagsEqual(var8, var13)) {
-                        var10 = var2 == 0?var13.stackSize:1;
-                        if(var10 > var7.getSlotStackLimit() - var8.stackSize) {
-                           var10 = var7.getSlotStackLimit() - var8.stackSize;
+                     slot.onPickupFromSlot(entityhuman, playerinventory.getItemStack());
+                  } else if(slot.isItemValid(flag1)) {
+                     if(itemstack1.itemID == flag1.itemID && (!itemstack1.getHasSubtypes() || itemstack1.getItemDamage() == flag1.getItemDamage()) && ItemStack.areItemStackTagsEqual(itemstack1, flag1)) {
+                        l = j == 0?flag1.stackSize:1;
+                        if(l > slot.getSlotStackLimit() - itemstack1.stackSize) {
+                           l = slot.getSlotStackLimit() - itemstack1.stackSize;
                         }
 
-                        if(var10 > var13.getMaxStackSize() - var8.stackSize) {
-                           var10 = var13.getMaxStackSize() - var8.stackSize;
+                        if(l > flag1.getMaxStackSize() - itemstack1.stackSize) {
+                           l = flag1.getMaxStackSize() - itemstack1.stackSize;
                         }
 
-                        var13.splitStack(var10);
-                        if(var13.stackSize == 0) {
-                           var6.setItemStack((ItemStack)null);
+                        flag1.splitStack(l);
+                        if(flag1.stackSize == 0) {
+                           playerinventory.setItemStack((ItemStack)null);
                         }
 
-                        var8.stackSize += var10;
-                     } else if(var13.stackSize <= var7.getSlotStackLimit()) {
-                        var7.putStack(var13);
-                        var6.setItemStack(var8);
+                        itemstack1.stackSize += l;
+                     } else if(flag1.stackSize <= slot.getSlotStackLimit()) {
+                        slot.putStack(flag1);
+                        playerinventory.setItemStack(itemstack1);
                      }
-                  } else if(var8.itemID == var13.itemID && var13.getMaxStackSize() > 1 && (!var8.getHasSubtypes() || var8.getItemDamage() == var13.getItemDamage()) && ItemStack.areItemStackTagsEqual(var8, var13)) {
-                     var10 = var8.stackSize;
-                     if(var10 > 0 && var10 + var13.stackSize <= var13.getMaxStackSize()) {
-                        var13.stackSize += var10;
-                        var8 = var7.decrStackSize(var10);
-                        if(var8.stackSize == 0) {
-                           var7.putStack((ItemStack)null);
+                  } else if(itemstack1.itemID == flag1.itemID && flag1.getMaxStackSize() > 1 && (!itemstack1.getHasSubtypes() || itemstack1.getItemDamage() == flag1.getItemDamage()) && ItemStack.areItemStackTagsEqual(itemstack1, flag1)) {
+                     l = itemstack1.stackSize;
+                     if(l > 0 && l + flag1.stackSize <= flag1.getMaxStackSize()) {
+                        flag1.stackSize += l;
+                        itemstack1 = slot.decrStackSize(l);
+                        if(itemstack1.stackSize == 0) {
+                           slot.putStack((ItemStack)null);
                         }
 
-                        var7.onPickupFromSlot(var4, var6.getItemStack());
+                        slot.onPickupFromSlot(entityhuman, playerinventory.getItemStack());
                      }
                   }
                }
 
-               var7.onSlotChanged();
+               slot.onSlotChanged();
             }
          }
-      } else if(var3 == 2 && var2 >= 0 && var2 < 9) {
-         var7 = (Slot)this.inventorySlots.get(var1);
-         if(var7.canTakeStack(var4)) {
-            var8 = var6.getStackInSlot(var2);
-            boolean var9 = var8 == null || var7.inventory == var6 && var7.isItemValid(var8);
-            var10 = -1;
-            if(!var9) {
-               var10 = var6.getFirstEmptyStack();
-               var9 |= var10 > -1;
-            }
-
-            if(var7.getHasStack() && var9) {
-               var11 = var7.getStack();
-               var6.setInventorySlotContents(var2, var11);
-               if((var7.inventory != var6 || !var7.isItemValid(var8)) && var8 != null) {
-                  if(var10 > -1) {
-                     var6.addItemStackToInventory(var8);
-                     var7.putStack((ItemStack)null);
-                     var7.onPickupFromSlot(var4, var11);
+      } else if(k == 2 && j >= 0 && j < 9) {
+         slot = (Slot)this.inventorySlots.get(i);
+         if(slot.canTakeStack(entityhuman)) {
+            itemstack1 = playerinventory.getStackInSlot(j);
+            boolean flag = itemstack1 == null || slot.inventory == playerinventory && slot.isItemValid(itemstack1);
+            l = -1;
+            if(!flag) {
+               l = playerinventory.getFirstEmptyStack();
+               flag |= l > -1;
+            }
+
+            if(slot.getHasStack() && flag) {
+               itemstack2 = slot.getStack();
+               playerinventory.setInventorySlotContents(j, itemstack2);
+               if((slot.inventory != playerinventory || !slot.isItemValid(itemstack1)) && itemstack1 != null) {
+                  if(l > -1) {
+                     playerinventory.addItemStackToInventory(itemstack1);
+                     slot.putStack((ItemStack)null);
+                     slot.onPickupFromSlot(entityhuman, itemstack2);
                   }
                } else {
-                  var7.putStack(var8);
-                  var7.onPickupFromSlot(var4, var11);
+                  slot.putStack(itemstack1);
+                  slot.onPickupFromSlot(entityhuman, itemstack2);
                }
-            } else if(!var7.getHasStack() && var8 != null && var7.isItemValid(var8)) {
-               var6.setInventorySlotContents(var2, (ItemStack)null);
-               var7.putStack(var8);
+            } else if(!slot.getHasStack() && itemstack1 != null && slot.isItemValid(itemstack1)) {
+               playerinventory.setInventorySlotContents(j, (ItemStack)null);
+               slot.putStack(itemstack1);
             }
          }
-      } else if(var3 == 3 && var4.capabilities.isCreativeMode && var6.getItemStack() == null && var1 >= 0) {
-         var7 = (Slot)this.inventorySlots.get(var1);
-         if(var7 != null && var7.getHasStack()) {
-            var8 = var7.getStack().copy();
-            var8.stackSize = var8.getMaxStackSize();
-            var6.setItemStack(var8);
+      } else if(k == 3 && entityhuman.capabilities.isCreativeMode && playerinventory.getItemStack() == null && i >= 0) {
+         slot = (Slot)this.inventorySlots.get(i);
+         if(slot != null && slot.getHasStack()) {
+            itemstack1 = slot.getStack().copy();
+            itemstack1.stackSize = itemstack1.getMaxStackSize();
+            playerinventory.setItemStack(itemstack1);
          }
       }
 
-      return var5;
+      return itemstack;
    }
 
-   protected void retrySlotClick(int var1, int var2, boolean var3, EntityPlayer var4) {
-      this.slotClick(var1, var2, 1, var4);
+   protected void retrySlotClick(int i, int j, boolean flag, EntityPlayer entityhuman) {
+      this.slotClick(i, j, 1, entityhuman);
    }
 
-   public void onCraftGuiClosed(EntityPlayer var1) {
-      InventoryPlayer var2 = var1.inventory;
-      if(var2.getItemStack() != null) {
-         var1.dropPlayerItem(var2.getItemStack());
-         var2.setItemStack((ItemStack)null);
+   public void onCraftGuiClosed(EntityPlayer entityhuman) {
+      InventoryPlayer playerinventory = entityhuman.inventory;
+      if(playerinventory.getItemStack() != null) {
+         entityhuman.dropPlayerItem(playerinventory.getItemStack());
+         playerinventory.setItemStack((ItemStack)null);
       }
 
    }
 
-   public void onCraftMatrixChanged(IInventory var1) {
+   public void onCraftMatrixChanged(IInventory iinventory) {
       this.updateCraftingResults();
    }
 
-   public void putStackInSlot(int var1, ItemStack var2) {
-      this.getSlot(var1).putStack(var2);
+   public void putStackInSlot(int i, ItemStack itemstack) {
+      this.getSlot(i).putStack(itemstack);
    }
 
-   public boolean getCanCraft(EntityPlayer var1) {
-      return !this.playerList.contains(var1);
+   public boolean getCanCraft(EntityPlayer entityhuman) {
+      return !this.playerList.contains(entityhuman);
    }
 
-   public void setCanCraft(EntityPlayer var1, boolean var2) {
-      if(var2) {
-         this.playerList.remove(var1);
+   public void setCanCraft(EntityPlayer entityhuman, boolean flag) {
+      if(flag) {
+         this.playerList.remove(entityhuman);
       } else {
-         this.playerList.add(var1);
+         this.playerList.add(entityhuman);
       }
 
    }
 
    public abstract boolean canInteractWith(EntityPlayer var1);
 
-   protected boolean mergeItemStack(ItemStack var1, int var2, int var3, boolean var4) {
-      boolean var5 = false;
-      int var6 = var2;
-      if(var4) {
-         var6 = var3 - 1;
+   protected boolean mergeItemStack(ItemStack itemstack, int i, int j, boolean flag) {
+      boolean flag1 = false;
+      int k = i;
+      if(flag) {
+         k = j - 1;
       }
 
-      Slot var7;
-      ItemStack var8;
-      if(var1.isStackable()) {
-         while(var1.stackSize > 0 && (!var4 && var6 < var3 || var4 && var6 >= var2)) {
-            var7 = (Slot)this.inventorySlots.get(var6);
-            var8 = var7.getStack();
-            if(var8 != null && var8.itemID == var1.itemID && (!var1.getHasSubtypes() || var1.getItemDamage() == var8.getItemDamage()) && ItemStack.areItemStackTagsEqual(var1, var8)) {
-               int var9 = var8.stackSize + var1.stackSize;
-               if(var9 <= var1.getMaxStackSize()) {
-                  var1.stackSize = 0;
-                  var8.stackSize = var9;
-                  var7.onSlotChanged();
-                  var5 = true;
-               } else if(var8.stackSize < var1.getMaxStackSize()) {
-                  var1.stackSize -= var1.getMaxStackSize() - var8.stackSize;
-                  var8.stackSize = var1.getMaxStackSize();
-                  var7.onSlotChanged();
-                  var5 = true;
+      Slot slot;
+      ItemStack itemstack1;
+      if(itemstack.isStackable()) {
+         while(itemstack.stackSize > 0 && (!flag && k < j || flag && k >= i)) {
+            slot = (Slot)this.inventorySlots.get(k);
+            itemstack1 = slot.getStack();
+            if(itemstack1 != null && itemstack1.itemID == itemstack.itemID && (!itemstack.getHasSubtypes() || itemstack.getItemDamage() == itemstack1.getItemDamage()) && ItemStack.areItemStackTagsEqual(itemstack, itemstack1)) {
+               int l = itemstack1.stackSize + itemstack.stackSize;
+               if(l <= itemstack.getMaxStackSize()) {
+                  itemstack.stackSize = 0;
+                  itemstack1.stackSize = l;
+                  slot.onSlotChanged();
+                  flag1 = true;
+               } else if(itemstack1.stackSize < itemstack.getMaxStackSize()) {
+                  itemstack.stackSize -= itemstack.getMaxStackSize() - itemstack1.stackSize;
+                  itemstack1.stackSize = itemstack.getMaxStackSize();
+                  slot.onSlotChanged();
+                  flag1 = true;
                }
             }
 
-            if(var4) {
-               --var6;
+            if(flag) {
+               --k;
             } else {
-               ++var6;
+               ++k;
             }
          }
       }
 
-      if(var1.stackSize > 0) {
-         if(var4) {
-            var6 = var3 - 1;
+      if(itemstack.stackSize > 0) {
+         if(flag) {
+            k = j - 1;
          } else {
-            var6 = var2;
+            k = i;
          }
 
-         while(!var4 && var6 < var3 || var4 && var6 >= var2) {
-            var7 = (Slot)this.inventorySlots.get(var6);
-            var8 = var7.getStack();
-            if(var8 == null) {
-               var7.putStack(var1.copy());
-               var7.onSlotChanged();
-               var1.stackSize = 0;
-               var5 = true;
+         while(!flag && k < j || flag && k >= i) {
+            slot = (Slot)this.inventorySlots.get(k);
+            itemstack1 = slot.getStack();
+            if(itemstack1 == null) {
+               slot.putStack(itemstack.copy());
+               slot.onSlotChanged();
+               itemstack.stackSize = 0;
+               flag1 = true;
                break;
             }
 
-            if(var4) {
-               --var6;
+            if(flag) {
+               --k;
             } else {
-               ++var6;
+               ++k;
             }
          }
       }
 
-      return var5;
+      return flag1;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ContainerBeacon.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerBeacon.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerBeacon.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerBeacon.java
--- mcp-mcdev/net/minecraft/src/ContainerBeacon.java	2012-11-29 21:15:11.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerBeacon.java	2012-11-29 20:44:30.000000000 -0800
@@ -8,6 +8,8 @@
 import net.minecraft.src.Slot;
 import net.minecraft.src.SlotBeacon;
 import net.minecraft.src.TileEntityBeacon;
+import org.bukkit.craftbukkit.inventory.CraftInventoryBeacon;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class ContainerBeacon extends Container {
 
@@ -16,35 +18,38 @@
    private int field_82865_g;
    private int field_82867_h;
    private int field_82868_i;
+   private CraftInventoryView bukkitEntity = null;
+   private InventoryPlayer player;
 
 
-   public ContainerBeacon(InventoryPlayer var1, TileEntityBeacon var2) {
-      this.theBeacon = var2;
-      this.addSlotToContainer(this.beaconSlot = new SlotBeacon(this, var2, 0, 136, 110));
-      byte var3 = 36;
-      short var4 = 137;
-
-      int var5;
-      for(var5 = 0; var5 < 3; ++var5) {
-         for(int var6 = 0; var6 < 9; ++var6) {
-            this.addSlotToContainer(new Slot(var1, var6 + var5 * 9 + 9, var3 + var6 * 18, var4 + var5 * 18));
+   public ContainerBeacon(InventoryPlayer playerinventory, TileEntityBeacon tileentitybeacon) {
+      this.player = playerinventory;
+      this.theBeacon = tileentitybeacon;
+      this.addSlotToContainer(this.beaconSlot = new SlotBeacon(this, tileentitybeacon, 0, 136, 110));
+      byte b0 = 36;
+      short short1 = 137;
+
+      int i;
+      for(i = 0; i < 3; ++i) {
+         for(int j = 0; j < 9; ++j) {
+            this.addSlotToContainer(new Slot(playerinventory, j + i * 9 + 9, b0 + j * 18, short1 + i * 18));
          }
       }
 
-      for(var5 = 0; var5 < 9; ++var5) {
-         this.addSlotToContainer(new Slot(var1, var5, var3 + var5 * 18, 58 + var4));
+      for(i = 0; i < 9; ++i) {
+         this.addSlotToContainer(new Slot(playerinventory, i, b0 + i * 18, 58 + short1));
       }
 
-      this.field_82865_g = var2.getLevels();
-      this.field_82867_h = var2.getPrimaryEffect();
-      this.field_82868_i = var2.getSecondaryEffect();
+      this.field_82865_g = tileentitybeacon.getLevels();
+      this.field_82867_h = tileentitybeacon.getPrimaryEffect();
+      this.field_82868_i = tileentitybeacon.getSecondaryEffect();
    }
 
-   public void onCraftGuiOpened(ICrafting var1) {
-      super.onCraftGuiOpened(var1);
-      var1.sendProgressBarUpdate(this, 0, this.field_82865_g);
-      var1.sendProgressBarUpdate(this, 1, this.field_82867_h);
-      var1.sendProgressBarUpdate(this, 2, this.field_82868_i);
+   public void onCraftGuiOpened(ICrafting icrafting) {
+      super.onCraftGuiOpened(icrafting);
+      icrafting.sendProgressBarUpdate(this, 0, this.field_82865_g);
+      icrafting.sendProgressBarUpdate(this, 1, this.field_82867_h);
+      icrafting.sendProgressBarUpdate(this, 2, this.field_82868_i);
    }
 
    public void updateCraftingResults() {
@@ -55,51 +60,61 @@
       return this.theBeacon;
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
-      return this.theBeacon.isUseableByPlayer(var1);
+   public boolean canInteractWith(EntityPlayer entityhuman) {
+      return !this.checkReachable?true:this.theBeacon.isUseableByPlayer(entityhuman);
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if(var2 == 0) {
-            if(!this.mergeItemStack(var5, 1, 37, true)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if(i == 0) {
+            if(!this.mergeItemStack(itemstack1, 1, 37, true)) {
                return null;
             }
 
-            var4.onSlotChange(var5, var3);
-         } else if(!this.beaconSlot.getHasStack() && this.beaconSlot.isItemValid(var5) && var5.stackSize == 1) {
-            if(!this.mergeItemStack(var5, 0, 1, false)) {
+            slot.onSlotChange(itemstack1, itemstack);
+         } else if(!this.beaconSlot.getHasStack() && this.beaconSlot.isItemValid(itemstack1) && itemstack1.stackSize == 1) {
+            if(!this.mergeItemStack(itemstack1, 0, 1, false)) {
                return null;
             }
-         } else if(var2 >= 1 && var2 < 28) {
-            if(!this.mergeItemStack(var5, 28, 37, false)) {
+         } else if(i >= 1 && i < 28) {
+            if(!this.mergeItemStack(itemstack1, 28, 37, false)) {
                return null;
             }
-         } else if(var2 >= 28 && var2 < 37) {
-            if(!this.mergeItemStack(var5, 1, 28, false)) {
+         } else if(i >= 28 && i < 37) {
+            if(!this.mergeItemStack(itemstack1, 1, 28, false)) {
                return null;
             }
-         } else if(!this.mergeItemStack(var5, 1, 37, false)) {
+         } else if(!this.mergeItemStack(itemstack1, 1, 37, false)) {
             return null;
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
 
-         if(var5.stackSize == var3.stackSize) {
+         if(itemstack1.stackSize == itemstack.stackSize) {
             return null;
          }
 
-         var4.onPickupFromSlot(var1, var5);
+         slot.onPickupFromSlot(entityhuman, itemstack1);
       }
 
-      return var3;
+      return itemstack;
+   }
+
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity != null) {
+         return this.bukkitEntity;
+      } else {
+         CraftInventoryBeacon inventory = new CraftInventoryBeacon(this.theBeacon);
+         this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+         return this.bukkitEntity;
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ContainerBrewingStand.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerBrewingStand.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerBrewingStand.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerBrewingStand.java
--- mcp-mcdev/net/minecraft/src/ContainerBrewingStand.java	2012-11-29 21:15:11.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerBrewingStand.java	2012-11-29 20:44:30.000000000 -0800
@@ -9,103 +9,118 @@
 import net.minecraft.src.SlotBrewingStandIngredient;
 import net.minecraft.src.SlotBrewingStandPotion;
 import net.minecraft.src.TileEntityBrewingStand;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class ContainerBrewingStand extends Container {
 
    private TileEntityBrewingStand tileBrewingStand;
    private final Slot theSlot;
    private int brewTime = 0;
+   private CraftInventoryView bukkitEntity = null;
+   private InventoryPlayer player;
 
 
-   public ContainerBrewingStand(InventoryPlayer var1, TileEntityBrewingStand var2) {
-      this.tileBrewingStand = var2;
-      this.addSlotToContainer(new SlotBrewingStandPotion(var1.player, var2, 0, 56, 46));
-      this.addSlotToContainer(new SlotBrewingStandPotion(var1.player, var2, 1, 79, 53));
-      this.addSlotToContainer(new SlotBrewingStandPotion(var1.player, var2, 2, 102, 46));
-      this.theSlot = this.addSlotToContainer(new SlotBrewingStandIngredient(this, var2, 3, 79, 17));
-
-      int var3;
-      for(var3 = 0; var3 < 3; ++var3) {
-         for(int var4 = 0; var4 < 9; ++var4) {
-            this.addSlotToContainer(new Slot(var1, var4 + var3 * 9 + 9, 8 + var4 * 18, 84 + var3 * 18));
+   public ContainerBrewingStand(InventoryPlayer playerinventory, TileEntityBrewingStand tileentitybrewingstand) {
+      this.player = playerinventory;
+      this.tileBrewingStand = tileentitybrewingstand;
+      this.addSlotToContainer(new SlotBrewingStandPotion(playerinventory.player, tileentitybrewingstand, 0, 56, 46));
+      this.addSlotToContainer(new SlotBrewingStandPotion(playerinventory.player, tileentitybrewingstand, 1, 79, 53));
+      this.addSlotToContainer(new SlotBrewingStandPotion(playerinventory.player, tileentitybrewingstand, 2, 102, 46));
+      this.theSlot = this.addSlotToContainer(new SlotBrewingStandIngredient(this, tileentitybrewingstand, 3, 79, 17));
+
+      int i;
+      for(i = 0; i < 3; ++i) {
+         for(int j = 0; j < 9; ++j) {
+            this.addSlotToContainer(new Slot(playerinventory, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
          }
       }
 
-      for(var3 = 0; var3 < 9; ++var3) {
-         this.addSlotToContainer(new Slot(var1, var3, 8 + var3 * 18, 142));
+      for(i = 0; i < 9; ++i) {
+         this.addSlotToContainer(new Slot(playerinventory, i, 8 + i * 18, 142));
       }
 
    }
 
-   public void onCraftGuiOpened(ICrafting var1) {
-      super.onCraftGuiOpened(var1);
-      var1.sendProgressBarUpdate(this, 0, this.tileBrewingStand.getBrewTime());
+   public void onCraftGuiOpened(ICrafting icrafting) {
+      super.onCraftGuiOpened(icrafting);
+      icrafting.sendProgressBarUpdate(this, 0, this.tileBrewingStand.getBrewTime());
    }
 
    public void updateCraftingResults() {
       super.updateCraftingResults();
 
-      for(int var1 = 0; var1 < this.crafters.size(); ++var1) {
-         ICrafting var2 = (ICrafting)this.crafters.get(var1);
+      for(int i = 0; i < this.crafters.size(); ++i) {
+         ICrafting icrafting = (ICrafting)this.crafters.get(i);
          if(this.brewTime != this.tileBrewingStand.getBrewTime()) {
-            var2.sendProgressBarUpdate(this, 0, this.tileBrewingStand.getBrewTime());
+            icrafting.sendProgressBarUpdate(this, 0, this.tileBrewingStand.getBrewTime());
          }
       }
 
       this.brewTime = this.tileBrewingStand.getBrewTime();
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
-      return this.tileBrewingStand.isUseableByPlayer(var1);
+   public boolean canInteractWith(EntityPlayer entityhuman) {
+      return !this.checkReachable?true:this.tileBrewingStand.isUseableByPlayer(entityhuman);
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if((var2 < 0 || var2 > 2) && var2 != 3) {
-            if(!this.theSlot.getHasStack() && this.theSlot.isItemValid(var5)) {
-               if(!this.mergeItemStack(var5, 3, 4, false)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if((i < 0 || i > 2) && i != 3) {
+            if(!this.theSlot.getHasStack() && this.theSlot.isItemValid(itemstack1)) {
+               if(!this.mergeItemStack(itemstack1, 3, 4, false)) {
                   return null;
                }
-            } else if(SlotBrewingStandPotion.canHoldPotion(var3)) {
-               if(!this.mergeItemStack(var5, 0, 3, false)) {
+            } else if(SlotBrewingStandPotion.canHoldPotion(itemstack)) {
+               if(!this.mergeItemStack(itemstack1, 0, 3, false)) {
                   return null;
                }
-            } else if(var2 >= 4 && var2 < 31) {
-               if(!this.mergeItemStack(var5, 31, 40, false)) {
+            } else if(i >= 4 && i < 31) {
+               if(!this.mergeItemStack(itemstack1, 31, 40, false)) {
                   return null;
                }
-            } else if(var2 >= 31 && var2 < 40) {
-               if(!this.mergeItemStack(var5, 4, 31, false)) {
+            } else if(i >= 31 && i < 40) {
+               if(!this.mergeItemStack(itemstack1, 4, 31, false)) {
                   return null;
                }
-            } else if(!this.mergeItemStack(var5, 4, 40, false)) {
+            } else if(!this.mergeItemStack(itemstack1, 4, 40, false)) {
                return null;
             }
          } else {
-            if(!this.mergeItemStack(var5, 4, 40, true)) {
+            if(!this.mergeItemStack(itemstack1, 4, 40, true)) {
                return null;
             }
 
-            var4.onSlotChange(var5, var3);
+            slot.onSlotChange(itemstack1, itemstack);
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
 
-         if(var5.stackSize == var3.stackSize) {
+         if(itemstack1.stackSize == itemstack.stackSize) {
             return null;
          }
 
-         var4.onPickupFromSlot(var1, var5);
+         slot.onPickupFromSlot(entityhuman, itemstack1);
       }
 
-      return var3;
+      return itemstack;
+   }
+
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity != null) {
+         return this.bukkitEntity;
+      } else {
+         CraftInventory inventory = new CraftInventory(this.tileBrewingStand);
+         this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+         return this.bukkitEntity;
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ContainerChest.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerChest.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerChest.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerChest.java
--- mcp-mcdev/net/minecraft/src/ContainerChest.java	2012-11-29 21:15:11.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerChest.java	2012-11-29 20:44:30.000000000 -0800
@@ -3,71 +3,99 @@
 import net.minecraft.src.Container;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IInventory;
+import net.minecraft.src.InventoryLargeChest;
+import net.minecraft.src.InventoryPlayer;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.Slot;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest;
+import org.bukkit.craftbukkit.inventory.CraftInventoryPlayer;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.inventory.Inventory;
 
 public class ContainerChest extends Container {
 
-   private IInventory lowerChestInventory;
+   public IInventory lowerChestInventory;
    private int numRows;
+   private CraftInventoryView bukkitEntity = null;
+   private InventoryPlayer player;
 
 
-   public ContainerChest(IInventory var1, IInventory var2) {
-      this.lowerChestInventory = var2;
-      this.numRows = var2.getSizeInventory() / 9;
-      var2.openChest();
-      int var3 = (this.numRows - 4) * 18;
-
-      int var4;
-      int var5;
-      for(var4 = 0; var4 < this.numRows; ++var4) {
-         for(var5 = 0; var5 < 9; ++var5) {
-            this.addSlotToContainer(new Slot(var2, var5 + var4 * 9, 8 + var5 * 18, 18 + var4 * 18));
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity != null) {
+         return this.bukkitEntity;
+      } else {
+         Object inventory;
+         if(this.lowerChestInventory instanceof InventoryPlayer) {
+            inventory = new CraftInventoryPlayer((InventoryPlayer)this.lowerChestInventory);
+         } else if(this.lowerChestInventory instanceof InventoryLargeChest) {
+            inventory = new CraftInventoryDoubleChest((InventoryLargeChest)this.lowerChestInventory);
+         } else {
+            inventory = new CraftInventory(this.lowerChestInventory);
+         }
+
+         this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), (Inventory)inventory, this);
+         return this.bukkitEntity;
+      }
+   }
+
+   public ContainerChest(IInventory iinventory, IInventory iinventory1) {
+      this.lowerChestInventory = iinventory1;
+      this.numRows = iinventory1.getSizeInventory() / 9;
+      iinventory1.openChest();
+      int i = (this.numRows - 4) * 18;
+      this.player = (InventoryPlayer)iinventory;
+
+      int j;
+      int k;
+      for(j = 0; j < this.numRows; ++j) {
+         for(k = 0; k < 9; ++k) {
+            this.addSlotToContainer(new Slot(iinventory1, k + j * 9, 8 + k * 18, 18 + j * 18));
          }
       }
 
-      for(var4 = 0; var4 < 3; ++var4) {
-         for(var5 = 0; var5 < 9; ++var5) {
-            this.addSlotToContainer(new Slot(var1, var5 + var4 * 9 + 9, 8 + var5 * 18, 103 + var4 * 18 + var3));
+      for(j = 0; j < 3; ++j) {
+         for(k = 0; k < 9; ++k) {
+            this.addSlotToContainer(new Slot(iinventory, k + j * 9 + 9, 8 + k * 18, 103 + j * 18 + i));
          }
       }
 
-      for(var4 = 0; var4 < 9; ++var4) {
-         this.addSlotToContainer(new Slot(var1, var4, 8 + var4 * 18, 161 + var3));
+      for(j = 0; j < 9; ++j) {
+         this.addSlotToContainer(new Slot(iinventory, j, 8 + j * 18, 161 + i));
       }
 
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
-      return this.lowerChestInventory.isUseableByPlayer(var1);
+   public boolean canInteractWith(EntityPlayer entityhuman) {
+      return !this.checkReachable?true:this.lowerChestInventory.isUseableByPlayer(entityhuman);
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if(var2 < this.numRows * 9) {
-            if(!this.mergeItemStack(var5, this.numRows * 9, this.inventorySlots.size(), true)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if(i < this.numRows * 9) {
+            if(!this.mergeItemStack(itemstack1, this.numRows * 9, this.inventorySlots.size(), true)) {
                return null;
             }
-         } else if(!this.mergeItemStack(var5, 0, this.numRows * 9, false)) {
+         } else if(!this.mergeItemStack(itemstack1, 0, this.numRows * 9, false)) {
             return null;
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
       }
 
-      return var3;
+      return itemstack;
    }
 
-   public void onCraftGuiClosed(EntityPlayer var1) {
-      super.onCraftGuiClosed(var1);
+   public void onCraftGuiClosed(EntityPlayer entityhuman) {
+      super.onCraftGuiClosed(entityhuman);
       this.lowerChestInventory.closeChest();
    }
 
Binary files mcp-mcdev/net/minecraft/src/ContainerDispenser.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerDispenser.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerDispenser.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerDispenser.java
--- mcp-mcdev/net/minecraft/src/ContainerDispenser.java	2012-11-29 21:15:11.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerDispenser.java	2012-11-29 20:44:30.000000000 -0800
@@ -3,69 +3,85 @@
 import net.minecraft.src.Container;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IInventory;
+import net.minecraft.src.InventoryPlayer;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.Slot;
 import net.minecraft.src.TileEntityDispenser;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class ContainerDispenser extends Container {
 
-   private TileEntityDispenser tileEntityDispenser;
+   public TileEntityDispenser tileEntityDispenser;
+   private CraftInventoryView bukkitEntity = null;
+   private InventoryPlayer player;
 
 
-   public ContainerDispenser(IInventory var1, TileEntityDispenser var2) {
-      this.tileEntityDispenser = var2;
-
-      int var3;
-      int var4;
-      for(var3 = 0; var3 < 3; ++var3) {
-         for(var4 = 0; var4 < 3; ++var4) {
-            this.addSlotToContainer(new Slot(var2, var4 + var3 * 3, 62 + var4 * 18, 17 + var3 * 18));
+   public ContainerDispenser(IInventory iinventory, TileEntityDispenser tileentitydispenser) {
+      this.tileEntityDispenser = tileentitydispenser;
+      this.player = (InventoryPlayer)iinventory;
+
+      int i;
+      int j;
+      for(i = 0; i < 3; ++i) {
+         for(j = 0; j < 3; ++j) {
+            this.addSlotToContainer(new Slot(tileentitydispenser, j + i * 3, 62 + j * 18, 17 + i * 18));
          }
       }
 
-      for(var3 = 0; var3 < 3; ++var3) {
-         for(var4 = 0; var4 < 9; ++var4) {
-            this.addSlotToContainer(new Slot(var1, var4 + var3 * 9 + 9, 8 + var4 * 18, 84 + var3 * 18));
+      for(i = 0; i < 3; ++i) {
+         for(j = 0; j < 9; ++j) {
+            this.addSlotToContainer(new Slot(iinventory, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
          }
       }
 
-      for(var3 = 0; var3 < 9; ++var3) {
-         this.addSlotToContainer(new Slot(var1, var3, 8 + var3 * 18, 142));
+      for(i = 0; i < 9; ++i) {
+         this.addSlotToContainer(new Slot(iinventory, i, 8 + i * 18, 142));
       }
 
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
-      return this.tileEntityDispenser.isUseableByPlayer(var1);
+   public boolean canInteractWith(EntityPlayer entityhuman) {
+      return !this.checkReachable?true:this.tileEntityDispenser.isUseableByPlayer(entityhuman);
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if(var2 < 9) {
-            if(!this.mergeItemStack(var5, 9, 45, true)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if(i < 9) {
+            if(!this.mergeItemStack(itemstack1, 9, 45, true)) {
                return null;
             }
-         } else if(!this.mergeItemStack(var5, 0, 9, false)) {
+         } else if(!this.mergeItemStack(itemstack1, 0, 9, false)) {
             return null;
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
 
-         if(var5.stackSize == var3.stackSize) {
+         if(itemstack1.stackSize == itemstack.stackSize) {
             return null;
          }
 
-         var4.onPickupFromSlot(var1, var5);
+         slot.onPickupFromSlot(entityhuman, itemstack1);
       }
 
-      return var3;
+      return itemstack;
+   }
+
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity != null) {
+         return this.bukkitEntity;
+      } else {
+         CraftInventory inventory = new CraftInventory(this.tileEntityDispenser);
+         this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+         return this.bukkitEntity;
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ContainerEnchantment.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerEnchantment.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerEnchantment.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerEnchantment.java
--- mcp-mcdev/net/minecraft/src/ContainerEnchantment.java	2012-11-29 21:15:11.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerEnchantment.java	2012-11-29 20:44:30.000000000 -0800
@@ -1,8 +1,10 @@
 package net.minecraft.src;
 
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import java.util.Map.Entry;
 import net.minecraft.src.Block;
 import net.minecraft.src.Container;
 import net.minecraft.src.EnchantmentData;
@@ -16,10 +18,16 @@
 import net.minecraft.src.SlotEnchantment;
 import net.minecraft.src.SlotEnchantmentTable;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftInventoryEnchanting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Player;
+import org.bukkit.event.enchantment.EnchantItemEvent;
+import org.bukkit.event.enchantment.PrepareItemEnchantEvent;
 
 public class ContainerEnchantment extends Container {
 
-   public IInventory tableInventory = new SlotEnchantmentTable(this, "Enchant", 1);
+   public SlotEnchantmentTable tableInventory = new SlotEnchantmentTable(this, "Enchant", 1);
    private World worldPointer;
    private int posX;
    private int posY;
@@ -27,116 +35,153 @@
    private Random rand = new Random();
    public long nameSeed;
    public int[] enchantLevels = new int[3];
+   private CraftInventoryView bukkitEntity = null;
+   private Player player;
 
 
-   public ContainerEnchantment(InventoryPlayer var1, World var2, int var3, int var4, int var5) {
-      this.worldPointer = var2;
-      this.posX = var3;
-      this.posY = var4;
-      this.posZ = var5;
+   public ContainerEnchantment(InventoryPlayer playerinventory, World world, int i, int j, int k) {
+      this.worldPointer = world;
+      this.posX = i;
+      this.posY = j;
+      this.posZ = k;
       this.addSlotToContainer(new SlotEnchantment(this, this.tableInventory, 0, 25, 47));
 
-      int var6;
-      for(var6 = 0; var6 < 3; ++var6) {
-         for(int var7 = 0; var7 < 9; ++var7) {
-            this.addSlotToContainer(new Slot(var1, var7 + var6 * 9 + 9, 8 + var7 * 18, 84 + var6 * 18));
+      int l;
+      for(l = 0; l < 3; ++l) {
+         for(int i1 = 0; i1 < 9; ++i1) {
+            this.addSlotToContainer(new Slot(playerinventory, i1 + l * 9 + 9, 8 + i1 * 18, 84 + l * 18));
          }
       }
 
-      for(var6 = 0; var6 < 9; ++var6) {
-         this.addSlotToContainer(new Slot(var1, var6, 8 + var6 * 18, 142));
+      for(l = 0; l < 9; ++l) {
+         this.addSlotToContainer(new Slot(playerinventory, l, 8 + l * 18, 142));
       }
 
+      this.player = (Player)playerinventory.player.getBukkitEntity();
+      this.tableInventory.player = this.player;
    }
 
-   public void onCraftGuiOpened(ICrafting var1) {
-      super.onCraftGuiOpened(var1);
-      var1.sendProgressBarUpdate(this, 0, this.enchantLevels[0]);
-      var1.sendProgressBarUpdate(this, 1, this.enchantLevels[1]);
-      var1.sendProgressBarUpdate(this, 2, this.enchantLevels[2]);
+   public void onCraftGuiOpened(ICrafting icrafting) {
+      super.onCraftGuiOpened(icrafting);
+      icrafting.sendProgressBarUpdate(this, 0, this.enchantLevels[0]);
+      icrafting.sendProgressBarUpdate(this, 1, this.enchantLevels[1]);
+      icrafting.sendProgressBarUpdate(this, 2, this.enchantLevels[2]);
    }
 
    public void updateCraftingResults() {
       super.updateCraftingResults();
 
-      for(int var1 = 0; var1 < this.crafters.size(); ++var1) {
-         ICrafting var2 = (ICrafting)this.crafters.get(var1);
-         var2.sendProgressBarUpdate(this, 0, this.enchantLevels[0]);
-         var2.sendProgressBarUpdate(this, 1, this.enchantLevels[1]);
-         var2.sendProgressBarUpdate(this, 2, this.enchantLevels[2]);
+      for(int i = 0; i < this.crafters.size(); ++i) {
+         ICrafting icrafting = (ICrafting)this.crafters.get(i);
+         icrafting.sendProgressBarUpdate(this, 0, this.enchantLevels[0]);
+         icrafting.sendProgressBarUpdate(this, 1, this.enchantLevels[1]);
+         icrafting.sendProgressBarUpdate(this, 2, this.enchantLevels[2]);
       }
 
    }
 
-   public void onCraftMatrixChanged(IInventory var1) {
-      if(var1 == this.tableInventory) {
-         ItemStack var2 = var1.getStackInSlot(0);
-         int var3;
-         if(var2 != null && var2.isItemEnchantable()) {
+   public void onCraftMatrixChanged(IInventory iinventory) {
+      if(iinventory == this.tableInventory) {
+         ItemStack itemstack = iinventory.getStackInSlot(0);
+         int i;
+         if(itemstack != null && itemstack.isItemEnchantable()) {
             this.nameSeed = this.rand.nextLong();
             if(!this.worldPointer.isRemote) {
-               var3 = 0;
+               i = 0;
 
-               int var4;
-               for(var4 = -1; var4 <= 1; ++var4) {
-                  for(int var5 = -1; var5 <= 1; ++var5) {
-                     if((var4 != 0 || var5 != 0) && this.worldPointer.isAirBlock(this.posX + var5, this.posY, this.posZ + var4) && this.worldPointer.isAirBlock(this.posX + var5, this.posY + 1, this.posZ + var4)) {
-                        if(this.worldPointer.getBlockId(this.posX + var5 * 2, this.posY, this.posZ + var4 * 2) == Block.bookShelf.blockID) {
-                           ++var3;
+               int j;
+               for(j = -1; j <= 1; ++j) {
+                  for(int item = -1; item <= 1; ++item) {
+                     if((j != 0 || item != 0) && this.worldPointer.isAirBlock(this.posX + item, this.posY, this.posZ + j) && this.worldPointer.isAirBlock(this.posX + item, this.posY + 1, this.posZ + j)) {
+                        if(this.worldPointer.getBlockId(this.posX + item * 2, this.posY, this.posZ + j * 2) == Block.bookShelf.blockID) {
+                           ++i;
                         }
 
-                        if(this.worldPointer.getBlockId(this.posX + var5 * 2, this.posY + 1, this.posZ + var4 * 2) == Block.bookShelf.blockID) {
-                           ++var3;
+                        if(this.worldPointer.getBlockId(this.posX + item * 2, this.posY + 1, this.posZ + j * 2) == Block.bookShelf.blockID) {
+                           ++i;
                         }
 
-                        if(var5 != 0 && var4 != 0) {
-                           if(this.worldPointer.getBlockId(this.posX + var5 * 2, this.posY, this.posZ + var4) == Block.bookShelf.blockID) {
-                              ++var3;
+                        if(item != 0 && j != 0) {
+                           if(this.worldPointer.getBlockId(this.posX + item * 2, this.posY, this.posZ + j) == Block.bookShelf.blockID) {
+                              ++i;
                            }
 
-                           if(this.worldPointer.getBlockId(this.posX + var5 * 2, this.posY + 1, this.posZ + var4) == Block.bookShelf.blockID) {
-                              ++var3;
+                           if(this.worldPointer.getBlockId(this.posX + item * 2, this.posY + 1, this.posZ + j) == Block.bookShelf.blockID) {
+                              ++i;
                            }
 
-                           if(this.worldPointer.getBlockId(this.posX + var5, this.posY, this.posZ + var4 * 2) == Block.bookShelf.blockID) {
-                              ++var3;
+                           if(this.worldPointer.getBlockId(this.posX + item, this.posY, this.posZ + j * 2) == Block.bookShelf.blockID) {
+                              ++i;
                            }
 
-                           if(this.worldPointer.getBlockId(this.posX + var5, this.posY + 1, this.posZ + var4 * 2) == Block.bookShelf.blockID) {
-                              ++var3;
+                           if(this.worldPointer.getBlockId(this.posX + item, this.posY + 1, this.posZ + j * 2) == Block.bookShelf.blockID) {
+                              ++i;
                            }
                         }
                      }
                   }
                }
 
-               for(var4 = 0; var4 < 3; ++var4) {
-                  this.enchantLevels[var4] = EnchantmentHelper.calcItemStackEnchantability(this.rand, var4, var3, var2);
+               for(j = 0; j < 3; ++j) {
+                  this.enchantLevels[j] = EnchantmentHelper.calcItemStackEnchantability(this.rand, j, i, itemstack);
+               }
+
+               CraftItemStack var7 = new CraftItemStack(itemstack);
+               PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(this.player, this.getBukkitView(), this.worldPointer.getWorld().getBlockAt(this.posX, this.posY, this.posZ), var7, this.enchantLevels, i);
+               this.worldPointer.getServer().getPluginManager().callEvent(event);
+               if(event.isCancelled()) {
+                  for(i = 0; i < 3; ++i) {
+                     this.enchantLevels[i] = 0;
+                  }
+
+                  return;
                }
 
                this.updateCraftingResults();
             }
          } else {
-            for(var3 = 0; var3 < 3; ++var3) {
-               this.enchantLevels[var3] = 0;
+            for(i = 0; i < 3; ++i) {
+               this.enchantLevels[i] = 0;
             }
          }
       }
 
    }
 
-   public boolean enchantItem(EntityPlayer var1, int var2) {
-      ItemStack var3 = this.tableInventory.getStackInSlot(0);
-      if(this.enchantLevels[var2] > 0 && var3 != null && (var1.experienceLevel >= this.enchantLevels[var2] || var1.capabilities.isCreativeMode)) {
+   public boolean enchantItem(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = this.tableInventory.getStackInSlot(0);
+      if(this.enchantLevels[i] > 0 && itemstack != null && (entityhuman.experienceLevel >= this.enchantLevels[i] || entityhuman.capabilities.isCreativeMode)) {
          if(!this.worldPointer.isRemote) {
-            List var4 = EnchantmentHelper.buildEnchantmentList(this.rand, var3, this.enchantLevels[var2]);
-            if(var4 != null) {
-               var1.addExperienceLevel(-this.enchantLevels[var2]);
-               Iterator var5 = var4.iterator();
-
-               while(var5.hasNext()) {
-                  EnchantmentData var6 = (EnchantmentData)var5.next();
-                  var3.addEnchantment(var6.enchantmentobj, var6.enchantmentLevel);
+            List list = EnchantmentHelper.buildEnchantmentList(this.rand, itemstack, this.enchantLevels[i]);
+            if(list != null) {
+               HashMap enchants = new HashMap();
+               Iterator item = list.iterator();
+
+               while(item.hasNext()) {
+                  Object event = item.next();
+                  EnchantmentData level = (EnchantmentData)event;
+                  enchants.put(org.bukkit.enchantments.Enchantment.getById(level.enchantmentobj.effectId), Integer.valueOf(level.enchantmentLevel));
+               }
+
+               CraftItemStack item1 = new CraftItemStack(itemstack);
+               EnchantItemEvent event1 = new EnchantItemEvent((Player)entityhuman.getBukkitEntity(), this.getBukkitView(), this.worldPointer.getWorld().getBlockAt(this.posX, this.posY, this.posZ), item1, this.enchantLevels[i], enchants, i);
+               this.worldPointer.getServer().getPluginManager().callEvent(event1);
+               int level1 = event1.getExpLevelCost();
+               if(event1.isCancelled() || level1 > entityhuman.experienceLevel && !entityhuman.capabilities.isCreativeMode || enchants.isEmpty()) {
+                  return false;
+               }
+
+               entityhuman.addExperienceLevel(-level1);
+               Iterator i$ = event1.getEnchantsToAdd().entrySet().iterator();
+
+               while(i$.hasNext()) {
+                  Entry entry = (Entry)i$.next();
+
+                  try {
+                     item1.addEnchantment((org.bukkit.enchantments.Enchantment)entry.getKey(), ((Integer)entry.getValue()).intValue());
+                  } catch (IllegalArgumentException var12) {
+                     ;
+                  }
                }
 
                this.onCraftMatrixChanged(this.tableInventory);
@@ -149,58 +194,68 @@
       }
    }
 
-   public void onCraftGuiClosed(EntityPlayer var1) {
-      super.onCraftGuiClosed(var1);
+   public void onCraftGuiClosed(EntityPlayer entityhuman) {
+      super.onCraftGuiClosed(entityhuman);
       if(!this.worldPointer.isRemote) {
-         ItemStack var2 = this.tableInventory.getStackInSlotOnClosing(0);
-         if(var2 != null) {
-            var1.dropPlayerItem(var2);
+         ItemStack itemstack = this.tableInventory.getStackInSlotOnClosing(0);
+         if(itemstack != null) {
+            entityhuman.dropPlayerItem(itemstack);
          }
-
       }
+
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
-      return this.worldPointer.getBlockId(this.posX, this.posY, this.posZ) != Block.enchantmentTable.blockID?false:var1.getDistanceSq((double)this.posX + 0.5D, (double)this.posY + 0.5D, (double)this.posZ + 0.5D) <= 64.0D;
+   public boolean canInteractWith(EntityPlayer entityhuman) {
+      return !this.checkReachable?true:(this.worldPointer.getBlockId(this.posX, this.posY, this.posZ) != Block.enchantmentTable.blockID?false:entityhuman.getDistanceSq((double)this.posX + 0.5D, (double)this.posY + 0.5D, (double)this.posZ + 0.5D) <= 64.0D);
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if(var2 == 0) {
-            if(!this.mergeItemStack(var5, 1, 37, true)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if(i == 0) {
+            if(!this.mergeItemStack(itemstack1, 1, 37, true)) {
                return null;
             }
          } else {
-            if(((Slot)this.inventorySlots.get(0)).getHasStack() || !((Slot)this.inventorySlots.get(0)).isItemValid(var5)) {
+            if(((Slot)this.inventorySlots.get(0)).getHasStack() || !((Slot)this.inventorySlots.get(0)).isItemValid(itemstack1)) {
                return null;
             }
 
-            if(var5.hasTagCompound() && var5.stackSize == 1) {
-               ((Slot)this.inventorySlots.get(0)).putStack(var5.copy());
-               var5.stackSize = 0;
-            } else if(var5.stackSize >= 1) {
-               ((Slot)this.inventorySlots.get(0)).putStack(new ItemStack(var5.itemID, 1, var5.getItemDamage()));
-               --var5.stackSize;
+            if(itemstack1.hasTagCompound() && itemstack1.stackSize == 1) {
+               ((Slot)this.inventorySlots.get(0)).putStack(itemstack1.copy());
+               itemstack1.stackSize = 0;
+            } else if(itemstack1.stackSize >= 1) {
+               ((Slot)this.inventorySlots.get(0)).putStack(new ItemStack(itemstack1.itemID, 1, itemstack1.getItemDamage()));
+               --itemstack1.stackSize;
             }
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
 
-         if(var5.stackSize == var3.stackSize) {
+         if(itemstack1.stackSize == itemstack.stackSize) {
             return null;
          }
 
-         var4.onPickupFromSlot(var1, var5);
+         slot.onPickupFromSlot(entityhuman, itemstack1);
       }
 
-      return var3;
+      return itemstack;
+   }
+
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity != null) {
+         return this.bukkitEntity;
+      } else {
+         CraftInventoryEnchanting inventory = new CraftInventoryEnchanting(this.tableInventory);
+         this.bukkitEntity = new CraftInventoryView(this.player, inventory, this);
+         return this.bukkitEntity;
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ContainerFurnace.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerFurnace.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerFurnace.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerFurnace.java
--- mcp-mcdev/net/minecraft/src/ContainerFurnace.java	2012-11-29 21:15:10.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerFurnace.java	2012-11-29 20:44:30.000000000 -0800
@@ -9,6 +9,8 @@
 import net.minecraft.src.Slot;
 import net.minecraft.src.SlotFurnace;
 import net.minecraft.src.TileEntityFurnace;
+import org.bukkit.craftbukkit.inventory.CraftInventoryFurnace;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class ContainerFurnace extends Container {
 
@@ -16,49 +18,62 @@
    private int lastCookTime = 0;
    private int lastBurnTime = 0;
    private int lastItemBurnTime = 0;
+   private CraftInventoryView bukkitEntity = null;
+   private InventoryPlayer player;
 
 
-   public ContainerFurnace(InventoryPlayer var1, TileEntityFurnace var2) {
-      this.furnace = var2;
-      this.addSlotToContainer(new Slot(var2, 0, 56, 17));
-      this.addSlotToContainer(new Slot(var2, 1, 56, 53));
-      this.addSlotToContainer(new SlotFurnace(var1.player, var2, 2, 116, 35));
-
-      int var3;
-      for(var3 = 0; var3 < 3; ++var3) {
-         for(int var4 = 0; var4 < 9; ++var4) {
-            this.addSlotToContainer(new Slot(var1, var4 + var3 * 9 + 9, 8 + var4 * 18, 84 + var3 * 18));
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity != null) {
+         return this.bukkitEntity;
+      } else {
+         CraftInventoryFurnace inventory = new CraftInventoryFurnace(this.furnace);
+         this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+         return this.bukkitEntity;
+      }
+   }
+
+   public ContainerFurnace(InventoryPlayer playerinventory, TileEntityFurnace tileentityfurnace) {
+      this.furnace = tileentityfurnace;
+      this.addSlotToContainer(new Slot(tileentityfurnace, 0, 56, 17));
+      this.addSlotToContainer(new Slot(tileentityfurnace, 1, 56, 53));
+      this.addSlotToContainer(new SlotFurnace(playerinventory.player, tileentityfurnace, 2, 116, 35));
+      this.player = playerinventory;
+
+      int i;
+      for(i = 0; i < 3; ++i) {
+         for(int j = 0; j < 9; ++j) {
+            this.addSlotToContainer(new Slot(playerinventory, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
          }
       }
 
-      for(var3 = 0; var3 < 9; ++var3) {
-         this.addSlotToContainer(new Slot(var1, var3, 8 + var3 * 18, 142));
+      for(i = 0; i < 9; ++i) {
+         this.addSlotToContainer(new Slot(playerinventory, i, 8 + i * 18, 142));
       }
 
    }
 
-   public void onCraftGuiOpened(ICrafting var1) {
-      super.onCraftGuiOpened(var1);
-      var1.sendProgressBarUpdate(this, 0, this.furnace.furnaceCookTime);
-      var1.sendProgressBarUpdate(this, 1, this.furnace.furnaceBurnTime);
-      var1.sendProgressBarUpdate(this, 2, this.furnace.currentItemBurnTime);
+   public void onCraftGuiOpened(ICrafting icrafting) {
+      super.onCraftGuiOpened(icrafting);
+      icrafting.sendProgressBarUpdate(this, 0, this.furnace.furnaceCookTime);
+      icrafting.sendProgressBarUpdate(this, 1, this.furnace.furnaceBurnTime);
+      icrafting.sendProgressBarUpdate(this, 2, this.furnace.currentItemBurnTime);
    }
 
    public void updateCraftingResults() {
       super.updateCraftingResults();
 
-      for(int var1 = 0; var1 < this.crafters.size(); ++var1) {
-         ICrafting var2 = (ICrafting)this.crafters.get(var1);
+      for(int i = 0; i < this.crafters.size(); ++i) {
+         ICrafting icrafting = (ICrafting)this.crafters.get(i);
          if(this.lastCookTime != this.furnace.furnaceCookTime) {
-            var2.sendProgressBarUpdate(this, 0, this.furnace.furnaceCookTime);
+            icrafting.sendProgressBarUpdate(this, 0, this.furnace.furnaceCookTime);
          }
 
          if(this.lastBurnTime != this.furnace.furnaceBurnTime) {
-            var2.sendProgressBarUpdate(this, 1, this.furnace.furnaceBurnTime);
+            icrafting.sendProgressBarUpdate(this, 1, this.furnace.furnaceBurnTime);
          }
 
          if(this.lastItemBurnTime != this.furnace.currentItemBurnTime) {
-            var2.sendProgressBarUpdate(this, 2, this.furnace.currentItemBurnTime);
+            icrafting.sendProgressBarUpdate(this, 2, this.furnace.currentItemBurnTime);
          }
       }
 
@@ -67,55 +82,55 @@
       this.lastItemBurnTime = this.furnace.currentItemBurnTime;
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
-      return this.furnace.isUseableByPlayer(var1);
+   public boolean canInteractWith(EntityPlayer entityhuman) {
+      return !this.checkReachable?true:this.furnace.isUseableByPlayer(entityhuman);
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if(var2 == 2) {
-            if(!this.mergeItemStack(var5, 3, 39, true)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if(i == 2) {
+            if(!this.mergeItemStack(itemstack1, 3, 39, true)) {
                return null;
             }
 
-            var4.onSlotChange(var5, var3);
-         } else if(var2 != 1 && var2 != 0) {
-            if(FurnaceRecipes.smelting().getSmeltingResult(var5.getItem().shiftedIndex) != null) {
-               if(!this.mergeItemStack(var5, 0, 1, false)) {
+            slot.onSlotChange(itemstack1, itemstack);
+         } else if(i != 1 && i != 0) {
+            if(FurnaceRecipes.smelting().getSmeltingResult(itemstack1.getItem().shiftedIndex) != null) {
+               if(!this.mergeItemStack(itemstack1, 0, 1, false)) {
                   return null;
                }
-            } else if(TileEntityFurnace.isItemFuel(var5)) {
-               if(!this.mergeItemStack(var5, 1, 2, false)) {
+            } else if(TileEntityFurnace.isItemFuel(itemstack1)) {
+               if(!this.mergeItemStack(itemstack1, 1, 2, false)) {
                   return null;
                }
-            } else if(var2 >= 3 && var2 < 30) {
-               if(!this.mergeItemStack(var5, 30, 39, false)) {
+            } else if(i >= 3 && i < 30) {
+               if(!this.mergeItemStack(itemstack1, 30, 39, false)) {
                   return null;
                }
-            } else if(var2 >= 30 && var2 < 39 && !this.mergeItemStack(var5, 3, 30, false)) {
+            } else if(i >= 30 && i < 39 && !this.mergeItemStack(itemstack1, 3, 30, false)) {
                return null;
             }
-         } else if(!this.mergeItemStack(var5, 3, 39, false)) {
+         } else if(!this.mergeItemStack(itemstack1, 3, 39, false)) {
             return null;
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
 
-         if(var5.stackSize == var3.stackSize) {
+         if(itemstack1.stackSize == itemstack.stackSize) {
             return null;
          }
 
-         var4.onPickupFromSlot(var1, var5);
+         slot.onPickupFromSlot(entityhuman, itemstack1);
       }
 
-      return var3;
+      return itemstack;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ContainerMerchant.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerMerchant.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerMerchant.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerMerchant.java
--- mcp-mcdev/net/minecraft/src/ContainerMerchant.java	2012-11-29 21:15:10.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerMerchant.java	2012-11-29 20:44:30.000000000 -0800
@@ -11,31 +11,44 @@
 import net.minecraft.src.Slot;
 import net.minecraft.src.SlotMerchantResult;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftInventoryMerchant;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class ContainerMerchant extends Container {
 
    private IMerchant theMerchant;
    private InventoryMerchant merchantInventory;
    private final World theWorld;
+   private CraftInventoryView bukkitEntity = null;
+   private InventoryPlayer player;
 
 
-   public ContainerMerchant(InventoryPlayer var1, IMerchant var2, World var3) {
-      this.theMerchant = var2;
-      this.theWorld = var3;
-      this.merchantInventory = new InventoryMerchant(var1.player, var2);
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity == null) {
+         this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), new CraftInventoryMerchant(this.getMerchantInventory()), this);
+      }
+
+      return this.bukkitEntity;
+   }
+
+   public ContainerMerchant(InventoryPlayer playerinventory, IMerchant imerchant, World world) {
+      this.theMerchant = imerchant;
+      this.theWorld = world;
+      this.merchantInventory = new InventoryMerchant(playerinventory.player, imerchant);
       this.addSlotToContainer(new Slot(this.merchantInventory, 0, 36, 53));
       this.addSlotToContainer(new Slot(this.merchantInventory, 1, 62, 53));
-      this.addSlotToContainer(new SlotMerchantResult(var1.player, var2, this.merchantInventory, 2, 120, 53));
+      this.addSlotToContainer(new SlotMerchantResult(playerinventory.player, imerchant, this.merchantInventory, 2, 120, 53));
+      this.player = playerinventory;
 
-      int var4;
-      for(var4 = 0; var4 < 3; ++var4) {
-         for(int var5 = 0; var5 < 9; ++var5) {
-            this.addSlotToContainer(new Slot(var1, var5 + var4 * 9 + 9, 8 + var5 * 18, 84 + var4 * 18));
+      int i;
+      for(i = 0; i < 3; ++i) {
+         for(int j = 0; j < 9; ++j) {
+            this.addSlotToContainer(new Slot(playerinventory, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
          }
       }
 
-      for(var4 = 0; var4 < 9; ++var4) {
-         this.addSlotToContainer(new Slot(var1, var4, 8 + var4 * 18, 142));
+      for(i = 0; i < 9; ++i) {
+         this.addSlotToContainer(new Slot(playerinventory, i, 8 + i * 18, 142));
       }
 
    }
@@ -44,82 +57,82 @@
       return this.merchantInventory;
    }
 
-   public void onCraftGuiOpened(ICrafting var1) {
-      super.onCraftGuiOpened(var1);
+   public void onCraftGuiOpened(ICrafting icrafting) {
+      super.onCraftGuiOpened(icrafting);
    }
 
    public void updateCraftingResults() {
       super.updateCraftingResults();
    }
 
-   public void onCraftMatrixChanged(IInventory var1) {
+   public void onCraftMatrixChanged(IInventory iinventory) {
       this.merchantInventory.resetRecipeAndSlots();
-      super.onCraftMatrixChanged(var1);
+      super.onCraftMatrixChanged(iinventory);
    }
 
-   public void setCurrentRecipeIndex(int var1) {
-      this.merchantInventory.setCurrentRecipeIndex(var1);
+   public void setCurrentRecipeIndex(int i) {
+      this.merchantInventory.setCurrentRecipeIndex(i);
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
-      return this.theMerchant.getCustomer() == var1;
+   public boolean canInteractWith(EntityPlayer entityhuman) {
+      return this.theMerchant.getCustomer() == entityhuman;
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if(var2 == 2) {
-            if(!this.mergeItemStack(var5, 3, 39, true)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if(i == 2) {
+            if(!this.mergeItemStack(itemstack1, 3, 39, true)) {
                return null;
             }
 
-            var4.onSlotChange(var5, var3);
-         } else if(var2 != 0 && var2 != 1) {
-            if(var2 >= 3 && var2 < 30) {
-               if(!this.mergeItemStack(var5, 30, 39, false)) {
+            slot.onSlotChange(itemstack1, itemstack);
+         } else if(i != 0 && i != 1) {
+            if(i >= 3 && i < 30) {
+               if(!this.mergeItemStack(itemstack1, 30, 39, false)) {
                   return null;
                }
-            } else if(var2 >= 30 && var2 < 39 && !this.mergeItemStack(var5, 3, 30, false)) {
+            } else if(i >= 30 && i < 39 && !this.mergeItemStack(itemstack1, 3, 30, false)) {
                return null;
             }
-         } else if(!this.mergeItemStack(var5, 3, 39, false)) {
+         } else if(!this.mergeItemStack(itemstack1, 3, 39, false)) {
             return null;
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
 
-         if(var5.stackSize == var3.stackSize) {
+         if(itemstack1.stackSize == itemstack.stackSize) {
             return null;
          }
 
-         var4.onPickupFromSlot(var1, var5);
+         slot.onPickupFromSlot(entityhuman, itemstack1);
       }
 
-      return var3;
+      return itemstack;
    }
 
-   public void onCraftGuiClosed(EntityPlayer var1) {
-      super.onCraftGuiClosed(var1);
+   public void onCraftGuiClosed(EntityPlayer entityhuman) {
+      super.onCraftGuiClosed(entityhuman);
       this.theMerchant.setCustomer((EntityPlayer)null);
-      super.onCraftGuiClosed(var1);
+      super.onCraftGuiClosed(entityhuman);
       if(!this.theWorld.isRemote) {
-         ItemStack var2 = this.merchantInventory.getStackInSlotOnClosing(0);
-         if(var2 != null) {
-            var1.dropPlayerItem(var2);
+         ItemStack itemstack = this.merchantInventory.getStackInSlotOnClosing(0);
+         if(itemstack != null) {
+            entityhuman.dropPlayerItem(itemstack);
          }
 
-         var2 = this.merchantInventory.getStackInSlotOnClosing(1);
-         if(var2 != null) {
-            var1.dropPlayerItem(var2);
+         itemstack = this.merchantInventory.getStackInSlotOnClosing(1);
+         if(itemstack != null) {
+            entityhuman.dropPlayerItem(itemstack);
          }
-
       }
+
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ContainerPlayer.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerPlayer.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerPlayer.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerPlayer.java
--- mcp-mcdev/net/minecraft/src/ContainerPlayer.java	2012-11-29 21:15:10.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerPlayer.java	2012-11-29 20:44:30.000000000 -0800
@@ -3,15 +3,19 @@
 import net.minecraft.src.Container;
 import net.minecraft.src.CraftingManager;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.IInventory;
 import net.minecraft.src.InventoryCraftResult;
 import net.minecraft.src.InventoryCrafting;
 import net.minecraft.src.InventoryPlayer;
 import net.minecraft.src.ItemArmor;
 import net.minecraft.src.ItemStack;
+import net.minecraft.src.Packet103SetSlot;
 import net.minecraft.src.Slot;
 import net.minecraft.src.SlotArmor;
 import net.minecraft.src.SlotCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class ContainerPlayer extends Container {
 
@@ -19,109 +23,130 @@
    public IInventory craftResult = new InventoryCraftResult();
    public boolean isLocalWorld = false;
    private final EntityPlayer thePlayer;
+   private CraftInventoryView bukkitEntity = null;
+   private InventoryPlayer player;
 
 
-   public ContainerPlayer(InventoryPlayer var1, boolean var2, EntityPlayer var3) {
-      this.isLocalWorld = var2;
-      this.thePlayer = var3;
-      this.addSlotToContainer(new SlotCrafting(var1.player, this.craftMatrix, this.craftResult, 0, 144, 36));
+   public ContainerPlayer(InventoryPlayer playerinventory, boolean flag, EntityPlayer entityhuman) {
+      this.isLocalWorld = flag;
+      this.thePlayer = entityhuman;
+      this.craftResult = new InventoryCraftResult();
+      this.craftMatrix = new InventoryCrafting(this, 2, 2, playerinventory.player);
+      this.craftMatrix.resultInventory = this.craftResult;
+      this.player = playerinventory;
+      this.addSlotToContainer(new SlotCrafting(playerinventory.player, this.craftMatrix, this.craftResult, 0, 144, 36));
 
-      int var4;
-      int var5;
-      for(var4 = 0; var4 < 2; ++var4) {
-         for(var5 = 0; var5 < 2; ++var5) {
-            this.addSlotToContainer(new Slot(this.craftMatrix, var5 + var4 * 2, 88 + var5 * 18, 26 + var4 * 18));
+      int i;
+      int j;
+      for(i = 0; i < 2; ++i) {
+         for(j = 0; j < 2; ++j) {
+            this.addSlotToContainer(new Slot(this.craftMatrix, j + i * 2, 88 + j * 18, 26 + i * 18));
          }
       }
 
-      for(var4 = 0; var4 < 4; ++var4) {
-         this.addSlotToContainer(new SlotArmor(this, var1, var1.getSizeInventory() - 1 - var4, 8, 8 + var4 * 18, var4));
+      for(i = 0; i < 4; ++i) {
+         this.addSlotToContainer(new SlotArmor(this, playerinventory, playerinventory.getSizeInventory() - 1 - i, 8, 8 + i * 18, i));
       }
 
-      for(var4 = 0; var4 < 3; ++var4) {
-         for(var5 = 0; var5 < 9; ++var5) {
-            this.addSlotToContainer(new Slot(var1, var5 + (var4 + 1) * 9, 8 + var5 * 18, 84 + var4 * 18));
+      for(i = 0; i < 3; ++i) {
+         for(j = 0; j < 9; ++j) {
+            this.addSlotToContainer(new Slot(playerinventory, j + (i + 1) * 9, 8 + j * 18, 84 + i * 18));
          }
       }
 
-      for(var4 = 0; var4 < 9; ++var4) {
-         this.addSlotToContainer(new Slot(var1, var4, 8 + var4 * 18, 142));
+      for(i = 0; i < 9; ++i) {
+         this.addSlotToContainer(new Slot(playerinventory, i, 8 + i * 18, 142));
       }
 
-      this.onCraftMatrixChanged(this.craftMatrix);
    }
 
-   public void onCraftMatrixChanged(IInventory var1) {
-      this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.thePlayer.worldObj));
+   public void onCraftMatrixChanged(IInventory iinventory) {
+      CraftingManager.getInstance().lastCraftView = this.getBukkitView();
+      ItemStack craftResult = CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.thePlayer.worldObj);
+      this.craftResult.setInventorySlotContents(0, craftResult);
+      if(super.crafters.size() >= 1) {
+         EntityPlayerMP player = (EntityPlayerMP)super.crafters.get(0);
+         player.playerNetServerHandler.sendPacket(new Packet103SetSlot(player.openContainer.windowId, 0, craftResult));
+      }
    }
 
-   public void onCraftGuiClosed(EntityPlayer var1) {
-      super.onCraftGuiClosed(var1);
+   public void onCraftGuiClosed(EntityPlayer entityhuman) {
+      super.onCraftGuiClosed(entityhuman);
 
-      for(int var2 = 0; var2 < 4; ++var2) {
-         ItemStack var3 = this.craftMatrix.getStackInSlotOnClosing(var2);
-         if(var3 != null) {
-            var1.dropPlayerItem(var3);
+      for(int i = 0; i < 4; ++i) {
+         ItemStack itemstack = this.craftMatrix.getStackInSlotOnClosing(i);
+         if(itemstack != null) {
+            entityhuman.dropPlayerItem(itemstack);
          }
       }
 
       this.craftResult.setInventorySlotContents(0, (ItemStack)null);
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
+   public boolean canInteractWith(EntityPlayer entityhuman) {
       return true;
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if(var2 == 0) {
-            if(!this.mergeItemStack(var5, 9, 45, true)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if(i == 0) {
+            if(!this.mergeItemStack(itemstack1, 9, 45, true)) {
                return null;
             }
 
-            var4.onSlotChange(var5, var3);
-         } else if(var2 >= 1 && var2 < 5) {
-            if(!this.mergeItemStack(var5, 9, 45, false)) {
+            slot.onSlotChange(itemstack1, itemstack);
+         } else if(i >= 1 && i < 5) {
+            if(!this.mergeItemStack(itemstack1, 9, 45, false)) {
                return null;
             }
-         } else if(var2 >= 5 && var2 < 9) {
-            if(!this.mergeItemStack(var5, 9, 45, false)) {
+         } else if(i >= 5 && i < 9) {
+            if(!this.mergeItemStack(itemstack1, 9, 45, false)) {
                return null;
             }
-         } else if(var3.getItem() instanceof ItemArmor && !((Slot)this.inventorySlots.get(5 + ((ItemArmor)var3.getItem()).armorType)).getHasStack()) {
-            int var6 = 5 + ((ItemArmor)var3.getItem()).armorType;
-            if(!this.mergeItemStack(var5, var6, var6 + 1, false)) {
+         } else if(itemstack.getItem() instanceof ItemArmor && !((Slot)this.inventorySlots.get(5 + ((ItemArmor)itemstack.getItem()).armorType)).getHasStack()) {
+            int j = 5 + ((ItemArmor)itemstack.getItem()).armorType;
+            if(!this.mergeItemStack(itemstack1, j, j + 1, false)) {
                return null;
             }
-         } else if(var2 >= 9 && var2 < 36) {
-            if(!this.mergeItemStack(var5, 36, 45, false)) {
+         } else if(i >= 9 && i < 36) {
+            if(!this.mergeItemStack(itemstack1, 36, 45, false)) {
                return null;
             }
-         } else if(var2 >= 36 && var2 < 45) {
-            if(!this.mergeItemStack(var5, 9, 36, false)) {
+         } else if(i >= 36 && i < 45) {
+            if(!this.mergeItemStack(itemstack1, 9, 36, false)) {
                return null;
             }
-         } else if(!this.mergeItemStack(var5, 9, 45, false)) {
+         } else if(!this.mergeItemStack(itemstack1, 9, 45, false)) {
             return null;
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
 
-         if(var5.stackSize == var3.stackSize) {
+         if(itemstack1.stackSize == itemstack.stackSize) {
             return null;
          }
 
-         var4.onPickupFromSlot(var1, var5);
+         slot.onPickupFromSlot(entityhuman, itemstack1);
       }
 
-      return var3;
+      return itemstack;
+   }
+
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity != null) {
+         return this.bukkitEntity;
+      } else {
+         CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftMatrix, this.craftResult);
+         this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+         return this.bukkitEntity;
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ContainerRepair.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerRepair.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerRepair.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerRepair.java
--- mcp-mcdev/net/minecraft/src/ContainerRepair.java	2012-11-29 21:15:10.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerRepair.java	2012-11-29 20:44:29.000000000 -0800
@@ -17,6 +17,8 @@
 import net.minecraft.src.Slot;
 import net.minecraft.src.SlotRepair;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftInventoryAnvil;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class ContainerRepair extends Container {
 
@@ -30,142 +32,145 @@
    private int field_82856_l = 0;
    private String field_82857_m;
    private final EntityPlayer thePlayer;
+   private CraftInventoryView bukkitEntity = null;
+   private InventoryPlayer player;
 
 
-   public ContainerRepair(InventoryPlayer var1, World var2, int var3, int var4, int var5, EntityPlayer var6) {
-      this.theWorld = var2;
-      this.field_82861_i = var3;
-      this.field_82858_j = var4;
-      this.field_82859_k = var5;
-      this.thePlayer = var6;
+   public ContainerRepair(InventoryPlayer playerinventory, World world, int i, int j, int k, EntityPlayer entityhuman) {
+      this.player = playerinventory;
+      this.theWorld = world;
+      this.field_82861_i = i;
+      this.field_82858_j = j;
+      this.field_82859_k = k;
+      this.thePlayer = entityhuman;
       this.addSlotToContainer(new Slot(this.inputSlots, 0, 27, 47));
       this.addSlotToContainer(new Slot(this.inputSlots, 1, 76, 47));
-      this.addSlotToContainer(new SlotRepair(this, this.outputSlot, 2, 134, 47, var2, var3, var4, var5));
+      this.addSlotToContainer(new SlotRepair(this, this.outputSlot, 2, 134, 47, world, i, j, k));
 
-      int var7;
-      for(var7 = 0; var7 < 3; ++var7) {
-         for(int var8 = 0; var8 < 9; ++var8) {
-            this.addSlotToContainer(new Slot(var1, var8 + var7 * 9 + 9, 8 + var8 * 18, 84 + var7 * 18));
+      int l;
+      for(l = 0; l < 3; ++l) {
+         for(int i1 = 0; i1 < 9; ++i1) {
+            this.addSlotToContainer(new Slot(playerinventory, i1 + l * 9 + 9, 8 + i1 * 18, 84 + l * 18));
          }
       }
 
-      for(var7 = 0; var7 < 9; ++var7) {
-         this.addSlotToContainer(new Slot(var1, var7, 8 + var7 * 18, 142));
+      for(l = 0; l < 9; ++l) {
+         this.addSlotToContainer(new Slot(playerinventory, l, 8 + l * 18, 142));
       }
 
    }
 
-   public void onCraftMatrixChanged(IInventory var1) {
-      super.onCraftMatrixChanged(var1);
-      if(var1 == this.inputSlots) {
+   public void onCraftMatrixChanged(IInventory iinventory) {
+      super.onCraftMatrixChanged(iinventory);
+      if(iinventory == this.inputSlots) {
          this.func_82848_d();
       }
 
    }
 
    public void func_82848_d() {
-      ItemStack var1 = this.inputSlots.getStackInSlot(0);
+      ItemStack itemstack = this.inputSlots.getStackInSlot(0);
       this.maximumCost = 0;
-      int var2 = 0;
-      byte var3 = 0;
-      int var4 = 0;
-      if(var1 == null) {
+      int i = 0;
+      byte b0 = 0;
+      int j = 0;
+      if(itemstack == null) {
          this.outputSlot.setInventorySlotContents(0, (ItemStack)null);
          this.maximumCost = 0;
       } else {
-         ItemStack var5 = var1.copy();
-         ItemStack var6 = this.inputSlots.getStackInSlot(1);
-         Map var7 = EnchantmentHelper.getEnchantments(var5);
-         int var18 = var3 + var1.getRepairCost() + (var6 == null?0:var6.getRepairCost());
+         ItemStack itemstack1 = itemstack.copy();
+         ItemStack itemstack2 = this.inputSlots.getStackInSlot(1);
+         Map map = EnchantmentHelper.getEnchantments(itemstack1);
+         int k = b0 + itemstack.getRepairCost() + (itemstack2 == null?0:itemstack2.getRepairCost());
          this.field_82856_l = 0;
-         int var8;
-         int var9;
-         int var10;
-         int var12;
-         Enchantment var21;
-         Iterator var20;
-         if(var6 != null) {
-            if(var5.isItemStackDamageable() && Item.itemsList[var5.itemID].getIsRepairable(var1, var6)) {
-               var8 = Math.min(var5.getItemDamageForDisplay(), var5.getMaxDamage() / 4);
-               if(var8 <= 0) {
+         int l;
+         int i1;
+         int j1;
+         int k1;
+         Iterator iterator;
+         Enchantment enchantment;
+         if(itemstack2 != null) {
+            if(itemstack1.isItemStackDamageable() && Item.itemsList[itemstack1.itemID].getIsRepairable(itemstack, itemstack2)) {
+               l = Math.min(itemstack1.getItemDamageForDisplay(), itemstack1.getMaxDamage() / 4);
+               if(l <= 0) {
                   this.outputSlot.setInventorySlotContents(0, (ItemStack)null);
                   this.maximumCost = 0;
                   return;
                }
 
-               for(var9 = 0; var8 > 0 && var9 < var6.stackSize; ++var9) {
-                  var10 = var5.getItemDamageForDisplay() - var8;
-                  var5.setItemDamage(var10);
-                  var2 += Math.max(1, var8 / 100) + var7.size();
-                  var8 = Math.min(var5.getItemDamageForDisplay(), var5.getMaxDamage() / 4);
+               for(i1 = 0; l > 0 && i1 < itemstack2.stackSize; ++i1) {
+                  j1 = itemstack1.getItemDamageForDisplay() - l;
+                  itemstack1.setItemDamage(j1);
+                  i += Math.max(1, l / 100) + map.size();
+                  l = Math.min(itemstack1.getItemDamageForDisplay(), itemstack1.getMaxDamage() / 4);
                }
 
-               this.field_82856_l = var9;
+               this.field_82856_l = i1;
             } else {
-               if(var5.itemID != var6.itemID || !var5.isItemStackDamageable()) {
+               if(itemstack1.itemID != itemstack2.itemID || !itemstack1.isItemStackDamageable()) {
                   this.outputSlot.setInventorySlotContents(0, (ItemStack)null);
                   this.maximumCost = 0;
                   return;
                }
 
-               if(var5.isItemStackDamageable()) {
-                  var8 = var1.getMaxDamage() - var1.getItemDamageForDisplay();
-                  var9 = var6.getMaxDamage() - var6.getItemDamageForDisplay();
-                  var10 = var9 + var5.getMaxDamage() * 12 / 100;
-                  int var11 = var8 + var10;
-                  var12 = var5.getMaxDamage() - var11;
-                  if(var12 < 0) {
-                     var12 = 0;
+               if(itemstack1.isItemStackDamageable()) {
+                  l = itemstack.getMaxDamage() - itemstack.getItemDamageForDisplay();
+                  i1 = itemstack2.getMaxDamage() - itemstack2.getItemDamageForDisplay();
+                  j1 = i1 + itemstack1.getMaxDamage() * 12 / 100;
+                  int b2 = l + j1;
+                  k1 = itemstack1.getMaxDamage() - b2;
+                  if(k1 < 0) {
+                     k1 = 0;
                   }
 
-                  if(var12 < var5.getItemDamage()) {
-                     var5.setItemDamage(var12);
-                     var2 += Math.max(1, var10 / 100);
+                  if(k1 < itemstack1.getItemDamage()) {
+                     itemstack1.setItemDamage(k1);
+                     i += Math.max(1, j1 / 100);
                   }
                }
 
-               Map var19 = EnchantmentHelper.getEnchantments(var6);
-               var20 = var19.keySet().iterator();
+               Map var22 = EnchantmentHelper.getEnchantments(itemstack2);
+               iterator = var22.keySet().iterator();
 
-               while(var20.hasNext()) {
-                  var10 = ((Integer)var20.next()).intValue();
-                  var21 = Enchantment.enchantmentsList[var10];
-                  var12 = var7.containsKey(Integer.valueOf(var10))?((Integer)var7.get(Integer.valueOf(var10))).intValue():0;
-                  int var13 = ((Integer)var19.get(Integer.valueOf(var10))).intValue();
-                  int var10000;
-                  if(var12 == var13) {
-                     ++var13;
-                     var10000 = var13;
+               while(iterator.hasNext()) {
+                  j1 = ((Integer)iterator.next()).intValue();
+                  enchantment = Enchantment.enchantmentsList[j1];
+                  k1 = map.containsKey(Integer.valueOf(j1))?((Integer)map.get(Integer.valueOf(j1))).intValue():0;
+                  int i2 = ((Integer)var22.get(Integer.valueOf(j1))).intValue();
+                  int j2;
+                  if(k1 == i2) {
+                     ++i2;
+                     j2 = i2;
                   } else {
-                     var10000 = Math.max(var13, var12);
+                     j2 = Math.max(i2, k1);
                   }
 
-                  var13 = var10000;
-                  int var14 = var13 - var12;
-                  boolean var15 = true;
-                  Iterator var16 = var7.keySet().iterator();
-
-                  while(var16.hasNext()) {
-                     int var17 = ((Integer)var16.next()).intValue();
-                     if(var17 != var10 && !var21.canApplyTogether(Enchantment.enchantmentsList[var17])) {
-                        var15 = false;
-                        var2 += var14;
+                  i2 = j2;
+                  int k2 = j2 - k1;
+                  boolean flag = true;
+                  Iterator iterator1 = map.keySet().iterator();
+
+                  while(iterator1.hasNext()) {
+                     int b1 = ((Integer)iterator1.next()).intValue();
+                     if(b1 != j1 && !enchantment.canApplyTogether(Enchantment.enchantmentsList[b1])) {
+                        flag = false;
+                        i += k2;
                      }
                   }
 
-                  if(var15) {
-                     if(var13 > var21.getMaxLevel()) {
-                        var13 = var21.getMaxLevel();
+                  if(flag) {
+                     if(j2 > enchantment.getMaxLevel()) {
+                        i2 = enchantment.getMaxLevel();
                      }
 
-                     var7.put(Integer.valueOf(var10), Integer.valueOf(var13));
-                     byte var23 = 0;
-                     switch(var21.getWeight()) {
+                     map.put(Integer.valueOf(j1), Integer.valueOf(i2));
+                     byte var24 = 0;
+                     switch(enchantment.getWeight()) {
                      case 1:
-                        var23 = 8;
+                        var24 = 8;
                         break;
                      case 2:
-                        var23 = 4;
+                        var24 = 4;
                      case 3:
                      case 4:
                      case 6:
@@ -175,43 +180,43 @@
                      default:
                         break;
                      case 5:
-                        var23 = 2;
+                        var24 = 2;
                         break;
                      case 10:
-                        var23 = 1;
+                        var24 = 1;
                      }
 
-                     var2 += var23 * var14;
+                     i += var24 * k2;
                   }
                }
             }
          }
 
-         if(this.field_82857_m != null && !this.field_82857_m.equalsIgnoreCase(var1.getDisplayName()) && this.field_82857_m.length() > 0) {
-            var4 = var1.isItemStackDamageable()?7:var1.stackSize * 5;
-            var2 += var4;
-            if(var1.hasDisplayName()) {
-               var18 += var4 / 2;
+         if(this.field_82857_m != null && !this.field_82857_m.equalsIgnoreCase(itemstack.getDisplayName()) && this.field_82857_m.length() > 0) {
+            j = itemstack.isItemStackDamageable()?7:itemstack.stackSize * 5;
+            i += j;
+            if(itemstack.hasDisplayName()) {
+               k += j / 2;
             }
 
-            var5.setItemName(this.field_82857_m);
+            itemstack1.setItemName(this.field_82857_m);
          }
 
-         var8 = 0;
+         l = 0;
 
-         byte var22;
-         for(var20 = var7.keySet().iterator(); var20.hasNext(); var18 += var8 + var12 * var22) {
-            var10 = ((Integer)var20.next()).intValue();
-            var21 = Enchantment.enchantmentsList[var10];
-            var12 = ((Integer)var7.get(Integer.valueOf(var10))).intValue();
-            var22 = 0;
-            ++var8;
-            switch(var21.getWeight()) {
+         byte var23;
+         for(iterator = map.keySet().iterator(); iterator.hasNext(); k += l + k1 * var23) {
+            j1 = ((Integer)iterator.next()).intValue();
+            enchantment = Enchantment.enchantmentsList[j1];
+            k1 = ((Integer)map.get(Integer.valueOf(j1))).intValue();
+            var23 = 0;
+            ++l;
+            switch(enchantment.getWeight()) {
             case 1:
-               var22 = 8;
+               var23 = 8;
                break;
             case 2:
-               var22 = 4;
+               var23 = 4;
             case 3:
             case 4:
             case 6:
@@ -221,111 +226,111 @@
             default:
                break;
             case 5:
-               var22 = 2;
+               var23 = 2;
                break;
             case 10:
-               var22 = 1;
+               var23 = 1;
             }
          }
 
-         this.maximumCost = var18 + var2;
-         if(var2 <= 0) {
-            var5 = null;
+         this.maximumCost = k + i;
+         if(i <= 0) {
+            itemstack1 = null;
          }
 
-         if(var4 == var2 && var4 > 0 && this.maximumCost >= 40) {
-            System.out.println("Naming an item only, cost too high; giving discount to cap cost to 39 levels");
+         if(j == i && j > 0 && this.maximumCost >= 40) {
             this.maximumCost = 39;
          }
 
          if(this.maximumCost >= 40 && !this.thePlayer.capabilities.isCreativeMode) {
-            var5 = null;
+            itemstack1 = null;
          }
 
-         if(var5 != null) {
-            var9 = var5.getRepairCost();
-            if(var6 != null && var9 < var6.getRepairCost()) {
-               var9 = var6.getRepairCost();
+         if(itemstack1 != null) {
+            i1 = itemstack1.getRepairCost();
+            if(itemstack2 != null && i1 < itemstack2.getRepairCost()) {
+               i1 = itemstack2.getRepairCost();
             }
 
-            if(var5.hasDisplayName()) {
-               var9 -= 9;
+            if(itemstack1.hasDisplayName()) {
+               i1 -= 9;
             }
 
-            if(var9 < 0) {
-               var9 = 0;
+            if(i1 < 0) {
+               i1 = 0;
             }
 
-            var9 += 2;
-            var5.setRepairCost(var9);
-            EnchantmentHelper.setEnchantments(var7, var5);
+            i1 += 2;
+            itemstack1.setRepairCost(i1);
+            EnchantmentHelper.setEnchantments(map, itemstack1);
          }
 
-         this.outputSlot.setInventorySlotContents(0, var5);
+         this.outputSlot.setInventorySlotContents(0, itemstack1);
          this.updateCraftingResults();
       }
+
    }
 
-   public void onCraftGuiOpened(ICrafting var1) {
-      super.onCraftGuiOpened(var1);
-      var1.sendProgressBarUpdate(this, 0, this.maximumCost);
+   public void onCraftGuiOpened(ICrafting icrafting) {
+      super.onCraftGuiOpened(icrafting);
+      icrafting.sendProgressBarUpdate(this, 0, this.maximumCost);
    }
 
-   public void onCraftGuiClosed(EntityPlayer var1) {
-      super.onCraftGuiClosed(var1);
+   public void onCraftGuiClosed(EntityPlayer entityhuman) {
+      super.onCraftGuiClosed(entityhuman);
       if(!this.theWorld.isRemote) {
-         for(int var2 = 0; var2 < this.inputSlots.getSizeInventory(); ++var2) {
-            ItemStack var3 = this.inputSlots.getStackInSlotOnClosing(var2);
-            if(var3 != null) {
-               var1.dropPlayerItem(var3);
+         for(int i = 0; i < this.inputSlots.getSizeInventory(); ++i) {
+            ItemStack itemstack = this.inputSlots.getStackInSlotOnClosing(i);
+            if(itemstack != null) {
+               entityhuman.dropPlayerItem(itemstack);
             }
          }
-
       }
+
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
-      return this.theWorld.getBlockId(this.field_82861_i, this.field_82858_j, this.field_82859_k) != Block.anvil.blockID?false:var1.getDistanceSq((double)this.field_82861_i + 0.5D, (double)this.field_82858_j + 0.5D, (double)this.field_82859_k + 0.5D) <= 64.0D;
+   public boolean canInteractWith(EntityPlayer entityhuman) {
+      return !this.checkReachable?true:(this.theWorld.getBlockId(this.field_82861_i, this.field_82858_j, this.field_82859_k) != Block.anvil.blockID?false:entityhuman.getDistanceSq((double)this.field_82861_i + 0.5D, (double)this.field_82858_j + 0.5D, (double)this.field_82859_k + 0.5D) <= 64.0D);
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if(var2 == 2) {
-            if(!this.mergeItemStack(var5, 3, 39, true)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if(i == 2) {
+            if(!this.mergeItemStack(itemstack1, 3, 39, true)) {
                return null;
             }
 
-            var4.onSlotChange(var5, var3);
-         } else if(var2 != 0 && var2 != 1) {
-            if(var2 >= 3 && var2 < 39 && !this.mergeItemStack(var5, 0, 2, false)) {
+            slot.onSlotChange(itemstack1, itemstack);
+         } else if(i != 0 && i != 1) {
+            if(i >= 3 && i < 39 && !this.mergeItemStack(itemstack1, 0, 2, false)) {
                return null;
             }
-         } else if(!this.mergeItemStack(var5, 3, 39, false)) {
+         } else if(!this.mergeItemStack(itemstack1, 3, 39, false)) {
             return null;
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
 
-         if(var5.stackSize == var3.stackSize) {
+         if(itemstack1.stackSize == itemstack.stackSize) {
             return null;
          }
 
-         var4.onPickupFromSlot(var1, var5);
+         slot.onPickupFromSlot(entityhuman, itemstack1);
       }
 
-      return var3;
+      return itemstack;
    }
 
-   public void func_82850_a(String var1) {
-      this.field_82857_m = var1;
+   public void func_82850_a(String s) {
+      this.field_82857_m = s;
       if(this.getSlot(2).getHasStack()) {
          this.getSlot(2).getStack().setItemName(this.field_82857_m);
       }
@@ -333,13 +338,21 @@
       this.func_82848_d();
    }
 
-   // $FF: synthetic method
-   static IInventory func_82851_a(ContainerRepair var0) {
-      return var0.inputSlots;
+   static IInventory func_82851_a(ContainerRepair containeranvil) {
+      return containeranvil.inputSlots;
    }
 
-   // $FF: synthetic method
-   static int func_82849_b(ContainerRepair var0) {
-      return var0.field_82856_l;
+   static int func_82849_b(ContainerRepair containeranvil) {
+      return containeranvil.field_82856_l;
+   }
+
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity != null) {
+         return this.bukkitEntity;
+      } else {
+         CraftInventoryAnvil inventory = new CraftInventoryAnvil(this.inputSlots);
+         this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+         return this.bukkitEntity;
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ContainerWorkbench.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerWorkbench.class differ
diff -ur mcp-mcdev/net/minecraft/src/ContainerWorkbench.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerWorkbench.java
--- mcp-mcdev/net/minecraft/src/ContainerWorkbench.java	2012-11-29 21:15:10.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ContainerWorkbench.java	2012-11-29 20:44:29.000000000 -0800
@@ -4,111 +4,136 @@
 import net.minecraft.src.Container;
 import net.minecraft.src.CraftingManager;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.IInventory;
 import net.minecraft.src.InventoryCraftResult;
 import net.minecraft.src.InventoryCrafting;
 import net.minecraft.src.InventoryPlayer;
 import net.minecraft.src.ItemStack;
+import net.minecraft.src.Packet103SetSlot;
 import net.minecraft.src.Slot;
 import net.minecraft.src.SlotCrafting;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class ContainerWorkbench extends Container {
 
-   public InventoryCrafting craftMatrix = new InventoryCrafting(this, 3, 3);
+   public InventoryCrafting craftMatrix;
    public IInventory craftResult = new InventoryCraftResult();
    private World worldObj;
    private int posX;
    private int posY;
    private int posZ;
+   private CraftInventoryView bukkitEntity = null;
+   private InventoryPlayer player;
 
 
-   public ContainerWorkbench(InventoryPlayer var1, World var2, int var3, int var4, int var5) {
-      this.worldObj = var2;
-      this.posX = var3;
-      this.posY = var4;
-      this.posZ = var5;
-      this.addSlotToContainer(new SlotCrafting(var1.player, this.craftMatrix, this.craftResult, 0, 124, 35));
-
-      int var6;
-      int var7;
-      for(var6 = 0; var6 < 3; ++var6) {
-         for(var7 = 0; var7 < 3; ++var7) {
-            this.addSlotToContainer(new Slot(this.craftMatrix, var7 + var6 * 3, 30 + var7 * 18, 17 + var6 * 18));
+   public ContainerWorkbench(InventoryPlayer playerinventory, World world, int i, int j, int k) {
+      this.craftMatrix = new InventoryCrafting(this, 3, 3, playerinventory.player);
+      this.craftMatrix.resultInventory = this.craftResult;
+      this.player = playerinventory;
+      this.worldObj = world;
+      this.posX = i;
+      this.posY = j;
+      this.posZ = k;
+      this.addSlotToContainer(new SlotCrafting(playerinventory.player, this.craftMatrix, this.craftResult, 0, 124, 35));
+
+      int l;
+      int i1;
+      for(l = 0; l < 3; ++l) {
+         for(i1 = 0; i1 < 3; ++i1) {
+            this.addSlotToContainer(new Slot(this.craftMatrix, i1 + l * 3, 30 + i1 * 18, 17 + l * 18));
          }
       }
 
-      for(var6 = 0; var6 < 3; ++var6) {
-         for(var7 = 0; var7 < 9; ++var7) {
-            this.addSlotToContainer(new Slot(var1, var7 + var6 * 9 + 9, 8 + var7 * 18, 84 + var6 * 18));
+      for(l = 0; l < 3; ++l) {
+         for(i1 = 0; i1 < 9; ++i1) {
+            this.addSlotToContainer(new Slot(playerinventory, i1 + l * 9 + 9, 8 + i1 * 18, 84 + l * 18));
          }
       }
 
-      for(var6 = 0; var6 < 9; ++var6) {
-         this.addSlotToContainer(new Slot(var1, var6, 8 + var6 * 18, 142));
+      for(l = 0; l < 9; ++l) {
+         this.addSlotToContainer(new Slot(playerinventory, l, 8 + l * 18, 142));
       }
 
       this.onCraftMatrixChanged(this.craftMatrix);
    }
 
-   public void onCraftMatrixChanged(IInventory var1) {
-      this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.worldObj));
+   public void onCraftMatrixChanged(IInventory iinventory) {
+      CraftingManager.getInstance().lastCraftView = this.getBukkitView();
+      ItemStack craftResult = CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.worldObj);
+      this.craftResult.setInventorySlotContents(0, craftResult);
+      if(super.crafters.size() >= 1) {
+         EntityPlayerMP player = (EntityPlayerMP)super.crafters.get(0);
+         player.playerNetServerHandler.sendPacket(new Packet103SetSlot(player.openContainer.windowId, 0, craftResult));
+      }
    }
 
-   public void onCraftGuiClosed(EntityPlayer var1) {
-      super.onCraftGuiClosed(var1);
+   public void onCraftGuiClosed(EntityPlayer entityhuman) {
+      super.onCraftGuiClosed(entityhuman);
       if(!this.worldObj.isRemote) {
-         for(int var2 = 0; var2 < 9; ++var2) {
-            ItemStack var3 = this.craftMatrix.getStackInSlotOnClosing(var2);
-            if(var3 != null) {
-               var1.dropPlayerItem(var3);
+         for(int i = 0; i < 9; ++i) {
+            ItemStack itemstack = this.craftMatrix.getStackInSlotOnClosing(i);
+            if(itemstack != null) {
+               entityhuman.dropPlayerItem(itemstack);
             }
          }
-
       }
+
    }
 
-   public boolean canInteractWith(EntityPlayer var1) {
-      return this.worldObj.getBlockId(this.posX, this.posY, this.posZ) != Block.workbench.blockID?false:var1.getDistanceSq((double)this.posX + 0.5D, (double)this.posY + 0.5D, (double)this.posZ + 0.5D) <= 64.0D;
+   public boolean canInteractWith(EntityPlayer entityhuman) {
+      return !this.checkReachable?true:(this.worldObj.getBlockId(this.posX, this.posY, this.posZ) != Block.workbench.blockID?false:entityhuman.getDistanceSq((double)this.posX + 0.5D, (double)this.posY + 0.5D, (double)this.posZ + 0.5D) <= 64.0D);
    }
 
-   public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
-      ItemStack var3 = null;
-      Slot var4 = (Slot)this.inventorySlots.get(var2);
-      if(var4 != null && var4.getHasStack()) {
-         ItemStack var5 = var4.getStack();
-         var3 = var5.copy();
-         if(var2 == 0) {
-            if(!this.mergeItemStack(var5, 10, 46, true)) {
+   public ItemStack transferStackInSlot(EntityPlayer entityhuman, int i) {
+      ItemStack itemstack = null;
+      Slot slot = (Slot)this.inventorySlots.get(i);
+      if(slot != null && slot.getHasStack()) {
+         ItemStack itemstack1 = slot.getStack();
+         itemstack = itemstack1.copy();
+         if(i == 0) {
+            if(!this.mergeItemStack(itemstack1, 10, 46, true)) {
                return null;
             }
 
-            var4.onSlotChange(var5, var3);
-         } else if(var2 >= 10 && var2 < 37) {
-            if(!this.mergeItemStack(var5, 37, 46, false)) {
+            slot.onSlotChange(itemstack1, itemstack);
+         } else if(i >= 10 && i < 37) {
+            if(!this.mergeItemStack(itemstack1, 37, 46, false)) {
                return null;
             }
-         } else if(var2 >= 37 && var2 < 46) {
-            if(!this.mergeItemStack(var5, 10, 37, false)) {
+         } else if(i >= 37 && i < 46) {
+            if(!this.mergeItemStack(itemstack1, 10, 37, false)) {
                return null;
             }
-         } else if(!this.mergeItemStack(var5, 10, 46, false)) {
+         } else if(!this.mergeItemStack(itemstack1, 10, 46, false)) {
             return null;
          }
 
-         if(var5.stackSize == 0) {
-            var4.putStack((ItemStack)null);
+         if(itemstack1.stackSize == 0) {
+            slot.putStack((ItemStack)null);
          } else {
-            var4.onSlotChanged();
+            slot.onSlotChanged();
          }
 
-         if(var5.stackSize == var3.stackSize) {
+         if(itemstack1.stackSize == itemstack.stackSize) {
             return null;
          }
 
-         var4.onPickupFromSlot(var1, var5);
+         slot.onPickupFromSlot(entityhuman, itemstack1);
       }
 
-      return var3;
+      return itemstack;
+   }
+
+   public CraftInventoryView getBukkitView() {
+      if(this.bukkitEntity != null) {
+         return this.bukkitEntity;
+      } else {
+         CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftMatrix, this.craftResult);
+         this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+         return this.bukkitEntity;
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/CraftingManager.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CraftingManager.class differ
diff -ur mcp-mcdev/net/minecraft/src/CraftingManager.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CraftingManager.java
--- mcp-mcdev/net/minecraft/src/CraftingManager.java	2012-11-29 21:15:10.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CraftingManager.java	2012-11-29 20:44:29.000000000 -0800
@@ -23,18 +23,22 @@
 import net.minecraft.src.ShapedRecipes;
 import net.minecraft.src.ShapelessRecipes;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.inventory.InventoryView;
 
 public class CraftingManager {
 
    private static final CraftingManager instance = new CraftingManager();
-   private List recipes = new ArrayList();
+   public List recipes = new ArrayList();
+   public IRecipe lastRecipe;
+   public InventoryView lastCraftView;
 
 
    public static final CraftingManager getInstance() {
       return instance;
    }
 
-   private CraftingManager() {
+   public CraftingManager() {
       (new RecipesTools()).addRecipes(this);
       (new RecipesWeapons()).addRecipes(this);
       (new RecipesIngots()).addRecipes(this);
@@ -137,122 +141,135 @@
       this.addShapelessRecipe(new ItemStack(Item.eyeOfEnder, 1), new Object[]{Item.enderPearl, Item.blazePowder});
       this.addShapelessRecipe(new ItemStack(Item.fireballCharge, 3), new Object[]{Item.gunpowder, Item.blazePowder, Item.coal});
       this.addShapelessRecipe(new ItemStack(Item.fireballCharge, 3), new Object[]{Item.gunpowder, Item.blazePowder, new ItemStack(Item.coal, 1, 1)});
-      Collections.sort(this.recipes, new RecipeSorter(this));
+      this.sort();
       System.out.println(this.recipes.size() + " recipes");
    }
 
-   void addRecipe(ItemStack var1, Object ... var2) {
-      String var3 = "";
-      int var4 = 0;
-      int var5 = 0;
-      int var6 = 0;
-      if(var2[var4] instanceof String[]) {
-         String[] var7 = (String[])((String[])var2[var4++]);
-
-         for(int var8 = 0; var8 < var7.length; ++var8) {
-            String var9 = var7[var8];
-            ++var6;
-            var5 = var9.length();
-            var3 = var3 + var9;
+   public void sort() {
+      Collections.sort(this.recipes, new RecipeSorter(this));
+   }
+
+   public void addRecipe(ItemStack itemstack, Object ... aobject) {
+      String s = "";
+      int i = 0;
+      int j = 0;
+      int k = 0;
+      if(aobject[i] instanceof String[]) {
+         String[] hashmap = (String[])((String[])((String[])aobject[i++]));
+
+         for(int aitemstack = 0; aitemstack < hashmap.length; ++aitemstack) {
+            String i1 = hashmap[aitemstack];
+            ++k;
+            j = i1.length();
+            s = s + i1;
          }
       } else {
-         while(var2[var4] instanceof String) {
-            String var11 = (String)var2[var4++];
-            ++var6;
-            var5 = var11.length();
-            var3 = var3 + var11;
+         while(aobject[i] instanceof String) {
+            String var11 = (String)aobject[i++];
+            ++k;
+            j = var11.length();
+            s = s + var11;
          }
       }
 
       HashMap var12;
-      for(var12 = new HashMap(); var4 < var2.length; var4 += 2) {
-         Character var13 = (Character)var2[var4];
+      for(var12 = new HashMap(); i < aobject.length; i += 2) {
+         Character var13 = (Character)aobject[i];
          ItemStack var14 = null;
-         if(var2[var4 + 1] instanceof Item) {
-            var14 = new ItemStack((Item)var2[var4 + 1]);
-         } else if(var2[var4 + 1] instanceof Block) {
-            var14 = new ItemStack((Block)var2[var4 + 1], 1, -1);
-         } else if(var2[var4 + 1] instanceof ItemStack) {
-            var14 = (ItemStack)var2[var4 + 1];
+         if(aobject[i + 1] instanceof Item) {
+            var14 = new ItemStack((Item)aobject[i + 1]);
+         } else if(aobject[i + 1] instanceof Block) {
+            var14 = new ItemStack((Block)aobject[i + 1], 1, -1);
+         } else if(aobject[i + 1] instanceof ItemStack) {
+            var14 = (ItemStack)aobject[i + 1];
          }
 
          var12.put(var13, var14);
       }
 
-      ItemStack[] var15 = new ItemStack[var5 * var6];
+      ItemStack[] var15 = new ItemStack[j * k];
 
-      for(int var16 = 0; var16 < var5 * var6; ++var16) {
-         char var10 = var3.charAt(var16);
-         if(var12.containsKey(Character.valueOf(var10))) {
-            var15[var16] = ((ItemStack)var12.get(Character.valueOf(var10))).copy();
+      for(int var16 = 0; var16 < j * k; ++var16) {
+         char c0 = s.charAt(var16);
+         if(var12.containsKey(Character.valueOf(c0))) {
+            var15[var16] = ((ItemStack)var12.get(Character.valueOf(c0))).copy();
          } else {
             var15[var16] = null;
          }
       }
 
-      this.recipes.add(new ShapedRecipes(var5, var6, var15, var1));
+      this.recipes.add(new ShapedRecipes(j, k, var15, itemstack));
    }
 
-   void addShapelessRecipe(ItemStack var1, Object ... var2) {
-      ArrayList var3 = new ArrayList();
-      Object[] var4 = var2;
-      int var5 = var2.length;
-
-      for(int var6 = 0; var6 < var5; ++var6) {
-         Object var7 = var4[var6];
-         if(var7 instanceof ItemStack) {
-            var3.add(((ItemStack)var7).copy());
-         } else if(var7 instanceof Item) {
-            var3.add(new ItemStack((Item)var7));
+   public void addShapelessRecipe(ItemStack itemstack, Object ... aobject) {
+      ArrayList arraylist = new ArrayList();
+      Object[] aobject1 = aobject;
+      int i = aobject.length;
+
+      for(int j = 0; j < i; ++j) {
+         Object object = aobject1[j];
+         if(object instanceof ItemStack) {
+            arraylist.add(((ItemStack)object).copy());
+         } else if(object instanceof Item) {
+            arraylist.add(new ItemStack((Item)object));
          } else {
-            if(!(var7 instanceof Block)) {
+            if(!(object instanceof Block)) {
                throw new RuntimeException("Invalid shapeless recipy!");
             }
 
-            var3.add(new ItemStack((Block)var7));
+            arraylist.add(new ItemStack((Block)object));
          }
       }
 
-      this.recipes.add(new ShapelessRecipes(var1, var3));
+      this.recipes.add(new ShapelessRecipes(itemstack, arraylist));
    }
 
-   public ItemStack findMatchingRecipe(InventoryCrafting var1, World var2) {
-      int var3 = 0;
-      ItemStack var4 = null;
-      ItemStack var5 = null;
-
-      int var6;
-      for(var6 = 0; var6 < var1.getSizeInventory(); ++var6) {
-         ItemStack var7 = var1.getStackInSlot(var6);
-         if(var7 != null) {
-            if(var3 == 0) {
-               var4 = var7;
+   public ItemStack findMatchingRecipe(InventoryCrafting inventorycrafting, World world) {
+      int i = 0;
+      ItemStack itemstack = null;
+      ItemStack itemstack1 = null;
+
+      int j;
+      for(j = 0; j < inventorycrafting.getSizeInventory(); ++j) {
+         ItemStack irecipe = inventorycrafting.getStackInSlot(j);
+         if(irecipe != null) {
+            if(i == 0) {
+               itemstack = irecipe;
             }
 
-            if(var3 == 1) {
-               var5 = var7;
+            if(i == 1) {
+               itemstack1 = irecipe;
             }
 
-            ++var3;
+            ++i;
          }
       }
 
-      if(var3 == 2 && var4.itemID == var5.itemID && var4.stackSize == 1 && var5.stackSize == 1 && Item.itemsList[var4.itemID].isDamageable()) {
-         Item var11 = Item.itemsList[var4.itemID];
-         int var13 = var11.getMaxDamage() - var4.getItemDamageForDisplay();
-         int var8 = var11.getMaxDamage() - var5.getItemDamageForDisplay();
-         int var9 = var13 + var8 + var11.getMaxDamage() * 5 / 100;
-         int var10 = var11.getMaxDamage() - var9;
-         if(var10 < 0) {
-            var10 = 0;
+      if(i == 2 && itemstack.itemID == itemstack1.itemID && itemstack.stackSize == 1 && itemstack1.stackSize == 1 && Item.itemsList[itemstack.itemID].isDamageable()) {
+         Item var16 = Item.itemsList[itemstack.itemID];
+         int var17 = var16.getMaxDamage() - itemstack.getItemDamageForDisplay();
+         int l = var16.getMaxDamage() - itemstack1.getItemDamageForDisplay();
+         int i1 = var17 + l + var16.getMaxDamage() * 5 / 100;
+         int j1 = var16.getMaxDamage() - i1;
+         if(j1 < 0) {
+            j1 = 0;
          }
 
-         return new ItemStack(var4.itemID, 1, var10);
+         ItemStack result1 = new ItemStack(itemstack.itemID, 1, j1);
+         ArrayList ingredients = new ArrayList();
+         ingredients.add(itemstack.copy());
+         ingredients.add(itemstack1.copy());
+         ShapelessRecipes recipe = new ShapelessRecipes(result1.copy(), ingredients);
+         inventorycrafting.currentRecipe = recipe;
+         result1 = CraftEventFactory.callPreCraftEvent(inventorycrafting, result1, this.lastCraftView, true);
+         return result1;
       } else {
-         for(var6 = 0; var6 < this.recipes.size(); ++var6) {
-            IRecipe var12 = (IRecipe)this.recipes.get(var6);
-            if(var12.matches(var1, var2)) {
-               return var12.getCraftingResult(var1);
+         for(j = 0; j < this.recipes.size(); ++j) {
+            IRecipe var15 = (IRecipe)this.recipes.get(j);
+            if(var15.matches(inventorycrafting, world)) {
+               inventorycrafting.currentRecipe = var15;
+               ItemStack result = var15.getCraftingResult(inventorycrafting);
+               return CraftEventFactory.callPreCraftEvent(inventorycrafting, result, this.lastCraftView, false);
             }
          }
 
Binary files mcp-mcdev/net/minecraft/src/CrashReport.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CrashReport.class differ
diff -ur mcp-mcdev/net/minecraft/src/CrashReport.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CrashReport.java
--- mcp-mcdev/net/minecraft/src/CrashReport.java	2012-11-29 21:15:09.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CrashReport.java	2012-11-29 20:44:29.000000000 -0800
@@ -23,6 +23,7 @@
 import net.minecraft.src.CallableSuspiciousClasses;
 import net.minecraft.src.CrashReportCategory;
 import net.minecraft.src.ReportedException;
+import org.bukkit.craftbukkit.CraftCrashReport;
 
 public class CrashReport {
 
@@ -35,9 +36,9 @@
    private StackTraceElement[] field_85060_g = new StackTraceElement[0];
 
 
-   public CrashReport(String var1, Throwable var2) {
-      this.description = var1;
-      this.cause = var2;
+   public CrashReport(String s, Throwable throwable) {
+      this.description = s;
+      this.cause = throwable;
       this.populateEnvironment();
    }
 
@@ -51,6 +52,7 @@
       this.field_85061_c.addCrashSectionCallable("AABB Pool Size", new CallableCrashMemoryReport(this));
       this.field_85061_c.addCrashSectionCallable("Suspicious classes", new CallableSuspiciousClasses(this));
       this.field_85061_c.addCrashSectionCallable("IntCache", new CallableIntCache(this));
+      this.field_85061_c.addCrashSectionCallable("CraftBukkit Information", new CraftCrashReport());
    }
 
    public String getDescription() {
@@ -61,51 +63,51 @@
       return this.cause;
    }
 
-   public void getSectionsInStringBuilder(StringBuilder var1) {
+   public void getSectionsInStringBuilder(StringBuilder stringbuilder) {
       if(this.field_85060_g != null && this.field_85060_g.length > 0) {
-         var1.append("-- Head --\n");
-         var1.append("Stacktrace:\n");
-         StackTraceElement[] var2 = this.field_85060_g;
-         int var3 = var2.length;
-
-         for(int var4 = 0; var4 < var3; ++var4) {
-            StackTraceElement var5 = var2[var4];
-            var1.append("\t").append("at ").append(var5.toString());
-            var1.append("\n");
+         stringbuilder.append("-- Head --\n");
+         stringbuilder.append("Stacktrace:\n");
+         StackTraceElement[] iterator = this.field_85060_g;
+         int crashreportsystemdetails = iterator.length;
+
+         for(int j = 0; j < crashreportsystemdetails; ++j) {
+            StackTraceElement stacktraceelement = iterator[j];
+            stringbuilder.append("\t").append("at ").append(stacktraceelement.toString());
+            stringbuilder.append("\n");
          }
 
-         var1.append("\n");
+         stringbuilder.append("\n");
       }
 
       Iterator var6 = this.crashReportSections.iterator();
 
       while(var6.hasNext()) {
          CrashReportCategory var7 = (CrashReportCategory)var6.next();
-         var7.func_85072_a(var1);
-         var1.append("\n\n");
+         var7.func_85072_a(stringbuilder);
+         stringbuilder.append("\n\n");
       }
 
-      this.field_85061_c.func_85072_a(var1);
+      this.field_85061_c.func_85072_a(stringbuilder);
    }
 
    public String getCauseStackTraceOrString() {
-      StringWriter var1 = null;
-      PrintWriter var2 = null;
-      String var3 = this.cause.toString();
+      StringWriter stringwriter = null;
+      PrintWriter printwriter = null;
+      String s = this.cause.toString();
 
       try {
-         var1 = new StringWriter();
-         var2 = new PrintWriter(var1);
-         this.cause.printStackTrace(var2);
-         var3 = var1.toString();
+         stringwriter = new StringWriter();
+         printwriter = new PrintWriter(stringwriter);
+         this.cause.printStackTrace(printwriter);
+         s = stringwriter.toString();
       } finally {
          try {
-            if(var1 != null) {
-               var1.close();
+            if(stringwriter != null) {
+               stringwriter.close();
             }
 
-            if(var2 != null) {
-               var2.close();
+            if(printwriter != null) {
+               printwriter.close();
             }
          } catch (IOException var10) {
             ;
@@ -113,49 +115,49 @@
 
       }
 
-      return var3;
+      return s;
    }
 
    public String getCompleteReport() {
-      StringBuilder var1 = new StringBuilder();
-      var1.append("---- Minecraft Crash Report ----\n");
-      var1.append("// ");
-      var1.append(getWittyComment());
-      var1.append("\n\n");
-      var1.append("Time: ");
-      var1.append((new SimpleDateFormat()).format(new Date()));
-      var1.append("\n");
-      var1.append("Description: ");
-      var1.append(this.description);
-      var1.append("\n\n");
-      var1.append(this.getCauseStackTraceOrString());
-      var1.append("\n\nA detailed walkthrough of the error, its code path and all known details is as follows:\n");
-
-      for(int var2 = 0; var2 < 87; ++var2) {
-         var1.append("-");
-      }
-
-      var1.append("\n\n");
-      this.getSectionsInStringBuilder(var1);
-      return var1.toString();
+      StringBuilder stringbuilder = new StringBuilder();
+      stringbuilder.append("---- Minecraft Crash Report ----\n");
+      stringbuilder.append("// ");
+      stringbuilder.append(getWittyComment());
+      stringbuilder.append("\n\n");
+      stringbuilder.append("Time: ");
+      stringbuilder.append((new SimpleDateFormat()).format(new Date()));
+      stringbuilder.append("\n");
+      stringbuilder.append("Description: ");
+      stringbuilder.append(this.description);
+      stringbuilder.append("\n\n");
+      stringbuilder.append(this.getCauseStackTraceOrString());
+      stringbuilder.append("\n\nA detailed walkthrough of the error, its code path and all known details is as follows:\n");
+
+      for(int i = 0; i < 87; ++i) {
+         stringbuilder.append("-");
+      }
+
+      stringbuilder.append("\n\n");
+      this.getSectionsInStringBuilder(stringbuilder);
+      return stringbuilder.toString();
    }
 
-   public boolean saveToFile(File var1) {
+   public boolean saveToFile(File file1) {
       if(this.crashReportFile != null) {
          return false;
       } else {
-         if(var1.getParentFile() != null) {
-            var1.getParentFile().mkdirs();
+         if(file1.getParentFile() != null) {
+            file1.getParentFile().mkdirs();
          }
 
          try {
-            FileWriter var2 = new FileWriter(var1);
-            var2.write(this.getCompleteReport());
-            var2.close();
-            this.crashReportFile = var1;
+            FileWriter throwable = new FileWriter(file1);
+            throwable.write(this.getCompleteReport());
+            throwable.close();
+            this.crashReportFile = file1;
             return true;
          } catch (Throwable var3) {
-            Logger.getLogger("Minecraft").log(Level.SEVERE, "Could not save crash report to " + var1, var3);
+            Logger.getLogger("Minecraft").log(Level.SEVERE, "Could not save crash report to " + file1, var3);
             return false;
          }
       }
@@ -165,58 +167,58 @@
       return this.field_85061_c;
    }
 
-   public CrashReportCategory func_85058_a(String var1) {
-      return this.func_85057_a(var1, 1);
+   public CrashReportCategory func_85058_a(String s) {
+      return this.func_85057_a(s, 1);
    }
 
-   public CrashReportCategory func_85057_a(String var1, int var2) {
-      CrashReportCategory var3 = new CrashReportCategory(this, var1);
+   public CrashReportCategory func_85057_a(String s, int i) {
+      CrashReportCategory crashreportsystemdetails = new CrashReportCategory(this, s);
       if(this.field_85059_f) {
-         int var4 = var3.func_85073_a(var2);
-         StackTraceElement[] var5 = this.cause.getStackTrace();
-         StackTraceElement var6 = null;
-         StackTraceElement var7 = null;
-         if(var5 != null && var5.length - var4 < var5.length) {
-            var6 = var5[var5.length - var4];
-            if(var5.length + 1 - var4 < var5.length) {
-               var7 = var5[var5.length + 1 - var4];
+         int j = crashreportsystemdetails.func_85073_a(i);
+         StackTraceElement[] astacktraceelement = this.cause.getStackTrace();
+         StackTraceElement stacktraceelement = null;
+         StackTraceElement stacktraceelement1 = null;
+         if(astacktraceelement != null && astacktraceelement.length - j < astacktraceelement.length) {
+            stacktraceelement = astacktraceelement[astacktraceelement.length - j];
+            if(astacktraceelement.length + 1 - j < astacktraceelement.length) {
+               stacktraceelement1 = astacktraceelement[astacktraceelement.length + 1 - j];
             }
          }
 
-         this.field_85059_f = var3.func_85069_a(var6, var7);
-         if(var4 > 0 && !this.crashReportSections.isEmpty()) {
-            CrashReportCategory var8 = (CrashReportCategory)this.crashReportSections.get(this.crashReportSections.size() - 1);
-            var8.func_85070_b(var4);
-         } else if(var5 != null && var5.length >= var4) {
-            this.field_85060_g = new StackTraceElement[var5.length - var4];
-            System.arraycopy(var5, 0, this.field_85060_g, 0, this.field_85060_g.length);
+         this.field_85059_f = crashreportsystemdetails.func_85069_a(stacktraceelement, stacktraceelement1);
+         if(j > 0 && !this.crashReportSections.isEmpty()) {
+            CrashReportCategory crashreportsystemdetails1 = (CrashReportCategory)this.crashReportSections.get(this.crashReportSections.size() - 1);
+            crashreportsystemdetails1.func_85070_b(j);
+         } else if(astacktraceelement != null && astacktraceelement.length >= j) {
+            this.field_85060_g = new StackTraceElement[astacktraceelement.length - j];
+            System.arraycopy(astacktraceelement, 0, this.field_85060_g, 0, this.field_85060_g.length);
          } else {
             this.field_85059_f = false;
          }
       }
 
-      this.crashReportSections.add(var3);
-      return var3;
+      this.crashReportSections.add(crashreportsystemdetails);
+      return crashreportsystemdetails;
    }
 
    private static String getWittyComment() {
-      String[] var0 = new String[]{"Who set us up the TNT?", "Everything\'s going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I\'m sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don\'t be sad. I\'ll do better next time, I promise!", "Don\'t be sad, have a hug! <3", "I just don\'t know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn\'t worry myself about that.", "I bet Cylons wouldn\'t have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I\'m Minecraft, and I\'m a crashaholic.", "Ooh. Shiny.", "This doesn\'t make any sense!", "Why is it breaking :(", "Don\'t do that.", "Ouch. That hurt :(", "You\'re mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!"};
+      String[] astring = new String[]{"Who set us up the TNT?", "Everything\'s going to plan. No, really, that was supposed to happen.", "Uh... Did I do that?", "Oops.", "Why did you do that?", "I feel sad now :(", "My bad.", "I\'m sorry, Dave.", "I let you down. Sorry :(", "On the bright side, I bought you a teddy bear!", "Daisy, daisy...", "Oh - I know what I did wrong!", "Hey, that tickles! Hehehe!", "I blame Dinnerbone.", "You should try our sister game, Minceraft!", "Don\'t be sad. I\'ll do better next time, I promise!", "Don\'t be sad, have a hug! <3", "I just don\'t know what went wrong :(", "Shall we play a game?", "Quite honestly, I wouldn\'t worry myself about that.", "I bet Cylons wouldn\'t have this problem.", "Sorry :(", "Surprise! Haha. Well, this is awkward.", "Would you like a cupcake?", "Hi. I\'m Minecraft, and I\'m a crashaholic.", "Ooh. Shiny.", "This doesn\'t make any sense!", "Why is it breaking :(", "Don\'t do that.", "Ouch. That hurt :(", "You\'re mean.", "This is a token for 1 free hug. Redeem at your nearest Mojangsta: [~~HUG~~]", "There are four lights!"};
 
       try {
-         return var0[(int)(System.nanoTime() % (long)var0.length)];
+         return astring[(int)(System.nanoTime() % (long)astring.length)];
       } catch (Throwable var2) {
          return "Witty comment unavailable :(";
       }
    }
 
-   public static CrashReport func_85055_a(Throwable var0, String var1) {
-      CrashReport var2;
-      if(var0 instanceof ReportedException) {
-         var2 = ((ReportedException)var0).getCrashReport();
+   public static CrashReport func_85055_a(Throwable throwable, String s) {
+      CrashReport crashreport;
+      if(throwable instanceof ReportedException) {
+         crashreport = ((ReportedException)throwable).getCrashReport();
       } else {
-         var2 = new CrashReport(var1, var0);
+         crashreport = new CrashReport(s, throwable);
       }
 
-      return var2;
+      return crashreport;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/CryptManager.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CryptManager.class differ
diff -ur mcp-mcdev/net/minecraft/src/CryptManager.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CryptManager.java
--- mcp-mcdev/net/minecraft/src/CryptManager.java	2012-11-29 21:15:09.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/CryptManager.java	2012-11-29 20:44:29.000000000 -0800
@@ -22,14 +22,14 @@
 import javax.crypto.NoSuchPaddingException;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
-import org.bouncycastle.crypto.BufferedBlockCipher;
-import org.bouncycastle.crypto.engines.AESFastEngine;
-import org.bouncycastle.crypto.io.CipherInputStream;
-import org.bouncycastle.crypto.io.CipherOutputStream;
-import org.bouncycastle.crypto.modes.CFBBlockCipher;
-import org.bouncycastle.crypto.params.KeyParameter;
-import org.bouncycastle.crypto.params.ParametersWithIV;
-import org.bouncycastle.jce.provider.BouncyCastleProvider;
+import net.minecraft.org.bouncycastle.crypto.BufferedBlockCipher;
+import net.minecraft.org.bouncycastle.crypto.engines.AESFastEngine;
+import net.minecraft.org.bouncycastle.crypto.io.CipherInputStream;
+import net.minecraft.org.bouncycastle.crypto.io.CipherOutputStream;
+import net.minecraft.org.bouncycastle.crypto.modes.CFBBlockCipher;
+import net.minecraft.org.bouncycastle.crypto.params.KeyParameter;
+import net.minecraft.org.bouncycastle.crypto.params.ParametersWithIV;
+import net.minecraft.org.bouncycastle.jce.provider.BouncyCastleProvider;
 
 public class CryptManager {
 
@@ -128,18 +128,18 @@
       return null;
    }
 
-   private static BufferedBlockCipher func_75892_a(boolean var0, Key var1) {
+   private static BufferedBlockCipher a(boolean var0, Key var1) {
       BufferedBlockCipher var2 = new BufferedBlockCipher(new CFBBlockCipher(new AESFastEngine(), 8));
-      var2.init(var0, new ParametersWithIV(new KeyParameter(var1.getEncoded()), var1.getEncoded(), 0, 16));
+      var2.a(var0, new ParametersWithIV(new KeyParameter(var1.getEncoded()), var1.getEncoded(), 0, 16));
       return var2;
    }
 
    public static OutputStream encryptOuputStream(SecretKey var0, OutputStream var1) {
-      return new CipherOutputStream(var1, func_75892_a(true, var0));
+      return new CipherOutputStream(var1, a(true, var0));
    }
 
    public static InputStream decryptInputStream(SecretKey var0, InputStream var1) {
-      return new CipherInputStream(var1, func_75892_a(false, var0));
+      return new CipherInputStream(var1, a(false, var0));
    }
 
    static {
Binary files mcp-mcdev/net/minecraft/src/DedicatedServer.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/DedicatedServer.class differ
diff -ur mcp-mcdev/net/minecraft/src/DedicatedServer.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/DedicatedServer.java
--- mcp-mcdev/net/minecraft/src/DedicatedServer.java	2012-11-29 21:15:09.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/DedicatedServer.java	2012-11-29 20:44:28.000000000 -0800
@@ -1,14 +1,16 @@
 package net.minecraft.src;
 
 import java.io.File;
-import java.io.IOException;
+import java.io.PrintStream;
 import java.net.InetAddress;
+import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
 import java.util.logging.Level;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.src.AnvilSaveConverter;
 import net.minecraft.src.CallableServerType;
 import net.minecraft.src.CallableType;
 import net.minecraft.src.ConsoleLogManager;
@@ -32,36 +34,42 @@
 import net.minecraft.src.ServerGUI;
 import net.minecraft.src.WorldSettings;
 import net.minecraft.src.WorldType;
+import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender;
+import org.bukkit.craftbukkit.libs.joptsimple.OptionSet;
+import org.bukkit.event.server.ServerCommandEvent;
 
 public class DedicatedServer extends MinecraftServer implements IServer {
 
    private final List pendingCommandList = Collections.synchronizedList(new ArrayList());
    private RConThreadQuery theRConThreadQuery;
    private RConThreadMain theRConThreadMain;
-   private PropertyManager settings;
+   public PropertyManager settings;
    private boolean canSpawnStructures;
    private EnumGameType theGameType;
    private NetworkListenThread networkThread;
    private boolean guiIsEnabled = false;
 
 
-   public DedicatedServer(File var1) {
-      super(var1);
+   public DedicatedServer(OptionSet options) {
+      super(options);
       new DedicatedServerSleepThread(this);
    }
 
-   protected boolean startServer() {
-      DedicatedServerCommandThread var1 = new DedicatedServerCommandThread(this);
-      var1.setDaemon(true);
-      var1.start();
-      ConsoleLogManager.init();
+   protected boolean startServer() throws UnknownHostException {
+      DedicatedServerCommandThread threadcommandreader = new DedicatedServerCommandThread(this);
+      threadcommandreader.setDaemon(true);
+      threadcommandreader.start();
+      ConsoleLogManager.init(this);
+      System.setOut(new PrintStream(new LoggerOutputStream(logger, Level.INFO), true));
+      System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.SEVERE), true));
       logger.info("Starting minecraft server version 1.4.5");
       if(Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
          logger.warning("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
       }
 
       logger.info("Loading properties");
-      this.settings = new PropertyManager(new File("server.properties"));
+      this.settings = new PropertyManager(this.options);
       if(this.isSinglePlayer()) {
          this.setHostname("127.0.0.1");
       } else {
@@ -82,12 +90,12 @@
       }
 
       this.canSpawnStructures = this.settings.getBooleanProperty("generate-structures", true);
-      int var2 = this.settings.getIntProperty("gamemode", EnumGameType.SURVIVAL.getID());
-      this.theGameType = WorldSettings.getGameTypeById(var2);
+      int i = this.settings.getIntProperty("gamemode", EnumGameType.SURVIVAL.getID());
+      this.theGameType = WorldSettings.getGameTypeById(i);
       logger.info("Default game type: " + this.theGameType);
-      InetAddress var3 = null;
+      InetAddress inetaddress = null;
       if(this.getServerHostname().length() > 0) {
-         var3 = InetAddress.getByName(this.getServerHostname());
+         inetaddress = InetAddress.getByName(this.getServerHostname());
       }
 
       if(this.getServerPort() < 0) {
@@ -99,8 +107,8 @@
       logger.info("Starting Minecraft server on " + (this.getServerHostname().length() == 0?"*":this.getServerHostname()) + ":" + this.getServerPort());
 
       try {
-         this.networkThread = new DedicatedServerListenThread(this, var3, this.getServerPort());
-      } catch (IOException var19) {
+         this.networkThread = new DedicatedServerListenThread(this, inetaddress, this.getServerPort());
+      } catch (Throwable var19) {
          logger.warning("**** FAILED TO BIND TO PORT!");
          logger.log(Level.WARNING, "The exception was: " + var19.toString());
          logger.warning("Perhaps a server is already running on that port?");
@@ -115,29 +123,30 @@
       }
 
       this.setConfigurationManager(new DedicatedPlayerList(this));
-      long var5 = System.nanoTime();
+      this.anvilConverterForAnvilFile = new AnvilSaveConverter(this.server.getWorldContainer());
+      long j = System.nanoTime();
       if(this.getFolderName() == null) {
          this.setFolderName(this.settings.getStringProperty("level-name", "world"));
       }
 
-      String var7 = this.settings.getStringProperty("level-seed", "");
-      String var8 = this.settings.getStringProperty("level-type", "DEFAULT");
-      String var9 = this.settings.getStringProperty("generator-settings", "");
-      long var10 = (new Random()).nextLong();
-      if(var7.length() > 0) {
+      String s = this.settings.getStringProperty("level-seed", "");
+      String s1 = this.settings.getStringProperty("level-type", "DEFAULT");
+      String s2 = this.settings.getStringProperty("generator-settings", "");
+      long k = (new Random()).nextLong();
+      if(s.length() > 0) {
          try {
-            long var12 = Long.parseLong(var7);
-            if(var12 != 0L) {
-               var10 = var12;
+            long l = Long.parseLong(s);
+            if(l != 0L) {
+               k = l;
             }
          } catch (NumberFormatException var18) {
-            var10 = (long)var7.hashCode();
+            k = (long)s.hashCode();
          }
       }
 
-      WorldType var14 = WorldType.parseWorldType(var8);
-      if(var14 == null) {
-         var14 = WorldType.DEFAULT;
+      WorldType worldtype = WorldType.parseWorldType(s1);
+      if(worldtype == null) {
+         worldtype = WorldType.DEFAULT;
       }
 
       this.setBuildLimit(this.settings.getIntProperty("max-build-height", 256));
@@ -145,10 +154,10 @@
       this.setBuildLimit(MathHelper.clamp_int(this.getBuildLimit(), 64, 256));
       this.settings.setProperty("max-build-height", Integer.valueOf(this.getBuildLimit()));
       logger.info("Preparing level \"" + this.getFolderName() + "\"");
-      this.loadAllWorlds(this.getFolderName(), this.getFolderName(), var10, var14, var9);
-      long var15 = System.nanoTime() - var5;
-      String var17 = String.format("%.3fs", new Object[]{Double.valueOf((double)var15 / 1.0E9D)});
-      logger.info("Done (" + var17 + ")! For help, type \"help\" or \"?\"");
+      this.loadAllWorlds(this.getFolderName(), this.getFolderName(), k, worldtype, s2);
+      long i1 = System.nanoTime() - j;
+      String s3 = String.format("%.3fs", new Object[]{Double.valueOf((double)i1 / 1.0E9D)});
+      logger.info("Done (" + s3 + ")! For help, type \"help\" or \"?\"");
       if(this.settings.getBooleanProperty("enable-query", false)) {
          logger.info("Starting GS4 status listener");
          this.theRConThreadQuery = new RConThreadQuery(this);
@@ -159,11 +168,24 @@
          logger.info("Starting remote control listener");
          this.theRConThreadMain = new RConThreadMain(this);
          this.theRConThreadMain.startThread();
+         this.remoteConsole = new CraftRemoteConsoleCommandSender();
+      }
+
+      if(this.server.getBukkitSpawnRadius() > -1) {
+         logger.info("\'settings.spawn-radius\' in bukkit.yml has been moved to \'spawn-protection\' in server.properties. I will move your config for you.");
+         this.settings.serverProperties.remove("spawn-protection");
+         this.settings.getIntProperty("spawn-protection", this.server.getBukkitSpawnRadius());
+         this.server.removeBukkitSpawnRadius();
+         this.settings.saveProperties();
       }
 
       return true;
    }
 
+   public PropertyManager getPropertyManager() {
+      return this.settings;
+   }
+
    public boolean canStructuresSpawn() {
       return this.canSpawnStructures;
    }
@@ -173,14 +195,14 @@
    }
 
    public int getDifficulty() {
-      return this.settings.getIntProperty("difficulty", 1);
+      return Math.max(0, Math.min(3, this.settings.getIntProperty("difficulty", 1)));
    }
 
    public boolean isHardcore() {
       return this.settings.getBooleanProperty("hardcore", false);
    }
 
-   protected void finalTick(CrashReport var1) {
+   protected void finalTick(CrashReport crashreport) {
       while(this.isServerRunning()) {
          this.executePendingCommands();
 
@@ -193,18 +215,18 @@
 
    }
 
-   public CrashReport addServerInfoToCrashReport(CrashReport var1) {
-      var1 = super.addServerInfoToCrashReport(var1);
-      var1.func_85056_g().addCrashSectionCallable("Is Modded", new CallableType(this));
-      var1.func_85056_g().addCrashSectionCallable("Type", new CallableServerType(this));
-      return var1;
+   public CrashReport addServerInfoToCrashReport(CrashReport crashreport) {
+      crashreport = super.addServerInfoToCrashReport(crashreport);
+      crashreport.func_85056_g().addCrashSectionCallable("Is Modded", new CallableType(this));
+      crashreport.func_85056_g().addCrashSectionCallable("Type", new CallableServerType(this));
+      return crashreport;
    }
 
    protected void systemExitNow() {
       System.exit(0);
    }
 
-   protected void updateTimeLightAndEntities() {
+   public void updateTimeLightAndEntities() {
       super.updateTimeLightAndEntities();
       this.executePendingCommands();
    }
@@ -217,24 +239,27 @@
       return this.settings.getBooleanProperty("spawn-monsters", true);
    }
 
-   public void addServerStatsToSnooper(PlayerUsageSnooper var1) {
-      var1.addData("whitelist_enabled", Boolean.valueOf(this.getDedicatedPlayerList().isWhiteListEnabled()));
-      var1.addData("whitelist_count", Integer.valueOf(this.getDedicatedPlayerList().getWhiteListedPlayers().size()));
-      super.addServerStatsToSnooper(var1);
+   public void addServerStatsToSnooper(PlayerUsageSnooper mojangstatisticsgenerator) {
+      mojangstatisticsgenerator.addData("whitelist_enabled", Boolean.valueOf(this.getDedicatedPlayerList().isWhiteListEnabled()));
+      mojangstatisticsgenerator.addData("whitelist_count", Integer.valueOf(this.getDedicatedPlayerList().getWhiteListedPlayers().size()));
+      super.addServerStatsToSnooper(mojangstatisticsgenerator);
    }
 
    public boolean isSnooperEnabled() {
       return this.settings.getBooleanProperty("snooper-enabled", true);
    }
 
-   public void addPendingCommand(String var1, ICommandSender var2) {
-      this.pendingCommandList.add(new ServerCommand(var1, var2));
+   public void addPendingCommand(String s, ICommandSender icommandlistener) {
+      this.pendingCommandList.add(new ServerCommand(s, icommandlistener));
    }
 
    public void executePendingCommands() {
       while(!this.pendingCommandList.isEmpty()) {
-         ServerCommand var1 = (ServerCommand)this.pendingCommandList.remove(0);
-         this.getCommandManager().executeCommand(var1.sender, var1.command);
+         ServerCommand servercommand = (ServerCommand)this.pendingCommandList.remove(0);
+         ServerCommandEvent event = new ServerCommandEvent(this.console, servercommand.command);
+         this.server.getPluginManager().callEvent(event);
+         servercommand = new ServerCommand(event.getCommand(), servercommand.sender);
+         this.server.dispatchServerCommand(this.console, servercommand);
       }
 
    }
@@ -251,20 +276,20 @@
       return this.networkThread;
    }
 
-   public int getIntProperty(String var1, int var2) {
-      return this.settings.getIntProperty(var1, var2);
+   public int getIntProperty(String s, int i) {
+      return this.settings.getIntProperty(s, i);
    }
 
-   public String getStringProperty(String var1, String var2) {
-      return this.settings.getStringProperty(var1, var2);
+   public String getStringProperty(String s, String s1) {
+      return this.settings.getStringProperty(s, s1);
    }
 
-   public boolean getBooleanProperty(String var1, boolean var2) {
-      return this.settings.getBooleanProperty(var1, var2);
+   public boolean getBooleanProperty(String s, boolean flag) {
+      return this.settings.getBooleanProperty(s, flag);
    }
 
-   public void setProperty(String var1, Object var2) {
-      this.settings.setProperty(var1, var2);
+   public void setProperty(String s, Object object) {
+      this.settings.setProperty(s, object);
    }
 
    public void saveProperties() {
@@ -272,8 +297,8 @@
    }
 
    public String getSettingsFilename() {
-      File var1 = this.settings.getPropertiesFile();
-      return var1 != null?var1.getAbsolutePath():"No settings file";
+      File file1 = this.settings.getPropertiesFile();
+      return file1 != null?file1.getAbsolutePath():"No settings file";
    }
 
    public void enableGui() {
@@ -285,7 +310,7 @@
       return this.guiIsEnabled;
    }
 
-   public String shareToLAN(EnumGameType var1, boolean var2) {
+   public String shareToLAN(EnumGameType enumgamemode, boolean flag) {
       return "";
    }
 
@@ -297,7 +322,6 @@
       return this.settings.getIntProperty("spawn-protection", super.getSpawnProtectionSize());
    }
 
-   // $FF: synthetic method
    public ServerConfigurationManager getConfigurationManager() {
       return this.getDedicatedPlayerList();
    }
Binary files mcp-mcdev/net/minecraft/src/DedicatedServerCommandThread.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/DedicatedServerCommandThread.class differ
diff -ur mcp-mcdev/net/minecraft/src/DedicatedServerCommandThread.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/DedicatedServerCommandThread.java
--- mcp-mcdev/net/minecraft/src/DedicatedServerCommandThread.java	2012-11-29 21:15:09.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/DedicatedServerCommandThread.java	2012-11-29 20:44:28.000000000 -0800
@@ -1,31 +1,42 @@
 package net.minecraft.src;
 
-import java.io.BufferedReader;
 import java.io.IOException;
-import java.io.InputStreamReader;
+import java.util.logging.Level;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.DedicatedServer;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.craftbukkit.libs.jline.console.ConsoleReader;
 
 class DedicatedServerCommandThread extends Thread {
 
-   // $FF: synthetic field
    final DedicatedServer server;
 
 
-   DedicatedServerCommandThread(DedicatedServer var1) {
-      this.server = var1;
+   DedicatedServerCommandThread(DedicatedServer dedicatedserver) {
+      this.server = dedicatedserver;
    }
 
    public void run() {
-      BufferedReader var1 = new BufferedReader(new InputStreamReader(System.in));
+      if(Main.useConsole) {
+         ConsoleReader bufferedreader = this.server.reader;
 
-      String var2;
-      try {
-         while(!this.server.isServerStopped() && this.server.isServerRunning() && (var2 = var1.readLine()) != null) {
-            this.server.addPendingCommand(var2, this.server);
+         try {
+            while(!this.server.isServerStopped() && this.server.isServerRunning()) {
+               String s;
+               if(Main.useJline) {
+                  s = bufferedreader.readLine(">", (Character)null);
+               } else {
+                  s = bufferedreader.readLine();
+               }
+
+               if(s != null) {
+                  this.server.addPendingCommand(s, this.server);
+               }
+            }
+         } catch (IOException var4) {
+            MinecraftServer.logger.log(Level.SEVERE, (String)null, var4);
          }
-      } catch (IOException var4) {
-         var4.printStackTrace();
-      }
 
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/Enchantment.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Enchantment.class differ
diff -ur mcp-mcdev/net/minecraft/src/Enchantment.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Enchantment.java
--- mcp-mcdev/net/minecraft/src/Enchantment.java	2012-11-29 21:15:09.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Enchantment.java	2012-11-29 20:44:27.000000000 -0800
@@ -18,6 +18,7 @@
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.EnumEnchantmentType;
 import net.minecraft.src.StatCollector;
+import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
 
 public abstract class Enchantment {
 
@@ -49,14 +50,15 @@
    protected String name;
 
 
-   protected Enchantment(int var1, int var2, EnumEnchantmentType var3) {
-      this.effectId = var1;
-      this.weight = var2;
-      this.type = var3;
-      if(enchantmentsList[var1] != null) {
+   protected Enchantment(int i, int j, EnumEnchantmentType enchantmentslottype) {
+      this.effectId = i;
+      this.weight = j;
+      this.type = enchantmentslottype;
+      if(enchantmentsList[i] != null) {
          throw new IllegalArgumentException("Duplicate enchantment id!");
       } else {
-         enchantmentsList[var1] = this;
+         enchantmentsList[i] = this;
+         org.bukkit.enchantments.Enchantment.registerEnchantment(new CraftEnchantment(this));
       }
    }
 
@@ -72,28 +74,28 @@
       return 1;
    }
 
-   public int getMinEnchantability(int var1) {
-      return 1 + var1 * 10;
+   public int getMinEnchantability(int i) {
+      return 1 + i * 10;
    }
 
-   public int getMaxEnchantability(int var1) {
-      return this.getMinEnchantability(var1) + 5;
+   public int getMaxEnchantability(int i) {
+      return this.getMinEnchantability(i) + 5;
    }
 
-   public int calcModifierDamage(int var1, DamageSource var2) {
+   public int calcModifierDamage(int i, DamageSource damagesource) {
       return 0;
    }
 
-   public int calcModifierLiving(int var1, EntityLiving var2) {
+   public int calcModifierLiving(int i, EntityLiving entityliving) {
       return 0;
    }
 
-   public boolean canApplyTogether(Enchantment var1) {
-      return this != var1;
+   public boolean canApplyTogether(Enchantment enchantment) {
+      return this != enchantment;
    }
 
-   public Enchantment setName(String var1) {
-      this.name = var1;
+   public Enchantment setName(String s) {
+      this.name = s;
       return this;
    }
 
@@ -101,9 +103,9 @@
       return "enchantment." + this.name;
    }
 
-   public String getTranslatedName(int var1) {
-      String var2 = StatCollector.translateToLocal(this.getName());
-      return var2 + " " + StatCollector.translateToLocal("enchantment.level." + var1);
+   public String getTranslatedName(int i) {
+      String s = StatCollector.translateToLocal(this.getName());
+      return s + " " + StatCollector.translateToLocal("enchantment.level." + i);
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/Entity.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Entity.class differ
diff -ur mcp-mcdev/net/minecraft/src/Entity.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Entity.java
--- mcp-mcdev/net/minecraft/src/Entity.java	2012-11-29 21:15:08.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Entity.java	2012-11-29 20:44:27.000000000 -0800
@@ -2,6 +2,7 @@
 
 import java.util.List;
 import java.util.Random;
+import java.util.UUID;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.Block;
@@ -17,6 +18,7 @@
 import net.minecraft.src.EntityList;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.EnumEntitySize;
 import net.minecraft.src.Explosion;
 import net.minecraft.src.ItemStack;
@@ -32,6 +34,28 @@
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.block.BlockFace;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Painting;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.EntityCombustByBlockEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.entity.EntityDamageByBlockEvent;
+import org.bukkit.event.entity.EntityDamageByEntityEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
+import org.bukkit.event.painting.PaintingBreakByEntityEvent;
+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
+import org.bukkit.event.vehicle.VehicleEnterEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+import org.bukkit.plugin.PluginManager;
 
 public abstract class Entity {
 
@@ -82,7 +106,7 @@
    protected Random rand;
    public int ticksExisted;
    public int fireResistance;
-   private int fire;
+   public int fire;
    protected boolean inWater;
    public int hurtResistantTime;
    private boolean firstUpdate;
@@ -103,9 +127,12 @@
    protected int field_82152_aq;
    private boolean field_83001_bt;
    public EnumEntitySize myEntitySize;
+   public UUID uniqueId = UUID.randomUUID();
+   public boolean valid = false;
+   protected org.bukkit.entity.Entity bukkitEntity;
 
 
-   public Entity(World var1) {
+   public Entity(World world) {
       this.entityId = nextEntityID++;
       this.renderDistanceWeight = 1.0D;
       this.preventEntitySpawning = false;
@@ -140,10 +167,10 @@
       this.field_82152_aq = 0;
       this.field_83001_bt = false;
       this.myEntitySize = EnumEntitySize.SIZE_2;
-      this.worldObj = var1;
+      this.worldObj = world;
       this.setPosition(0.0D, 0.0D, 0.0D);
-      if(var1 != null) {
-         this.dimension = var1.provider.dimensionId;
+      if(world != null) {
+         this.dimension = world.provider.dimensionId;
       }
 
       this.dataWatcher.addObject(0, Byte.valueOf((byte)0));
@@ -157,8 +184,8 @@
       return this.dataWatcher;
    }
 
-   public boolean equals(Object var1) {
-      return var1 instanceof Entity?((Entity)var1).entityId == this.entityId:false;
+   public boolean equals(Object object) {
+      return object instanceof Entity?((Entity)object).entityId == this.entityId:false;
    }
 
    public int hashCode() {
@@ -169,19 +196,19 @@
       this.isDead = true;
    }
 
-   protected void setSize(float var1, float var2) {
-      this.width = var1;
-      this.height = var2;
-      float var3 = var1 % 2.0F;
-      if((double)var3 < 0.375D) {
+   protected void setSize(float f, float f1) {
+      this.width = f;
+      this.height = f1;
+      float f2 = f % 2.0F;
+      if((double)f2 < 0.375D) {
          this.myEntitySize = EnumEntitySize.SIZE_1;
-      } else if((double)var3 < 0.75D) {
+      } else if((double)f2 < 0.75D) {
          this.myEntitySize = EnumEntitySize.SIZE_2;
-      } else if((double)var3 < 1.0D) {
+      } else if((double)f2 < 1.0D) {
          this.myEntitySize = EnumEntitySize.SIZE_3;
-      } else if((double)var3 < 1.375D) {
+      } else if((double)f2 < 1.375D) {
          this.myEntitySize = EnumEntitySize.SIZE_4;
-      } else if((double)var3 < 1.75D) {
+      } else if((double)f2 < 1.75D) {
          this.myEntitySize = EnumEntitySize.SIZE_5;
       } else {
          this.myEntitySize = EnumEntitySize.SIZE_6;
@@ -189,18 +216,44 @@
 
    }
 
-   protected void setRotation(float var1, float var2) {
-      this.rotationYaw = var1 % 360.0F;
-      this.rotationPitch = var2 % 360.0F;
+   protected void setRotation(float f, float f1) {
+      if(Float.isNaN(f)) {
+         f = 0.0F;
+      }
+
+      if(f == Float.POSITIVE_INFINITY || f == Float.NEGATIVE_INFINITY) {
+         if(this instanceof EntityPlayerMP) {
+            System.err.println(((CraftPlayer)this.getBukkitEntity()).getName() + " was caught trying to crash the server with an invalid yaw");
+            ((CraftPlayer)this.getBukkitEntity()).kickPlayer("Nope");
+         }
+
+         f = 0.0F;
+      }
+
+      if(Float.isNaN(f1)) {
+         f1 = 0.0F;
+      }
+
+      if(f1 == Float.POSITIVE_INFINITY || f1 == Float.NEGATIVE_INFINITY) {
+         if(this instanceof EntityPlayerMP) {
+            System.err.println(((CraftPlayer)this.getBukkitEntity()).getName() + " was caught trying to crash the server with an invalid pitch");
+            ((CraftPlayer)this.getBukkitEntity()).kickPlayer("Nope");
+         }
+
+         f1 = 0.0F;
+      }
+
+      this.rotationYaw = f % 360.0F;
+      this.rotationPitch = f1 % 360.0F;
    }
 
-   public void setPosition(double var1, double var3, double var5) {
-      this.posX = var1;
-      this.posY = var3;
-      this.posZ = var5;
-      float var7 = this.width / 2.0F;
-      float var8 = this.height;
-      this.boundingBox.setBounds(var1 - (double)var7, var3 - (double)this.yOffset + (double)this.ySize, var5 - (double)var7, var1 + (double)var7, var3 - (double)this.yOffset + (double)this.ySize + (double)var8, var5 + (double)var7);
+   public void setPosition(double d0, double d1, double d2) {
+      this.posX = d0;
+      this.posY = d1;
+      this.posZ = d2;
+      float f = this.width / 2.0F;
+      float f1 = this.height;
+      this.boundingBox.setBounds(d0 - (double)f, d1 - (double)this.yOffset + (double)this.ySize, d2 - (double)f, d0 + (double)f, d1 - (double)this.yOffset + (double)this.ySize + (double)f1, d2 + (double)f);
    }
 
    public void onUpdate() {
@@ -220,28 +273,26 @@
       this.prevPosZ = this.posZ;
       this.prevRotationPitch = this.rotationPitch;
       this.prevRotationYaw = this.rotationYaw;
-      int var2;
+      int i;
       if(!this.worldObj.isRemote && this.worldObj instanceof WorldServer) {
          this.worldObj.theProfiler.startSection("portal");
-         MinecraftServer var1 = ((WorldServer)this.worldObj).getMinecraftServer();
-         var2 = this.getMaxInPortalTime();
+         MinecraftServer event = ((WorldServer)this.worldObj).getMinecraftServer();
+         i = this.getMaxInPortalTime();
          if(this.inPortal) {
-            if(var1.getAllowNether()) {
-               if(this.ridingEntity == null && this.field_82153_h++ >= var2) {
-                  this.field_82153_h = var2;
-                  this.timeUntilPortal = this.getPortalCooldown();
-                  byte var3;
-                  if(this.worldObj.provider.dimensionId == -1) {
-                     var3 = 0;
-                  } else {
-                     var3 = -1;
-                  }
-
-                  this.travelToTheEnd(var3);
+            if(this.ridingEntity == null && this.field_82153_h++ >= i) {
+               this.field_82153_h = i;
+               this.timeUntilPortal = this.getPortalCooldown();
+               byte k;
+               if(this.worldObj.provider.dimensionId == -1) {
+                  k = 0;
+               } else {
+                  k = -1;
                }
 
-               this.inPortal = false;
+               this.travelToTheEnd(k);
             }
+
+            this.inPortal = false;
          } else {
             if(this.field_82153_h > 0) {
                this.field_82153_h -= 4;
@@ -261,11 +312,11 @@
 
       if(this.isSprinting() && !this.isInWater()) {
          int var5 = MathHelper.floor_double(this.posX);
-         var2 = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
-         int var6 = MathHelper.floor_double(this.posZ);
-         int var4 = this.worldObj.getBlockId(var5, var2, var6);
-         if(var4 > 0) {
-            this.worldObj.spawnParticle("tilecrack_" + var4 + "_" + this.worldObj.getBlockMetadata(var5, var2, var6), this.posX + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, this.boundingBox.minY + 0.1D, this.posZ + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, -this.motionX * 4.0D, 1.5D, -this.motionZ * 4.0D);
+         i = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
+         int var7 = MathHelper.floor_double(this.posZ);
+         int l = this.worldObj.getBlockId(var5, i, var7);
+         if(l > 0) {
+            this.worldObj.spawnParticle("tilecrack_" + l + "_" + this.worldObj.getBlockMetadata(var5, i, var7), this.posX + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, this.boundingBox.minY + 0.1D, this.posZ + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, -this.motionX * 4.0D, 1.5D, -this.motionZ * 4.0D);
          }
       }
 
@@ -280,7 +331,16 @@
             }
          } else {
             if(this.fire % 20 == 0) {
-               this.attackEntityFrom(DamageSource.onFire, 1);
+               if(this instanceof EntityLiving) {
+                  EntityDamageEvent var6 = new EntityDamageEvent(this.getBukkitEntity(), DamageCause.FIRE_TICK, 1);
+                  this.worldObj.getServer().getPluginManager().callEvent(var6);
+                  if(!var6.isCancelled()) {
+                     var6.getEntity().setLastDamageCause(var6);
+                     this.attackEntityFrom(DamageSource.onFire, var6.getDamage());
+                  }
+               } else {
+                  this.attackEntityFrom(DamageSource.onFire, 1);
+               }
             }
 
             --this.fire;
@@ -311,16 +371,40 @@
 
    protected void setOnFireFromLava() {
       if(!this.isImmuneToFire) {
+         if(this instanceof EntityLiving) {
+            CraftServer server = this.worldObj.getServer();
+            Object damager = null;
+            org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+            EntityDamageByBlockEvent event = new EntityDamageByBlockEvent((org.bukkit.block.Block)damager, damagee, DamageCause.LAVA, 4);
+            server.getPluginManager().callEvent(event);
+            if(!event.isCancelled()) {
+               damagee.setLastDamageCause(event);
+               this.attackEntityFrom(DamageSource.lava, event.getDamage());
+            }
+
+            if(this.fire <= 0) {
+               EntityCombustByBlockEvent combustEvent = new EntityCombustByBlockEvent((org.bukkit.block.Block)damager, damagee, 15);
+               server.getPluginManager().callEvent(combustEvent);
+               if(!combustEvent.isCancelled()) {
+                  this.setFire(combustEvent.getDuration());
+               }
+            } else {
+               this.setFire(15);
+            }
+
+            return;
+         }
+
          this.attackEntityFrom(DamageSource.lava, 4);
          this.setFire(15);
       }
 
    }
 
-   public void setFire(int var1) {
-      int var2 = var1 * 20;
-      if(this.fire < var2) {
-         this.fire = var2;
+   public void setFire(int i) {
+      int j = i * 20;
+      if(this.fire < j) {
+         this.fire = j;
       }
 
    }
@@ -333,192 +417,192 @@
       this.setDead();
    }
 
-   public boolean isOffsetPositionInLiquid(double var1, double var3, double var5) {
-      AxisAlignedBB var7 = this.boundingBox.getOffsetBoundingBox(var1, var3, var5);
-      List var8 = this.worldObj.getCollidingBoundingBoxes(this, var7);
-      return !var8.isEmpty()?false:!this.worldObj.isAnyLiquid(var7);
+   public boolean isOffsetPositionInLiquid(double d0, double d1, double d2) {
+      AxisAlignedBB axisalignedbb = this.boundingBox.getOffsetBoundingBox(d0, d1, d2);
+      List list = this.worldObj.getCollidingBoundingBoxes(this, axisalignedbb);
+      return !list.isEmpty()?false:!this.worldObj.isAnyLiquid(axisalignedbb);
    }
 
-   public void moveEntity(double var1, double var3, double var5) {
+   public void moveEntity(double d0, double d1, double d2) {
       if(this.noClip) {
-         this.boundingBox.offset(var1, var3, var5);
+         this.boundingBox.offset(d0, d1, d2);
          this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
          this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
          this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
       } else {
          this.worldObj.theProfiler.startSection("move");
          this.ySize *= 0.4F;
-         double var7 = this.posX;
-         double var9 = this.posY;
-         double var11 = this.posZ;
+         double d3 = this.posX;
+         double d4 = this.posY;
+         double d5 = this.posZ;
          if(this.isInWeb) {
             this.isInWeb = false;
-            var1 *= 0.25D;
-            var3 *= 0.05000000074505806D;
-            var5 *= 0.25D;
+            d0 *= 0.25D;
+            d1 *= 0.05000000074505806D;
+            d2 *= 0.25D;
             this.motionX = 0.0D;
             this.motionY = 0.0D;
             this.motionZ = 0.0D;
          }
 
-         double var13 = var1;
-         double var15 = var3;
-         double var17 = var5;
-         AxisAlignedBB var19 = this.boundingBox.copy();
-         boolean var20 = this.onGround && this.isSneaking() && this instanceof EntityPlayer;
-         if(var20) {
-            double var21;
-            for(var21 = 0.05D; var1 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(var1, -1.0D, 0.0D)).isEmpty(); var13 = var1) {
-               if(var1 < var21 && var1 >= -var21) {
-                  var1 = 0.0D;
-               } else if(var1 > 0.0D) {
-                  var1 -= var21;
+         double d6 = d0;
+         double d7 = d1;
+         double d8 = d2;
+         AxisAlignedBB axisalignedbb = this.boundingBox.copy();
+         boolean flag = this.onGround && this.isSneaking() && this instanceof EntityPlayer;
+         if(flag) {
+            double d9;
+            for(d9 = 0.05D; d0 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(d0, -1.0D, 0.0D)).isEmpty(); d6 = d0) {
+               if(d0 < d9 && d0 >= -d9) {
+                  d0 = 0.0D;
+               } else if(d0 > 0.0D) {
+                  d0 -= d9;
                } else {
-                  var1 += var21;
+                  d0 += d9;
                }
             }
 
-            for(; var5 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, var5)).isEmpty(); var17 = var5) {
-               if(var5 < var21 && var5 >= -var21) {
-                  var5 = 0.0D;
-               } else if(var5 > 0.0D) {
-                  var5 -= var21;
+            for(; d2 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(0.0D, -1.0D, d2)).isEmpty(); d8 = d2) {
+               if(d2 < d9 && d2 >= -d9) {
+                  d2 = 0.0D;
+               } else if(d2 > 0.0D) {
+                  d2 -= d9;
                } else {
-                  var5 += var21;
+                  d2 += d9;
                }
             }
 
-            while(var1 != 0.0D && var5 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(var1, -1.0D, var5)).isEmpty()) {
-               if(var1 < var21 && var1 >= -var21) {
-                  var1 = 0.0D;
-               } else if(var1 > 0.0D) {
-                  var1 -= var21;
+            while(d0 != 0.0D && d2 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.getOffsetBoundingBox(d0, -1.0D, d2)).isEmpty()) {
+               if(d0 < d9 && d0 >= -d9) {
+                  d0 = 0.0D;
+               } else if(d0 > 0.0D) {
+                  d0 -= d9;
                } else {
-                  var1 += var21;
+                  d0 += d9;
                }
 
-               if(var5 < var21 && var5 >= -var21) {
-                  var5 = 0.0D;
-               } else if(var5 > 0.0D) {
-                  var5 -= var21;
+               if(d2 < d9 && d2 >= -d9) {
+                  d2 = 0.0D;
+               } else if(d2 > 0.0D) {
+                  d2 -= d9;
                } else {
-                  var5 += var21;
+                  d2 += d9;
                }
 
-               var13 = var1;
-               var17 = var5;
+               d6 = d0;
+               d8 = d2;
             }
          }
 
-         List var23 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var1, var3, var5));
+         List list = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(d0, d1, d2));
 
-         for(int var24 = 0; var24 < var23.size(); ++var24) {
-            var3 = ((AxisAlignedBB)var23.get(var24)).calculateYOffset(this.boundingBox, var3);
+         for(int flag1 = 0; flag1 < list.size(); ++flag1) {
+            d1 = ((AxisAlignedBB)list.get(flag1)).calculateYOffset(this.boundingBox, d1);
          }
 
-         this.boundingBox.offset(0.0D, var3, 0.0D);
-         if(!this.field_70135_K && var15 != var3) {
-            var5 = 0.0D;
-            var3 = 0.0D;
-            var1 = 0.0D;
+         this.boundingBox.offset(0.0D, d1, 0.0D);
+         if(!this.field_70135_K && d7 != d1) {
+            d2 = 0.0D;
+            d1 = 0.0D;
+            d0 = 0.0D;
          }
 
-         boolean var39 = this.onGround || var15 != var3 && var15 < 0.0D;
+         boolean var39 = this.onGround || d7 != d1 && d7 < 0.0D;
 
-         int var25;
-         for(var25 = 0; var25 < var23.size(); ++var25) {
-            var1 = ((AxisAlignedBB)var23.get(var25)).calculateXOffset(this.boundingBox, var1);
+         int j;
+         for(j = 0; j < list.size(); ++j) {
+            d0 = ((AxisAlignedBB)list.get(j)).calculateXOffset(this.boundingBox, d0);
          }
 
-         this.boundingBox.offset(var1, 0.0D, 0.0D);
-         if(!this.field_70135_K && var13 != var1) {
-            var5 = 0.0D;
-            var3 = 0.0D;
-            var1 = 0.0D;
+         this.boundingBox.offset(d0, 0.0D, 0.0D);
+         if(!this.field_70135_K && d6 != d0) {
+            d2 = 0.0D;
+            d1 = 0.0D;
+            d0 = 0.0D;
          }
 
-         for(var25 = 0; var25 < var23.size(); ++var25) {
-            var5 = ((AxisAlignedBB)var23.get(var25)).calculateZOffset(this.boundingBox, var5);
+         for(j = 0; j < list.size(); ++j) {
+            d2 = ((AxisAlignedBB)list.get(j)).calculateZOffset(this.boundingBox, d2);
          }
 
-         this.boundingBox.offset(0.0D, 0.0D, var5);
-         if(!this.field_70135_K && var17 != var5) {
-            var5 = 0.0D;
-            var3 = 0.0D;
-            var1 = 0.0D;
+         this.boundingBox.offset(0.0D, 0.0D, d2);
+         if(!this.field_70135_K && d8 != d2) {
+            d2 = 0.0D;
+            d1 = 0.0D;
+            d0 = 0.0D;
          }
 
-         double var26;
-         double var28;
-         double var30;
-         int var33;
-         if(this.stepHeight > 0.0F && var39 && (var20 || this.ySize < 0.05F) && (var13 != var1 || var17 != var5)) {
-            var26 = var1;
-            var28 = var3;
-            var30 = var5;
-            var1 = var13;
-            var3 = (double)this.stepHeight;
-            var5 = var17;
-            AxisAlignedBB var32 = this.boundingBox.copy();
-            this.boundingBox.setBB(var19);
-            var23 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(var13, var3, var17));
+         double d10;
+         double d11;
+         double d12;
+         int k;
+         if(this.stepHeight > 0.0F && var39 && (flag || this.ySize < 0.05F) && (d6 != d0 || d8 != d2)) {
+            d10 = d0;
+            d11 = d1;
+            d12 = d2;
+            d0 = d6;
+            d1 = (double)this.stepHeight;
+            d2 = d8;
+            AxisAlignedBB flag2 = this.boundingBox.copy();
+            this.boundingBox.setBB(axisalignedbb);
+            list = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(d6, d1, d8));
 
-            for(var33 = 0; var33 < var23.size(); ++var33) {
-               var3 = ((AxisAlignedBB)var23.get(var33)).calculateYOffset(this.boundingBox, var3);
+            for(k = 0; k < list.size(); ++k) {
+               d1 = ((AxisAlignedBB)list.get(k)).calculateYOffset(this.boundingBox, d1);
             }
 
-            this.boundingBox.offset(0.0D, var3, 0.0D);
-            if(!this.field_70135_K && var15 != var3) {
-               var5 = 0.0D;
-               var3 = 0.0D;
-               var1 = 0.0D;
+            this.boundingBox.offset(0.0D, d1, 0.0D);
+            if(!this.field_70135_K && d7 != d1) {
+               d2 = 0.0D;
+               d1 = 0.0D;
+               d0 = 0.0D;
             }
 
-            for(var33 = 0; var33 < var23.size(); ++var33) {
-               var1 = ((AxisAlignedBB)var23.get(var33)).calculateXOffset(this.boundingBox, var1);
+            for(k = 0; k < list.size(); ++k) {
+               d0 = ((AxisAlignedBB)list.get(k)).calculateXOffset(this.boundingBox, d0);
             }
 
-            this.boundingBox.offset(var1, 0.0D, 0.0D);
-            if(!this.field_70135_K && var13 != var1) {
-               var5 = 0.0D;
-               var3 = 0.0D;
-               var1 = 0.0D;
+            this.boundingBox.offset(d0, 0.0D, 0.0D);
+            if(!this.field_70135_K && d6 != d0) {
+               d2 = 0.0D;
+               d1 = 0.0D;
+               d0 = 0.0D;
             }
 
-            for(var33 = 0; var33 < var23.size(); ++var33) {
-               var5 = ((AxisAlignedBB)var23.get(var33)).calculateZOffset(this.boundingBox, var5);
+            for(k = 0; k < list.size(); ++k) {
+               d2 = ((AxisAlignedBB)list.get(k)).calculateZOffset(this.boundingBox, d2);
             }
 
-            this.boundingBox.offset(0.0D, 0.0D, var5);
-            if(!this.field_70135_K && var17 != var5) {
-               var5 = 0.0D;
-               var3 = 0.0D;
-               var1 = 0.0D;
+            this.boundingBox.offset(0.0D, 0.0D, d2);
+            if(!this.field_70135_K && d8 != d2) {
+               d2 = 0.0D;
+               d1 = 0.0D;
+               d0 = 0.0D;
             }
 
-            if(!this.field_70135_K && var15 != var3) {
-               var5 = 0.0D;
-               var3 = 0.0D;
-               var1 = 0.0D;
+            if(!this.field_70135_K && d7 != d1) {
+               d2 = 0.0D;
+               d1 = 0.0D;
+               d0 = 0.0D;
             } else {
-               var3 = (double)(-this.stepHeight);
+               d1 = (double)(-this.stepHeight);
 
-               for(var33 = 0; var33 < var23.size(); ++var33) {
-                  var3 = ((AxisAlignedBB)var23.get(var33)).calculateYOffset(this.boundingBox, var3);
+               for(k = 0; k < list.size(); ++k) {
+                  d1 = ((AxisAlignedBB)list.get(k)).calculateYOffset(this.boundingBox, d1);
                }
 
-               this.boundingBox.offset(0.0D, var3, 0.0D);
+               this.boundingBox.offset(0.0D, d1, 0.0D);
             }
 
-            if(var26 * var26 + var30 * var30 >= var1 * var1 + var5 * var5) {
-               var1 = var26;
-               var3 = var28;
-               var5 = var30;
-               this.boundingBox.setBB(var32);
+            if(d10 * d10 + d12 * d12 >= d0 * d0 + d2 * d2) {
+               d0 = d10;
+               d1 = d11;
+               d2 = d12;
+               this.boundingBox.setBB(flag2);
             } else {
-               double var34 = this.boundingBox.minY - (double)((int)this.boundingBox.minY);
-               if(var34 > 0.0D) {
-                  this.ySize = (float)((double)this.ySize + var34 + 0.01D);
+               double d13 = this.boundingBox.minY - (double)((int)this.boundingBox.minY);
+               if(d13 > 0.0D) {
+                  this.ySize = (float)((double)this.ySize + d13 + 0.01D);
                }
             }
          }
@@ -528,67 +612,90 @@
          this.posX = (this.boundingBox.minX + this.boundingBox.maxX) / 2.0D;
          this.posY = this.boundingBox.minY + (double)this.yOffset - (double)this.ySize;
          this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0D;
-         this.isCollidedHorizontally = var13 != var1 || var17 != var5;
-         this.isCollidedVertically = var15 != var3;
-         this.onGround = var15 != var3 && var15 < 0.0D;
+         this.isCollidedHorizontally = d6 != d0 || d8 != d2;
+         this.isCollidedVertically = d7 != d1;
+         this.onGround = d7 != d1 && d7 < 0.0D;
          this.isCollided = this.isCollidedHorizontally || this.isCollidedVertically;
-         this.updateFallState(var3, this.onGround);
-         if(var13 != var1) {
+         this.updateFallState(d1, this.onGround);
+         if(d6 != d0) {
             this.motionX = 0.0D;
          }
 
-         if(var15 != var3) {
+         if(d7 != d1) {
             this.motionY = 0.0D;
          }
 
-         if(var17 != var5) {
+         if(d8 != d2) {
             this.motionZ = 0.0D;
          }
 
-         var26 = this.posX - var7;
-         var28 = this.posY - var9;
-         var30 = this.posZ - var11;
-         if(this.canTriggerWalking() && !var20 && this.ridingEntity == null) {
-            int var40 = MathHelper.floor_double(this.posX);
-            var33 = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
-            int var36 = MathHelper.floor_double(this.posZ);
-            int var37 = this.worldObj.getBlockId(var40, var33, var36);
-            if(var37 == 0) {
-               int var38 = this.worldObj.func_85175_e(var40, var33 - 1, var36);
-               if(var38 == 11 || var38 == 32 || var38 == 21) {
-                  var37 = this.worldObj.getBlockId(var40, var33 - 1, var36);
+         d10 = this.posX - d3;
+         d11 = this.posY - d4;
+         d12 = this.posZ - d5;
+         if(this.isCollidedHorizontally && this.getBukkitEntity() instanceof Vehicle) {
+            Vehicle var41 = (Vehicle)this.getBukkitEntity();
+            org.bukkit.block.Block event = this.worldObj.getWorld().getBlockAt(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - (double)this.yOffset), MathHelper.floor_double(this.posZ));
+            if(d6 > d0) {
+               event = event.getRelative(BlockFace.SOUTH);
+            } else if(d6 < d0) {
+               event = event.getRelative(BlockFace.NORTH);
+            } else if(d8 > d2) {
+               event = event.getRelative(BlockFace.WEST);
+            } else if(d8 < d2) {
+               event = event.getRelative(BlockFace.EAST);
+            }
+
+            VehicleBlockCollisionEvent j1 = new VehicleBlockCollisionEvent(var41, event);
+            this.worldObj.getServer().getPluginManager().callEvent(j1);
+         }
+
+         if(this.canTriggerWalking() && !flag && this.ridingEntity == null) {
+            int var42 = MathHelper.floor_double(this.posX);
+            k = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
+            int var45 = MathHelper.floor_double(this.posZ);
+            int var46 = this.worldObj.getBlockId(var42, k, var45);
+            if(var46 == 0) {
+               int f = this.worldObj.func_85175_e(var42, k - 1, var45);
+               if(f == 11 || f == 32 || f == 21) {
+                  var46 = this.worldObj.getBlockId(var42, k - 1, var45);
                }
             }
 
-            if(var37 != Block.ladder.blockID) {
-               var28 = 0.0D;
+            if(var46 != Block.ladder.blockID) {
+               d11 = 0.0D;
             }
 
-            this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt_double(var26 * var26 + var30 * var30) * 0.6D);
-            this.field_82151_R = (float)((double)this.field_82151_R + (double)MathHelper.sqrt_double(var26 * var26 + var28 * var28 + var30 * var30) * 0.6D);
-            if(this.field_82151_R > (float)this.nextStepDistance && var37 > 0) {
+            this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt_double(d10 * d10 + d12 * d12) * 0.6D);
+            this.field_82151_R = (float)((double)this.field_82151_R + (double)MathHelper.sqrt_double(d10 * d10 + d11 * d11 + d12 * d12) * 0.6D);
+            if(this.field_82151_R > (float)this.nextStepDistance && var46 > 0) {
                this.nextStepDistance = (int)this.field_82151_R + 1;
                if(this.isInWater()) {
-                  float var42 = MathHelper.sqrt_double(this.motionX * this.motionX * 0.20000000298023224D + this.motionY * this.motionY + this.motionZ * this.motionZ * 0.20000000298023224D) * 0.35F;
-                  if(var42 > 1.0F) {
-                     var42 = 1.0F;
+                  float var44 = MathHelper.sqrt_double(this.motionX * this.motionX * 0.20000000298023224D + this.motionY * this.motionY + this.motionZ * this.motionZ * 0.20000000298023224D) * 0.35F;
+                  if(var44 > 1.0F) {
+                     var44 = 1.0F;
                   }
 
-                  this.func_85030_a("liquid.swim", var42, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
+                  this.func_85030_a("liquid.swim", var44, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
                }
 
-               this.playStepSound(var40, var33, var36, var37);
-               Block.blocksList[var37].onEntityWalking(this.worldObj, var40, var33, var36, this);
+               this.playStepSound(var42, k, var45, var46);
+               Block.blocksList[var46].onEntityWalking(this.worldObj, var42, k, var45, this);
             }
          }
 
          this.doBlockCollisions();
-         boolean var41 = this.isWet();
+         boolean var40 = this.isWet();
          if(this.worldObj.isBoundingBoxBurning(this.boundingBox.contract(0.0010D, 0.0010D, 0.0010D))) {
             this.dealFireDamage(1);
-            if(!var41) {
+            if(!var40) {
                ++this.fire;
-               if(this.fire == 0) {
+               if(this.fire <= 0) {
+                  EntityCombustEvent var43 = new EntityCombustEvent(this.getBukkitEntity(), 8);
+                  this.worldObj.getServer().getPluginManager().callEvent(var43);
+                  if(!var43.isCancelled()) {
+                     this.setFire(var43.getDuration());
+                  }
+               } else {
                   this.setFire(8);
                }
             }
@@ -596,29 +703,30 @@
             this.fire = -this.fireResistance;
          }
 
-         if(var41 && this.fire > 0) {
+         if(var40 && this.fire > 0) {
             this.func_85030_a("random.fizz", 0.7F, 1.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
             this.fire = -this.fireResistance;
          }
 
          this.worldObj.theProfiler.endSection();
       }
+
    }
 
    protected void doBlockCollisions() {
-      int var1 = MathHelper.floor_double(this.boundingBox.minX + 0.0010D);
-      int var2 = MathHelper.floor_double(this.boundingBox.minY + 0.0010D);
-      int var3 = MathHelper.floor_double(this.boundingBox.minZ + 0.0010D);
-      int var4 = MathHelper.floor_double(this.boundingBox.maxX - 0.0010D);
-      int var5 = MathHelper.floor_double(this.boundingBox.maxY - 0.0010D);
-      int var6 = MathHelper.floor_double(this.boundingBox.maxZ - 0.0010D);
-      if(this.worldObj.checkChunksExist(var1, var2, var3, var4, var5, var6)) {
-         for(int var7 = var1; var7 <= var4; ++var7) {
-            for(int var8 = var2; var8 <= var5; ++var8) {
-               for(int var9 = var3; var9 <= var6; ++var9) {
-                  int var10 = this.worldObj.getBlockId(var7, var8, var9);
-                  if(var10 > 0) {
-                     Block.blocksList[var10].onEntityCollidedWithBlock(this.worldObj, var7, var8, var9, this);
+      int i = MathHelper.floor_double(this.boundingBox.minX + 0.0010D);
+      int j = MathHelper.floor_double(this.boundingBox.minY + 0.0010D);
+      int k = MathHelper.floor_double(this.boundingBox.minZ + 0.0010D);
+      int l = MathHelper.floor_double(this.boundingBox.maxX - 0.0010D);
+      int i1 = MathHelper.floor_double(this.boundingBox.maxY - 0.0010D);
+      int j1 = MathHelper.floor_double(this.boundingBox.maxZ - 0.0010D);
+      if(this.worldObj.checkChunksExist(i, j, k, l, i1, j1)) {
+         for(int k1 = i; k1 <= l; ++k1) {
+            for(int l1 = j; l1 <= i1; ++l1) {
+               for(int i2 = k; i2 <= j1; ++i2) {
+                  int j2 = this.worldObj.getBlockId(k1, l1, i2);
+                  if(j2 > 0) {
+                     Block.blocksList[j2].onEntityCollidedWithBlock(this.worldObj, k1, l1, i2, this);
                   }
                }
             }
@@ -627,33 +735,33 @@
 
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
-      StepSound var5 = Block.blocksList[var4].stepSound;
-      if(this.worldObj.getBlockId(var1, var2 + 1, var3) == Block.snow.blockID) {
-         var5 = Block.snow.stepSound;
-         this.func_85030_a(var5.getStepSound(), var5.getVolume() * 0.15F, var5.getPitch());
-      } else if(!Block.blocksList[var4].blockMaterial.isLiquid()) {
-         this.func_85030_a(var5.getStepSound(), var5.getVolume() * 0.15F, var5.getPitch());
+   protected void playStepSound(int i, int j, int k, int l) {
+      StepSound stepsound = Block.blocksList[l].stepSound;
+      if(this.worldObj.getBlockId(i, j + 1, k) == Block.snow.blockID) {
+         stepsound = Block.snow.stepSound;
+         this.func_85030_a(stepsound.getStepSound(), stepsound.getVolume() * 0.15F, stepsound.getPitch());
+      } else if(!Block.blocksList[l].blockMaterial.isLiquid()) {
+         this.func_85030_a(stepsound.getStepSound(), stepsound.getVolume() * 0.15F, stepsound.getPitch());
       }
 
    }
 
-   protected void func_85030_a(String var1, float var2, float var3) {
-      this.worldObj.playSoundAtEntity(this, var1, var2, var3);
+   protected void func_85030_a(String s, float f, float f1) {
+      this.worldObj.playSoundAtEntity(this, s, f, f1);
    }
 
    protected boolean canTriggerWalking() {
       return true;
    }
 
-   protected void updateFallState(double var1, boolean var3) {
-      if(var3) {
+   protected void updateFallState(double d0, boolean flag) {
+      if(flag) {
          if(this.fallDistance > 0.0F) {
             this.fall(this.fallDistance);
             this.fallDistance = 0.0F;
          }
-      } else if(var1 < 0.0D) {
-         this.fallDistance = (float)((double)this.fallDistance - var1);
+      } else if(d0 < 0.0D) {
+         this.fallDistance = (float)((double)this.fallDistance - d0);
       }
 
    }
@@ -662,9 +770,20 @@
       return null;
    }
 
-   protected void dealFireDamage(int var1) {
+   protected void dealFireDamage(int i) {
       if(!this.isImmuneToFire) {
-         this.attackEntityFrom(DamageSource.inFire, var1);
+         if(this instanceof EntityLiving) {
+            EntityDamageEvent event = new EntityDamageEvent(this.getBukkitEntity(), DamageCause.FIRE, i);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            if(event.isCancelled()) {
+               return;
+            }
+
+            i = event.getDamage();
+            event.getEntity().setLastDamageCause(event);
+         }
+
+         this.attackEntityFrom(DamageSource.inFire, i);
       }
 
    }
@@ -673,9 +792,9 @@
       return this.isImmuneToFire;
    }
 
-   protected void fall(float var1) {
+   protected void fall(float f) {
       if(this.riddenByEntity != null) {
-         this.riddenByEntity.fall(var1);
+         this.riddenByEntity.fall(f);
       }
 
    }
@@ -691,27 +810,27 @@
    public boolean handleWaterMovement() {
       if(this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, -0.4000000059604645D, 0.0D).contract(0.0010D, 0.0010D, 0.0010D), Material.water, this)) {
          if(!this.inWater && !this.firstUpdate) {
-            float var1 = MathHelper.sqrt_double(this.motionX * this.motionX * 0.20000000298023224D + this.motionY * this.motionY + this.motionZ * this.motionZ * 0.20000000298023224D) * 0.2F;
-            if(var1 > 1.0F) {
-               var1 = 1.0F;
-            }
-
-            this.func_85030_a("liquid.splash", var1, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
-            float var2 = (float)MathHelper.floor_double(this.boundingBox.minY);
-
-            int var3;
-            float var4;
-            float var5;
-            for(var3 = 0; (float)var3 < 1.0F + this.width * 20.0F; ++var3) {
-               var4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-               var5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-               this.worldObj.spawnParticle("bubble", this.posX + (double)var4, (double)(var2 + 1.0F), this.posZ + (double)var5, this.motionX, this.motionY - (double)(this.rand.nextFloat() * 0.2F), this.motionZ);
-            }
-
-            for(var3 = 0; (float)var3 < 1.0F + this.width * 20.0F; ++var3) {
-               var4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-               var5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-               this.worldObj.spawnParticle("splash", this.posX + (double)var4, (double)(var2 + 1.0F), this.posZ + (double)var5, this.motionX, this.motionY, this.motionZ);
+            float f = MathHelper.sqrt_double(this.motionX * this.motionX * 0.20000000298023224D + this.motionY * this.motionY + this.motionZ * this.motionZ * 0.20000000298023224D) * 0.2F;
+            if(f > 1.0F) {
+               f = 1.0F;
+            }
+
+            this.func_85030_a("liquid.splash", f, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
+            float f1 = (float)MathHelper.floor_double(this.boundingBox.minY);
+
+            int i;
+            float f2;
+            float f3;
+            for(i = 0; (float)i < 1.0F + this.width * 20.0F; ++i) {
+               f2 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+               f3 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+               this.worldObj.spawnParticle("bubble", this.posX + (double)f2, (double)(f1 + 1.0F), this.posZ + (double)f3, this.motionX, this.motionY - (double)(this.rand.nextFloat() * 0.2F), this.motionZ);
+            }
+
+            for(i = 0; (float)i < 1.0F + this.width * 20.0F; ++i) {
+               f2 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+               f3 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+               this.worldObj.spawnParticle("splash", this.posX + (double)f2, (double)(f1 + 1.0F), this.posZ + (double)f3, this.motionX, this.motionY, this.motionZ);
             }
          }
 
@@ -725,16 +844,16 @@
       return this.inWater;
    }
 
-   public boolean isInsideOfMaterial(Material var1) {
-      double var2 = this.posY + (double)this.getEyeHeight();
-      int var4 = MathHelper.floor_double(this.posX);
-      int var5 = MathHelper.floor_float((float)MathHelper.floor_double(var2));
-      int var6 = MathHelper.floor_double(this.posZ);
-      int var7 = this.worldObj.getBlockId(var4, var5, var6);
-      if(var7 != 0 && Block.blocksList[var7].blockMaterial == var1) {
-         float var8 = BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(var4, var5, var6)) - 0.11111111F;
-         float var9 = (float)(var5 + 1) - var8;
-         return var2 < (double)var9;
+   public boolean isInsideOfMaterial(Material material) {
+      double d0 = this.posY + (double)this.getEyeHeight();
+      int i = MathHelper.floor_double(this.posX);
+      int j = MathHelper.floor_float((float)MathHelper.floor_double(d0));
+      int k = MathHelper.floor_double(this.posZ);
+      int l = this.worldObj.getBlockId(i, j, k);
+      if(l != 0 && Block.blocksList[l].blockMaterial == material) {
+         float f = BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(i, j, k)) - 0.11111111F;
+         float f1 = (float)(j + 1) - f;
+         return d0 < (double)f1;
       } else {
          return false;
       }
@@ -748,130 +867,136 @@
       return this.worldObj.isMaterialInBB(this.boundingBox.expand(-0.10000000149011612D, -0.4000000059604645D, -0.10000000149011612D), Material.lava);
    }
 
-   public void moveFlying(float var1, float var2, float var3) {
-      float var4 = var1 * var1 + var2 * var2;
-      if(var4 >= 1.0E-4F) {
-         var4 = MathHelper.sqrt_float(var4);
-         if(var4 < 1.0F) {
-            var4 = 1.0F;
-         }
-
-         var4 = var3 / var4;
-         var1 *= var4;
-         var2 *= var4;
-         float var5 = MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F);
-         float var6 = MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F);
-         this.motionX += (double)(var1 * var6 - var2 * var5);
-         this.motionZ += (double)(var2 * var6 + var1 * var5);
+   public void moveFlying(float f, float f1, float f2) {
+      float f3 = f * f + f1 * f1;
+      if(f3 >= 1.0E-4F) {
+         f3 = MathHelper.sqrt_float(f3);
+         if(f3 < 1.0F) {
+            f3 = 1.0F;
+         }
+
+         f3 = f2 / f3;
+         f *= f3;
+         f1 *= f3;
+         float f4 = MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F);
+         float f5 = MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F);
+         this.motionX += (double)(f * f5 - f1 * f4);
+         this.motionZ += (double)(f1 * f5 + f * f4);
       }
+
    }
 
-   public float getBrightness(float var1) {
-      int var2 = MathHelper.floor_double(this.posX);
-      int var3 = MathHelper.floor_double(this.posZ);
-      if(this.worldObj.blockExists(var2, 0, var3)) {
-         double var4 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
-         int var6 = MathHelper.floor_double(this.posY - (double)this.yOffset + var4);
-         return this.worldObj.getLightBrightness(var2, var6, var3);
+   public float getBrightness(float f) {
+      int i = MathHelper.floor_double(this.posX);
+      int j = MathHelper.floor_double(this.posZ);
+      if(this.worldObj.blockExists(i, 0, j)) {
+         double d0 = (this.boundingBox.maxY - this.boundingBox.minY) * 0.66D;
+         int k = MathHelper.floor_double(this.posY - (double)this.yOffset + d0);
+         return this.worldObj.getLightBrightness(i, k, j);
       } else {
          return 0.0F;
       }
    }
 
-   public void setWorld(World var1) {
-      this.worldObj = var1;
+   public void setWorld(World world) {
+      if(world == null) {
+         this.setDead();
+         this.worldObj = ((CraftWorld)Bukkit.getServer().getWorlds().get(0)).getHandle();
+      } else {
+         this.worldObj = world;
+      }
    }
 
-   public void setPositionAndRotation(double var1, double var3, double var5, float var7, float var8) {
-      this.prevPosX = this.posX = var1;
-      this.prevPosY = this.posY = var3;
-      this.prevPosZ = this.posZ = var5;
-      this.prevRotationYaw = this.rotationYaw = var7;
-      this.prevRotationPitch = this.rotationPitch = var8;
+   public void setPositionAndRotation(double d0, double d1, double d2, float f, float f1) {
+      this.prevPosX = this.posX = d0;
+      this.prevPosY = this.posY = d1;
+      this.prevPosZ = this.posZ = d2;
+      this.prevRotationYaw = this.rotationYaw = f;
+      this.prevRotationPitch = this.rotationPitch = f1;
       this.ySize = 0.0F;
-      double var9 = (double)(this.prevRotationYaw - var7);
-      if(var9 < -180.0D) {
+      double d3 = (double)(this.prevRotationYaw - f);
+      if(d3 < -180.0D) {
          this.prevRotationYaw += 360.0F;
       }
 
-      if(var9 >= 180.0D) {
+      if(d3 >= 180.0D) {
          this.prevRotationYaw -= 360.0F;
       }
 
       this.setPosition(this.posX, this.posY, this.posZ);
-      this.setRotation(var7, var8);
+      this.setRotation(f, f1);
    }
 
-   public void setLocationAndAngles(double var1, double var3, double var5, float var7, float var8) {
-      this.lastTickPosX = this.prevPosX = this.posX = var1;
-      this.lastTickPosY = this.prevPosY = this.posY = var3 + (double)this.yOffset;
-      this.lastTickPosZ = this.prevPosZ = this.posZ = var5;
-      this.rotationYaw = var7;
-      this.rotationPitch = var8;
+   public void setLocationAndAngles(double d0, double d1, double d2, float f, float f1) {
+      this.lastTickPosX = this.prevPosX = this.posX = d0;
+      this.lastTickPosY = this.prevPosY = this.posY = d1 + (double)this.yOffset;
+      this.lastTickPosZ = this.prevPosZ = this.posZ = d2;
+      this.rotationYaw = f;
+      this.rotationPitch = f1;
       this.setPosition(this.posX, this.posY, this.posZ);
    }
 
-   public float getDistanceToEntity(Entity var1) {
-      float var2 = (float)(this.posX - var1.posX);
-      float var3 = (float)(this.posY - var1.posY);
-      float var4 = (float)(this.posZ - var1.posZ);
-      return MathHelper.sqrt_float(var2 * var2 + var3 * var3 + var4 * var4);
+   public float getDistanceToEntity(Entity entity) {
+      float f = (float)(this.posX - entity.posX);
+      float f1 = (float)(this.posY - entity.posY);
+      float f2 = (float)(this.posZ - entity.posZ);
+      return MathHelper.sqrt_float(f * f + f1 * f1 + f2 * f2);
    }
 
-   public double getDistanceSq(double var1, double var3, double var5) {
-      double var7 = this.posX - var1;
-      double var9 = this.posY - var3;
-      double var11 = this.posZ - var5;
-      return var7 * var7 + var9 * var9 + var11 * var11;
+   public double getDistanceSq(double d0, double d1, double d2) {
+      double d3 = this.posX - d0;
+      double d4 = this.posY - d1;
+      double d5 = this.posZ - d2;
+      return d3 * d3 + d4 * d4 + d5 * d5;
    }
 
-   public double getDistance(double var1, double var3, double var5) {
-      double var7 = this.posX - var1;
-      double var9 = this.posY - var3;
-      double var11 = this.posZ - var5;
-      return (double)MathHelper.sqrt_double(var7 * var7 + var9 * var9 + var11 * var11);
+   public double getDistance(double d0, double d1, double d2) {
+      double d3 = this.posX - d0;
+      double d4 = this.posY - d1;
+      double d5 = this.posZ - d2;
+      return (double)MathHelper.sqrt_double(d3 * d3 + d4 * d4 + d5 * d5);
    }
 
-   public double getDistanceSqToEntity(Entity var1) {
-      double var2 = this.posX - var1.posX;
-      double var4 = this.posY - var1.posY;
-      double var6 = this.posZ - var1.posZ;
-      return var2 * var2 + var4 * var4 + var6 * var6;
+   public double getDistanceSqToEntity(Entity entity) {
+      double d0 = this.posX - entity.posX;
+      double d1 = this.posY - entity.posY;
+      double d2 = this.posZ - entity.posZ;
+      return d0 * d0 + d1 * d1 + d2 * d2;
    }
 
-   public void onCollideWithPlayer(EntityPlayer var1) {}
+   public void onCollideWithPlayer(EntityPlayer entityhuman) {}
 
-   public void applyEntityCollision(Entity var1) {
-      if(var1.riddenByEntity != this && var1.ridingEntity != this) {
-         double var2 = var1.posX - this.posX;
-         double var4 = var1.posZ - this.posZ;
-         double var6 = MathHelper.abs_max(var2, var4);
-         if(var6 >= 0.009999999776482582D) {
-            var6 = (double)MathHelper.sqrt_double(var6);
-            var2 /= var6;
-            var4 /= var6;
-            double var8 = 1.0D / var6;
-            if(var8 > 1.0D) {
-               var8 = 1.0D;
+   public void applyEntityCollision(Entity entity) {
+      if(entity.riddenByEntity != this && entity.ridingEntity != this) {
+         double d0 = entity.posX - this.posX;
+         double d1 = entity.posZ - this.posZ;
+         double d2 = MathHelper.abs_max(d0, d1);
+         if(d2 >= 0.009999999776482582D) {
+            d2 = (double)MathHelper.sqrt_double(d2);
+            d0 /= d2;
+            d1 /= d2;
+            double d3 = 1.0D / d2;
+            if(d3 > 1.0D) {
+               d3 = 1.0D;
             }
 
-            var2 *= var8;
-            var4 *= var8;
-            var2 *= 0.05000000074505806D;
-            var4 *= 0.05000000074505806D;
-            var2 *= (double)(1.0F - this.entityCollisionReduction);
-            var4 *= (double)(1.0F - this.entityCollisionReduction);
-            this.addVelocity(-var2, 0.0D, -var4);
-            var1.addVelocity(var2, 0.0D, var4);
+            d0 *= d3;
+            d1 *= d3;
+            d0 *= 0.05000000074505806D;
+            d1 *= 0.05000000074505806D;
+            d0 *= (double)(1.0F - this.entityCollisionReduction);
+            d1 *= (double)(1.0F - this.entityCollisionReduction);
+            this.addVelocity(-d0, 0.0D, -d1);
+            entity.addVelocity(d0, 0.0D, d1);
          }
-
       }
+
    }
 
-   public void addVelocity(double var1, double var3, double var5) {
-      this.motionX += var1;
-      this.motionY += var3;
-      this.motionZ += var5;
+   public void addVelocity(double d0, double d1, double d2) {
+      this.motionX += d0;
+      this.motionY += d1;
+      this.motionZ += d2;
       this.isAirBorne = true;
    }
 
@@ -879,7 +1004,7 @@
       this.velocityChanged = true;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
@@ -896,80 +1021,119 @@
       return false;
    }
 
-   public void addToPlayerScore(Entity var1, int var2) {}
+   public void addToPlayerScore(Entity entity, int i) {}
 
-   public boolean addEntityID(NBTTagCompound var1) {
-      String var2 = this.getEntityString();
-      if(!this.isDead && var2 != null) {
-         var1.setString("id", var2);
-         this.writeToNBT(var1);
+   public boolean addEntityID(NBTTagCompound nbttagcompound) {
+      String s = this.getEntityString();
+      if(!this.isDead && s != null) {
+         nbttagcompound.setString("id", s);
+         this.writeToNBT(nbttagcompound);
          return true;
       } else {
          return false;
       }
    }
 
-   public void writeToNBT(NBTTagCompound var1) {
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
       try {
-         var1.setTag("Pos", this.newDoubleNBTList(new double[]{this.posX, this.posY + (double)this.ySize, this.posZ}));
-         var1.setTag("Motion", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
-         var1.setTag("Rotation", this.newFloatNBTList(new float[]{this.rotationYaw, this.rotationPitch}));
-         var1.setFloat("FallDistance", this.fallDistance);
-         var1.setShort("Fire", (short)this.fire);
-         var1.setShort("Air", (short)this.getAir());
-         var1.setBoolean("OnGround", this.onGround);
-         var1.setInteger("Dimension", this.dimension);
-         var1.setBoolean("Invulnerable", this.field_83001_bt);
-         var1.setInteger("PortalCooldown", this.timeUntilPortal);
-         this.writeEntityToNBT(var1);
+         nbttagcompound.setTag("Pos", this.newDoubleNBTList(new double[]{this.posX, this.posY + (double)this.ySize, this.posZ}));
+         nbttagcompound.setTag("Motion", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
+         if(Float.isNaN(this.rotationYaw)) {
+            this.rotationYaw = 0.0F;
+         }
+
+         if(Float.isNaN(this.rotationPitch)) {
+            this.rotationPitch = 0.0F;
+         }
+
+         nbttagcompound.setTag("Rotation", this.newFloatNBTList(new float[]{this.rotationYaw, this.rotationPitch}));
+         nbttagcompound.setFloat("FallDistance", this.fallDistance);
+         nbttagcompound.setShort("Fire", (short)this.fire);
+         nbttagcompound.setShort("Air", (short)this.getAir());
+         nbttagcompound.setBoolean("OnGround", this.onGround);
+         nbttagcompound.setInteger("Dimension", this.dimension);
+         nbttagcompound.setBoolean("Invulnerable", this.field_83001_bt);
+         nbttagcompound.setInteger("PortalCooldown", this.timeUntilPortal);
+         nbttagcompound.setLong("WorldUUIDLeast", this.worldObj.getSaveHandler().getUUID().getLeastSignificantBits());
+         nbttagcompound.setLong("WorldUUIDMost", this.worldObj.getSaveHandler().getUUID().getMostSignificantBits());
+         nbttagcompound.setLong("UUIDLeast", this.uniqueId.getLeastSignificantBits());
+         nbttagcompound.setLong("UUIDMost", this.uniqueId.getMostSignificantBits());
+         this.writeEntityToNBT(nbttagcompound);
       } catch (Throwable var5) {
-         CrashReport var3 = CrashReport.func_85055_a(var5, "Saving entity NBT");
-         CrashReportCategory var4 = var3.func_85058_a("Entity being saved");
-         this.func_85029_a(var4);
-         throw new ReportedException(var3);
+         CrashReport crashreport = CrashReport.func_85055_a(var5, "Saving entity NBT");
+         CrashReportCategory crashreportsystemdetails = crashreport.func_85058_a("Entity being saved");
+         this.func_85029_a(crashreportsystemdetails);
+         throw new ReportedException(crashreport);
       }
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
       try {
-         NBTTagList var2 = var1.getTagList("Pos");
-         NBTTagList var6 = var1.getTagList("Motion");
-         NBTTagList var7 = var1.getTagList("Rotation");
-         this.motionX = ((NBTTagDouble)var6.tagAt(0)).data;
-         this.motionY = ((NBTTagDouble)var6.tagAt(1)).data;
-         this.motionZ = ((NBTTagDouble)var6.tagAt(2)).data;
-         if(Math.abs(this.motionX) > 10.0D) {
-            this.motionX = 0.0D;
+         NBTTagList throwable = nbttagcompound.getTagList("Pos");
+         NBTTagList crashreport1 = nbttagcompound.getTagList("Motion");
+         NBTTagList crashreportsystemdetails1 = nbttagcompound.getTagList("Rotation");
+         this.motionX = ((NBTTagDouble)crashreport1.tagAt(0)).data;
+         this.motionY = ((NBTTagDouble)crashreport1.tagAt(1)).data;
+         this.motionZ = ((NBTTagDouble)crashreport1.tagAt(2)).data;
+         this.prevPosX = this.lastTickPosX = this.posX = ((NBTTagDouble)throwable.tagAt(0)).data;
+         this.prevPosY = this.lastTickPosY = this.posY = ((NBTTagDouble)throwable.tagAt(1)).data;
+         this.prevPosZ = this.lastTickPosZ = this.posZ = ((NBTTagDouble)throwable.tagAt(2)).data;
+         this.prevRotationYaw = this.rotationYaw = ((NBTTagFloat)crashreportsystemdetails1.tagAt(0)).data;
+         this.prevRotationPitch = this.rotationPitch = ((NBTTagFloat)crashreportsystemdetails1.tagAt(1)).data;
+         this.fallDistance = nbttagcompound.getFloat("FallDistance");
+         this.fire = nbttagcompound.getShort("Fire");
+         this.setAir(nbttagcompound.getShort("Air"));
+         this.onGround = nbttagcompound.getBoolean("OnGround");
+         this.dimension = nbttagcompound.getInteger("Dimension");
+         this.field_83001_bt = nbttagcompound.getBoolean("Invulnerable");
+         this.timeUntilPortal = nbttagcompound.getInteger("PortalCooldown");
+         this.setPosition(this.posX, this.posY, this.posZ);
+         long least = nbttagcompound.getLong("UUIDLeast");
+         long most = nbttagcompound.getLong("UUIDMost");
+         if(least != 0L && most != 0L) {
+            this.uniqueId = new UUID(most, least);
          }
 
-         if(Math.abs(this.motionY) > 10.0D) {
-            this.motionY = 0.0D;
+         this.setRotation(this.rotationYaw, this.rotationPitch);
+         this.readEntityFromNBT(nbttagcompound);
+         if(!(this.getBukkitEntity() instanceof Vehicle)) {
+            if(Math.abs(this.motionX) > 10.0D) {
+               this.motionX = 0.0D;
+            }
+
+            if(Math.abs(this.motionY) > 10.0D) {
+               this.motionY = 0.0D;
+            }
+
+            if(Math.abs(this.motionZ) > 10.0D) {
+               this.motionZ = 0.0D;
+            }
          }
 
-         if(Math.abs(this.motionZ) > 10.0D) {
-            this.motionZ = 0.0D;
+         if(this instanceof EntityPlayerMP) {
+            Server server = Bukkit.getServer();
+            Object bworld = null;
+            String worldName = nbttagcompound.getString("World");
+            if(nbttagcompound.hasKey("WorldUUIDMost") && nbttagcompound.hasKey("WorldUUIDLeast")) {
+               UUID entityPlayer = new UUID(nbttagcompound.getLong("WorldUUIDMost"), nbttagcompound.getLong("WorldUUIDLeast"));
+               bworld = server.getWorld(entityPlayer);
+            } else {
+               bworld = server.getWorld(worldName);
+            }
+
+            if(bworld == null) {
+               EntityPlayerMP entityPlayer1 = (EntityPlayerMP)this;
+               bworld = ((CraftServer)server).getServer().worldServerForDimension(entityPlayer1.dimension).getWorld();
+            }
+
+            this.setWorld(bworld == null?null:((CraftWorld)bworld).getHandle());
          }
 
-         this.prevPosX = this.lastTickPosX = this.posX = ((NBTTagDouble)var2.tagAt(0)).data;
-         this.prevPosY = this.lastTickPosY = this.posY = ((NBTTagDouble)var2.tagAt(1)).data;
-         this.prevPosZ = this.lastTickPosZ = this.posZ = ((NBTTagDouble)var2.tagAt(2)).data;
-         this.prevRotationYaw = this.rotationYaw = ((NBTTagFloat)var7.tagAt(0)).data;
-         this.prevRotationPitch = this.rotationPitch = ((NBTTagFloat)var7.tagAt(1)).data;
-         this.fallDistance = var1.getFloat("FallDistance");
-         this.fire = var1.getShort("Fire");
-         this.setAir(var1.getShort("Air"));
-         this.onGround = var1.getBoolean("OnGround");
-         this.dimension = var1.getInteger("Dimension");
-         this.field_83001_bt = var1.getBoolean("Invulnerable");
-         this.timeUntilPortal = var1.getInteger("PortalCooldown");
-         this.setPosition(this.posX, this.posY, this.posZ);
-         this.setRotation(this.rotationYaw, this.rotationPitch);
-         this.readEntityFromNBT(var1);
-      } catch (Throwable var5) {
-         CrashReport var3 = CrashReport.func_85055_a(var5, "Loading entity NBT");
-         CrashReportCategory var4 = var3.func_85058_a("Entity being loaded");
-         this.func_85029_a(var4);
-         throw new ReportedException(var3);
+      } catch (Throwable var13) {
+         CrashReport crashreport = CrashReport.func_85055_a(var13, "Loading entity NBT");
+         CrashReportCategory crashreportsystemdetails = crashreport.func_85058_a("Entity being loaded");
+         this.func_85029_a(crashreportsystemdetails);
+         throw new ReportedException(crashreport);
       }
    }
 
@@ -981,45 +1145,45 @@
 
    protected abstract void writeEntityToNBT(NBTTagCompound var1);
 
-   protected NBTTagList newDoubleNBTList(double ... var1) {
-      NBTTagList var2 = new NBTTagList();
-      double[] var3 = var1;
-      int var4 = var1.length;
+   protected NBTTagList newDoubleNBTList(double ... adouble) {
+      NBTTagList nbttaglist = new NBTTagList();
+      double[] adouble1 = adouble;
+      int i = adouble.length;
 
-      for(int var5 = 0; var5 < var4; ++var5) {
-         double var6 = var3[var5];
-         var2.appendTag(new NBTTagDouble((String)null, var6));
+      for(int j = 0; j < i; ++j) {
+         double d0 = adouble1[j];
+         nbttaglist.appendTag(new NBTTagDouble((String)null, d0));
       }
 
-      return var2;
+      return nbttaglist;
    }
 
-   protected NBTTagList newFloatNBTList(float ... var1) {
-      NBTTagList var2 = new NBTTagList();
-      float[] var3 = var1;
-      int var4 = var1.length;
+   protected NBTTagList newFloatNBTList(float ... afloat) {
+      NBTTagList nbttaglist = new NBTTagList();
+      float[] afloat1 = afloat;
+      int i = afloat.length;
 
-      for(int var5 = 0; var5 < var4; ++var5) {
-         float var6 = var3[var5];
-         var2.appendTag(new NBTTagFloat((String)null, var6));
+      for(int j = 0; j < i; ++j) {
+         float f = afloat1[j];
+         nbttaglist.appendTag(new NBTTagFloat((String)null, f));
       }
 
-      return var2;
+      return nbttaglist;
    }
 
-   public EntityItem dropItem(int var1, int var2) {
-      return this.dropItemWithOffset(var1, var2, 0.0F);
+   public EntityItem dropItem(int i, int j) {
+      return this.dropItemWithOffset(i, j, 0.0F);
    }
 
-   public EntityItem dropItemWithOffset(int var1, int var2, float var3) {
-      return this.entityDropItem(new ItemStack(var1, var2, 0), var3);
+   public EntityItem dropItemWithOffset(int i, int j, float f) {
+      return this.entityDropItem(new ItemStack(i, j, 0), f);
    }
 
-   public EntityItem entityDropItem(ItemStack var1, float var2) {
-      EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY + (double)var2, this.posZ, var1);
-      var3.delayBeforeCanPickup = 10;
-      this.worldObj.spawnEntityInWorld(var3);
-      return var3;
+   public EntityItem entityDropItem(ItemStack itemstack, float f) {
+      EntityItem entityitem = new EntityItem(this.worldObj, this.posX, this.posY + (double)f, this.posZ, itemstack);
+      entityitem.delayBeforeCanPickup = 10;
+      this.worldObj.spawnEntityInWorld(entityitem);
+      return entityitem;
    }
 
    public boolean isEntityAlive() {
@@ -1027,14 +1191,14 @@
    }
 
    public boolean isEntityInsideOpaqueBlock() {
-      for(int var1 = 0; var1 < 8; ++var1) {
-         float var2 = ((float)((var1 >> 0) % 2) - 0.5F) * this.width * 0.8F;
-         float var3 = ((float)((var1 >> 1) % 2) - 0.5F) * 0.1F;
-         float var4 = ((float)((var1 >> 2) % 2) - 0.5F) * this.width * 0.8F;
-         int var5 = MathHelper.floor_double(this.posX + (double)var2);
-         int var6 = MathHelper.floor_double(this.posY + (double)this.getEyeHeight() + (double)var3);
-         int var7 = MathHelper.floor_double(this.posZ + (double)var4);
-         if(this.worldObj.isBlockNormalCube(var5, var6, var7)) {
+      for(int i = 0; i < 8; ++i) {
+         float f = ((float)((i >> 0) % 2) - 0.5F) * this.width * 0.8F;
+         float f1 = ((float)((i >> 1) % 2) - 0.5F) * 0.1F;
+         float f2 = ((float)((i >> 2) % 2) - 0.5F) * this.width * 0.8F;
+         int j = MathHelper.floor_double(this.posX + (double)f);
+         int k = MathHelper.floor_double(this.posY + (double)this.getEyeHeight() + (double)f1);
+         int l = MathHelper.floor_double(this.posZ + (double)f2);
+         if(this.worldObj.isBlockNormalCube(j, k, l)) {
             return true;
          }
       }
@@ -1042,11 +1206,11 @@
       return false;
    }
 
-   public boolean interact(EntityPlayer var1) {
+   public boolean interact(EntityPlayer entityhuman) {
       return false;
    }
 
-   public AxisAlignedBB getCollisionBox(Entity var1) {
+   public AxisAlignedBB getCollisionBox(Entity entity) {
       return null;
    }
 
@@ -1078,31 +1242,32 @@
                this.entityRiderPitchDelta += 360.0D;
             }
 
-            double var1 = this.entityRiderYawDelta * 0.5D;
-            double var3 = this.entityRiderPitchDelta * 0.5D;
-            float var5 = 10.0F;
-            if(var1 > (double)var5) {
-               var1 = (double)var5;
+            double d0 = this.entityRiderYawDelta * 0.5D;
+            double d1 = this.entityRiderPitchDelta * 0.5D;
+            float f = 10.0F;
+            if(d0 > (double)f) {
+               d0 = (double)f;
             }
 
-            if(var1 < (double)(-var5)) {
-               var1 = (double)(-var5);
+            if(d0 < (double)(-f)) {
+               d0 = (double)(-f);
             }
 
-            if(var3 > (double)var5) {
-               var3 = (double)var5;
+            if(d1 > (double)f) {
+               d1 = (double)f;
             }
 
-            if(var3 < (double)(-var5)) {
-               var3 = (double)(-var5);
+            if(d1 < (double)(-f)) {
+               d1 = (double)(-f);
             }
 
-            this.entityRiderYawDelta -= var1;
-            this.entityRiderPitchDelta -= var3;
-            this.rotationYaw = (float)((double)this.rotationYaw + var1);
-            this.rotationPitch = (float)((double)this.rotationPitch + var3);
+            this.entityRiderYawDelta -= d0;
+            this.entityRiderPitchDelta -= d1;
+            this.rotationYaw = (float)((double)this.rotationYaw + d0);
+            this.rotationPitch = (float)((double)this.rotationPitch + d1);
          }
       }
+
    }
 
    public void updateRiderPosition() {
@@ -1123,62 +1288,96 @@
       return (double)this.height * 0.75D;
    }
 
-   public void mountEntity(Entity var1) {
+   public void mountEntity(Entity entity) {
+      this.setPassengerOf(entity);
+   }
+
+   public org.bukkit.entity.Entity getBukkitEntity() {
+      if(this.bukkitEntity == null) {
+         this.bukkitEntity = CraftEntity.getEntity(this.worldObj.getServer(), this);
+      }
+
+      return this.bukkitEntity;
+   }
+
+   public void setPassengerOf(Entity entity) {
+      PluginManager pluginManager = Bukkit.getPluginManager();
+      this.getBukkitEntity();
       this.entityRiderPitchDelta = 0.0D;
       this.entityRiderYawDelta = 0.0D;
-      if(var1 == null) {
+      VehicleExitEvent event;
+      if(entity == null) {
          if(this.ridingEntity != null) {
+            if(this.bukkitEntity instanceof LivingEntity && this.ridingEntity.getBukkitEntity() instanceof Vehicle) {
+               event = new VehicleExitEvent((Vehicle)this.ridingEntity.getBukkitEntity(), (LivingEntity)this.bukkitEntity);
+               pluginManager.callEvent(event);
+            }
+
             this.setLocationAndAngles(this.ridingEntity.posX, this.ridingEntity.boundingBox.minY + (double)this.ridingEntity.height, this.ridingEntity.posZ, this.rotationYaw, this.rotationPitch);
             this.ridingEntity.riddenByEntity = null;
          }
 
          this.ridingEntity = null;
-      } else if(this.ridingEntity == var1) {
-         this.unmountEntity(var1);
+      } else if(this.ridingEntity == entity) {
+         if(this.bukkitEntity instanceof LivingEntity && this.ridingEntity.getBukkitEntity() instanceof Vehicle) {
+            event = new VehicleExitEvent((Vehicle)this.ridingEntity.getBukkitEntity(), (LivingEntity)this.bukkitEntity);
+            pluginManager.callEvent(event);
+         }
+
+         this.unmountEntity(entity);
          this.ridingEntity.riddenByEntity = null;
          this.ridingEntity = null;
       } else {
+         if(this.bukkitEntity instanceof LivingEntity && entity.getBukkitEntity() instanceof Vehicle) {
+            VehicleEnterEvent event1 = new VehicleEnterEvent((Vehicle)entity.getBukkitEntity(), this.bukkitEntity);
+            pluginManager.callEvent(event1);
+            if(event1.isCancelled()) {
+               return;
+            }
+         }
+
          if(this.ridingEntity != null) {
             this.ridingEntity.riddenByEntity = null;
          }
 
-         if(var1.riddenByEntity != null) {
-            var1.riddenByEntity.ridingEntity = null;
+         if(entity.riddenByEntity != null) {
+            entity.riddenByEntity.ridingEntity = null;
          }
 
-         this.ridingEntity = var1;
-         var1.riddenByEntity = this;
+         this.ridingEntity = entity;
+         entity.riddenByEntity = this;
       }
+
    }
 
-   public void unmountEntity(Entity var1) {
-      double var2 = var1.posX;
-      double var4 = var1.boundingBox.minY + (double)var1.height;
-      double var6 = var1.posZ;
+   public void unmountEntity(Entity entity) {
+      double d0 = entity.posX;
+      double d1 = entity.boundingBox.minY + (double)entity.height;
+      double d2 = entity.posZ;
 
-      for(double var8 = -1.5D; var8 < 2.0D; ++var8) {
-         for(double var10 = -1.5D; var10 < 2.0D; ++var10) {
-            if(var8 != 0.0D || var10 != 0.0D) {
-               int var12 = (int)(this.posX + var8);
-               int var13 = (int)(this.posZ + var10);
-               AxisAlignedBB var14 = this.boundingBox.getOffsetBoundingBox(var8, 1.0D, var10);
-               if(this.worldObj.getAllCollidingBoundingBoxes(var14).isEmpty()) {
-                  if(this.worldObj.doesBlockHaveSolidTopSurface(var12, (int)this.posY, var13)) {
-                     this.setLocationAndAngles(this.posX + var8, this.posY + 1.0D, this.posZ + var10, this.rotationYaw, this.rotationPitch);
+      for(double d3 = -1.5D; d3 < 2.0D; ++d3) {
+         for(double d4 = -1.5D; d4 < 2.0D; ++d4) {
+            if(d3 != 0.0D || d4 != 0.0D) {
+               int i = (int)(this.posX + d3);
+               int j = (int)(this.posZ + d4);
+               AxisAlignedBB axisalignedbb = this.boundingBox.getOffsetBoundingBox(d3, 1.0D, d4);
+               if(this.worldObj.getAllCollidingBoundingBoxes(axisalignedbb).isEmpty()) {
+                  if(this.worldObj.doesBlockHaveSolidTopSurface(i, (int)this.posY, j)) {
+                     this.setLocationAndAngles(this.posX + d3, this.posY + 1.0D, this.posZ + d4, this.rotationYaw, this.rotationPitch);
                      return;
                   }
 
-                  if(this.worldObj.doesBlockHaveSolidTopSurface(var12, (int)this.posY - 1, var13) || this.worldObj.getBlockMaterial(var12, (int)this.posY - 1, var13) == Material.water) {
-                     var2 = this.posX + var8;
-                     var4 = this.posY + 1.0D;
-                     var6 = this.posZ + var10;
+                  if(this.worldObj.doesBlockHaveSolidTopSurface(i, (int)this.posY - 1, j) || this.worldObj.getBlockMaterial(i, (int)this.posY - 1, j) == Material.water) {
+                     d0 = this.posX + d3;
+                     d1 = this.posY + 1.0D;
+                     d2 = this.posZ + d4;
                   }
                }
             }
          }
       }
 
-      this.setLocationAndAngles(var2, var4, var6, this.rotationYaw, this.rotationPitch);
+      this.setLocationAndAngles(d0, d1, d2, this.rotationYaw, this.rotationPitch);
    }
 
    public float getCollisionBorderSize() {
@@ -1193,14 +1392,15 @@
       if(this.timeUntilPortal > 0) {
          this.timeUntilPortal = this.getPortalCooldown();
       } else {
-         double var1 = this.prevPosX - this.posX;
-         double var3 = this.prevPosZ - this.posZ;
+         double d0 = this.prevPosX - this.posX;
+         double d1 = this.prevPosZ - this.posZ;
          if(!this.worldObj.isRemote && !this.inPortal) {
-            this.field_82152_aq = Direction.func_82372_a(var1, var3);
+            this.field_82152_aq = Direction.func_82372_a(d0, d1);
          }
 
          this.inPortal = true;
       }
+
    }
 
    public int getPortalCooldown() {
@@ -1211,7 +1411,7 @@
       return null;
    }
 
-   public void setCurrentItemOrArmor(int var1, ItemStack var2) {}
+   public void setCurrentItemOrArmor(int i, ItemStack itemstack) {}
 
    public boolean isBurning() {
       return this.fire > 0 || this.getFlag(0);
@@ -1225,40 +1425,40 @@
       return this.getFlag(1);
    }
 
-   public void setSneaking(boolean var1) {
-      this.setFlag(1, var1);
+   public void setSneaking(boolean flag) {
+      this.setFlag(1, flag);
    }
 
    public boolean isSprinting() {
       return this.getFlag(3);
    }
 
-   public void setSprinting(boolean var1) {
-      this.setFlag(3, var1);
+   public void setSprinting(boolean flag) {
+      this.setFlag(3, flag);
    }
 
    public boolean getHasActivePotion() {
       return this.getFlag(5);
    }
 
-   public void setHasActivePotion(boolean var1) {
-      this.setFlag(5, var1);
+   public void setHasActivePotion(boolean flag) {
+      this.setFlag(5, flag);
    }
 
-   public void setEating(boolean var1) {
-      this.setFlag(4, var1);
+   public void setEating(boolean flag) {
+      this.setFlag(4, flag);
    }
 
-   protected boolean getFlag(int var1) {
-      return (this.dataWatcher.getWatchableObjectByte(0) & 1 << var1) != 0;
+   protected boolean getFlag(int i) {
+      return (this.dataWatcher.getWatchableObjectByte(0) & 1 << i) != 0;
    }
 
-   protected void setFlag(int var1, boolean var2) {
-      byte var3 = this.dataWatcher.getWatchableObjectByte(0);
-      if(var2) {
-         this.dataWatcher.updateObject(0, Byte.valueOf((byte)(var3 | 1 << var1)));
+   protected void setFlag(int i, boolean flag) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(0);
+      if(flag) {
+         this.dataWatcher.updateObject(0, Byte.valueOf((byte)(b0 | 1 << i)));
       } else {
-         this.dataWatcher.updateObject(0, Byte.valueOf((byte)(var3 & ~(1 << var1))));
+         this.dataWatcher.updateObject(0, Byte.valueOf((byte)(b0 & ~(1 << i))));
       }
 
    }
@@ -1267,88 +1467,108 @@
       return this.dataWatcher.getWatchableObjectShort(1);
    }
 
-   public void setAir(int var1) {
-      this.dataWatcher.updateObject(1, Short.valueOf((short)var1));
+   public void setAir(int i) {
+      this.dataWatcher.updateObject(1, Short.valueOf((short)i));
    }
 
-   public void onStruckByLightning(EntityLightningBolt var1) {
-      this.dealFireDamage(5);
-      ++this.fire;
-      if(this.fire == 0) {
-         this.setFire(8);
+   public void onStruckByLightning(EntityLightningBolt entitylightning) {
+      org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+      org.bukkit.entity.Entity stormBukkitEntity = entitylightning.getBukkitEntity();
+      PluginManager pluginManager = Bukkit.getPluginManager();
+      if(thisBukkitEntity instanceof Painting) {
+         PaintingBreakByEntityEvent event = new PaintingBreakByEntityEvent((Painting)thisBukkitEntity, stormBukkitEntity);
+         pluginManager.callEvent(event);
+         if(event.isCancelled()) {
+            return;
+         }
       }
 
+      EntityDamageByEntityEvent var7 = new EntityDamageByEntityEvent(stormBukkitEntity, thisBukkitEntity, DamageCause.LIGHTNING, 5);
+      pluginManager.callEvent(var7);
+      if(!var7.isCancelled()) {
+         thisBukkitEntity.setLastDamageCause(var7);
+         this.dealFireDamage(var7.getDamage());
+         ++this.fire;
+         if(this.fire == 0) {
+            EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
+            pluginManager.callEvent(entityCombustEvent);
+            if(!entityCombustEvent.isCancelled()) {
+               this.setFire(entityCombustEvent.getDuration());
+            }
+         }
+
+      }
    }
 
-   public void onKillEntity(EntityLiving var1) {}
+   public void onKillEntity(EntityLiving entityliving) {}
 
-   protected boolean pushOutOfBlocks(double var1, double var3, double var5) {
-      int var7 = MathHelper.floor_double(var1);
-      int var8 = MathHelper.floor_double(var3);
-      int var9 = MathHelper.floor_double(var5);
-      double var10 = var1 - (double)var7;
-      double var12 = var3 - (double)var8;
-      double var14 = var5 - (double)var9;
-      List var16 = this.worldObj.getAllCollidingBoundingBoxes(this.boundingBox);
-      if(var16.isEmpty() && !this.worldObj.func_85174_u(var7, var8, var9)) {
+   protected boolean pushOutOfBlocks(double d0, double d1, double d2) {
+      int i = MathHelper.floor_double(d0);
+      int j = MathHelper.floor_double(d1);
+      int k = MathHelper.floor_double(d2);
+      double d3 = d0 - (double)i;
+      double d4 = d1 - (double)j;
+      double d5 = d2 - (double)k;
+      List list = this.worldObj.getAllCollidingBoundingBoxes(this.boundingBox);
+      if(list.isEmpty() && !this.worldObj.func_85174_u(i, j, k)) {
          return false;
       } else {
-         boolean var17 = !this.worldObj.func_85174_u(var7 - 1, var8, var9);
-         boolean var18 = !this.worldObj.func_85174_u(var7 + 1, var8, var9);
-         boolean var19 = !this.worldObj.func_85174_u(var7, var8 - 1, var9);
-         boolean var20 = !this.worldObj.func_85174_u(var7, var8 + 1, var9);
-         boolean var21 = !this.worldObj.func_85174_u(var7, var8, var9 - 1);
-         boolean var22 = !this.worldObj.func_85174_u(var7, var8, var9 + 1);
-         byte var23 = 3;
-         double var24 = 9999.0D;
-         if(var17 && var10 < var24) {
-            var24 = var10;
-            var23 = 0;
+         boolean flag = !this.worldObj.func_85174_u(i - 1, j, k);
+         boolean flag1 = !this.worldObj.func_85174_u(i + 1, j, k);
+         boolean flag2 = !this.worldObj.func_85174_u(i, j - 1, k);
+         boolean flag3 = !this.worldObj.func_85174_u(i, j + 1, k);
+         boolean flag4 = !this.worldObj.func_85174_u(i, j, k - 1);
+         boolean flag5 = !this.worldObj.func_85174_u(i, j, k + 1);
+         byte b0 = 3;
+         double d6 = 9999.0D;
+         if(flag && d3 < d6) {
+            d6 = d3;
+            b0 = 0;
          }
 
-         if(var18 && 1.0D - var10 < var24) {
-            var24 = 1.0D - var10;
-            var23 = 1;
+         if(flag1 && 1.0D - d3 < d6) {
+            d6 = 1.0D - d3;
+            b0 = 1;
          }
 
-         if(var20 && 1.0D - var12 < var24) {
-            var24 = 1.0D - var12;
-            var23 = 3;
+         if(flag3 && 1.0D - d4 < d6) {
+            d6 = 1.0D - d4;
+            b0 = 3;
          }
 
-         if(var21 && var14 < var24) {
-            var24 = var14;
-            var23 = 4;
+         if(flag4 && d5 < d6) {
+            d6 = d5;
+            b0 = 4;
          }
 
-         if(var22 && 1.0D - var14 < var24) {
-            var24 = 1.0D - var14;
-            var23 = 5;
+         if(flag5 && 1.0D - d5 < d6) {
+            d6 = 1.0D - d5;
+            b0 = 5;
          }
 
-         float var26 = this.rand.nextFloat() * 0.2F + 0.1F;
-         if(var23 == 0) {
-            this.motionX = (double)(-var26);
+         float f = this.rand.nextFloat() * 0.2F + 0.1F;
+         if(b0 == 0) {
+            this.motionX = (double)(-f);
          }
 
-         if(var23 == 1) {
-            this.motionX = (double)var26;
+         if(b0 == 1) {
+            this.motionX = (double)f;
          }
 
-         if(var23 == 2) {
-            this.motionY = (double)(-var26);
+         if(b0 == 2) {
+            this.motionY = (double)(-f);
          }
 
-         if(var23 == 3) {
-            this.motionY = (double)var26;
+         if(b0 == 3) {
+            this.motionY = (double)f;
          }
 
-         if(var23 == 4) {
-            this.motionZ = (double)(-var26);
+         if(b0 == 4) {
+            this.motionZ = (double)(-f);
          }
 
-         if(var23 == 5) {
-            this.motionZ = (double)var26;
+         if(b0 == 5) {
+            this.motionZ = (double)f;
          }
 
          return true;
@@ -1361,20 +1581,20 @@
    }
 
    public String getEntityName() {
-      String var1 = EntityList.getEntityString(this);
-      if(var1 == null) {
-         var1 = "generic";
+      String s = EntityList.getEntityString(this);
+      if(s == null) {
+         s = "generic";
       }
 
-      return StatCollector.translateToLocal("entity." + var1 + ".name");
+      return StatCollector.translateToLocal("entity." + s + ".name");
    }
 
    public Entity[] getParts() {
       return null;
    }
 
-   public boolean isEntityEqual(Entity var1) {
-      return this == var1;
+   public boolean isEntityEqual(Entity entity) {
+      return this == entity;
    }
 
    public float setRotationYawHead() {
@@ -1385,7 +1605,7 @@
       return true;
    }
 
-   public boolean func_85031_j(Entity var1) {
+   public boolean func_85031_j(Entity entity) {
       return false;
    }
 
@@ -1397,47 +1617,22 @@
       return this.field_83001_bt;
    }
 
-   public void func_82149_j(Entity var1) {
-      this.setLocationAndAngles(var1.posX, var1.posY, var1.posZ, var1.rotationYaw, var1.rotationPitch);
+   public void func_82149_j(Entity entity) {
+      this.setLocationAndAngles(entity.posX, entity.posY, entity.posZ, entity.rotationYaw, entity.rotationPitch);
    }
 
-   public void copyDataFrom(Entity var1, boolean var2) {
-      NBTTagCompound var3 = new NBTTagCompound();
-      var1.writeToNBT(var3);
-      this.readFromNBT(var3);
-      this.timeUntilPortal = var1.timeUntilPortal;
-      this.field_82152_aq = var1.field_82152_aq;
-   }
-
-   public void travelToTheEnd(int var1) {
-      if(!this.worldObj.isRemote && !this.isDead) {
-         this.worldObj.theProfiler.startSection("changeDimension");
-         MinecraftServer var2 = MinecraftServer.getServer();
-         int var3 = this.dimension;
-         WorldServer var4 = var2.worldServerForDimension(var3);
-         WorldServer var5 = var2.worldServerForDimension(var1);
-         this.dimension = var1;
-         this.worldObj.setEntityDead(this);
-         this.isDead = false;
-         this.worldObj.theProfiler.startSection("reposition");
-         var2.getConfigurationManager().transferEntityToWorld(this, var3, var4, var5);
-         this.worldObj.theProfiler.endStartSection("reloading");
-         Entity var6 = EntityList.createEntityByName(EntityList.getEntityString(this), var5);
-         if(var6 != null) {
-            var6.copyDataFrom(this, true);
-            var5.spawnEntityInWorld(var6);
-         }
-
-         this.isDead = true;
-         this.worldObj.theProfiler.endSection();
-         var4.resetUpdateEntityTick();
-         var5.resetUpdateEntityTick();
-         this.worldObj.theProfiler.endSection();
-      }
+   public void copyDataFrom(Entity entity, boolean flag) {
+      NBTTagCompound nbttagcompound = new NBTTagCompound();
+      entity.writeToNBT(nbttagcompound);
+      this.readFromNBT(nbttagcompound);
+      this.timeUntilPortal = entity.timeUntilPortal;
+      this.field_82152_aq = entity.field_82152_aq;
    }
 
-   public float func_82146_a(Explosion var1, Block var2, int var3, int var4, int var5) {
-      return var2.getExplosionResistance(this);
+   public void travelToTheEnd(int i) {}
+
+   public float func_82146_a(Explosion explosion, Block block, int i, int j, int k) {
+      return block.getExplosionResistance(this);
    }
 
    public int func_82143_as() {
@@ -1452,13 +1647,13 @@
       return false;
    }
 
-   public void func_85029_a(CrashReportCategory var1) {
-      var1.addCrashSectionCallable("Entity Type", new CallableEntityType(this));
-      var1.addCrashSection("Entity ID", Integer.valueOf(this.entityId));
-      var1.addCrashSection("Name", this.getEntityName());
-      var1.addCrashSection("Exact location", String.format("%.2f, %.2f, %.2f", new Object[]{Double.valueOf(this.posX), Double.valueOf(this.posY), Double.valueOf(this.posZ)}));
-      var1.addCrashSection("Block location", CrashReportCategory.func_85071_a(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)));
-      var1.addCrashSection("Momentum", String.format("%.2f, %.2f, %.2f", new Object[]{Double.valueOf(this.motionX), Double.valueOf(this.motionY), Double.valueOf(this.motionZ)}));
+   public void func_85029_a(CrashReportCategory crashreportsystemdetails) {
+      crashreportsystemdetails.addCrashSectionCallable("Entity Type", new CallableEntityType(this));
+      crashreportsystemdetails.addCrashSection("Entity ID", Integer.valueOf(this.entityId));
+      crashreportsystemdetails.addCrashSection("Name", this.getEntityName());
+      crashreportsystemdetails.addCrashSection("Exact location", String.format("%.2f, %.2f, %.2f", new Object[]{Double.valueOf(this.posX), Double.valueOf(this.posY), Double.valueOf(this.posZ)}));
+      crashreportsystemdetails.addCrashSection("Block location", CrashReportCategory.func_85071_a(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)));
+      crashreportsystemdetails.addCrashSection("Momentum", String.format("%.2f, %.2f, %.2f", new Object[]{Double.valueOf(this.motionX), Double.valueOf(this.motionY), Double.valueOf(this.motionZ)}));
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/EntityAIArrowAttack.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIArrowAttack.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityAIArrowAttack.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIArrowAttack.java
--- mcp-mcdev/net/minecraft/src/EntityAIArrowAttack.java	2012-11-29 21:15:06.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIArrowAttack.java	2012-11-29 20:44:25.000000000 -0800
@@ -1,8 +1,11 @@
 package net.minecraft.src;
 
+import net.minecraft.src.Entity;
 import net.minecraft.src.EntityAIBase;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.IRangedAttackMob;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 
 public class EntityAIArrowAttack extends EntityAIBase {
 
@@ -16,26 +19,26 @@
    private float field_82642_h;
 
 
-   public EntityAIArrowAttack(IRangedAttackMob var1, float var2, int var3, float var4) {
-      if(!(var1 instanceof EntityLiving)) {
+   public EntityAIArrowAttack(IRangedAttackMob irangedentity, float f, int i, float f1) {
+      if(!(irangedentity instanceof EntityLiving)) {
          throw new IllegalArgumentException("ArrowAttackGoal requires Mob implements RangedAttackMob");
       } else {
-         this.rangedAttackEntityHost = var1;
-         this.entityHost = (EntityLiving)var1;
-         this.entityMoveSpeed = var2;
-         this.maxRangedAttackTime = var3;
-         this.field_82642_h = var4 * var4;
-         this.rangedAttackTime = var3 / 2;
+         this.rangedAttackEntityHost = irangedentity;
+         this.entityHost = (EntityLiving)irangedentity;
+         this.entityMoveSpeed = f;
+         this.maxRangedAttackTime = i;
+         this.field_82642_h = f1 * f1;
+         this.rangedAttackTime = i / 2;
          this.setMutexBits(3);
       }
    }
 
    public boolean shouldExecute() {
-      EntityLiving var1 = this.entityHost.getAttackTarget();
-      if(var1 == null) {
+      EntityLiving entityliving = this.entityHost.getAttackTarget();
+      if(entityliving == null) {
          return false;
       } else {
-         this.attackTarget = var1;
+         this.attackTarget = entityliving;
          return true;
       }
    }
@@ -45,21 +48,23 @@
    }
 
    public void resetTask() {
+      TargetReason reason = this.attackTarget.isEntityAlive()?TargetReason.FORGOT_TARGET:TargetReason.TARGET_DIED;
+      CraftEventFactory.callEntityTargetEvent((Entity)this.rangedAttackEntityHost, (Entity)null, reason);
       this.attackTarget = null;
       this.field_75318_f = 0;
       this.rangedAttackTime = this.maxRangedAttackTime / 2;
    }
 
    public void updateTask() {
-      double var1 = this.entityHost.getDistanceSq(this.attackTarget.posX, this.attackTarget.boundingBox.minY, this.attackTarget.posZ);
-      boolean var3 = this.entityHost.getEntitySenses().canSee(this.attackTarget);
-      if(var3) {
+      double d0 = this.entityHost.getDistanceSq(this.attackTarget.posX, this.attackTarget.boundingBox.minY, this.attackTarget.posZ);
+      boolean flag = this.entityHost.getEntitySenses().canSee(this.attackTarget);
+      if(flag) {
          ++this.field_75318_f;
       } else {
          this.field_75318_f = 0;
       }
 
-      if(var1 <= (double)this.field_82642_h && this.field_75318_f >= 20) {
+      if(d0 <= (double)this.field_82642_h && this.field_75318_f >= 20) {
          this.entityHost.getNavigator().clearPathEntity();
       } else {
          this.entityHost.getNavigator().tryMoveToEntityLiving(this.attackTarget, this.entityMoveSpeed);
@@ -67,11 +72,10 @@
 
       this.entityHost.getLookHelper().setLookPositionWithEntity(this.attackTarget, 30.0F, 30.0F);
       this.rangedAttackTime = Math.max(this.rangedAttackTime - 1, 0);
-      if(this.rangedAttackTime <= 0) {
-         if(var1 <= (double)this.field_82642_h && var3) {
-            this.rangedAttackEntityHost.attackEntityWithRangedAttack(this.attackTarget);
-            this.rangedAttackTime = this.maxRangedAttackTime;
-         }
+      if(this.rangedAttackTime <= 0 && d0 <= (double)this.field_82642_h && flag) {
+         this.rangedAttackEntityHost.attackEntityWithRangedAttack(this.attackTarget);
+         this.rangedAttackTime = this.maxRangedAttackTime;
       }
+
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityAIAttackOnCollide.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIAttackOnCollide.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityAIAttackOnCollide.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIAttackOnCollide.java
--- mcp-mcdev/net/minecraft/src/EntityAIAttackOnCollide.java	2012-11-29 21:15:06.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIAttackOnCollide.java	2012-11-29 20:44:25.000000000 -0800
@@ -1,10 +1,13 @@
 package net.minecraft.src;
 
+import net.minecraft.src.Entity;
 import net.minecraft.src.EntityAIBase;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.PathEntity;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 
 public class EntityAIAttackOnCollide extends EntityAIBase {
 
@@ -19,36 +22,36 @@
    private int field_75445_i;
 
 
-   public EntityAIAttackOnCollide(EntityLiving var1, Class var2, float var3, boolean var4) {
-      this(var1, var3, var4);
-      this.classTarget = var2;
+   public EntityAIAttackOnCollide(EntityLiving entityliving, Class oclass, float f, boolean flag) {
+      this(entityliving, f, flag);
+      this.classTarget = oclass;
    }
 
-   public EntityAIAttackOnCollide(EntityLiving var1, float var2, boolean var3) {
+   public EntityAIAttackOnCollide(EntityLiving entityliving, float f, boolean flag) {
       this.attackTick = 0;
-      this.attacker = var1;
-      this.worldObj = var1.worldObj;
-      this.field_75440_e = var2;
-      this.field_75437_f = var3;
+      this.attacker = entityliving;
+      this.worldObj = entityliving.worldObj;
+      this.field_75440_e = f;
+      this.field_75437_f = flag;
       this.setMutexBits(3);
    }
 
    public boolean shouldExecute() {
-      EntityLiving var1 = this.attacker.getAttackTarget();
-      if(var1 == null) {
+      EntityLiving entityliving = this.attacker.getAttackTarget();
+      if(entityliving == null) {
          return false;
-      } else if(this.classTarget != null && !this.classTarget.isAssignableFrom(var1.getClass())) {
+      } else if(this.classTarget != null && !this.classTarget.isAssignableFrom(entityliving.getClass())) {
          return false;
       } else {
-         this.entityTarget = var1;
+         this.entityTarget = entityliving;
          this.entityPathEntity = this.attacker.getNavigator().getPathToEntityLiving(this.entityTarget);
          return this.entityPathEntity != null;
       }
    }
 
    public boolean continueExecuting() {
-      EntityLiving var1 = this.attacker.getAttackTarget();
-      return var1 == null?false:(!this.entityTarget.isEntityAlive()?false:(!this.field_75437_f?!this.attacker.getNavigator().noPath():this.attacker.isWithinHomeDistance(MathHelper.floor_double(this.entityTarget.posX), MathHelper.floor_double(this.entityTarget.posY), MathHelper.floor_double(this.entityTarget.posZ))));
+      EntityLiving entityliving = this.attacker.getAttackTarget();
+      return entityliving == null?false:(!this.entityTarget.isEntityAlive()?false:(!this.field_75437_f?!this.attacker.getNavigator().noPath():this.attacker.isWithinHomeDistance(MathHelper.floor_double(this.entityTarget.posX), MathHelper.floor_double(this.entityTarget.posY), MathHelper.floor_double(this.entityTarget.posZ))));
    }
 
    public void startExecuting() {
@@ -57,6 +60,8 @@
    }
 
    public void resetTask() {
+      TargetReason reason = this.entityTarget.isEntityAlive()?TargetReason.FORGOT_TARGET:TargetReason.TARGET_DIED;
+      CraftEventFactory.callEntityTargetEvent(this.attacker, (Entity)null, reason);
       this.entityTarget = null;
       this.attacker.getNavigator().clearPathEntity();
    }
@@ -69,16 +74,15 @@
       }
 
       this.attackTick = Math.max(this.attackTick - 1, 0);
-      double var1 = (double)(this.attacker.width * 2.0F * this.attacker.width * 2.0F);
-      if(this.attacker.getDistanceSq(this.entityTarget.posX, this.entityTarget.boundingBox.minY, this.entityTarget.posZ) <= var1) {
-         if(this.attackTick <= 0) {
-            this.attackTick = 20;
-            if(this.attacker.getHeldItem() != null) {
-               this.attacker.swingItem();
-            }
-
-            this.attacker.attackEntityAsMob(this.entityTarget);
+      double d0 = (double)(this.attacker.width * 2.0F * this.attacker.width * 2.0F);
+      if(this.attacker.getDistanceSq(this.entityTarget.posX, this.entityTarget.boundingBox.minY, this.entityTarget.posZ) <= d0 && this.attackTick <= 0) {
+         this.attackTick = 20;
+         if(this.attacker.getHeldItem() != null) {
+            this.attacker.swingItem();
          }
+
+         this.attacker.attackEntityAsMob(this.entityTarget);
       }
+
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityAIBreakDoor.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIBreakDoor.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityAIBreakDoor.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIBreakDoor.java
--- mcp-mcdev/net/minecraft/src/EntityAIBreakDoor.java	2012-11-29 21:15:06.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIBreakDoor.java	2012-11-29 20:44:25.000000000 -0800
@@ -2,6 +2,7 @@
 
 import net.minecraft.src.EntityAIDoorInteract;
 import net.minecraft.src.EntityLiving;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntityAIBreakDoor extends EntityAIDoorInteract {
 
@@ -9,8 +10,8 @@
    private int field_75358_j = -1;
 
 
-   public EntityAIBreakDoor(EntityLiving var1) {
-      super(var1);
+   public EntityAIBreakDoor(EntityLiving entityliving) {
+      super(entityliving);
    }
 
    public boolean shouldExecute() {
@@ -23,8 +24,8 @@
    }
 
    public boolean continueExecuting() {
-      double var1 = this.theEntity.getDistanceSq((double)this.entityPosX, (double)this.entityPosY, (double)this.entityPosZ);
-      return this.breakingTime <= 240 && !this.targetDoor.isDoorOpen(this.theEntity.worldObj, this.entityPosX, this.entityPosY, this.entityPosZ) && var1 < 4.0D;
+      double d0 = this.theEntity.getDistanceSq((double)this.entityPosX, (double)this.entityPosY, (double)this.entityPosZ);
+      return this.breakingTime <= 240 && !this.targetDoor.isDoorOpen(this.theEntity.worldObj, this.entityPosX, this.entityPosY, this.entityPosZ) && d0 < 4.0D;
    }
 
    public void resetTask() {
@@ -39,13 +40,18 @@
       }
 
       ++this.breakingTime;
-      int var1 = (int)((float)this.breakingTime / 240.0F * 10.0F);
-      if(var1 != this.field_75358_j) {
-         this.theEntity.worldObj.destroyBlockInWorldPartially(this.theEntity.entityId, this.entityPosX, this.entityPosY, this.entityPosZ, var1);
-         this.field_75358_j = var1;
+      int i = (int)((float)this.breakingTime / 240.0F * 10.0F);
+      if(i != this.field_75358_j) {
+         this.theEntity.worldObj.destroyBlockInWorldPartially(this.theEntity.entityId, this.entityPosX, this.entityPosY, this.entityPosZ, i);
+         this.field_75358_j = i;
       }
 
       if(this.breakingTime == 240 && this.theEntity.worldObj.difficultySetting == 3) {
+         if(CraftEventFactory.callEntityBreakDoorEvent(this.theEntity, this.entityPosX, this.entityPosY, this.entityPosZ).isCancelled()) {
+            this.updateTask();
+            return;
+         }
+
          this.theEntity.worldObj.setBlockWithNotify(this.entityPosX, this.entityPosY, this.entityPosZ, 0);
          this.theEntity.worldObj.playAuxSFX(1012, this.entityPosX, this.entityPosY, this.entityPosZ, 0);
          this.theEntity.worldObj.playAuxSFX(2001, this.entityPosX, this.entityPosY, this.entityPosZ, this.targetDoor.blockID);
Binary files mcp-mcdev/net/minecraft/src/EntityAIEatGrass.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIEatGrass.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityAIEatGrass.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIEatGrass.java
--- mcp-mcdev/net/minecraft/src/EntityAIEatGrass.java	2012-11-29 21:15:06.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIEatGrass.java	2012-11-29 20:44:25.000000000 -0800
@@ -5,6 +5,7 @@
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntityAIEatGrass extends EntityAIBase {
 
@@ -13,9 +14,9 @@
    int eatGrassTick = 0;
 
 
-   public EntityAIEatGrass(EntityLiving var1) {
-      this.theEntity = var1;
-      this.theWorld = var1.worldObj;
+   public EntityAIEatGrass(EntityLiving entityliving) {
+      this.theEntity = entityliving;
+      this.theWorld = entityliving.worldObj;
       this.setMutexBits(7);
    }
 
@@ -23,10 +24,10 @@
       if(this.theEntity.getRNG().nextInt(this.theEntity.isChild()?50:1000) != 0) {
          return false;
       } else {
-         int var1 = MathHelper.floor_double(this.theEntity.posX);
-         int var2 = MathHelper.floor_double(this.theEntity.posY);
-         int var3 = MathHelper.floor_double(this.theEntity.posZ);
-         return this.theWorld.getBlockId(var1, var2, var3) == Block.tallGrass.blockID && this.theWorld.getBlockMetadata(var1, var2, var3) == 1?true:this.theWorld.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID;
+         int i = MathHelper.floor_double(this.theEntity.posX);
+         int j = MathHelper.floor_double(this.theEntity.posY);
+         int k = MathHelper.floor_double(this.theEntity.posZ);
+         return this.theWorld.getBlockId(i, j, k) == Block.tallGrass.blockID && this.theWorld.getBlockMetadata(i, j, k) == 1?true:this.theWorld.getBlockId(i, j - 1, k) == Block.grass.blockID;
       }
    }
 
@@ -51,19 +52,21 @@
    public void updateTask() {
       this.eatGrassTick = Math.max(0, this.eatGrassTick - 1);
       if(this.eatGrassTick == 4) {
-         int var1 = MathHelper.floor_double(this.theEntity.posX);
-         int var2 = MathHelper.floor_double(this.theEntity.posY);
-         int var3 = MathHelper.floor_double(this.theEntity.posZ);
-         if(this.theWorld.getBlockId(var1, var2, var3) == Block.tallGrass.blockID) {
-            this.theWorld.playAuxSFX(2001, var1, var2, var3, Block.tallGrass.blockID + 4096);
-            this.theWorld.setBlockWithNotify(var1, var2, var3, 0);
-            this.theEntity.eatGrassBonus();
-         } else if(this.theWorld.getBlockId(var1, var2 - 1, var3) == Block.grass.blockID) {
-            this.theWorld.playAuxSFX(2001, var1, var2 - 1, var3, Block.grass.blockID);
-            this.theWorld.setBlockWithNotify(var1, var2 - 1, var3, Block.dirt.blockID);
+         int i = MathHelper.floor_double(this.theEntity.posX);
+         int j = MathHelper.floor_double(this.theEntity.posY);
+         int k = MathHelper.floor_double(this.theEntity.posZ);
+         if(this.theWorld.getBlockId(i, j, k) == Block.tallGrass.blockID) {
+            if(!CraftEventFactory.callEntityChangeBlockEvent(this.theEntity.getBukkitEntity(), this.theEntity.worldObj.getWorld().getBlockAt(i, j, k), org.bukkit.Material.AIR).isCancelled()) {
+               this.theWorld.playAuxSFX(2001, i, j, k, Block.tallGrass.blockID + 4096);
+               this.theWorld.setBlockWithNotify(i, j, k, 0);
+               this.theEntity.eatGrassBonus();
+            }
+         } else if(this.theWorld.getBlockId(i, j - 1, k) == Block.grass.blockID && !CraftEventFactory.callEntityChangeBlockEvent(this.theEntity.getBukkitEntity(), this.theEntity.worldObj.getWorld().getBlockAt(i, j - 1, k), org.bukkit.Material.DIRT).isCancelled()) {
+            this.theWorld.playAuxSFX(2001, i, j - 1, k, Block.grass.blockID);
+            this.theWorld.setBlockWithNotify(i, j - 1, k, Block.dirt.blockID);
             this.theEntity.eatGrassBonus();
          }
-
       }
+
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityAIMate.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIMate.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityAIMate.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIMate.java
--- mcp-mcdev/net/minecraft/src/EntityAIMate.java	2012-11-29 21:15:06.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAIMate.java	2012-11-29 20:44:24.000000000 -0800
@@ -8,6 +8,7 @@
 import net.minecraft.src.EntityAnimal;
 import net.minecraft.src.EntityXPOrb;
 import net.minecraft.src.World;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public class EntityAIMate extends EntityAIBase {
 
@@ -18,10 +19,10 @@
    float moveSpeed;
 
 
-   public EntityAIMate(EntityAnimal var1, float var2) {
-      this.theAnimal = var1;
-      this.theWorld = var1.worldObj;
-      this.moveSpeed = var2;
+   public EntityAIMate(EntityAnimal entityanimal, float f) {
+      this.theAnimal = entityanimal;
+      this.theWorld = entityanimal.worldObj;
+      this.moveSpeed = f;
       this.setMutexBits(3);
    }
 
@@ -54,42 +55,41 @@
    }
 
    private EntityAnimal getNearbyMate() {
-      float var1 = 8.0F;
-      List var2 = this.theWorld.getEntitiesWithinAABB(this.theAnimal.getClass(), this.theAnimal.boundingBox.expand((double)var1, (double)var1, (double)var1));
-      Iterator var3 = var2.iterator();
-
-      EntityAnimal var4;
-      do {
-         if(!var3.hasNext()) {
-            return null;
+      float f = 8.0F;
+      List list = this.theWorld.getEntitiesWithinAABB(this.theAnimal.getClass(), this.theAnimal.boundingBox.expand((double)f, (double)f, (double)f));
+      Iterator iterator = list.iterator();
+
+      while(iterator.hasNext()) {
+         EntityAnimal entityanimal = (EntityAnimal)iterator.next();
+         if(this.theAnimal.canMateWith(entityanimal)) {
+            return entityanimal;
          }
+      }
 
-         var4 = (EntityAnimal)var3.next();
-      } while(!this.theAnimal.canMateWith(var4));
-
-      return var4;
+      return null;
    }
 
    private void spawnBaby() {
-      EntityAgeable var1 = this.theAnimal.func_90011_a(this.targetMate);
-      if(var1 != null) {
+      EntityAgeable entityageable = this.theAnimal.func_90011_a(this.targetMate);
+      if(entityageable != null) {
          this.theAnimal.setGrowingAge(6000);
          this.targetMate.setGrowingAge(6000);
          this.theAnimal.resetInLove();
          this.targetMate.resetInLove();
-         var1.setGrowingAge(-24000);
-         var1.setLocationAndAngles(this.theAnimal.posX, this.theAnimal.posY, this.theAnimal.posZ, 0.0F, 0.0F);
-         this.theWorld.spawnEntityInWorld(var1);
-         Random var2 = this.theAnimal.getRNG();
-
-         for(int var3 = 0; var3 < 7; ++var3) {
-            double var4 = var2.nextGaussian() * 0.02D;
-            double var6 = var2.nextGaussian() * 0.02D;
-            double var8 = var2.nextGaussian() * 0.02D;
-            this.theWorld.spawnParticle("heart", this.theAnimal.posX + (double)(var2.nextFloat() * this.theAnimal.width * 2.0F) - (double)this.theAnimal.width, this.theAnimal.posY + 0.5D + (double)(var2.nextFloat() * this.theAnimal.height), this.theAnimal.posZ + (double)(var2.nextFloat() * this.theAnimal.width * 2.0F) - (double)this.theAnimal.width, var4, var6, var8);
+         entityageable.setGrowingAge(-24000);
+         entityageable.setLocationAndAngles(this.theAnimal.posX, this.theAnimal.posY, this.theAnimal.posZ, 0.0F, 0.0F);
+         this.theWorld.addEntity(entityageable, SpawnReason.BREEDING);
+         Random random = this.theAnimal.getRNG();
+
+         for(int i = 0; i < 7; ++i) {
+            double d0 = random.nextGaussian() * 0.02D;
+            double d1 = random.nextGaussian() * 0.02D;
+            double d2 = random.nextGaussian() * 0.02D;
+            this.theWorld.spawnParticle("heart", this.theAnimal.posX + (double)(random.nextFloat() * this.theAnimal.width * 2.0F) - (double)this.theAnimal.width, this.theAnimal.posY + 0.5D + (double)(random.nextFloat() * this.theAnimal.height), this.theAnimal.posZ + (double)(random.nextFloat() * this.theAnimal.width * 2.0F) - (double)this.theAnimal.width, d0, d1, d2);
          }
 
-         this.theWorld.spawnEntityInWorld(new EntityXPOrb(this.theWorld, this.theAnimal.posX, this.theAnimal.posY, this.theAnimal.posZ, var2.nextInt(4) + 1));
+         this.theWorld.spawnEntityInWorld(new EntityXPOrb(this.theWorld, this.theAnimal.posX, this.theAnimal.posY, this.theAnimal.posZ, random.nextInt(4) + 1));
       }
+
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityAITarget.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAITarget.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityAITarget.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAITarget.java
--- mcp-mcdev/net/minecraft/src/EntityAITarget.java	2012-11-29 21:15:05.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAITarget.java	2012-11-29 20:44:24.000000000 -0800
@@ -1,12 +1,22 @@
 package net.minecraft.src;
 
 import net.minecraft.src.EntityAIBase;
+import net.minecraft.src.EntityAIDefendVillage;
+import net.minecraft.src.EntityAIHurtByTarget;
+import net.minecraft.src.EntityAINearestAttackableTarget;
+import net.minecraft.src.EntityAIOwnerHurtByTarget;
+import net.minecraft.src.EntityAIOwnerHurtTarget;
+import net.minecraft.src.EntityCreature;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.EntityTameable;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.PathEntity;
 import net.minecraft.src.PathPoint;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 
 public abstract class EntityAITarget extends EntityAIBase {
 
@@ -19,31 +29,31 @@
    private int field_75298_g;
 
 
-   public EntityAITarget(EntityLiving var1, float var2, boolean var3) {
-      this(var1, var2, var3, false);
+   public EntityAITarget(EntityLiving entityliving, float f, boolean flag) {
+      this(entityliving, f, flag, false);
    }
 
-   public EntityAITarget(EntityLiving var1, float var2, boolean var3, boolean var4) {
+   public EntityAITarget(EntityLiving entityliving, float f, boolean flag, boolean flag1) {
       this.field_75301_b = 0;
       this.field_75302_c = 0;
       this.field_75298_g = 0;
-      this.taskOwner = var1;
-      this.targetDistance = var2;
-      this.shouldCheckSight = var3;
-      this.field_75303_a = var4;
+      this.taskOwner = entityliving;
+      this.targetDistance = f;
+      this.shouldCheckSight = flag;
+      this.field_75303_a = flag1;
    }
 
    public boolean continueExecuting() {
-      EntityLiving var1 = this.taskOwner.getAttackTarget();
-      if(var1 == null) {
+      EntityLiving entityliving = this.taskOwner.getAttackTarget();
+      if(entityliving == null) {
          return false;
-      } else if(!var1.isEntityAlive()) {
+      } else if(!entityliving.isEntityAlive()) {
          return false;
-      } else if(this.taskOwner.getDistanceSqToEntity(var1) > (double)(this.targetDistance * this.targetDistance)) {
+      } else if(this.taskOwner.getDistanceSqToEntity(entityliving) > (double)(this.targetDistance * this.targetDistance)) {
          return false;
       } else {
          if(this.shouldCheckSight) {
-            if(this.taskOwner.getEntitySenses().canSee(var1)) {
+            if(this.taskOwner.getEntitySenses().canSee(entityliving)) {
                this.field_75298_g = 0;
             } else if(++this.field_75298_g > 60) {
                return false;
@@ -64,31 +74,31 @@
       this.taskOwner.setAttackTarget((EntityLiving)null);
    }
 
-   protected boolean isSuitableTarget(EntityLiving var1, boolean var2) {
-      if(var1 == null) {
+   protected boolean isSuitableTarget(EntityLiving entityliving, boolean flag) {
+      if(entityliving == null) {
          return false;
-      } else if(var1 == this.taskOwner) {
+      } else if(entityliving == this.taskOwner) {
          return false;
-      } else if(!var1.isEntityAlive()) {
+      } else if(!entityliving.isEntityAlive()) {
          return false;
-      } else if(!this.taskOwner.canAttackClass(var1.getClass())) {
+      } else if(!this.taskOwner.canAttackClass(entityliving.getClass())) {
          return false;
       } else {
          if(this.taskOwner instanceof EntityTameable && ((EntityTameable)this.taskOwner).isTamed()) {
-            if(var1 instanceof EntityTameable && ((EntityTameable)var1).isTamed()) {
+            if(entityliving instanceof EntityTameable && ((EntityTameable)entityliving).isTamed()) {
                return false;
             }
 
-            if(var1 == ((EntityTameable)this.taskOwner).getOwner()) {
+            if(entityliving == ((EntityTameable)this.taskOwner).getOwner()) {
                return false;
             }
-         } else if(var1 instanceof EntityPlayer && !var2 && ((EntityPlayer)var1).capabilities.disableDamage) {
+         } else if(entityliving instanceof EntityPlayer && !flag && ((EntityPlayer)entityliving).capabilities.disableDamage) {
             return false;
          }
 
-         if(!this.taskOwner.isWithinHomeDistance(MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ))) {
+         if(!this.taskOwner.isWithinHomeDistance(MathHelper.floor_double(entityliving.posX), MathHelper.floor_double(entityliving.posY), MathHelper.floor_double(entityliving.posZ))) {
             return false;
-         } else if(this.shouldCheckSight && !this.taskOwner.getEntitySenses().canSee(var1)) {
+         } else if(this.shouldCheckSight && !this.taskOwner.getEntitySenses().canSee(entityliving)) {
             return false;
          } else {
             if(this.field_75303_a) {
@@ -97,7 +107,7 @@
                }
 
                if(this.field_75301_b == 0) {
-                  this.field_75301_b = this.func_75295_a(var1)?1:2;
+                  this.field_75301_b = this.func_75295_a(entityliving)?1:2;
                }
 
                if(this.field_75301_b == 2) {
@@ -105,24 +115,56 @@
                }
             }
 
-            return true;
+            TargetReason reason = TargetReason.RANDOM_TARGET;
+            if(this instanceof EntityAIDefendVillage) {
+               reason = TargetReason.DEFEND_VILLAGE;
+            } else if(this instanceof EntityAIHurtByTarget) {
+               reason = TargetReason.TARGET_ATTACKED_ENTITY;
+            } else if(this instanceof EntityAINearestAttackableTarget) {
+               if(entityliving instanceof EntityPlayer) {
+                  reason = TargetReason.CLOSEST_PLAYER;
+               }
+            } else if(this instanceof EntityAIOwnerHurtByTarget) {
+               reason = TargetReason.TARGET_ATTACKED_OWNER;
+            } else if(this instanceof EntityAIOwnerHurtTarget) {
+               reason = TargetReason.OWNER_ATTACKED_TARGET;
+            }
+
+            EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(this.taskOwner, entityliving, reason);
+            if(!event.isCancelled() && event.getTarget() != null) {
+               if(entityliving.getBukkitEntity() != event.getTarget()) {
+                  this.taskOwner.setAttackTarget((EntityLiving)((CraftEntity)event.getTarget()).getHandle());
+               }
+
+               if(this.taskOwner instanceof EntityCreature) {
+                  ((EntityCreature)this.taskOwner).entityToAttack = ((CraftEntity)event.getTarget()).getHandle();
+               }
+
+               return true;
+            } else {
+               if(this.taskOwner instanceof EntityCreature) {
+                  ((EntityCreature)this.taskOwner).entityToAttack = null;
+               }
+
+               return false;
+            }
          }
       }
    }
 
-   private boolean func_75295_a(EntityLiving var1) {
+   private boolean func_75295_a(EntityLiving entityliving) {
       this.field_75302_c = 10 + this.taskOwner.getRNG().nextInt(5);
-      PathEntity var2 = this.taskOwner.getNavigator().getPathToEntityLiving(var1);
-      if(var2 == null) {
+      PathEntity pathentity = this.taskOwner.getNavigator().getPathToEntityLiving(entityliving);
+      if(pathentity == null) {
          return false;
       } else {
-         PathPoint var3 = var2.getFinalPathPoint();
-         if(var3 == null) {
+         PathPoint pathpoint = pathentity.getFinalPathPoint();
+         if(pathpoint == null) {
             return false;
          } else {
-            int var4 = var3.xCoord - MathHelper.floor_double(var1.posX);
-            int var5 = var3.zCoord - MathHelper.floor_double(var1.posZ);
-            return (double)(var4 * var4 + var5 * var5) <= 2.25D;
+            int i = pathpoint.xCoord - MathHelper.floor_double(entityliving.posX);
+            int j = pathpoint.zCoord - MathHelper.floor_double(entityliving.posZ);
+            return (double)(i * i + j * j) <= 2.25D;
          }
       }
    }
Binary files mcp-mcdev/net/minecraft/src/EntityAITasks.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAITasks.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityAITasks.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAITasks.java
--- mcp-mcdev/net/minecraft/src/EntityAITasks.java	2012-11-29 21:15:05.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAITasks.java	2012-11-29 20:44:24.000000000 -0800
@@ -1,126 +1,119 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.src.EntityAIBase;
 import net.minecraft.src.EntityAITaskEntry;
 import net.minecraft.src.Profiler;
+import org.bukkit.craftbukkit.util.UnsafeList;
+import org.bukkit.craftbukkit.util.UnsafeList.Itr;
 
 public class EntityAITasks {
 
-   private List taskEntries = new ArrayList();
-   private List executingTaskEntries = new ArrayList();
+   private List taskEntries = new UnsafeList();
+   private List executingTaskEntries = new UnsafeList();
    private final Profiler theProfiler;
    private int field_75778_d = 0;
    private int field_75779_e = 3;
 
 
-   public EntityAITasks(Profiler var1) {
-      this.theProfiler = var1;
+   public EntityAITasks(Profiler methodprofiler) {
+      this.theProfiler = methodprofiler;
    }
 
-   public void addTask(int var1, EntityAIBase var2) {
-      this.taskEntries.add(new EntityAITaskEntry(this, var1, var2));
+   public void addTask(int i, EntityAIBase pathfindergoal) {
+      this.taskEntries.add(new EntityAITaskEntry(this, i, pathfindergoal));
    }
 
-   public void func_85156_a(EntityAIBase var1) {
-      Iterator var2 = this.taskEntries.iterator();
+   public void func_85156_a(EntityAIBase pathfindergoal) {
+      Iterator iterator = this.taskEntries.iterator();
 
-      while(var2.hasNext()) {
-         EntityAITaskEntry var3 = (EntityAITaskEntry)var2.next();
-         EntityAIBase var4 = var3.action;
-         if(var4 == var1) {
-            if(this.executingTaskEntries.contains(var3)) {
-               var4.resetTask();
-               this.executingTaskEntries.remove(var3);
+      while(iterator.hasNext()) {
+         EntityAITaskEntry pathfindergoalselectoritem = (EntityAITaskEntry)iterator.next();
+         EntityAIBase pathfindergoal1 = pathfindergoalselectoritem.action;
+         if(pathfindergoal1 == pathfindergoal) {
+            if(this.executingTaskEntries.contains(pathfindergoalselectoritem)) {
+               pathfindergoal1.resetTask();
+               this.executingTaskEntries.remove(pathfindergoalselectoritem);
             }
 
-            var2.remove();
+            iterator.remove();
          }
       }
 
    }
 
    public void onUpdateTasks() {
-      ArrayList var1 = new ArrayList();
-      Iterator var2;
-      EntityAITaskEntry var3;
+      Iterator iterator;
+      EntityAITaskEntry pathfindergoalselectoritem;
       if(this.field_75778_d++ % this.field_75779_e == 0) {
-         var2 = this.taskEntries.iterator();
+         iterator = this.taskEntries.iterator();
 
-         while(var2.hasNext()) {
-            var3 = (EntityAITaskEntry)var2.next();
-            boolean var4 = this.executingTaskEntries.contains(var3);
-            if(var4) {
-               if(this.func_75775_b(var3) && this.func_75773_a(var3)) {
+         while(iterator.hasNext()) {
+            pathfindergoalselectoritem = (EntityAITaskEntry)iterator.next();
+            boolean flag = this.executingTaskEntries.contains(pathfindergoalselectoritem);
+            if(flag) {
+               if(this.func_75775_b(pathfindergoalselectoritem) && this.func_75773_a(pathfindergoalselectoritem)) {
                   continue;
                }
 
-               var3.action.resetTask();
-               this.executingTaskEntries.remove(var3);
+               pathfindergoalselectoritem.action.resetTask();
+               this.executingTaskEntries.remove(pathfindergoalselectoritem);
             }
 
-            if(this.func_75775_b(var3) && var3.action.shouldExecute()) {
-               var1.add(var3);
-               this.executingTaskEntries.add(var3);
+            if(this.func_75775_b(pathfindergoalselectoritem) && pathfindergoalselectoritem.action.shouldExecute()) {
+               pathfindergoalselectoritem.action.startExecuting();
+               this.executingTaskEntries.add(pathfindergoalselectoritem);
             }
          }
       } else {
-         var2 = this.executingTaskEntries.iterator();
+         iterator = this.executingTaskEntries.iterator();
 
-         while(var2.hasNext()) {
-            var3 = (EntityAITaskEntry)var2.next();
-            if(!var3.action.continueExecuting()) {
-               var3.action.resetTask();
-               var2.remove();
+         while(iterator.hasNext()) {
+            pathfindergoalselectoritem = (EntityAITaskEntry)iterator.next();
+            if(!pathfindergoalselectoritem.action.continueExecuting()) {
+               pathfindergoalselectoritem.action.resetTask();
+               iterator.remove();
             }
          }
       }
 
       this.theProfiler.startSection("goalStart");
-      var2 = var1.iterator();
-
-      while(var2.hasNext()) {
-         var3 = (EntityAITaskEntry)var2.next();
-         this.theProfiler.startSection(var3.action.getClass().getSimpleName());
-         var3.action.startExecuting();
-         this.theProfiler.endSection();
-      }
-
       this.theProfiler.endSection();
       this.theProfiler.startSection("goalTick");
-      var2 = this.executingTaskEntries.iterator();
+      iterator = this.executingTaskEntries.iterator();
 
-      while(var2.hasNext()) {
-         var3 = (EntityAITaskEntry)var2.next();
-         var3.action.updateTask();
+      while(iterator.hasNext()) {
+         pathfindergoalselectoritem = (EntityAITaskEntry)iterator.next();
+         pathfindergoalselectoritem.action.updateTask();
       }
 
       this.theProfiler.endSection();
    }
 
-   private boolean func_75773_a(EntityAITaskEntry var1) {
+   private boolean func_75773_a(EntityAITaskEntry pathfindergoalselectoritem) {
       this.theProfiler.startSection("canContinue");
-      boolean var2 = var1.action.continueExecuting();
+      boolean flag = pathfindergoalselectoritem.action.continueExecuting();
       this.theProfiler.endSection();
-      return var2;
+      return flag;
    }
 
-   private boolean func_75775_b(EntityAITaskEntry var1) {
+   private boolean func_75775_b(EntityAITaskEntry pathfindergoalselectoritem) {
       this.theProfiler.startSection("canUse");
-      Iterator var2 = this.taskEntries.iterator();
+      Iterator iterator = this.taskEntries.iterator();
 
-      while(var2.hasNext()) {
-         EntityAITaskEntry var3 = (EntityAITaskEntry)var2.next();
-         if(var3 != var1) {
-            if(var1.priority >= var3.priority) {
-               if(this.executingTaskEntries.contains(var3) && !this.areTasksCompatible(var1, var3)) {
+      while(iterator.hasNext()) {
+         EntityAITaskEntry pathfindergoalselectoritem1 = (EntityAITaskEntry)iterator.next();
+         if(pathfindergoalselectoritem1 != pathfindergoalselectoritem) {
+            if(pathfindergoalselectoritem.priority >= pathfindergoalselectoritem1.priority) {
+               if(!this.areTasksCompatible(pathfindergoalselectoritem, pathfindergoalselectoritem1) && this.executingTaskEntries.contains(pathfindergoalselectoritem1)) {
                   this.theProfiler.endSection();
+                  ((Itr)iterator).valid = false;
                   return false;
                }
-            } else if(this.executingTaskEntries.contains(var3) && !var3.action.isContinuous()) {
+            } else if(!pathfindergoalselectoritem1.action.isContinuous() && this.executingTaskEntries.contains(pathfindergoalselectoritem1)) {
                this.theProfiler.endSection();
+               ((Itr)iterator).valid = false;
                return false;
             }
          }
@@ -130,7 +123,7 @@
       return true;
    }
 
-   private boolean areTasksCompatible(EntityAITaskEntry var1, EntityAITaskEntry var2) {
-      return (var1.action.getMutexBits() & var2.action.getMutexBits()) == 0;
+   private boolean areTasksCompatible(EntityAITaskEntry pathfindergoalselectoritem, EntityAITaskEntry pathfindergoalselectoritem1) {
+      return (pathfindergoalselectoritem.action.getMutexBits() & pathfindergoalselectoritem1.action.getMutexBits()) == 0;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityAgeable.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAgeable.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityAgeable.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAgeable.java
--- mcp-mcdev/net/minecraft/src/EntityAgeable.java	2012-11-29 21:15:06.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityAgeable.java	2012-11-29 20:44:25.000000000 -0800
@@ -7,30 +7,37 @@
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public abstract class EntityAgeable extends EntityCreature {
 
-   public EntityAgeable(World var1) {
-      super(var1);
+   public boolean ageLocked = false;
+
+
+   public EntityAgeable(World world) {
+      super(world);
    }
 
    public abstract EntityAgeable func_90011_a(EntityAgeable var1);
 
-   public boolean interact(EntityPlayer var1) {
-      ItemStack var2 = var1.inventory.getCurrentItem();
-      if(var2 != null && var2.itemID == Item.monsterPlacer.shiftedIndex && !this.worldObj.isRemote) {
-         Class var3 = EntityList.func_90035_a(var2.getItemDamage());
-         if(var3 != null && var3.isAssignableFrom(this.getClass())) {
-            EntityAgeable var4 = this.func_90011_a(this);
-            if(var4 != null) {
-               var4.setGrowingAge(-24000);
-               var4.setLocationAndAngles(this.posX, this.posY, this.posZ, 0.0F, 0.0F);
-               this.worldObj.spawnEntityInWorld(var4);
+   public boolean interact(EntityPlayer entityhuman) {
+      ItemStack itemstack = entityhuman.inventory.getCurrentItem();
+      if(itemstack != null && itemstack.itemID == Item.monsterPlacer.shiftedIndex && !this.worldObj.isRemote) {
+         Class oclass = EntityList.func_90035_a(itemstack.getItemDamage());
+         if(oclass != null && oclass.isAssignableFrom(this.getClass())) {
+            EntityAgeable entityageable = this.func_90011_a(this);
+            if(entityageable != null) {
+               entityageable.setGrowingAge(-24000);
+               entityageable.setLocationAndAngles(this.posX, this.posY, this.posZ, 0.0F, 0.0F);
+               this.worldObj.addEntity(entityageable, SpawnReason.SPAWNER_EGG);
+               if(!entityhuman.capabilities.isCreativeMode) {
+                  --itemstack.stackSize;
+               }
             }
          }
       }
 
-      return super.interact(var1);
+      return super.interact(entityhuman);
    }
 
    protected void entityInit() {
@@ -42,31 +49,35 @@
       return this.dataWatcher.getWatchableObjectInt(12);
    }
 
-   public void setGrowingAge(int var1) {
-      this.dataWatcher.updateObject(12, Integer.valueOf(var1));
+   public void setGrowingAge(int i) {
+      this.dataWatcher.updateObject(12, Integer.valueOf(i));
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setInteger("Age", this.getGrowingAge());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setInteger("Age", this.getGrowingAge());
+      nbttagcompound.setBoolean("AgeLocked", this.ageLocked);
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.setGrowingAge(var1.getInteger("Age"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.setGrowingAge(nbttagcompound.getInteger("Age"));
+      this.ageLocked = nbttagcompound.getBoolean("AgeLocked");
    }
 
    public void onLivingUpdate() {
       super.onLivingUpdate();
-      int var1 = this.getGrowingAge();
-      if(var1 < 0) {
-         ++var1;
-         this.setGrowingAge(var1);
-      } else if(var1 > 0) {
-         --var1;
-         this.setGrowingAge(var1);
-      }
+      int i = this.getGrowingAge();
+      if(!this.ageLocked) {
+         if(i < 0) {
+            ++i;
+            this.setGrowingAge(i);
+         } else if(i > 0) {
+            --i;
+            this.setGrowingAge(i);
+         }
 
+      }
    }
 
    public boolean isChild() {
Binary files mcp-mcdev/net/minecraft/src/EntityArrow.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityArrow.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityArrow.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityArrow.java
--- mcp-mcdev/net/minecraft/src/EntityArrow.java	2012-11-29 21:15:05.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityArrow.java	2012-11-29 20:44:23.000000000 -0800
@@ -5,8 +5,10 @@
 import net.minecraft.src.Block;
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.Entity;
+import net.minecraft.src.EntityItem;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.IProjectile;
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
@@ -15,6 +17,13 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.Projectile;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.ProjectileHitEvent;
+import org.bukkit.event.player.PlayerPickupItemEvent;
 
 public class EntityArrow extends Entity implements IProjectile {
 
@@ -33,51 +42,52 @@
    private int knockbackStrength;
 
 
-   public EntityArrow(World var1) {
-      super(var1);
+   public EntityArrow(World world) {
+      super(world);
       this.setSize(0.5F, 0.5F);
    }
 
-   public EntityArrow(World var1, double var2, double var4, double var6) {
-      super(var1);
+   public EntityArrow(World world, double d0, double d1, double d2) {
+      super(world);
       this.setSize(0.5F, 0.5F);
-      this.setPosition(var2, var4, var6);
+      this.setPosition(d0, d1, d2);
       this.yOffset = 0.0F;
    }
 
-   public EntityArrow(World var1, EntityLiving var2, EntityLiving var3, float var4, float var5) {
-      super(var1);
-      this.shootingEntity = var2;
-      if(var2 instanceof EntityPlayer) {
+   public EntityArrow(World world, EntityLiving entityliving, EntityLiving entityliving1, float f, float f1) {
+      super(world);
+      this.shootingEntity = entityliving;
+      if(entityliving instanceof EntityPlayer) {
          this.canBePickedUp = 1;
       }
 
-      this.posY = var2.posY + (double)var2.getEyeHeight() - 0.10000000149011612D;
-      double var6 = var3.posX - var2.posX;
-      double var8 = var3.posY + (double)var3.getEyeHeight() - 0.699999988079071D - this.posY;
-      double var10 = var3.posZ - var2.posZ;
-      double var12 = (double)MathHelper.sqrt_double(var6 * var6 + var10 * var10);
-      if(var12 >= 1.0E-7D) {
-         float var14 = (float)(Math.atan2(var10, var6) * 180.0D / 3.1415927410125732D) - 90.0F;
-         float var15 = (float)(-(Math.atan2(var8, var12) * 180.0D / 3.1415927410125732D));
-         double var16 = var6 / var12;
-         double var18 = var10 / var12;
-         this.setLocationAndAngles(var2.posX + var16, this.posY, var2.posZ + var18, var14, var15);
+      this.posY = entityliving.posY + (double)entityliving.getEyeHeight() - 0.10000000149011612D;
+      double d0 = entityliving1.posX - entityliving.posX;
+      double d1 = entityliving1.posY + (double)entityliving1.getEyeHeight() - 0.699999988079071D - this.posY;
+      double d2 = entityliving1.posZ - entityliving.posZ;
+      double d3 = (double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
+      if(d3 >= 1.0E-7D) {
+         float f2 = (float)(Math.atan2(d2, d0) * 180.0D / 3.1415927410125732D) - 90.0F;
+         float f3 = (float)(-(Math.atan2(d1, d3) * 180.0D / 3.1415927410125732D));
+         double d4 = d0 / d3;
+         double d5 = d2 / d3;
+         this.setLocationAndAngles(entityliving.posX + d4, this.posY, entityliving.posZ + d5, f2, f3);
          this.yOffset = 0.0F;
-         float var20 = (float)var12 * 0.2F;
-         this.setThrowableHeading(var6, var8 + (double)var20, var10, var4, var5);
+         float f4 = (float)d3 * 0.2F;
+         this.setThrowableHeading(d0, d1 + (double)f4, d2, f, f1);
       }
+
    }
 
-   public EntityArrow(World var1, EntityLiving var2, float var3) {
-      super(var1);
-      this.shootingEntity = var2;
-      if(var2 instanceof EntityPlayer) {
+   public EntityArrow(World world, EntityLiving entityliving, float f) {
+      super(world);
+      this.shootingEntity = entityliving;
+      if(entityliving instanceof EntityPlayer) {
          this.canBePickedUp = 1;
       }
 
       this.setSize(0.5F, 0.5F);
-      this.setLocationAndAngles(var2.posX, var2.posY + (double)var2.getEyeHeight(), var2.posZ, var2.rotationYaw, var2.rotationPitch);
+      this.setLocationAndAngles(entityliving.posX, entityliving.posY + (double)entityliving.getEyeHeight(), entityliving.posZ, entityliving.rotationYaw, entityliving.rotationPitch);
       this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * 0.16F);
       this.posY -= 0.10000000149011612D;
       this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * 0.16F);
@@ -86,46 +96,46 @@
       this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F));
       this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F));
       this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * 3.1415927F));
-      this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, var3 * 1.5F, 1.0F);
+      this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, f * 1.5F, 1.0F);
    }
 
    protected void entityInit() {
       this.dataWatcher.addObject(16, Byte.valueOf((byte)0));
    }
 
-   public void setThrowableHeading(double var1, double var3, double var5, float var7, float var8) {
-      float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-      var1 /= (double)var9;
-      var3 /= (double)var9;
-      var5 /= (double)var9;
-      var1 += this.rand.nextGaussian() * 0.007499999832361937D * (double)var8;
-      var3 += this.rand.nextGaussian() * 0.007499999832361937D * (double)var8;
-      var5 += this.rand.nextGaussian() * 0.007499999832361937D * (double)var8;
-      var1 *= (double)var7;
-      var3 *= (double)var7;
-      var5 *= (double)var7;
-      this.motionX = var1;
-      this.motionY = var3;
-      this.motionZ = var5;
-      float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-      this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / 3.1415927410125732D);
-      this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / 3.1415927410125732D);
+   public void setThrowableHeading(double d0, double d1, double d2, float f, float f1) {
+      float f2 = MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2);
+      d0 /= (double)f2;
+      d1 /= (double)f2;
+      d2 /= (double)f2;
+      d0 += this.rand.nextGaussian() * 0.007499999832361937D * (double)f1;
+      d1 += this.rand.nextGaussian() * 0.007499999832361937D * (double)f1;
+      d2 += this.rand.nextGaussian() * 0.007499999832361937D * (double)f1;
+      d0 *= (double)f;
+      d1 *= (double)f;
+      d2 *= (double)f;
+      this.motionX = d0;
+      this.motionY = d1;
+      this.motionZ = d2;
+      float f3 = MathHelper.sqrt_double(d0 * d0 + d2 * d2);
+      this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(d0, d2) * 180.0D / 3.1415927410125732D);
+      this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(d1, (double)f3) * 180.0D / 3.1415927410125732D);
       this.ticksInGround = 0;
    }
 
    public void onUpdate() {
       super.onUpdate();
       if(this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
-         float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+         float i = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
          this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / 3.1415927410125732D);
-         this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var1) * 180.0D / 3.1415927410125732D);
+         this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(this.motionY, (double)i) * 180.0D / 3.1415927410125732D);
       }
 
-      int var16 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-      if(var16 > 0) {
-         Block.blocksList[var16].setBlockBoundsBasedOnState(this.worldObj, this.xTile, this.yTile, this.zTile);
-         AxisAlignedBB var2 = Block.blocksList[var16].getCollisionBoundingBoxFromPool(this.worldObj, this.xTile, this.yTile, this.zTile);
-         if(var2 != null && var2.isVecInside(this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ))) {
+      int var19 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+      if(var19 > 0) {
+         Block.blocksList[var19].setBlockBoundsBasedOnState(this.worldObj, this.xTile, this.yTile, this.zTile);
+         AxisAlignedBB vec3d = Block.blocksList[var19].getCollisionBoundingBoxFromPool(this.worldObj, this.xTile, this.yTile, this.zTile);
+         if(vec3d != null && vec3d.isVecInside(this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ))) {
             this.inGround = true;
          }
       }
@@ -135,14 +145,13 @@
       }
 
       if(this.inGround) {
-         int var18 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-         int var19 = this.worldObj.getBlockMetadata(this.xTile, this.yTile, this.zTile);
-         if(var18 == this.inTile && var19 == this.inData) {
+         int var20 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+         int vec3d1 = this.worldObj.getBlockMetadata(this.xTile, this.yTile, this.zTile);
+         if(var20 == this.inTile && vec3d1 == this.inData) {
             ++this.ticksInGround;
             if(this.ticksInGround == 1200) {
                this.setDead();
             }
-
          } else {
             this.inGround = false;
             this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
@@ -153,72 +162,79 @@
          }
       } else {
          ++this.ticksInAir;
-         Vec3 var17 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
-         Vec3 var3 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-         MovingObjectPosition var4 = this.worldObj.rayTraceBlocks_do_do(var17, var3, false, true);
-         var17 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
-         var3 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-         if(var4 != null) {
-            var3 = this.worldObj.getWorldVec3Pool().getVecFromPool(var4.hitVec.xCoord, var4.hitVec.yCoord, var4.hitVec.zCoord);
-         }
-
-         Entity var5 = null;
-         List var6 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-         double var7 = 0.0D;
-
-         int var9;
-         float var11;
-         for(var9 = 0; var9 < var6.size(); ++var9) {
-            Entity var10 = (Entity)var6.get(var9);
-            if(var10.canBeCollidedWith() && (var10 != this.shootingEntity || this.ticksInAir >= 5)) {
-               var11 = 0.3F;
-               AxisAlignedBB var12 = var10.boundingBox.expand((double)var11, (double)var11, (double)var11);
-               MovingObjectPosition var13 = var12.calculateIntercept(var17, var3);
-               if(var13 != null) {
-                  double var14 = var17.distanceTo(var13.hitVec);
-                  if(var14 < var7 || var7 == 0.0D) {
-                     var5 = var10;
-                     var7 = var14;
+         Vec3 var21 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
+         Vec3 var22 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+         MovingObjectPosition movingobjectposition = this.worldObj.rayTraceBlocks_do_do(var21, var22, false, true);
+         var21 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
+         var22 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+         if(movingobjectposition != null) {
+            var22 = this.worldObj.getWorldVec3Pool().getVecFromPool(movingobjectposition.hitVec.xCoord, movingobjectposition.hitVec.yCoord, movingobjectposition.hitVec.zCoord);
+         }
+
+         Entity entity = null;
+         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+         double d0 = 0.0D;
+
+         int l;
+         float f1;
+         for(l = 0; l < list.size(); ++l) {
+            Entity f2 = (Entity)list.get(l);
+            if(f2.canBeCollidedWith() && (f2 != this.shootingEntity || this.ticksInAir >= 5)) {
+               f1 = 0.3F;
+               AxisAlignedBB f4 = f2.boundingBox.expand((double)f1, (double)f1, (double)f1);
+               MovingObjectPosition j1 = f4.calculateIntercept(var21, var22);
+               if(j1 != null) {
+                  double d1 = var21.squareDistanceTo(j1.hitVec);
+                  if(d1 < d0 || d0 == 0.0D) {
+                     entity = f2;
+                     d0 = d1;
                   }
                }
             }
          }
 
-         if(var5 != null) {
-            var4 = new MovingObjectPosition(var5);
+         if(entity != null) {
+            movingobjectposition = new MovingObjectPosition(entity);
          }
 
-         float var20;
-         if(var4 != null) {
-            if(var4.entityHit != null) {
-               var20 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-               int var23 = MathHelper.ceiling_double_int((double)var20 * this.damage);
+         float var23;
+         if(movingobjectposition != null) {
+            Projectile var24 = (Projectile)this.getBukkitEntity();
+            ProjectileHitEvent var27 = new ProjectileHitEvent(var24);
+            this.worldObj.getServer().getPluginManager().callEvent(var27);
+            if(movingobjectposition.entityHit != null) {
+               var23 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+               int f5 = MathHelper.ceiling_double_int((double)var23 * this.damage);
                if(this.getIsCritical()) {
-                  var23 += this.rand.nextInt(var23 / 2 + 2);
+                  f5 += this.rand.nextInt(f5 / 2 + 2);
                }
 
-               DamageSource var21 = null;
+               DamageSource damagesource = null;
                if(this.shootingEntity == null) {
-                  var21 = DamageSource.causeArrowDamage(this, this);
+                  damagesource = DamageSource.causeArrowDamage(this, this);
                } else {
-                  var21 = DamageSource.causeArrowDamage(this, this.shootingEntity);
+                  damagesource = DamageSource.causeArrowDamage(this, this.shootingEntity);
                }
 
-               if(this.isBurning()) {
-                  var4.entityHit.setFire(5);
-               }
+               if(movingobjectposition.entityHit.attackEntityFrom(damagesource, f5)) {
+                  if(this.isBurning() && (!(movingobjectposition.entityHit instanceof EntityPlayerMP) || this.worldObj.pvpMode)) {
+                     EntityCombustByEntityEvent f3 = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+                     Bukkit.getPluginManager().callEvent(f3);
+                     if(!f3.isCancelled()) {
+                        movingobjectposition.entityHit.setFire(f3.getDuration());
+                     }
+                  }
 
-               if(var4.entityHit.attackEntityFrom(var21, var23)) {
-                  if(var4.entityHit instanceof EntityLiving) {
+                  if(movingobjectposition.entityHit instanceof EntityLiving) {
                      if(!this.worldObj.isRemote) {
-                        EntityLiving var24 = (EntityLiving)var4.entityHit;
-                        var24.func_85034_r(var24.func_85035_bI() + 1);
+                        EntityLiving var30 = (EntityLiving)movingobjectposition.entityHit;
+                        var30.func_85034_r(var30.func_85035_bI() + 1);
                      }
 
                      if(this.knockbackStrength > 0) {
-                        float var25 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-                        if(var25 > 0.0F) {
-                           var4.entityHit.addVelocity(this.motionX * (double)this.knockbackStrength * 0.6000000238418579D / (double)var25, 0.1D, this.motionZ * (double)this.knockbackStrength * 0.6000000238418579D / (double)var25);
+                        float var29 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+                        if(var29 > 0.0F) {
+                           movingobjectposition.entityHit.addVelocity(this.motionX * (double)this.knockbackStrength * 0.6000000238418579D / (double)var29, 0.1D, this.motionZ * (double)this.knockbackStrength * 0.6000000238418579D / (double)var29);
                         }
                      }
                   }
@@ -234,18 +250,18 @@
                   this.ticksInAir = 0;
                }
             } else {
-               this.xTile = var4.blockX;
-               this.yTile = var4.blockY;
-               this.zTile = var4.blockZ;
+               this.xTile = movingobjectposition.blockX;
+               this.yTile = movingobjectposition.blockY;
+               this.zTile = movingobjectposition.blockZ;
                this.inTile = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
                this.inData = this.worldObj.getBlockMetadata(this.xTile, this.yTile, this.zTile);
-               this.motionX = (double)((float)(var4.hitVec.xCoord - this.posX));
-               this.motionY = (double)((float)(var4.hitVec.yCoord - this.posY));
-               this.motionZ = (double)((float)(var4.hitVec.zCoord - this.posZ));
-               var20 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
-               this.posX -= this.motionX / (double)var20 * 0.05000000074505806D;
-               this.posY -= this.motionY / (double)var20 * 0.05000000074505806D;
-               this.posZ -= this.motionZ / (double)var20 * 0.05000000074505806D;
+               this.motionX = (double)((float)(movingobjectposition.hitVec.xCoord - this.posX));
+               this.motionY = (double)((float)(movingobjectposition.hitVec.yCoord - this.posY));
+               this.motionZ = (double)((float)(movingobjectposition.hitVec.zCoord - this.posZ));
+               var23 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
+               this.posX -= this.motionX / (double)var23 * 0.05000000074505806D;
+               this.posY -= this.motionY / (double)var23 * 0.05000000074505806D;
+               this.posZ -= this.motionZ / (double)var23 * 0.05000000074505806D;
                this.func_85030_a("random.bowhit", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
                this.inGround = true;
                this.arrowShake = 7;
@@ -257,18 +273,18 @@
          }
 
          if(this.getIsCritical()) {
-            for(var9 = 0; var9 < 4; ++var9) {
-               this.worldObj.spawnParticle("crit", this.posX + this.motionX * (double)var9 / 4.0D, this.posY + this.motionY * (double)var9 / 4.0D, this.posZ + this.motionZ * (double)var9 / 4.0D, -this.motionX, -this.motionY + 0.2D, -this.motionZ);
+            for(l = 0; l < 4; ++l) {
+               this.worldObj.spawnParticle("crit", this.posX + this.motionX * (double)l / 4.0D, this.posY + this.motionY * (double)l / 4.0D, this.posZ + this.motionZ * (double)l / 4.0D, -this.motionX, -this.motionY + 0.2D, -this.motionZ);
             }
          }
 
          this.posX += this.motionX;
          this.posY += this.motionY;
          this.posZ += this.motionZ;
-         var20 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+         var23 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
          this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / 3.1415927410125732D);
 
-         for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var20) * 180.0D / 3.1415927410125732D); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+         for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var23) * 180.0D / 3.1415927410125732D); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
             ;
          }
 
@@ -286,106 +302,117 @@
 
          this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
          this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
-         float var22 = 0.99F;
-         var11 = 0.05F;
+         float var25 = 0.99F;
+         f1 = 0.05F;
          if(this.isInWater()) {
             for(int var26 = 0; var26 < 4; ++var26) {
-               float var27 = 0.25F;
-               this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var27, this.posY - this.motionY * (double)var27, this.posZ - this.motionZ * (double)var27, this.motionX, this.motionY, this.motionZ);
+               float var28 = 0.25F;
+               this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var28, this.posY - this.motionY * (double)var28, this.posZ - this.motionZ * (double)var28, this.motionX, this.motionY, this.motionZ);
             }
 
-            var22 = 0.8F;
+            var25 = 0.8F;
          }
 
-         this.motionX *= (double)var22;
-         this.motionY *= (double)var22;
-         this.motionZ *= (double)var22;
-         this.motionY -= (double)var11;
+         this.motionX *= (double)var25;
+         this.motionY *= (double)var25;
+         this.motionZ *= (double)var25;
+         this.motionY -= (double)f1;
          this.setPosition(this.posX, this.posY, this.posZ);
          this.doBlockCollisions();
       }
+
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setShort("xTile", (short)this.xTile);
-      var1.setShort("yTile", (short)this.yTile);
-      var1.setShort("zTile", (short)this.zTile);
-      var1.setByte("inTile", (byte)this.inTile);
-      var1.setByte("inData", (byte)this.inData);
-      var1.setByte("shake", (byte)this.arrowShake);
-      var1.setByte("inGround", (byte)(this.inGround?1:0));
-      var1.setByte("pickup", (byte)this.canBePickedUp);
-      var1.setDouble("damage", this.damage);
-   }
-
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      this.xTile = var1.getShort("xTile");
-      this.yTile = var1.getShort("yTile");
-      this.zTile = var1.getShort("zTile");
-      this.inTile = var1.getByte("inTile") & 255;
-      this.inData = var1.getByte("inData") & 255;
-      this.arrowShake = var1.getByte("shake") & 255;
-      this.inGround = var1.getByte("inGround") == 1;
-      if(var1.hasKey("damage")) {
-         this.damage = var1.getDouble("damage");
-      }
-
-      if(var1.hasKey("pickup")) {
-         this.canBePickedUp = var1.getByte("pickup");
-      } else if(var1.hasKey("player")) {
-         this.canBePickedUp = var1.getBoolean("player")?1:0;
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setShort("xTile", (short)this.xTile);
+      nbttagcompound.setShort("yTile", (short)this.yTile);
+      nbttagcompound.setShort("zTile", (short)this.zTile);
+      nbttagcompound.setByte("inTile", (byte)this.inTile);
+      nbttagcompound.setByte("inData", (byte)this.inData);
+      nbttagcompound.setByte("shake", (byte)this.arrowShake);
+      nbttagcompound.setByte("inGround", (byte)(this.inGround?1:0));
+      nbttagcompound.setByte("pickup", (byte)this.canBePickedUp);
+      nbttagcompound.setDouble("damage", this.damage);
+   }
+
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.xTile = nbttagcompound.getShort("xTile");
+      this.yTile = nbttagcompound.getShort("yTile");
+      this.zTile = nbttagcompound.getShort("zTile");
+      this.inTile = nbttagcompound.getByte("inTile") & 255;
+      this.inData = nbttagcompound.getByte("inData") & 255;
+      this.arrowShake = nbttagcompound.getByte("shake") & 255;
+      this.inGround = nbttagcompound.getByte("inGround") == 1;
+      if(nbttagcompound.hasKey("damage")) {
+         this.damage = nbttagcompound.getDouble("damage");
+      }
+
+      if(nbttagcompound.hasKey("pickup")) {
+         this.canBePickedUp = nbttagcompound.getByte("pickup");
+      } else if(nbttagcompound.hasKey("player")) {
+         this.canBePickedUp = nbttagcompound.getBoolean("player")?1:0;
       }
 
    }
 
-   public void onCollideWithPlayer(EntityPlayer var1) {
+   public void onCollideWithPlayer(EntityPlayer entityhuman) {
       if(!this.worldObj.isRemote && this.inGround && this.arrowShake <= 0) {
-         boolean var2 = this.canBePickedUp == 1 || this.canBePickedUp == 2 && var1.capabilities.isCreativeMode;
-         if(this.canBePickedUp == 1 && !var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow, 1))) {
-            var2 = false;
+         ItemStack itemstack = new ItemStack(Item.arrow);
+         if(this.canBePickedUp == 1 && entityhuman.inventory.canHold(itemstack) > 0) {
+            EntityItem flag = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, itemstack);
+            PlayerPickupItemEvent event = new PlayerPickupItemEvent((Player)entityhuman.getBukkitEntity(), new CraftItem(this.worldObj.getServer(), this, flag), 0);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            if(event.isCancelled()) {
+               return;
+            }
+         }
+
+         boolean flag1 = this.canBePickedUp == 1 || this.canBePickedUp == 2 && entityhuman.capabilities.isCreativeMode;
+         if(this.canBePickedUp == 1 && !entityhuman.inventory.addItemStackToInventory(new ItemStack(Item.arrow, 1))) {
+            flag1 = false;
          }
 
-         if(var2) {
+         if(flag1) {
             this.func_85030_a("random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            var1.onItemPickup(this, 1);
+            entityhuman.onItemPickup(this, 1);
             this.setDead();
          }
-
       }
+
    }
 
    protected boolean canTriggerWalking() {
       return false;
    }
 
-   public void setDamage(double var1) {
-      this.damage = var1;
+   public void setDamage(double d0) {
+      this.damage = d0;
    }
 
    public double getDamage() {
       return this.damage;
    }
 
-   public void setKnockbackStrength(int var1) {
-      this.knockbackStrength = var1;
+   public void setKnockbackStrength(int i) {
+      this.knockbackStrength = i;
    }
 
    public boolean canAttackWithItem() {
       return false;
    }
 
-   public void setIsCritical(boolean var1) {
-      byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-      if(var1) {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 | 1)));
+   public void setIsCritical(boolean flag) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      if(flag) {
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 | 1)));
       } else {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 & -2)));
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 & -2)));
       }
 
    }
 
    public boolean getIsCritical() {
-      byte var1 = this.dataWatcher.getWatchableObjectByte(16);
-      return (var1 & 1) != 0;
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      return (b0 & 1) != 0;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityBlaze.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityBlaze.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityBlaze.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityBlaze.java
--- mcp-mcdev/net/minecraft/src/EntityBlaze.java	2012-11-29 21:15:04.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityBlaze.java	2012-11-29 20:44:22.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.Entity;
 import net.minecraft.src.EntityMob;
@@ -8,6 +9,7 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntityBlaze extends EntityMob {
 
@@ -16,8 +18,8 @@
    private int field_70846_g;
 
 
-   public EntityBlaze(World var1) {
-      super(var1);
+   public EntityBlaze(World world) {
+      super(world);
       this.texture = "/mob/fire.png";
       this.isImmuneToFire = true;
       this.experienceValue = 10;
@@ -44,7 +46,7 @@
       return "mob.blaze.death";
    }
 
-   public float getBrightness(float var1) {
+   public float getBrightness(float f) {
       return 1.0F;
    }
 
@@ -73,21 +75,21 @@
          this.motionY *= 0.6D;
       }
 
-      for(int var1 = 0; var1 < 2; ++var1) {
+      for(int i = 0; i < 2; ++i) {
          this.worldObj.spawnParticle("largesmoke", this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, 0.0D, 0.0D, 0.0D);
       }
 
       super.onLivingUpdate();
    }
 
-   protected void attackEntity(Entity var1, float var2) {
-      if(this.attackTime <= 0 && var2 < 2.0F && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
+   protected void attackEntity(Entity entity, float f) {
+      if(this.attackTime <= 0 && f < 2.0F && entity.boundingBox.maxY > this.boundingBox.minY && entity.boundingBox.minY < this.boundingBox.maxY) {
          this.attackTime = 20;
-         this.attackEntityAsMob(var1);
-      } else if(var2 < 30.0F) {
-         double var3 = var1.posX - this.posX;
-         double var5 = var1.boundingBox.minY + (double)(var1.height / 2.0F) - (this.posY + (double)(this.height / 2.0F));
-         double var7 = var1.posZ - this.posZ;
+         this.attackEntityAsMob(entity);
+      } else if(f < 30.0F) {
+         double d0 = entity.posX - this.posX;
+         double d1 = entity.boundingBox.minY + (double)(entity.height / 2.0F) - (this.posY + (double)(this.height / 2.0F));
+         double d2 = entity.posZ - this.posZ;
          if(this.attackTime == 0) {
             ++this.field_70846_g;
             if(this.field_70846_g == 1) {
@@ -102,24 +104,24 @@
             }
 
             if(this.field_70846_g > 1) {
-               float var9 = MathHelper.sqrt_float(var2) * 0.5F;
+               float f1 = MathHelper.sqrt_float(f) * 0.5F;
                this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1009, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
 
-               for(int var10 = 0; var10 < 1; ++var10) {
-                  EntitySmallFireball var11 = new EntitySmallFireball(this.worldObj, this, var3 + this.rand.nextGaussian() * (double)var9, var5, var7 + this.rand.nextGaussian() * (double)var9);
-                  var11.posY = this.posY + (double)(this.height / 2.0F) + 0.5D;
-                  this.worldObj.spawnEntityInWorld(var11);
+               for(int i = 0; i < 1; ++i) {
+                  EntitySmallFireball entitysmallfireball = new EntitySmallFireball(this.worldObj, this, d0 + this.rand.nextGaussian() * (double)f1, d1, d2 + this.rand.nextGaussian() * (double)f1);
+                  entitysmallfireball.posY = this.posY + (double)(this.height / 2.0F) + 0.5D;
+                  this.worldObj.spawnEntityInWorld(entitysmallfireball);
                }
             }
          }
 
-         this.rotationYaw = (float)(Math.atan2(var7, var3) * 180.0D / 3.1415927410125732D) - 90.0F;
+         this.rotationYaw = (float)(Math.atan2(d2, d0) * 180.0D / 3.1415927410125732D) - 90.0F;
          this.hasAttacked = true;
       }
 
    }
 
-   protected void fall(float var1) {}
+   protected void fall(float f) {}
 
    protected int getDropItemId() {
       return Item.blazeRod.shiftedIndex;
@@ -129,13 +131,15 @@
       return this.func_70845_n();
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      if(var1) {
-         int var3 = this.rand.nextInt(2 + var2);
-
-         for(int var4 = 0; var4 < var3; ++var4) {
-            this.dropItem(Item.blazeRod.shiftedIndex, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      if(flag) {
+         ArrayList loot = new ArrayList();
+         int j = this.rand.nextInt(2 + i);
+         if(j > 0) {
+            loot.add(new org.bukkit.inventory.ItemStack(Item.blazeRod.shiftedIndex, j));
          }
+
+         CraftEventFactory.callEntityDeathEvent(this, loot);
       }
 
    }
@@ -144,22 +148,22 @@
       return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
    }
 
-   public void func_70844_e(boolean var1) {
-      byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-      if(var1) {
-         var2 = (byte)(var2 | 1);
+   public void func_70844_e(boolean flag) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      if(flag) {
+         b0 = (byte)(b0 | 1);
       } else {
-         var2 &= -2;
+         b0 &= -2;
       }
 
-      this.dataWatcher.updateObject(16, Byte.valueOf(var2));
+      this.dataWatcher.updateObject(16, Byte.valueOf(b0));
    }
 
    protected boolean isValidLightLevel() {
       return true;
    }
 
-   public int getAttackStrength(Entity var1) {
+   public int getAttackStrength(Entity entity) {
       return 6;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityBoat.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityBoat.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityBoat.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityBoat.java
--- mcp-mcdev/net/minecraft/src/EntityBoat.java	2012-11-29 21:15:04.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityBoat.java	2012-11-29 20:44:22.000000000 -0800
@@ -11,6 +11,16 @@
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleCreateEvent;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.event.vehicle.VehicleMoveEvent;
+import org.bukkit.event.vehicle.VehicleUpdateEvent;
 
 public class EntityBoat extends Entity {
 
@@ -22,10 +32,27 @@
    private double boatZ;
    private double boatYaw;
    private double boatPitch;
+   public double maxSpeed;
+   public double occupiedDeceleration;
+   public double unoccupiedDeceleration;
+   public boolean landBoats;
 
 
-   public EntityBoat(World var1) {
-      super(var1);
+   public void collide(Entity entity) {
+      org.bukkit.entity.Entity hitEntity = entity == null?null:entity.getBukkitEntity();
+      VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent((Vehicle)this.getBukkitEntity(), hitEntity);
+      this.worldObj.getServer().getPluginManager().callEvent(event);
+      if(!event.isCancelled()) {
+         super.applyEntityCollision(entity);
+      }
+   }
+
+   public EntityBoat(World world) {
+      super(world);
+      this.maxSpeed = 0.4D;
+      this.occupiedDeceleration = 0.2D;
+      this.unoccupiedDeceleration = -1.0D;
+      this.landBoats = false;
       this.field_70279_a = true;
       this.field_70276_b = 0.07D;
       this.preventEntitySpawning = true;
@@ -43,8 +70,8 @@
       this.dataWatcher.addObject(19, new Integer(0));
    }
 
-   public AxisAlignedBB getCollisionBox(Entity var1) {
-      return var1.boundingBox;
+   public AxisAlignedBB getCollisionBox(Entity entity) {
+      return entity.boundingBox;
    }
 
    public AxisAlignedBB getBoundingBox() {
@@ -55,43 +82,59 @@
       return true;
    }
 
-   public EntityBoat(World var1, double var2, double var4, double var6) {
-      this(var1);
-      this.setPosition(var2, var4 + (double)this.yOffset, var6);
+   public EntityBoat(World world, double d0, double d1, double d2) {
+      this(world);
+      this.setPosition(d0, d1 + (double)this.yOffset, d2);
       this.motionX = 0.0D;
       this.motionY = 0.0D;
       this.motionZ = 0.0D;
-      this.prevPosX = var2;
-      this.prevPosY = var4;
-      this.prevPosZ = var6;
+      this.prevPosX = d0;
+      this.prevPosY = d1;
+      this.prevPosZ = d2;
+      this.worldObj.getServer().getPluginManager().callEvent(new VehicleCreateEvent((Vehicle)this.getBukkitEntity()));
    }
 
    public double getMountedYOffset() {
       return (double)this.height * 0.0D - 0.30000001192092896D;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else if(!this.worldObj.isRemote && !this.isDead) {
-         this.setForwardDirection(-this.getForwardDirection());
-         this.setTimeSinceHit(10);
-         this.setDamageTaken(this.getDamageTaken() + var2 * 10);
-         this.setBeenAttacked();
-         if(var1.getEntity() instanceof EntityPlayer && ((EntityPlayer)var1.getEntity()).capabilities.isCreativeMode) {
-            this.setDamageTaken(100);
-         }
+         Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+         org.bukkit.entity.Entity attacker = damagesource.getEntity() == null?null:damagesource.getEntity().getBukkitEntity();
+         VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, i);
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(event.isCancelled()) {
+            return true;
+         } else {
+            this.setForwardDirection(-this.getForwardDirection());
+            this.setTimeSinceHit(10);
+            this.setDamageTaken(this.getDamageTaken() + i * 10);
+            this.setBeenAttacked();
+            if(damagesource.getEntity() instanceof EntityPlayer && ((EntityPlayer)damagesource.getEntity()).capabilities.isCreativeMode) {
+               this.setDamageTaken(100);
+            }
+
+            if(this.getDamageTaken() > 40) {
+               VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, attacker);
+               this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
+               if(destroyEvent.isCancelled()) {
+                  this.setDamageTaken(40);
+                  return true;
+               }
+
+               if(this.riddenByEntity != null) {
+                  this.riddenByEntity.mountEntity(this);
+               }
 
-         if(this.getDamageTaken() > 40) {
-            if(this.riddenByEntity != null) {
-               this.riddenByEntity.mountEntity(this);
+               this.dropItemWithOffset(Item.boat.shiftedIndex, 1, 0.0F);
+               this.setDead();
             }
 
-            this.dropItemWithOffset(Item.boat.shiftedIndex, 1, 0.0F);
-            this.setDead();
+            return true;
          }
-
-         return true;
       } else {
          return true;
       }
@@ -102,6 +145,11 @@
    }
 
    public void onUpdate() {
+      double prevX = this.posX;
+      double prevY = this.posY;
+      double prevZ = this.posZ;
+      float prevYaw = this.rotationYaw;
+      float prevPitch = this.rotationPitch;
       super.onUpdate();
       if(this.getTimeSinceHit() > 0) {
          this.setTimeSinceHit(this.getTimeSinceHit() - 1);
@@ -114,60 +162,60 @@
       this.prevPosX = this.posX;
       this.prevPosY = this.posY;
       this.prevPosZ = this.posZ;
-      byte var1 = 5;
-      double var2 = 0.0D;
+      byte b0 = 5;
+      double d0 = 0.0D;
 
-      for(int var4 = 0; var4 < var1; ++var4) {
-         double var5 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var4 + 0) / (double)var1 - 0.125D;
-         double var7 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var4 + 1) / (double)var1 - 0.125D;
-         AxisAlignedBB var9 = AxisAlignedBB.getAABBPool().addOrModifyAABBInPool(this.boundingBox.minX, var5, this.boundingBox.minZ, this.boundingBox.maxX, var7, this.boundingBox.maxZ);
-         if(this.worldObj.isAABBInMaterial(var9, Material.water)) {
-            var2 += 1.0D / (double)var1;
+      for(int i = 0; i < b0; ++i) {
+         double d1 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(i + 0) / (double)b0 - 0.125D;
+         double d2 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(i + 1) / (double)b0 - 0.125D;
+         AxisAlignedBB axisalignedbb = AxisAlignedBB.getAABBPool().addOrModifyAABBInPool(this.boundingBox.minX, d1, this.boundingBox.minZ, this.boundingBox.maxX, d2, this.boundingBox.maxZ);
+         if(this.worldObj.isAABBInMaterial(axisalignedbb, Material.water)) {
+            d0 += 1.0D / (double)b0;
          }
       }
 
-      double var10 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-      double var12;
-      double var14;
-      if(var10 > 0.26249999999999996D) {
-         var12 = Math.cos((double)this.rotationYaw * 3.141592653589793D / 180.0D);
-         var14 = Math.sin((double)this.rotationYaw * 3.141592653589793D / 180.0D);
-
-         for(int var16 = 0; (double)var16 < 1.0D + var10 * 60.0D; ++var16) {
-            double var17 = (double)(this.rand.nextFloat() * 2.0F - 1.0F);
-            double var19 = (double)(this.rand.nextInt(2) * 2 - 1) * 0.7D;
-            double var21;
-            double var23;
+      double d3 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+      double d4;
+      double d5;
+      if(d3 > 0.26249999999999996D) {
+         d4 = Math.cos((double)this.rotationYaw * 3.141592653589793D / 180.0D);
+         d5 = Math.sin((double)this.rotationYaw * 3.141592653589793D / 180.0D);
+
+         for(int j = 0; (double)j < 1.0D + d3 * 60.0D; ++j) {
+            double d6 = (double)(this.rand.nextFloat() * 2.0F - 1.0F);
+            double d7 = (double)(this.rand.nextInt(2) * 2 - 1) * 0.7D;
+            double d8;
+            double d9;
             if(this.rand.nextBoolean()) {
-               var21 = this.posX - var12 * var17 * 0.8D + var14 * var19;
-               var23 = this.posZ - var14 * var17 * 0.8D - var12 * var19;
-               this.worldObj.spawnParticle("splash", var21, this.posY - 0.125D, var23, this.motionX, this.motionY, this.motionZ);
+               d8 = this.posX - d4 * d6 * 0.8D + d5 * d7;
+               d9 = this.posZ - d5 * d6 * 0.8D - d4 * d7;
+               this.worldObj.spawnParticle("splash", d8, this.posY - 0.125D, d9, this.motionX, this.motionY, this.motionZ);
             } else {
-               var21 = this.posX + var12 + var14 * var17 * 0.7D;
-               var23 = this.posZ + var14 - var12 * var17 * 0.7D;
-               this.worldObj.spawnParticle("splash", var21, this.posY - 0.125D, var23, this.motionX, this.motionY, this.motionZ);
+               d8 = this.posX + d4 + d5 * d6 * 0.7D;
+               d9 = this.posZ + d5 - d4 * d6 * 0.7D;
+               this.worldObj.spawnParticle("splash", d8, this.posY - 0.125D, d9, this.motionX, this.motionY, this.motionZ);
             }
          }
       }
 
-      double var25;
-      double var27;
+      double d11;
+      double d10;
       if(this.worldObj.isRemote && this.field_70279_a) {
          if(this.boatPosRotationIncrements > 0) {
-            var12 = this.posX + (this.boatX - this.posX) / (double)this.boatPosRotationIncrements;
-            var14 = this.posY + (this.boatY - this.posY) / (double)this.boatPosRotationIncrements;
-            var25 = this.posZ + (this.boatZ - this.posZ) / (double)this.boatPosRotationIncrements;
-            var27 = MathHelper.wrapAngleTo180_double(this.boatYaw - (double)this.rotationYaw);
-            this.rotationYaw = (float)((double)this.rotationYaw + var27 / (double)this.boatPosRotationIncrements);
+            d4 = this.posX + (this.boatX - this.posX) / (double)this.boatPosRotationIncrements;
+            d5 = this.posY + (this.boatY - this.posY) / (double)this.boatPosRotationIncrements;
+            d10 = this.posZ + (this.boatZ - this.posZ) / (double)this.boatPosRotationIncrements;
+            d11 = MathHelper.wrapAngleTo180_double(this.boatYaw - (double)this.rotationYaw);
+            this.rotationYaw = (float)((double)this.rotationYaw + d11 / (double)this.boatPosRotationIncrements);
             this.rotationPitch = (float)((double)this.rotationPitch + (this.boatPitch - (double)this.rotationPitch) / (double)this.boatPosRotationIncrements);
             --this.boatPosRotationIncrements;
-            this.setPosition(var12, var14, var25);
+            this.setPosition(d4, d5, d10);
             this.setRotation(this.rotationYaw, this.rotationPitch);
          } else {
-            var12 = this.posX + this.motionX;
-            var14 = this.posY + this.motionY;
-            var25 = this.posZ + this.motionZ;
-            this.setPosition(var12, var14, var25);
+            d4 = this.posX + this.motionX;
+            d5 = this.posY + this.motionY;
+            d10 = this.posZ + this.motionZ;
+            this.setPosition(d4, d5, d10);
             if(this.onGround) {
                this.motionX *= 0.5D;
                this.motionY *= 0.5D;
@@ -178,11 +226,10 @@
             this.motionY *= 0.949999988079071D;
             this.motionZ *= 0.9900000095367432D;
          }
-
       } else {
-         if(var2 < 1.0D) {
-            var12 = var2 * 2.0D - 1.0D;
-            this.motionY += 0.03999999910593033D * var12;
+         if(d0 < 1.0D) {
+            d4 = d0 * 2.0D - 1.0D;
+            this.motionY += 0.03999999910593033D * d4;
          } else {
             if(this.motionY < 0.0D) {
                this.motionY /= 2.0D;
@@ -194,17 +241,27 @@
          if(this.riddenByEntity != null) {
             this.motionX += this.riddenByEntity.motionX * this.field_70276_b;
             this.motionZ += this.riddenByEntity.motionZ * this.field_70276_b;
+         } else if(this.unoccupiedDeceleration >= 0.0D) {
+            this.motionX *= this.unoccupiedDeceleration;
+            this.motionZ *= this.unoccupiedDeceleration;
+            if(this.motionX <= 1.0E-5D) {
+               this.motionX = 0.0D;
+            }
+
+            if(this.motionZ <= 1.0E-5D) {
+               this.motionZ = 0.0D;
+            }
          }
 
-         var12 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-         if(var12 > 0.35D) {
-            var14 = 0.35D / var12;
-            this.motionX *= var14;
-            this.motionZ *= var14;
-            var12 = 0.35D;
+         d4 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+         if(d4 > 0.35D) {
+            d5 = 0.35D / d4;
+            this.motionX *= d5;
+            this.motionZ *= d5;
+            d4 = 0.35D;
          }
 
-         if(var12 > var10 && this.field_70276_b < 0.35D) {
+         if(d4 > d3 && this.field_70276_b < 0.35D) {
             this.field_70276_b += (0.35D - this.field_70276_b) / 35.0D;
             if(this.field_70276_b > 0.35D) {
                this.field_70276_b = 0.35D;
@@ -216,24 +273,29 @@
             }
          }
 
-         if(this.onGround) {
+         if(this.onGround && !this.landBoats) {
             this.motionX *= 0.5D;
             this.motionY *= 0.5D;
             this.motionZ *= 0.5D;
          }
 
          this.moveEntity(this.motionX, this.motionY, this.motionZ);
-         if(this.isCollidedHorizontally && var10 > 0.2D) {
+         if(this.isCollidedHorizontally && d3 > 0.2D) {
             if(!this.worldObj.isRemote) {
-               this.setDead();
-
-               int var29;
-               for(var29 = 0; var29 < 3; ++var29) {
-                  this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-               }
+               Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+               VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, (org.bukkit.entity.Entity)null);
+               this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
+               if(!destroyEvent.isCancelled()) {
+                  this.setDead();
+
+                  int server;
+                  for(server = 0; server < 3; ++server) {
+                     this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
+                  }
 
-               for(var29 = 0; var29 < 2; ++var29) {
-                  this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
+                  for(server = 0; server < 2; ++server) {
+                     this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
+                  }
                }
             }
          } else {
@@ -243,103 +305,116 @@
          }
 
          this.rotationPitch = 0.0F;
-         var14 = (double)this.rotationYaw;
-         var25 = this.prevPosX - this.posX;
-         var27 = this.prevPosZ - this.posZ;
-         if(var25 * var25 + var27 * var27 > 0.0010D) {
-            var14 = (double)((float)(Math.atan2(var27, var25) * 180.0D / 3.141592653589793D));
+         d5 = (double)this.rotationYaw;
+         d10 = this.prevPosX - this.posX;
+         d11 = this.prevPosZ - this.posZ;
+         if(d10 * d10 + d11 * d11 > 0.0010D) {
+            d5 = (double)((float)(Math.atan2(d11, d10) * 180.0D / 3.141592653589793D));
          }
 
-         double var30 = MathHelper.wrapAngleTo180_double(var14 - (double)this.rotationYaw);
-         if(var30 > 20.0D) {
-            var30 = 20.0D;
+         double d12 = MathHelper.wrapAngleTo180_double(d5 - (double)this.rotationYaw);
+         if(d12 > 20.0D) {
+            d12 = 20.0D;
          }
 
-         if(var30 < -20.0D) {
-            var30 = -20.0D;
+         if(d12 < -20.0D) {
+            d12 = -20.0D;
          }
 
-         this.rotationYaw = (float)((double)this.rotationYaw + var30);
+         this.rotationYaw = (float)((double)this.rotationYaw + d12);
          this.setRotation(this.rotationYaw, this.rotationPitch);
+         CraftServer var54 = this.worldObj.getServer();
+         CraftWorld bworld = this.worldObj.getWorld();
+         Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+         Location to = new Location(bworld, this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+         Vehicle vehicle1 = (Vehicle)this.getBukkitEntity();
+         var54.getPluginManager().callEvent(new VehicleUpdateEvent(vehicle1));
+         if(!from.equals(to)) {
+            VehicleMoveEvent list = new VehicleMoveEvent(vehicle1, from, to);
+            var54.getPluginManager().callEvent(list);
+         }
+
          if(!this.worldObj.isRemote) {
-            List var32 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
-            int var33;
-            if(var32 != null && !var32.isEmpty()) {
-               for(var33 = 0; var33 < var32.size(); ++var33) {
-                  Entity var34 = (Entity)var32.get(var33);
-                  if(var34 != this.riddenByEntity && var34.canBePushed() && var34 instanceof EntityBoat) {
-                     var34.applyEntityCollision(this);
+            List var55 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+            int l;
+            if(var55 != null && !var55.isEmpty()) {
+               for(l = 0; l < var55.size(); ++l) {
+                  Entity i1 = (Entity)var55.get(l);
+                  if(i1 != this.riddenByEntity && i1.canBePushed() && i1 instanceof EntityBoat) {
+                     i1.applyEntityCollision(this);
                   }
                }
             }
 
-            for(var33 = 0; var33 < 4; ++var33) {
-               int var40 = MathHelper.floor_double(this.posX + ((double)(var33 % 2) - 0.5D) * 0.8D);
-               int var35 = MathHelper.floor_double(this.posZ + ((double)(var33 / 2) - 0.5D) * 0.8D);
-
-               for(int var36 = 0; var36 < 2; ++var36) {
-                  int var37 = MathHelper.floor_double(this.posY) + var36;
-                  int var38 = this.worldObj.getBlockId(var40, var37, var35);
-                  int var39 = this.worldObj.getBlockMetadata(var40, var37, var35);
-                  if(var38 == Block.snow.blockID) {
-                     this.worldObj.setBlockWithNotify(var40, var37, var35, 0);
-                  } else if(var38 == Block.waterlily.blockID) {
-                     Block.waterlily.dropBlockAsItemWithChance(this.worldObj, var40, var37, var35, var39, 0.3F, 0);
-                     this.worldObj.setBlockWithNotify(var40, var37, var35, 0);
+            for(l = 0; l < 4; ++l) {
+               int var56 = MathHelper.floor_double(this.posX + ((double)(l % 2) - 0.5D) * 0.8D);
+               int j1 = MathHelper.floor_double(this.posZ + ((double)(l / 2) - 0.5D) * 0.8D);
+
+               for(int k1 = 0; k1 < 2; ++k1) {
+                  int l1 = MathHelper.floor_double(this.posY) + k1;
+                  int i2 = this.worldObj.getBlockId(var56, l1, j1);
+                  int j2 = this.worldObj.getBlockMetadata(var56, l1, j1);
+                  if(i2 == Block.snow.blockID) {
+                     this.worldObj.setBlockWithNotify(var56, l1, j1, 0);
+                  } else if(i2 == Block.waterlily.blockID) {
+                     Block.waterlily.dropBlockAsItemWithChance(this.worldObj, var56, l1, j1, j2, 0.3F, 0);
+                     this.worldObj.setBlockWithNotify(var56, l1, j1, 0);
                   }
                }
             }
 
             if(this.riddenByEntity != null && this.riddenByEntity.isDead) {
+               this.riddenByEntity.ridingEntity = null;
                this.riddenByEntity = null;
             }
-
          }
       }
+
    }
 
    public void updateRiderPosition() {
       if(this.riddenByEntity != null) {
-         double var1 = Math.cos((double)this.rotationYaw * 3.141592653589793D / 180.0D) * 0.4D;
-         double var3 = Math.sin((double)this.rotationYaw * 3.141592653589793D / 180.0D) * 0.4D;
-         this.riddenByEntity.setPosition(this.posX + var1, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ + var3);
+         double d0 = Math.cos((double)this.rotationYaw * 3.141592653589793D / 180.0D) * 0.4D;
+         double d1 = Math.sin((double)this.rotationYaw * 3.141592653589793D / 180.0D) * 0.4D;
+         this.riddenByEntity.setPosition(this.posX + d0, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ + d1);
       }
+
    }
 
-   protected void writeEntityToNBT(NBTTagCompound var1) {}
+   protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {}
 
-   protected void readEntityFromNBT(NBTTagCompound var1) {}
+   protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {}
 
-   public boolean interact(EntityPlayer var1) {
-      if(this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayer && this.riddenByEntity != var1) {
+   public boolean interact(EntityPlayer entityhuman) {
+      if(this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayer && this.riddenByEntity != entityhuman) {
          return true;
       } else {
          if(!this.worldObj.isRemote) {
-            var1.mountEntity(this);
+            entityhuman.mountEntity(this);
          }
 
          return true;
       }
    }
 
-   public void setDamageTaken(int var1) {
-      this.dataWatcher.updateObject(19, Integer.valueOf(var1));
+   public void setDamageTaken(int i) {
+      this.dataWatcher.updateObject(19, Integer.valueOf(i));
    }
 
    public int getDamageTaken() {
       return this.dataWatcher.getWatchableObjectInt(19);
    }
 
-   public void setTimeSinceHit(int var1) {
-      this.dataWatcher.updateObject(17, Integer.valueOf(var1));
+   public void setTimeSinceHit(int i) {
+      this.dataWatcher.updateObject(17, Integer.valueOf(i));
    }
 
    public int getTimeSinceHit() {
       return this.dataWatcher.getWatchableObjectInt(17);
    }
 
-   public void setForwardDirection(int var1) {
-      this.dataWatcher.updateObject(18, Integer.valueOf(var1));
+   public void setForwardDirection(int i) {
+      this.dataWatcher.updateObject(18, Integer.valueOf(i));
    }
 
    public int getForwardDirection() {
Binary files mcp-mcdev/net/minecraft/src/EntityChicken.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityChicken.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityChicken.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityChicken.java
--- mcp-mcdev/net/minecraft/src/EntityChicken.java	2012-11-29 21:15:04.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityChicken.java	2012-11-29 20:44:22.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.EntityAIFollowParent;
 import net.minecraft.src.EntityAILookIdle;
 import net.minecraft.src.EntityAIMate;
@@ -15,6 +16,7 @@
 import net.minecraft.src.ItemSeeds;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntityChicken extends EntityAnimal {
 
@@ -27,18 +29,18 @@
    public int timeUntilNextEgg;
 
 
-   public EntityChicken(World var1) {
-      super(var1);
+   public EntityChicken(World world) {
+      super(world);
       this.texture = "/mob/chicken.png";
       this.setSize(0.3F, 0.7F);
       this.timeUntilNextEgg = this.rand.nextInt(6000) + 6000;
-      float var2 = 0.25F;
+      float f = 0.25F;
       this.tasks.addTask(0, new EntityAISwimming(this));
       this.tasks.addTask(1, new EntityAIPanic(this, 0.38F));
-      this.tasks.addTask(2, new EntityAIMate(this, var2));
+      this.tasks.addTask(2, new EntityAIMate(this, f));
       this.tasks.addTask(3, new EntityAITempt(this, 0.25F, Item.seeds.shiftedIndex, false));
       this.tasks.addTask(4, new EntityAIFollowParent(this, 0.28F));
-      this.tasks.addTask(5, new EntityAIWander(this, var2));
+      this.tasks.addTask(5, new EntityAIWander(this, f));
       this.tasks.addTask(6, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
       this.tasks.addTask(7, new EntityAILookIdle(this));
    }
@@ -82,7 +84,7 @@
 
    }
 
-   protected void fall(float var1) {}
+   protected void fall(float f) {}
 
    protected String getLivingSound() {
       return "mob.chicken.say";
@@ -96,7 +98,7 @@
       return "mob.chicken.hurt";
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.chicken.step", 0.15F, 1.0F);
    }
 
@@ -104,31 +106,31 @@
       return Item.feather.shiftedIndex;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + var2);
-
-      for(int var4 = 0; var4 < var3; ++var4) {
-         this.dropItem(Item.feather.shiftedIndex, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.rand.nextInt(3) + this.rand.nextInt(1 + i);
+      if(j > 0) {
+         loot.add(new org.bukkit.inventory.ItemStack(Item.feather.shiftedIndex, j));
       }
 
       if(this.isBurning()) {
-         this.dropItem(Item.chickenCooked.shiftedIndex, 1);
+         loot.add(new org.bukkit.inventory.ItemStack(Item.chickenCooked.shiftedIndex, 1));
       } else {
-         this.dropItem(Item.chickenRaw.shiftedIndex, 1);
+         loot.add(new org.bukkit.inventory.ItemStack(Item.chickenRaw.shiftedIndex, 1));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
-   public EntityChicken spawnBabyAnimal(EntityAgeable var1) {
+   public EntityChicken spawnBabyAnimal(EntityAgeable entityageable) {
       return new EntityChicken(this.worldObj);
    }
 
-   public boolean isBreedingItem(ItemStack var1) {
-      return var1 != null && var1.getItem() instanceof ItemSeeds;
+   public boolean isBreedingItem(ItemStack itemstack) {
+      return itemstack != null && itemstack.getItem() instanceof ItemSeeds;
    }
 
-   // $FF: synthetic method
-   public EntityAgeable func_90011_a(EntityAgeable var1) {
-      return this.spawnBabyAnimal(var1);
+   public EntityAgeable func_90011_a(EntityAgeable entityageable) {
+      return this.spawnBabyAnimal(entityageable);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityCow.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityCow.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityCow.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityCow.java
--- mcp-mcdev/net/minecraft/src/EntityCow.java	2012-11-29 21:15:04.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityCow.java	2012-11-29 20:44:22.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.EntityAIFollowParent;
 import net.minecraft.src.EntityAILookIdle;
 import net.minecraft.src.EntityAIMate;
@@ -14,11 +15,15 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.player.PlayerBucketFillEvent;
 
 public class EntityCow extends EntityAnimal {
 
-   public EntityCow(World var1) {
-      super(var1);
+   public EntityCow(World world) {
+      super(world);
       this.texture = "/mob/cow.png";
       this.setSize(0.9F, 1.3F);
       this.getNavigator().setAvoidsWater(true);
@@ -52,7 +57,7 @@
       return "mob.cow.hurt";
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.cow.step", 0.15F, 1.0F);
    }
 
@@ -64,47 +69,47 @@
       return Item.leather.shiftedIndex;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + var2);
-
-      int var4;
-      for(var4 = 0; var4 < var3; ++var4) {
-         this.dropItem(Item.leather.shiftedIndex, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.rand.nextInt(3) + this.rand.nextInt(1 + i);
+      if(j > 0) {
+         loot.add(new org.bukkit.inventory.ItemStack(Item.leather.shiftedIndex, j));
       }
 
-      var3 = this.rand.nextInt(3) + 1 + this.rand.nextInt(1 + var2);
-
-      for(var4 = 0; var4 < var3; ++var4) {
-         if(this.isBurning()) {
-            this.dropItem(Item.beefCooked.shiftedIndex, 1);
-         } else {
-            this.dropItem(Item.beefRaw.shiftedIndex, 1);
-         }
+      j = this.rand.nextInt(3) + 1 + this.rand.nextInt(1 + i);
+      if(j > 0) {
+         loot.add(new org.bukkit.inventory.ItemStack(this.isBurning()?Item.beefCooked.shiftedIndex:Item.beefRaw.shiftedIndex, j));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
-   public boolean interact(EntityPlayer var1) {
-      ItemStack var2 = var1.inventory.getCurrentItem();
-      if(var2 != null && var2.itemID == Item.bucketEmpty.shiftedIndex) {
-         if(--var2.stackSize <= 0) {
-            var1.inventory.setInventorySlotContents(var1.inventory.currentItem, new ItemStack(Item.bucketMilk));
-         } else if(!var1.inventory.addItemStackToInventory(new ItemStack(Item.bucketMilk))) {
-            var1.dropPlayerItem(new ItemStack(Item.bucketMilk.shiftedIndex, 1, 0));
-         }
+   public boolean interact(EntityPlayer entityhuman) {
+      ItemStack itemstack = entityhuman.inventory.getCurrentItem();
+      if(itemstack != null && itemstack.itemID == Item.bucketEmpty.shiftedIndex) {
+         Location loc = this.getBukkitEntity().getLocation();
+         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), -1, itemstack, Item.bucketMilk);
+         if(event.isCancelled()) {
+            return false;
+         } else {
+            if(--itemstack.stackSize <= 0) {
+               entityhuman.inventory.setInventorySlotContents(entityhuman.inventory.currentItem, CraftItemStack.createNMSItemStack(event.getItemStack()));
+            } else if(!entityhuman.inventory.addItemStackToInventory(new ItemStack(Item.bucketMilk))) {
+               entityhuman.dropPlayerItem(CraftItemStack.createNMSItemStack(event.getItemStack()));
+            }
 
-         return true;
+            return true;
+         }
       } else {
-         return super.interact(var1);
+         return super.interact(entityhuman);
       }
    }
 
-   public EntityCow spawnBabyAnimal(EntityAgeable var1) {
+   public EntityCow spawnBabyAnimal(EntityAgeable entityageable) {
       return new EntityCow(this.worldObj);
    }
 
-   // $FF: synthetic method
-   public EntityAgeable func_90011_a(EntityAgeable var1) {
-      return this.spawnBabyAnimal(var1);
+   public EntityAgeable func_90011_a(EntityAgeable entityageable) {
+      return this.spawnBabyAnimal(entityageable);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityCreature.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityCreature.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityCreature.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityCreature.java
--- mcp-mcdev/net/minecraft/src/EntityCreature.java	2012-11-29 21:15:04.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityCreature.java	2012-11-29 20:44:22.000000000 -0800
@@ -6,17 +6,21 @@
 import net.minecraft.src.PathEntity;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.TrigMath;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 
 public abstract class EntityCreature extends EntityLiving {
 
-   private PathEntity pathToEntity;
-   protected Entity entityToAttack;
+   public PathEntity pathToEntity;
+   public Entity entityToAttack;
    protected boolean hasAttacked = false;
    protected int fleeingTick = 0;
 
 
-   public EntityCreature(World var1) {
-      super(var1);
+   public EntityCreature(World world) {
+      super(world);
    }
 
    protected boolean isMovementCeased() {
@@ -30,75 +34,95 @@
       }
 
       this.hasAttacked = this.isMovementCeased();
-      float var1 = 16.0F;
+      float f = 16.0F;
       if(this.entityToAttack == null) {
-         this.entityToAttack = this.findPlayerToAttack();
+         Entity i = this.findPlayerToAttack();
+         if(i != null) {
+            EntityTargetEvent flag = new EntityTargetEvent(this.getBukkitEntity(), i.getBukkitEntity(), TargetReason.CLOSEST_PLAYER);
+            this.worldObj.getServer().getPluginManager().callEvent(flag);
+            if(!flag.isCancelled()) {
+               if(flag.getTarget() == null) {
+                  this.entityToAttack = null;
+               } else {
+                  this.entityToAttack = ((CraftEntity)flag.getTarget()).getHandle();
+               }
+            }
+         }
+
          if(this.entityToAttack != null) {
-            this.pathToEntity = this.worldObj.getPathEntityToEntity(this, this.entityToAttack, var1, true, false, false, true);
+            this.pathToEntity = this.worldObj.getPathEntityToEntity(this, this.entityToAttack, f, true, false, false, true);
          }
       } else if(this.entityToAttack.isEntityAlive()) {
-         float var2 = this.entityToAttack.getDistanceToEntity(this);
+         float var21 = this.entityToAttack.getDistanceToEntity(this);
          if(this.canEntityBeSeen(this.entityToAttack)) {
-            this.attackEntity(this.entityToAttack, var2);
+            this.attackEntity(this.entityToAttack, var21);
          }
       } else {
-         this.entityToAttack = null;
+         EntityTargetEvent var22 = new EntityTargetEvent(this.getBukkitEntity(), (org.bukkit.entity.Entity)null, TargetReason.TARGET_DIED);
+         this.worldObj.getServer().getPluginManager().callEvent(var22);
+         if(!var22.isCancelled()) {
+            if(var22.getTarget() == null) {
+               this.entityToAttack = null;
+            } else {
+               this.entityToAttack = ((CraftEntity)var22.getTarget()).getHandle();
+            }
+         }
       }
 
       this.worldObj.theProfiler.endSection();
       if(!this.hasAttacked && this.entityToAttack != null && (this.pathToEntity == null || this.rand.nextInt(20) == 0)) {
-         this.pathToEntity = this.worldObj.getPathEntityToEntity(this, this.entityToAttack, var1, true, false, false, true);
+         this.pathToEntity = this.worldObj.getPathEntityToEntity(this, this.entityToAttack, f, true, false, false, true);
       } else if(!this.hasAttacked && (this.pathToEntity == null && this.rand.nextInt(180) == 0 || this.rand.nextInt(120) == 0 || this.fleeingTick > 0) && this.entityAge < 100) {
          this.updateWanderPath();
       }
 
-      int var21 = MathHelper.floor_double(this.boundingBox.minY + 0.5D);
-      boolean var3 = this.isInWater();
-      boolean var4 = this.handleLavaMovement();
+      int var23 = MathHelper.floor_double(this.boundingBox.minY + 0.5D);
+      boolean var24 = this.isInWater();
+      boolean flag1 = this.handleLavaMovement();
       this.rotationPitch = 0.0F;
       if(this.pathToEntity != null && this.rand.nextInt(100) != 0) {
          this.worldObj.theProfiler.startSection("followpath");
-         Vec3 var5 = this.pathToEntity.getPosition(this);
-         double var6 = (double)(this.width * 2.0F);
+         Vec3 vec3d = this.pathToEntity.getPosition(this);
+         double d0 = (double)(this.width * 2.0F);
 
-         while(var5 != null && var5.squareDistanceTo(this.posX, var5.yCoord, this.posZ) < var6 * var6) {
+         while(vec3d != null && vec3d.squareDistanceTo(this.posX, vec3d.yCoord, this.posZ) < d0 * d0) {
             this.pathToEntity.incrementPathIndex();
             if(this.pathToEntity.isFinished()) {
-               var5 = null;
+               vec3d = null;
                this.pathToEntity = null;
             } else {
-               var5 = this.pathToEntity.getPosition(this);
+               vec3d = this.pathToEntity.getPosition(this);
             }
          }
 
          this.isJumping = false;
-         if(var5 != null) {
-            double var8 = var5.xCoord - this.posX;
-            double var10 = var5.zCoord - this.posZ;
-            double var12 = var5.yCoord - (double)var21;
-            float var14 = (float)(Math.atan2(var10, var8) * 180.0D / 3.1415927410125732D) - 90.0F;
-            float var15 = MathHelper.wrapAngleTo180_float(var14 - this.rotationYaw);
+         if(vec3d != null) {
+            double d1 = vec3d.xCoord - this.posX;
+            double d2 = vec3d.zCoord - this.posZ;
+            double d3 = vec3d.yCoord - (double)var23;
+            float f2 = (float)(TrigMath.atan2(d2, d1) * 180.0D / 3.1415927410125732D) - 90.0F;
+            float f3 = MathHelper.wrapAngleTo180_float(f2 - this.rotationYaw);
             this.moveForward = this.moveSpeed;
-            if(var15 > 30.0F) {
-               var15 = 30.0F;
+            if(f3 > 30.0F) {
+               f3 = 30.0F;
             }
 
-            if(var15 < -30.0F) {
-               var15 = -30.0F;
+            if(f3 < -30.0F) {
+               f3 = -30.0F;
             }
 
-            this.rotationYaw += var15;
+            this.rotationYaw += f3;
             if(this.hasAttacked && this.entityToAttack != null) {
-               double var16 = this.entityToAttack.posX - this.posX;
-               double var18 = this.entityToAttack.posZ - this.posZ;
-               float var20 = this.rotationYaw;
-               this.rotationYaw = (float)(Math.atan2(var18, var16) * 180.0D / 3.1415927410125732D) - 90.0F;
-               var15 = (var20 - this.rotationYaw + 90.0F) * 3.1415927F / 180.0F;
-               this.moveStrafing = -MathHelper.sin(var15) * this.moveForward * 1.0F;
-               this.moveForward = MathHelper.cos(var15) * this.moveForward * 1.0F;
+               double d4 = this.entityToAttack.posX - this.posX;
+               double d5 = this.entityToAttack.posZ - this.posZ;
+               float f4 = this.rotationYaw;
+               this.rotationYaw = (float)(Math.atan2(d5, d4) * 180.0D / 3.1415927410125732D) - 90.0F;
+               f3 = (f4 - this.rotationYaw + 90.0F) * 3.1415927F / 180.0F;
+               this.moveStrafing = -MathHelper.sin(f3) * this.moveForward * 1.0F;
+               this.moveForward = MathHelper.cos(f3) * this.moveForward * 1.0F;
             }
 
-            if(var12 > 0.0D) {
+            if(d3 > 0.0D) {
                this.isJumping = true;
             }
          }
@@ -111,7 +135,7 @@
             this.isJumping = true;
          }
 
-         if(this.rand.nextFloat() < 0.8F && (var3 || var4)) {
+         if(this.rand.nextFloat() < 0.8F && (var24 || flag1)) {
             this.isJumping = true;
          }
 
@@ -120,40 +144,41 @@
          super.updateEntityActionState();
          this.pathToEntity = null;
       }
+
    }
 
    protected void updateWanderPath() {
       this.worldObj.theProfiler.startSection("stroll");
-      boolean var1 = false;
-      int var2 = -1;
-      int var3 = -1;
-      int var4 = -1;
-      float var5 = -99999.0F;
-
-      for(int var6 = 0; var6 < 10; ++var6) {
-         int var7 = MathHelper.floor_double(this.posX + (double)this.rand.nextInt(13) - 6.0D);
-         int var8 = MathHelper.floor_double(this.posY + (double)this.rand.nextInt(7) - 3.0D);
-         int var9 = MathHelper.floor_double(this.posZ + (double)this.rand.nextInt(13) - 6.0D);
-         float var10 = this.getBlockPathWeight(var7, var8, var9);
-         if(var10 > var5) {
-            var5 = var10;
-            var2 = var7;
-            var3 = var8;
-            var4 = var9;
-            var1 = true;
+      boolean flag = false;
+      int i = -1;
+      int j = -1;
+      int k = -1;
+      float f = -99999.0F;
+
+      for(int l = 0; l < 10; ++l) {
+         int i1 = MathHelper.floor_double(this.posX + (double)this.rand.nextInt(13) - 6.0D);
+         int j1 = MathHelper.floor_double(this.posY + (double)this.rand.nextInt(7) - 3.0D);
+         int k1 = MathHelper.floor_double(this.posZ + (double)this.rand.nextInt(13) - 6.0D);
+         float f1 = this.getBlockPathWeight(i1, j1, k1);
+         if(f1 > f) {
+            f = f1;
+            i = i1;
+            j = j1;
+            k = k1;
+            flag = true;
          }
       }
 
-      if(var1) {
-         this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, var2, var3, var4, 10.0F, true, false, false, true);
+      if(flag) {
+         this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, i, j, k, 10.0F, true, false, false, true);
       }
 
       this.worldObj.theProfiler.endSection();
    }
 
-   protected void attackEntity(Entity var1, float var2) {}
+   protected void attackEntity(Entity entity, float f) {}
 
-   public float getBlockPathWeight(int var1, int var2, int var3) {
+   public float getBlockPathWeight(int i, int j, int k) {
       return 0.0F;
    }
 
@@ -162,34 +187,34 @@
    }
 
    public boolean getCanSpawnHere() {
-      int var1 = MathHelper.floor_double(this.posX);
-      int var2 = MathHelper.floor_double(this.boundingBox.minY);
-      int var3 = MathHelper.floor_double(this.posZ);
-      return super.getCanSpawnHere() && this.getBlockPathWeight(var1, var2, var3) >= 0.0F;
+      int i = MathHelper.floor_double(this.posX);
+      int j = MathHelper.floor_double(this.boundingBox.minY);
+      int k = MathHelper.floor_double(this.posZ);
+      return super.getCanSpawnHere() && this.getBlockPathWeight(i, j, k) >= 0.0F;
    }
 
    public boolean hasPath() {
       return this.pathToEntity != null;
    }
 
-   public void setPathToEntity(PathEntity var1) {
-      this.pathToEntity = var1;
+   public void setPathToEntity(PathEntity pathentity) {
+      this.pathToEntity = pathentity;
    }
 
    public Entity getEntityToAttack() {
       return this.entityToAttack;
    }
 
-   public void setTarget(Entity var1) {
-      this.entityToAttack = var1;
+   public void setTarget(Entity entity) {
+      this.entityToAttack = entity;
    }
 
    public float getSpeedModifier() {
-      float var1 = super.getSpeedModifier();
+      float f = super.getSpeedModifier();
       if(this.fleeingTick > 0 && !this.isAIEnabled()) {
-         var1 *= 2.0F;
+         f *= 2.0F;
       }
 
-      return var1;
+      return f;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityCreeper.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityCreeper.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityCreeper.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityCreeper.java
--- mcp-mcdev/net/minecraft/src/EntityCreeper.java	2012-11-29 21:15:03.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityCreeper.java	2012-11-29 20:44:21.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.Entity;
 import net.minecraft.src.EntityAIAttackOnCollide;
@@ -19,6 +20,9 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+import org.bukkit.event.entity.CreeperPowerEvent.PowerCause;
 
 public class EntityCreeper extends EntityMob {
 
@@ -26,10 +30,11 @@
    private int timeSinceIgnited;
    private int fuseTime = 30;
    private int explosionRadius = 3;
+   private int record = -1;
 
 
-   public EntityCreeper(World var1) {
-      super(var1);
+   public EntityCreeper(World world) {
+      super(world);
       this.texture = "/mob/creeper.png";
       this.tasks.addTask(1, new EntityAISwimming(this));
       this.tasks.addTask(2, new EntityAICreeperSwell(this));
@@ -50,9 +55,9 @@
       return this.getAttackTarget() == null?3:3 + (this.health - 1);
    }
 
-   protected void fall(float var1) {
-      super.fall(var1);
-      this.timeSinceIgnited = (int)((float)this.timeSinceIgnited + var1 * 1.5F);
+   protected void fall(float f) {
+      super.fall(f);
+      this.timeSinceIgnited = (int)((float)this.timeSinceIgnited + f * 1.5F);
       if(this.timeSinceIgnited > this.fuseTime - 5) {
          this.timeSinceIgnited = this.fuseTime - 5;
       }
@@ -69,25 +74,25 @@
       this.dataWatcher.addObject(17, Byte.valueOf((byte)0));
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
       if(this.dataWatcher.getWatchableObjectByte(17) == 1) {
-         var1.setBoolean("powered", true);
+         nbttagcompound.setBoolean("powered", true);
       }
 
-      var1.setShort("Fuse", (short)this.fuseTime);
-      var1.setByte("ExplosionRadius", (byte)this.explosionRadius);
+      nbttagcompound.setShort("Fuse", (short)this.fuseTime);
+      nbttagcompound.setByte("ExplosionRadius", (byte)this.explosionRadius);
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.dataWatcher.updateObject(17, Byte.valueOf((byte)(var1.getBoolean("powered")?1:0)));
-      if(var1.hasKey("Fuse")) {
-         this.fuseTime = var1.getShort("Fuse");
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.dataWatcher.updateObject(17, Byte.valueOf((byte)(nbttagcompound.getBoolean("powered")?1:0)));
+      if(nbttagcompound.hasKey("Fuse")) {
+         this.fuseTime = nbttagcompound.getShort("Fuse");
       }
 
-      if(var1.hasKey("ExplosionRadius")) {
-         this.explosionRadius = var1.getByte("ExplosionRadius");
+      if(nbttagcompound.hasKey("ExplosionRadius")) {
+         this.explosionRadius = nbttagcompound.getByte("ExplosionRadius");
       }
 
    }
@@ -95,12 +100,12 @@
    public void onUpdate() {
       if(this.isEntityAlive()) {
          this.lastActiveTime = this.timeSinceIgnited;
-         int var1 = this.getCreeperState();
-         if(var1 > 0 && this.timeSinceIgnited == 0) {
+         int i = this.getCreeperState();
+         if(i > 0 && this.timeSinceIgnited == 0) {
             this.func_85030_a("random.fuse", 1.0F, 0.5F);
          }
 
-         this.timeSinceIgnited += var1;
+         this.timeSinceIgnited += i;
          if(this.timeSinceIgnited < 0) {
             this.timeSinceIgnited = 0;
          }
@@ -108,14 +113,16 @@
          if(this.timeSinceIgnited >= this.fuseTime) {
             this.timeSinceIgnited = this.fuseTime;
             if(!this.worldObj.isRemote) {
-               boolean var2 = this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing");
-               if(this.getPowered()) {
-                  this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)(this.explosionRadius * 2), var2);
+               boolean flag = this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing");
+               float radius = this.getPowered()?6.0F:3.0F;
+               ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), radius, false);
+               this.worldObj.getServer().getPluginManager().callEvent(event);
+               if(!event.isCancelled()) {
+                  this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, event.getRadius(), event.getFire(), flag);
+                  this.setDead();
                } else {
-                  this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, (float)this.explosionRadius, var2);
+                  this.timeSinceIgnited = 0;
                }
-
-               this.setDead();
             }
          }
       }
@@ -131,16 +138,38 @@
       return "mob.creeper.death";
    }
 
-   public void onDeath(DamageSource var1) {
-      super.onDeath(var1);
-      if(var1.getEntity() instanceof EntitySkeleton) {
-         int var2 = Item.record13.shiftedIndex + this.rand.nextInt(Item.field_85180_cf.shiftedIndex - Item.record13.shiftedIndex + 1);
-         this.dropItem(var2, 1);
+   public void onDeath(DamageSource damagesource) {
+      if(damagesource.getEntity() instanceof EntitySkeleton) {
+         int i = Item.record13.shiftedIndex + this.rand.nextInt(Item.field_85180_cf.shiftedIndex - Item.record13.shiftedIndex + 1);
+         this.record = i;
+      }
+
+      super.onDeath(damagesource);
+   }
+
+   protected void dropDeathLoot(boolean flag, int i) {
+      int j = this.getDropItemId();
+      ArrayList loot = new ArrayList();
+      if(j > 0) {
+         int k = this.rand.nextInt(3);
+         if(i > 0) {
+            k += this.rand.nextInt(i + 1);
+         }
+
+         if(k > 0) {
+            loot.add(new org.bukkit.inventory.ItemStack(j, k));
+         }
+      }
+
+      if(this.record != -1) {
+         loot.add(new org.bukkit.inventory.ItemStack(this.record, 1));
+         this.record = -1;
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
-   public boolean attackEntityAsMob(Entity var1) {
+   public boolean attackEntityAsMob(Entity entity) {
       return true;
    }
 
@@ -156,12 +185,23 @@
       return this.dataWatcher.getWatchableObjectByte(16);
    }
 
-   public void setCreeperState(int var1) {
-      this.dataWatcher.updateObject(16, Byte.valueOf((byte)var1));
+   public void setCreeperState(int i) {
+      this.dataWatcher.updateObject(16, Byte.valueOf((byte)i));
    }
 
-   public void onStruckByLightning(EntityLightningBolt var1) {
-      super.onStruckByLightning(var1);
-      this.dataWatcher.updateObject(17, Byte.valueOf((byte)1));
+   public void onStruckByLightning(EntityLightningBolt entitylightning) {
+      super.onStruckByLightning(entitylightning);
+      if(!CraftEventFactory.callCreeperPowerEvent(this, entitylightning, PowerCause.LIGHTNING).isCancelled()) {
+         this.setPowered(true);
+      }
+   }
+
+   public void setPowered(boolean powered) {
+      if(!powered) {
+         this.dataWatcher.updateObject(17, Byte.valueOf((byte)0));
+      } else {
+         this.dataWatcher.updateObject(17, Byte.valueOf((byte)1));
+      }
+
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityDamageSourceIndirect.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityDamageSourceIndirect.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityDamageSourceIndirect.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityDamageSourceIndirect.java
--- mcp-mcdev/net/minecraft/src/EntityDamageSourceIndirect.java	2012-11-29 21:15:03.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityDamageSourceIndirect.java	2012-11-29 20:44:21.000000000 -0800
@@ -10,9 +10,9 @@
    private Entity indirectEntity;
 
 
-   public EntityDamageSourceIndirect(String var1, Entity var2, Entity var3) {
-      super(var1, var2);
-      this.indirectEntity = var3;
+   public EntityDamageSourceIndirect(String s, Entity entity, Entity entity1) {
+      super(s, entity);
+      this.indirectEntity = entity1;
    }
 
    public Entity getSourceOfDamage() {
@@ -23,7 +23,11 @@
       return this.indirectEntity;
    }
 
-   public String getDeathMessage(EntityPlayer var1) {
-      return StatCollector.translateToLocalFormatted("death." + this.damageType, new Object[]{var1.username, this.indirectEntity == null?this.damageSourceEntity.getEntityName():this.indirectEntity.getEntityName()});
+   public String getDeathMessage(EntityPlayer entityhuman) {
+      return StatCollector.translateToLocalFormatted("death." + this.damageType, new Object[]{entityhuman.username, this.indirectEntity == null?this.damageSourceEntity.getEntityName():this.indirectEntity.getEntityName()});
+   }
+
+   public Entity getProximateDamageSource() {
+      return super.getEntity();
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityDragon.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityDragon.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityDragon.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityDragon.java
--- mcp-mcdev/net/minecraft/src/EntityDragon.java	2012-11-29 21:15:03.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityDragon.java	2012-11-29 20:44:21.000000000 -0800
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.src.AxisAlignedBB;
@@ -11,11 +13,25 @@
 import net.minecraft.src.EntityEnderCrystal;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.EntityXPOrb;
 import net.minecraft.src.IEntityMultiPart;
 import net.minecraft.src.MathHelper;
+import net.minecraft.src.Packet53BlockChange;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.Bukkit;
+import org.bukkit.PortalType;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.EntityCreatePortalEvent;
+import org.bukkit.event.entity.EntityDamageByEntityEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
 
 public class EntityDragon extends EntityLiving implements IEntityMultiPart {
 
@@ -41,8 +57,8 @@
    public EntityEnderCrystal healingEnderCrystal = null;
 
 
-   public EntityDragon(World var1) {
-      super(var1);
+   public EntityDragon(World world) {
+      super(world);
       this.dragonPartArray = new EntityDragonPart[]{this.dragonPartHead = new EntityDragonPart(this, "head", 6.0F, 6.0F), this.dragonPartBody = new EntityDragonPart(this, "body", 8.0F, 8.0F), this.dragonPartTail1 = new EntityDragonPart(this, "tail", 4.0F, 4.0F), this.dragonPartTail2 = new EntityDragonPart(this, "tail", 4.0F, 4.0F), this.dragonPartTail3 = new EntityDragonPart(this, "tail", 4.0F, 4.0F), this.dragonPartWing1 = new EntityDragonPart(this, "wing", 4.0F, 4.0F), this.dragonPartWing2 = new EntityDragonPart(this, "wing", 4.0F, 4.0F)};
       this.setEntityHealth(this.getMaxHealth());
       this.texture = "/mob/enderdragon/ender.png";
@@ -62,60 +78,60 @@
       this.dataWatcher.addObject(16, new Integer(this.getMaxHealth()));
    }
 
-   public double[] getMovementOffsets(int var1, float var2) {
+   public double[] getMovementOffsets(int i, float f) {
       if(this.health <= 0) {
-         var2 = 0.0F;
+         f = 0.0F;
       }
 
-      var2 = 1.0F - var2;
-      int var3 = this.ringBufferIndex - var1 * 1 & 63;
-      int var4 = this.ringBufferIndex - var1 * 1 - 1 & 63;
-      double[] var5 = new double[3];
-      double var6 = this.ringBuffer[var3][0];
-      double var8 = MathHelper.wrapAngleTo180_double(this.ringBuffer[var4][0] - var6);
-      var5[0] = var6 + var8 * (double)var2;
-      var6 = this.ringBuffer[var3][1];
-      var8 = this.ringBuffer[var4][1] - var6;
-      var5[1] = var6 + var8 * (double)var2;
-      var5[2] = this.ringBuffer[var3][2] + (this.ringBuffer[var4][2] - this.ringBuffer[var3][2]) * (double)var2;
-      return var5;
+      f = 1.0F - f;
+      int j = this.ringBufferIndex - i * 1 & 63;
+      int k = this.ringBufferIndex - i * 1 - 1 & 63;
+      double[] adouble = new double[3];
+      double d0 = this.ringBuffer[j][0];
+      double d1 = MathHelper.wrapAngleTo180_double(this.ringBuffer[k][0] - d0);
+      adouble[0] = d0 + d1 * (double)f;
+      d0 = this.ringBuffer[j][1];
+      d1 = this.ringBuffer[k][1] - d0;
+      adouble[1] = d0 + d1 * (double)f;
+      adouble[2] = this.ringBuffer[j][2] + (this.ringBuffer[k][2] - this.ringBuffer[j][2]) * (double)f;
+      return adouble;
    }
 
    public void onLivingUpdate() {
-      float var1;
-      float var2;
+      float f;
+      float f1;
       if(!this.worldObj.isRemote) {
          this.dataWatcher.updateObject(16, Integer.valueOf(this.health));
       } else {
-         var1 = MathHelper.cos(this.animTime * 3.1415927F * 2.0F);
-         var2 = MathHelper.cos(this.prevAnimTime * 3.1415927F * 2.0F);
-         if(var2 <= -0.3F && var1 >= -0.3F) {
+         f = MathHelper.cos(this.animTime * 3.1415927F * 2.0F);
+         f1 = MathHelper.cos(this.prevAnimTime * 3.1415927F * 2.0F);
+         if(f1 <= -0.3F && f >= -0.3F) {
             this.worldObj.playSound(this.posX, this.posY, this.posZ, "mob.enderdragon.wings", 5.0F, 0.8F + this.rand.nextFloat() * 0.3F);
          }
       }
 
       this.prevAnimTime = this.animTime;
-      float var3;
+      float f2;
       if(this.health <= 0) {
-         var1 = (this.rand.nextFloat() - 0.5F) * 8.0F;
-         var2 = (this.rand.nextFloat() - 0.5F) * 4.0F;
-         var3 = (this.rand.nextFloat() - 0.5F) * 8.0F;
-         this.worldObj.spawnParticle("largeexplode", this.posX + (double)var1, this.posY + 2.0D + (double)var2, this.posZ + (double)var3, 0.0D, 0.0D, 0.0D);
+         f = (this.rand.nextFloat() - 0.5F) * 8.0F;
+         f1 = (this.rand.nextFloat() - 0.5F) * 4.0F;
+         f2 = (this.rand.nextFloat() - 0.5F) * 8.0F;
+         this.worldObj.spawnParticle("largeexplode", this.posX + (double)f, this.posY + 2.0D + (double)f1, this.posZ + (double)f2, 0.0D, 0.0D, 0.0D);
       } else {
          this.updateDragonEnderCrystal();
-         var1 = 0.2F / (MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 10.0F + 1.0F);
-         var1 *= (float)Math.pow(2.0D, this.motionY);
+         f = 0.2F / (MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 10.0F + 1.0F);
+         f *= (float)Math.pow(2.0D, this.motionY);
          if(this.slowed) {
-            this.animTime += var1 * 0.5F;
+            this.animTime += f * 0.5F;
          } else {
-            this.animTime += var1;
+            this.animTime += f;
          }
 
          this.rotationYaw = MathHelper.wrapAngleTo180_float(this.rotationYaw);
          if(this.ringBufferIndex < 0) {
-            for(int var45 = 0; var45 < this.ringBuffer.length; ++var45) {
-               this.ringBuffer[var45][0] = (double)this.rotationYaw;
-               this.ringBuffer[var45][1] = this.posY;
+            for(int d05 = 0; d05 < this.ringBuffer.length; ++d05) {
+               this.ringBuffer[d05][0] = (double)this.rotationYaw;
+               this.ringBuffer[d05][1] = this.posY;
             }
          }
 
@@ -125,101 +141,107 @@
 
          this.ringBuffer[this.ringBufferIndex][0] = (double)this.rotationYaw;
          this.ringBuffer[this.ringBufferIndex][1] = this.posY;
-         double var4;
-         double var6;
-         double var8;
-         double var10;
-         float var20;
+         double d0;
+         double d1;
+         double d2;
+         double d3;
+         float f3;
+         float f13;
+         float f15;
+         float f14;
+         float f17;
          if(this.worldObj.isRemote) {
             if(this.newPosRotationIncrements > 0) {
-               var4 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
-               var6 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
-               var8 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
-               var10 = MathHelper.wrapAngleTo180_double(this.newRotationYaw - (double)this.rotationYaw);
-               this.rotationYaw = (float)((double)this.rotationYaw + var10 / (double)this.newPosRotationIncrements);
+               d0 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
+               d1 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
+               d2 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
+               d3 = MathHelper.wrapAngleTo180_double(this.newRotationYaw - (double)this.rotationYaw);
+               this.rotationYaw = (float)((double)this.rotationYaw + d3 / (double)this.newPosRotationIncrements);
                this.rotationPitch = (float)((double)this.rotationPitch + (this.newRotationPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
                --this.newPosRotationIncrements;
-               this.setPosition(var4, var6, var8);
+               this.setPosition(d0, d1, d2);
                this.setRotation(this.rotationYaw, this.rotationPitch);
             }
          } else {
-            var4 = this.targetX - this.posX;
-            var6 = this.targetY - this.posY;
-            var8 = this.targetZ - this.posZ;
-            var10 = var4 * var4 + var6 * var6 + var8 * var8;
+            d0 = this.targetX - this.posX;
+            d1 = this.targetY - this.posY;
+            d2 = this.targetZ - this.posZ;
+            d3 = d0 * d0 + d1 * d1 + d2 * d2;
+            double d8;
+            double d9;
             if(this.target != null) {
                this.targetX = this.target.posX;
                this.targetZ = this.target.posZ;
-               double var12 = this.targetX - this.posX;
-               double var14 = this.targetZ - this.posZ;
-               double var16 = Math.sqrt(var12 * var12 + var14 * var14);
-               double var18 = 0.4000000059604645D + var16 / 80.0D - 1.0D;
-               if(var18 > 10.0D) {
-                  var18 = 10.0D;
+               d8 = this.targetX - this.posX;
+               d9 = this.targetZ - this.posZ;
+               double d6 = Math.sqrt(d8 * d8 + d9 * d9);
+               double d7 = 0.4000000059604645D + d6 / 80.0D - 1.0D;
+               if(d7 > 10.0D) {
+                  d7 = 10.0D;
                }
 
-               this.targetY = this.target.boundingBox.minY + var18;
+               this.targetY = this.target.boundingBox.minY + d7;
             } else {
                this.targetX += this.rand.nextGaussian() * 2.0D;
                this.targetZ += this.rand.nextGaussian() * 2.0D;
             }
 
-            if(this.forceNewTarget || var10 < 100.0D || var10 > 22500.0D || this.isCollidedHorizontally || this.isCollidedVertically) {
+            if(this.forceNewTarget || d3 < 100.0D || d3 > 22500.0D || this.isCollidedHorizontally || this.isCollidedVertically) {
                this.setNewTarget();
             }
 
-            var6 /= (double)MathHelper.sqrt_double(var4 * var4 + var8 * var8);
-            var20 = 0.6F;
-            if(var6 < (double)(-var20)) {
-               var6 = (double)(-var20);
+            d1 /= (double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
+            f3 = 0.6F;
+            if(d1 < (double)(-f3)) {
+               d1 = (double)(-f3);
             }
 
-            if(var6 > (double)var20) {
-               var6 = (double)var20;
+            if(d1 > (double)f3) {
+               d1 = (double)f3;
             }
 
-            this.motionY += var6 * 0.10000000149011612D;
+            this.motionY += d1 * 0.10000000149011612D;
             this.rotationYaw = MathHelper.wrapAngleTo180_float(this.rotationYaw);
-            double var21 = 180.0D - Math.atan2(var4, var8) * 180.0D / 3.1415927410125732D;
-            double var23 = MathHelper.wrapAngleTo180_double(var21 - (double)this.rotationYaw);
-            if(var23 > 50.0D) {
-               var23 = 50.0D;
+            d8 = 180.0D - Math.atan2(d0, d2) * 180.0D / 3.1415927410125732D;
+            d9 = MathHelper.wrapAngleTo180_double(d8 - (double)this.rotationYaw);
+            if(d9 > 50.0D) {
+               d9 = 50.0D;
             }
 
-            if(var23 < -50.0D) {
-               var23 = -50.0D;
+            if(d9 < -50.0D) {
+               d9 = -50.0D;
             }
 
-            Vec3 var25 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.targetX - this.posX, this.targetY - this.posY, this.targetZ - this.posZ).normalize();
-            Vec3 var26 = this.worldObj.getWorldVec3Pool().getVecFromPool((double)MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F), this.motionY, (double)(-MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F))).normalize();
-            float var27 = (float)(var26.dotProduct(var25) + 0.5D) / 1.5F;
-            if(var27 < 0.0F) {
-               var27 = 0.0F;
+            Vec3 adouble = this.worldObj.getWorldVec3Pool().getVecFromPool(this.targetX - this.posX, this.targetY - this.posY, this.targetZ - this.posZ).normalize();
+            Vec3 adouble1 = this.worldObj.getWorldVec3Pool().getVecFromPool((double)MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F), this.motionY, (double)(-MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F))).normalize();
+            f13 = (float)(adouble1.dotProduct(adouble) + 0.5D) / 1.5F;
+            if(f13 < 0.0F) {
+               f13 = 0.0F;
             }
 
             this.randomYawVelocity *= 0.8F;
-            float var28 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 1.0F + 1.0F;
-            double var29 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ) * 1.0D + 1.0D;
-            if(var29 > 40.0D) {
-               var29 = 40.0D;
+            float j = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ) * 1.0F + 1.0F;
+            double d10 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ) * 1.0D + 1.0D;
+            if(d10 > 40.0D) {
+               d10 = 40.0D;
             }
 
-            this.randomYawVelocity = (float)((double)this.randomYawVelocity + var23 * (0.699999988079071D / var29 / (double)var28));
+            this.randomYawVelocity = (float)((double)this.randomYawVelocity + d9 * (0.699999988079071D / d10 / (double)j));
             this.rotationYaw += this.randomYawVelocity * 0.1F;
-            float var31 = (float)(2.0D / (var29 + 1.0D));
-            float var32 = 0.06F;
-            this.moveFlying(0.0F, -1.0F, var32 * (var27 * var31 + (1.0F - var31)));
+            f14 = (float)(2.0D / (d10 + 1.0D));
+            f15 = 0.06F;
+            this.moveFlying(0.0F, -1.0F, f15 * (f13 * f14 + (1.0F - f14)));
             if(this.slowed) {
                this.moveEntity(this.motionX * 0.800000011920929D, this.motionY * 0.800000011920929D, this.motionZ * 0.800000011920929D);
             } else {
                this.moveEntity(this.motionX, this.motionY, this.motionZ);
             }
 
-            Vec3 var33 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.motionX, this.motionY, this.motionZ).normalize();
-            float var34 = (float)(var33.dotProduct(var26) + 1.0D) / 2.0F;
-            var34 = 0.8F + 0.15F * var34;
-            this.motionX *= (double)var34;
-            this.motionZ *= (double)var34;
+            Vec3 f16 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.motionX, this.motionY, this.motionZ).normalize();
+            f17 = (float)(f16.dotProduct(adouble1) + 1.0D) / 2.0F;
+            f17 = 0.8F + 0.15F * f17;
+            this.motionX *= (double)f17;
+            this.motionZ *= (double)f17;
             this.motionY *= 0.9100000262260437D;
          }
 
@@ -234,18 +256,18 @@
          this.dragonPartWing1.width = 4.0F;
          this.dragonPartWing2.height = 3.0F;
          this.dragonPartWing2.width = 4.0F;
-         var2 = (float)(this.getMovementOffsets(5, 1.0F)[1] - this.getMovementOffsets(10, 1.0F)[1]) * 10.0F / 180.0F * 3.1415927F;
-         var3 = MathHelper.cos(var2);
-         float var35 = -MathHelper.sin(var2);
-         float var36 = this.rotationYaw * 3.1415927F / 180.0F;
-         float var37 = MathHelper.sin(var36);
-         float var38 = MathHelper.cos(var36);
+         f1 = (float)(this.getMovementOffsets(5, 1.0F)[1] - this.getMovementOffsets(10, 1.0F)[1]) * 10.0F / 180.0F * 3.1415927F;
+         f2 = MathHelper.cos(f1);
+         float f9 = -MathHelper.sin(f1);
+         float f10 = this.rotationYaw * 3.1415927F / 180.0F;
+         float f11 = MathHelper.sin(f10);
+         float f12 = MathHelper.cos(f10);
          this.dragonPartBody.onUpdate();
-         this.dragonPartBody.setLocationAndAngles(this.posX + (double)(var37 * 0.5F), this.posY, this.posZ - (double)(var38 * 0.5F), 0.0F, 0.0F);
+         this.dragonPartBody.setLocationAndAngles(this.posX + (double)(f11 * 0.5F), this.posY, this.posZ - (double)(f12 * 0.5F), 0.0F, 0.0F);
          this.dragonPartWing1.onUpdate();
-         this.dragonPartWing1.setLocationAndAngles(this.posX + (double)(var38 * 4.5F), this.posY + 2.0D, this.posZ + (double)(var37 * 4.5F), 0.0F, 0.0F);
+         this.dragonPartWing1.setLocationAndAngles(this.posX + (double)(f12 * 4.5F), this.posY + 2.0D, this.posZ + (double)(f11 * 4.5F), 0.0F, 0.0F);
          this.dragonPartWing2.onUpdate();
-         this.dragonPartWing2.setLocationAndAngles(this.posX - (double)(var38 * 4.5F), this.posY + 2.0D, this.posZ - (double)(var37 * 4.5F), 0.0F, 0.0F);
+         this.dragonPartWing2.setLocationAndAngles(this.posX - (double)(f12 * 4.5F), this.posY + 2.0D, this.posZ - (double)(f11 * 4.5F), 0.0F, 0.0F);
          if(!this.worldObj.isRemote && this.hurtTime == 0) {
             this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing1.boundingBox.expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
             this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing2.boundingBox.expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
@@ -254,40 +276,40 @@
 
          double[] var39 = this.getMovementOffsets(5, 1.0F);
          double[] var40 = this.getMovementOffsets(0, 1.0F);
-         var20 = MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F - this.randomYawVelocity * 0.01F);
-         float var41 = MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F - this.randomYawVelocity * 0.01F);
+         f3 = MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F - this.randomYawVelocity * 0.01F);
+         f13 = MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F - this.randomYawVelocity * 0.01F);
          this.dragonPartHead.onUpdate();
-         this.dragonPartHead.setLocationAndAngles(this.posX + (double)(var20 * 5.5F * var3), this.posY + (var40[1] - var39[1]) * 1.0D + (double)(var35 * 5.5F), this.posZ - (double)(var41 * 5.5F * var3), 0.0F, 0.0F);
+         this.dragonPartHead.setLocationAndAngles(this.posX + (double)(f3 * 5.5F * f2), this.posY + (var40[1] - var39[1]) * 1.0D + (double)(f9 * 5.5F), this.posZ - (double)(f13 * 5.5F * f2), 0.0F, 0.0F);
 
-         for(int var50 = 0; var50 < 3; ++var50) {
-            EntityDragonPart var46 = null;
-            if(var50 == 0) {
-               var46 = this.dragonPartTail1;
+         for(int var41 = 0; var41 < 3; ++var41) {
+            EntityDragonPart entitycomplexpart = null;
+            if(var41 == 0) {
+               entitycomplexpart = this.dragonPartTail1;
             }
 
-            if(var50 == 1) {
-               var46 = this.dragonPartTail2;
+            if(var41 == 1) {
+               entitycomplexpart = this.dragonPartTail2;
             }
 
-            if(var50 == 2) {
-               var46 = this.dragonPartTail3;
+            if(var41 == 2) {
+               entitycomplexpart = this.dragonPartTail3;
             }
 
-            double[] var49 = this.getMovementOffsets(12 + var50 * 2, 1.0F);
-            float var42 = this.rotationYaw * 3.1415927F / 180.0F + this.simplifyAngle(var49[0] - var39[0]) * 3.1415927F / 180.0F * 1.0F;
-            float var43 = MathHelper.sin(var42);
-            float var44 = MathHelper.cos(var42);
-            float var47 = 1.5F;
-            float var48 = (float)(var50 + 1) * 2.0F;
-            var46.onUpdate();
-            var46.setLocationAndAngles(this.posX - (double)((var37 * var47 + var43 * var48) * var3), this.posY + (var49[1] - var39[1]) * 1.0D - (double)((var48 + var47) * var35) + 1.5D, this.posZ + (double)((var38 * var47 + var44 * var48) * var3), 0.0F, 0.0F);
+            double[] adouble2 = this.getMovementOffsets(12 + var41 * 2, 1.0F);
+            f14 = this.rotationYaw * 3.1415927F / 180.0F + this.simplifyAngle(adouble2[0] - var39[0]) * 3.1415927F / 180.0F * 1.0F;
+            f15 = MathHelper.sin(f14);
+            float var42 = MathHelper.cos(f14);
+            f17 = 1.5F;
+            float f18 = (float)(var41 + 1) * 2.0F;
+            entitycomplexpart.onUpdate();
+            entitycomplexpart.setLocationAndAngles(this.posX - (double)((f11 * f17 + f15 * f18) * f2), this.posY + (adouble2[1] - var39[1]) * 1.0D - (double)((f18 + f17) * f9) + 1.5D, this.posZ + (double)((f12 * f17 + var42 * f18) * f2), 0.0F, 0.0F);
          }
 
          if(!this.worldObj.isRemote) {
             this.slowed = this.destroyBlocksInAABB(this.dragonPartHead.boundingBox) | this.destroyBlocksInAABB(this.dragonPartBody.boundingBox);
          }
-
       }
+
    }
 
    private void updateDragonEnderCrystal() {
@@ -299,53 +321,66 @@
 
             this.healingEnderCrystal = null;
          } else if(this.ticksExisted % 10 == 0 && this.health < this.getMaxHealth()) {
-            ++this.health;
+            EntityRegainHealthEvent f = new EntityRegainHealthEvent(this.getBukkitEntity(), 1, RegainReason.ENDER_CRYSTAL);
+            this.worldObj.getServer().getPluginManager().callEvent(f);
+            if(!f.isCancelled()) {
+               this.health += f.getAmount();
+            }
          }
       }
 
       if(this.rand.nextInt(10) == 0) {
-         float var1 = 32.0F;
-         List var2 = this.worldObj.getEntitiesWithinAABB(EntityEnderCrystal.class, this.boundingBox.expand((double)var1, (double)var1, (double)var1));
-         EntityEnderCrystal var3 = null;
-         double var4 = Double.MAX_VALUE;
-         Iterator var6 = var2.iterator();
+         float f1 = 32.0F;
+         List list = this.worldObj.getEntitiesWithinAABB(EntityEnderCrystal.class, this.boundingBox.expand((double)f1, (double)f1, (double)f1));
+         EntityEnderCrystal entityendercrystal = null;
+         double d0 = Double.MAX_VALUE;
+         Iterator iterator = list.iterator();
 
-         while(var6.hasNext()) {
-            EntityEnderCrystal var7 = (EntityEnderCrystal)var6.next();
-            double var8 = var7.getDistanceSqToEntity(this);
-            if(var8 < var4) {
-               var4 = var8;
-               var3 = var7;
+         while(iterator.hasNext()) {
+            EntityEnderCrystal entityendercrystal1 = (EntityEnderCrystal)iterator.next();
+            double d1 = entityendercrystal1.getDistanceSqToEntity(this);
+            if(d1 < d0) {
+               d0 = d1;
+               entityendercrystal = entityendercrystal1;
             }
          }
 
-         this.healingEnderCrystal = var3;
+         this.healingEnderCrystal = entityendercrystal;
       }
 
    }
 
-   private void collideWithEntities(List var1) {
-      double var2 = (this.dragonPartBody.boundingBox.minX + this.dragonPartBody.boundingBox.maxX) / 2.0D;
-      double var4 = (this.dragonPartBody.boundingBox.minZ + this.dragonPartBody.boundingBox.maxZ) / 2.0D;
-      Iterator var6 = var1.iterator();
+   private void collideWithEntities(List list) {
+      double d0 = (this.dragonPartBody.boundingBox.minX + this.dragonPartBody.boundingBox.maxX) / 2.0D;
+      double d1 = (this.dragonPartBody.boundingBox.minZ + this.dragonPartBody.boundingBox.maxZ) / 2.0D;
+      Iterator iterator = list.iterator();
 
-      while(var6.hasNext()) {
-         Entity var7 = (Entity)var6.next();
-         if(var7 instanceof EntityLiving) {
-            double var8 = var7.posX - var2;
-            double var10 = var7.posZ - var4;
-            double var12 = var8 * var8 + var10 * var10;
-            var7.addVelocity(var8 / var12 * 4.0D, 0.20000000298023224D, var10 / var12 * 4.0D);
+      while(iterator.hasNext()) {
+         Entity entity = (Entity)iterator.next();
+         if(entity instanceof EntityLiving) {
+            double d2 = entity.posX - d0;
+            double d3 = entity.posZ - d1;
+            double d4 = d2 * d2 + d3 * d3;
+            entity.addVelocity(d2 / d4 * 4.0D, 0.20000000298023224D, d3 / d4 * 4.0D);
          }
       }
 
    }
 
-   private void attackEntitiesInList(List var1) {
-      for(int var2 = 0; var2 < var1.size(); ++var2) {
-         Entity var3 = (Entity)var1.get(var2);
-         if(var3 instanceof EntityLiving) {
-            var3.attackEntityFrom(DamageSource.causeMobDamage(this), 10);
+   private void attackEntitiesInList(List list) {
+      for(int i = 0; i < list.size(); ++i) {
+         Entity entity = (Entity)list.get(i);
+         if(entity instanceof EntityLiving) {
+            if(!(entity instanceof EntityPlayer)) {
+               EntityDamageByEntityEvent damageEvent = new EntityDamageByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), DamageCause.ENTITY_ATTACK, 10);
+               Bukkit.getPluginManager().callEvent(damageEvent);
+               if(!damageEvent.isCancelled()) {
+                  entity.getBukkitEntity().setLastDamageCause(damageEvent);
+                  entity.attackEntityFrom(DamageSource.causeMobDamage(this), damageEvent.getDamage());
+               }
+            } else {
+               entity.attackEntityFrom(DamageSource.causeMobDamage(this), 10);
+            }
          }
       }
 
@@ -356,7 +391,7 @@
       if(this.rand.nextInt(2) == 0 && !this.worldObj.playerEntities.isEmpty()) {
          this.target = (Entity)this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
       } else {
-         boolean var1 = false;
+         boolean flag = false;
 
          do {
             this.targetX = 0.0D;
@@ -364,98 +399,114 @@
             this.targetZ = 0.0D;
             this.targetX += (double)(this.rand.nextFloat() * 120.0F - 60.0F);
             this.targetZ += (double)(this.rand.nextFloat() * 120.0F - 60.0F);
-            double var2 = this.posX - this.targetX;
-            double var4 = this.posY - this.targetY;
-            double var6 = this.posZ - this.targetZ;
-            var1 = var2 * var2 + var4 * var4 + var6 * var6 > 100.0D;
-         } while(!var1);
+            double d0 = this.posX - this.targetX;
+            double d1 = this.posY - this.targetY;
+            double d2 = this.posZ - this.targetZ;
+            flag = d0 * d0 + d1 * d1 + d2 * d2 > 100.0D;
+         } while(!flag);
 
          this.target = null;
       }
 
    }
 
-   private float simplifyAngle(double var1) {
-      return (float)MathHelper.wrapAngleTo180_double(var1);
+   private float simplifyAngle(double d0) {
+      return (float)MathHelper.wrapAngleTo180_double(d0);
    }
 
-   private boolean destroyBlocksInAABB(AxisAlignedBB var1) {
-      int var2 = MathHelper.floor_double(var1.minX);
-      int var3 = MathHelper.floor_double(var1.minY);
-      int var4 = MathHelper.floor_double(var1.minZ);
-      int var5 = MathHelper.floor_double(var1.maxX);
-      int var6 = MathHelper.floor_double(var1.maxY);
-      int var7 = MathHelper.floor_double(var1.maxZ);
-      boolean var8 = false;
-      boolean var9 = false;
-
-      for(int var10 = var2; var10 <= var5; ++var10) {
-         for(int var11 = var3; var11 <= var6; ++var11) {
-            for(int var12 = var4; var12 <= var7; ++var12) {
-               int var13 = this.worldObj.getBlockId(var10, var11, var12);
-               if(var13 != 0) {
-                  if(var13 != Block.obsidian.blockID && var13 != Block.whiteStone.blockID && var13 != Block.bedrock.blockID) {
-                     var9 = true;
-                     this.worldObj.setBlockWithNotify(var10, var11, var12, 0);
+   private boolean destroyBlocksInAABB(AxisAlignedBB axisalignedbb) {
+      int i = MathHelper.floor_double(axisalignedbb.minX);
+      int j = MathHelper.floor_double(axisalignedbb.minY);
+      int k = MathHelper.floor_double(axisalignedbb.minZ);
+      int l = MathHelper.floor_double(axisalignedbb.maxX);
+      int i1 = MathHelper.floor_double(axisalignedbb.maxY);
+      int j1 = MathHelper.floor_double(axisalignedbb.maxZ);
+      boolean flag = false;
+      boolean flag1 = false;
+      ArrayList destroyedBlocks = new ArrayList();
+      CraftWorld craftWorld = this.worldObj.getWorld();
+
+      for(int bukkitEntity = i; bukkitEntity <= l; ++bukkitEntity) {
+         for(int event = j; event <= i1; ++event) {
+            for(int i$ = k; i$ <= j1; ++i$) {
+               int block = this.worldObj.getBlockId(bukkitEntity, event, i$);
+               if(block != 0) {
+                  if(block != Block.obsidian.blockID && block != Block.whiteStone.blockID && block != Block.bedrock.blockID) {
+                     flag1 = true;
+                     destroyedBlocks.add(craftWorld.getBlockAt(bukkitEntity, event, i$));
                   } else {
-                     var8 = true;
+                     flag = true;
                   }
                }
             }
          }
       }
 
-      if(var9) {
-         double var14 = var1.minX + (var1.maxX - var1.minX) * (double)this.rand.nextFloat();
-         double var16 = var1.minY + (var1.maxY - var1.minY) * (double)this.rand.nextFloat();
-         double var18 = var1.minZ + (var1.maxZ - var1.minZ) * (double)this.rand.nextFloat();
-         this.worldObj.spawnParticle("largeexplode", var14, var16, var18, 0.0D, 0.0D, 0.0D);
+      if(flag1) {
+         org.bukkit.entity.Entity var22 = this.getBukkitEntity();
+         EntityExplodeEvent var23 = new EntityExplodeEvent(var22, var22.getLocation(), destroyedBlocks, 0.0F);
+         Bukkit.getPluginManager().callEvent(var23);
+         if(var23.isCancelled()) {
+            return flag;
+         }
+
+         Iterator var25 = var23.blockList().iterator();
+
+         while(var25.hasNext()) {
+            org.bukkit.block.Block var24 = (org.bukkit.block.Block)var25.next();
+            craftWorld.explodeBlock(var24, var23.getYield());
+         }
+
+         double d0 = axisalignedbb.minX + (axisalignedbb.maxX - axisalignedbb.minX) * (double)this.rand.nextFloat();
+         double d1 = axisalignedbb.minY + (axisalignedbb.maxY - axisalignedbb.minY) * (double)this.rand.nextFloat();
+         double d2 = axisalignedbb.minZ + (axisalignedbb.maxZ - axisalignedbb.minZ) * (double)this.rand.nextFloat();
+         this.worldObj.spawnParticle("largeexplode", d0, d1, d2, 0.0D, 0.0D, 0.0D);
       }
 
-      return var8;
+      return flag;
    }
 
-   public boolean attackEntityFromPart(EntityDragonPart var1, DamageSource var2, int var3) {
-      if(var1 != this.dragonPartHead) {
-         var3 = var3 / 4 + 1;
+   public boolean attackEntityFromPart(EntityDragonPart entitycomplexpart, DamageSource damagesource, int i) {
+      if(entitycomplexpart != this.dragonPartHead) {
+         i = i / 4 + 1;
       }
 
-      float var4 = this.rotationYaw * 3.1415927F / 180.0F;
-      float var5 = MathHelper.sin(var4);
-      float var6 = MathHelper.cos(var4);
-      this.targetX = this.posX + (double)(var5 * 5.0F) + (double)((this.rand.nextFloat() - 0.5F) * 2.0F);
+      float f = this.rotationYaw * 3.1415927F / 180.0F;
+      float f1 = MathHelper.sin(f);
+      float f2 = MathHelper.cos(f);
+      this.targetX = this.posX + (double)(f1 * 5.0F) + (double)((this.rand.nextFloat() - 0.5F) * 2.0F);
       this.targetY = this.posY + (double)(this.rand.nextFloat() * 3.0F) + 1.0D;
-      this.targetZ = this.posZ - (double)(var6 * 5.0F) + (double)((this.rand.nextFloat() - 0.5F) * 2.0F);
+      this.targetZ = this.posZ - (double)(f2 * 5.0F) + (double)((this.rand.nextFloat() - 0.5F) * 2.0F);
       this.target = null;
-      if(var2.getEntity() instanceof EntityPlayer || var2 == DamageSource.explosion) {
-         this.func_82195_e(var2, var3);
+      if(damagesource.getEntity() instanceof EntityPlayer || damagesource == DamageSource.explosion) {
+         this.func_82195_e(damagesource, i);
       }
 
       return true;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       return false;
    }
 
-   protected boolean func_82195_e(DamageSource var1, int var2) {
-      return super.attackEntityFrom(var1, var2);
+   public boolean func_82195_e(DamageSource damagesource, int i) {
+      return super.attackEntityFrom(damagesource, i);
    }
 
    protected void onDeathUpdate() {
       ++this.deathTicks;
       if(this.deathTicks >= 180 && this.deathTicks <= 200) {
-         float var1 = (this.rand.nextFloat() - 0.5F) * 8.0F;
-         float var2 = (this.rand.nextFloat() - 0.5F) * 4.0F;
-         float var3 = (this.rand.nextFloat() - 0.5F) * 8.0F;
-         this.worldObj.spawnParticle("hugeexplosion", this.posX + (double)var1, this.posY + 2.0D + (double)var2, this.posZ + (double)var3, 0.0D, 0.0D, 0.0D);
+         float i = (this.rand.nextFloat() - 0.5F) * 8.0F;
+         float j = (this.rand.nextFloat() - 0.5F) * 4.0F;
+         float f2 = (this.rand.nextFloat() - 0.5F) * 8.0F;
+         this.worldObj.spawnParticle("hugeexplosion", this.posX + (double)i, this.posY + 2.0D + (double)j, this.posZ + (double)f2, 0.0D, 0.0D, 0.0D);
       }
 
       int var4;
       int var5;
       if(!this.worldObj.isRemote) {
          if(this.deathTicks > 150 && this.deathTicks % 5 == 0) {
-            var4 = 1000;
+            var4 = this.expToDrop / 12;
 
             while(var4 > 0) {
                var5 = EntityXPOrb.getXPSplit(var4);
@@ -472,7 +523,7 @@
       this.moveEntity(0.0D, 0.10000000149011612D, 0.0D);
       this.renderYawOffset = this.rotationYaw += 20.0F;
       if(this.deathTicks == 200 && !this.worldObj.isRemote) {
-         var4 = 2000;
+         var4 = this.expToDrop - 10 * (this.expToDrop / 12);
 
          while(var4 > 0) {
             var5 = EntityXPOrb.getXPSplit(var4);
@@ -486,43 +537,72 @@
 
    }
 
-   private void createEnderPortal(int var1, int var2) {
-      byte var3 = 64;
+   private void createEnderPortal(int i, int j) {
+      byte b0 = 64;
       BlockEndPortal.bossDefeated = true;
-      byte var4 = 4;
+      byte b1 = 4;
+      BlockStateListPopulator world = new BlockStateListPopulator(this.worldObj.getWorld());
 
-      for(int var5 = var3 - 1; var5 <= var3 + 32; ++var5) {
-         for(int var6 = var1 - var4; var6 <= var1 + var4; ++var6) {
-            for(int var7 = var2 - var4; var7 <= var2 + var4; ++var7) {
-               double var8 = (double)(var6 - var1);
-               double var10 = (double)(var7 - var2);
-               double var12 = var8 * var8 + var10 * var10;
-               if(var12 <= ((double)var4 - 0.5D) * ((double)var4 - 0.5D)) {
-                  if(var5 < var3) {
-                     if(var12 <= ((double)(var4 - 1) - 0.5D) * ((double)(var4 - 1) - 0.5D)) {
-                        this.worldObj.setBlockWithNotify(var6, var5, var7, Block.bedrock.blockID);
+      for(int event = b0 - 1; event <= b0 + 32; ++event) {
+         for(int i$ = i - b1; i$ <= i + b1; ++i$) {
+            for(int state = j - b1; state <= j + b1; ++state) {
+               double d0 = (double)(i$ - i);
+               double d1 = (double)(state - j);
+               double d2 = d0 * d0 + d1 * d1;
+               if(d2 <= ((double)b1 - 0.5D) * ((double)b1 - 0.5D)) {
+                  if(event < b0) {
+                     if(d2 <= ((double)(b1 - 1) - 0.5D) * ((double)(b1 - 1) - 0.5D)) {
+                        world.setTypeId(i$, event, state, Block.bedrock.blockID);
                      }
-                  } else if(var5 > var3) {
-                     this.worldObj.setBlockWithNotify(var6, var5, var7, 0);
-                  } else if(var12 > ((double)(var4 - 1) - 0.5D) * ((double)(var4 - 1) - 0.5D)) {
-                     this.worldObj.setBlockWithNotify(var6, var5, var7, Block.bedrock.blockID);
+                  } else if(event > b0) {
+                     world.setTypeId(i$, event, state, 0);
+                  } else if(d2 > ((double)(b1 - 1) - 0.5D) * ((double)(b1 - 1) - 0.5D)) {
+                     world.setTypeId(i$, event, state, Block.bedrock.blockID);
                   } else {
-                     this.worldObj.setBlockWithNotify(var6, var5, var7, Block.endPortal.blockID);
+                     world.setTypeId(i$, event, state, Block.endPortal.blockID);
                   }
                }
             }
          }
       }
 
-      this.worldObj.setBlockWithNotify(var1, var3 + 0, var2, Block.bedrock.blockID);
-      this.worldObj.setBlockWithNotify(var1, var3 + 1, var2, Block.bedrock.blockID);
-      this.worldObj.setBlockWithNotify(var1, var3 + 2, var2, Block.bedrock.blockID);
-      this.worldObj.setBlockWithNotify(var1 - 1, var3 + 2, var2, Block.torchWood.blockID);
-      this.worldObj.setBlockWithNotify(var1 + 1, var3 + 2, var2, Block.torchWood.blockID);
-      this.worldObj.setBlockWithNotify(var1, var3 + 2, var2 - 1, Block.torchWood.blockID);
-      this.worldObj.setBlockWithNotify(var1, var3 + 2, var2 + 1, Block.torchWood.blockID);
-      this.worldObj.setBlockWithNotify(var1, var3 + 3, var2, Block.bedrock.blockID);
-      this.worldObj.setBlockWithNotify(var1, var3 + 4, var2, Block.dragonEgg.blockID);
+      world.setTypeId(i, b0 + 0, j, Block.bedrock.blockID);
+      world.setTypeId(i, b0 + 1, j, Block.bedrock.blockID);
+      world.setTypeId(i, b0 + 2, j, Block.bedrock.blockID);
+      world.setTypeId(i - 1, b0 + 2, j, Block.torchWood.blockID);
+      world.setTypeId(i + 1, b0 + 2, j, Block.torchWood.blockID);
+      world.setTypeId(i, b0 + 2, j - 1, Block.torchWood.blockID);
+      world.setTypeId(i, b0 + 2, j + 1, Block.torchWood.blockID);
+      world.setTypeId(i, b0 + 3, j, Block.bedrock.blockID);
+      world.setTypeId(i, b0 + 4, j, Block.dragonEgg.blockID);
+      EntityCreatePortalEvent var18 = new EntityCreatePortalEvent((LivingEntity)this.getBukkitEntity(), Collections.unmodifiableList(world.getList()), PortalType.ENDER);
+      this.worldObj.getServer().getPluginManager().callEvent(var18);
+      Iterator var19;
+      BlockState var20;
+      if(!var18.isCancelled()) {
+         var19 = var18.getBlocks().iterator();
+
+         while(var19.hasNext()) {
+            var20 = (BlockState)var19.next();
+            var20.update(true);
+         }
+      } else {
+         var19 = var18.getBlocks().iterator();
+
+         while(var19.hasNext()) {
+            var20 = (BlockState)var19.next();
+            Packet53BlockChange packet = new Packet53BlockChange(var20.getX(), var20.getY(), var20.getZ(), this.worldObj);
+            Iterator it = this.worldObj.playerEntities.iterator();
+
+            while(it.hasNext()) {
+               EntityPlayer entity = (EntityPlayer)it.next();
+               if(entity instanceof EntityPlayerMP) {
+                  ((EntityPlayerMP)entity).playerNetServerHandler.sendPacket(packet);
+               }
+            }
+         }
+      }
+
       BlockEndPortal.bossDefeated = false;
    }
 
@@ -551,4 +631,8 @@
    protected float getSoundVolume() {
       return 5.0F;
    }
+
+   public int getExpReward() {
+      return 12000;
+   }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityEgg.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEgg.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityEgg.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEgg.java
--- mcp-mcdev/net/minecraft/src/EntityEgg.java	2012-11-29 21:15:03.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEgg.java	2012-11-29 20:44:21.000000000 -0800
@@ -1,46 +1,66 @@
 package net.minecraft.src;
 
 import net.minecraft.src.DamageSource;
-import net.minecraft.src.EntityChicken;
 import net.minecraft.src.EntityLiving;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.EntityThrowable;
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.World;
+import org.bukkit.Location;
+import org.bukkit.entity.Ageable;
+import org.bukkit.entity.Egg;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.event.player.PlayerEggThrowEvent;
 
 public class EntityEgg extends EntityThrowable {
 
-   public EntityEgg(World var1) {
-      super(var1);
+   public EntityEgg(World world) {
+      super(world);
    }
 
-   public EntityEgg(World var1, EntityLiving var2) {
-      super(var1, var2);
+   public EntityEgg(World world, EntityLiving entityliving) {
+      super(world, entityliving);
    }
 
-   public EntityEgg(World var1, double var2, double var4, double var6) {
-      super(var1, var2, var4, var6);
+   public EntityEgg(World world, double d0, double d1, double d2) {
+      super(world, d0, d1, d2);
    }
 
-   protected void onImpact(MovingObjectPosition var1) {
-      if(var1.entityHit != null) {
-         var1.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this, this.func_85052_h()), 0);
+   protected void onImpact(MovingObjectPosition movingobjectposition) {
+      if(movingobjectposition.entityHit != null) {
+         movingobjectposition.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this, this.func_85052_h()), 0);
       }
 
-      if(!this.worldObj.isRemote && this.rand.nextInt(8) == 0) {
-         byte var2 = 1;
-         if(this.rand.nextInt(32) == 0) {
-            var2 = 4;
-         }
+      boolean hatching = !this.worldObj.isRemote && this.rand.nextInt(8) == 0;
+      int numHatching = this.rand.nextInt(32) == 0?4:1;
+      if(!hatching) {
+         numHatching = 0;
+      }
+
+      EntityType hatchingType = EntityType.CHICKEN;
+      EntityLiving shooter = this.func_85052_h();
+      if(shooter instanceof EntityPlayerMP) {
+         Player j = shooter == null?null:(Player)shooter.getBukkitEntity();
+         PlayerEggThrowEvent entity = new PlayerEggThrowEvent(j, (Egg)this.getBukkitEntity(), hatching, (byte)numHatching, hatchingType);
+         this.worldObj.getServer().getPluginManager().callEvent(entity);
+         hatching = entity.isHatching();
+         numHatching = entity.getNumHatches();
+         hatchingType = entity.getHatchingType();
+      }
 
-         for(int var3 = 0; var3 < var2; ++var3) {
-            EntityChicken var4 = new EntityChicken(this.worldObj);
-            var4.setGrowingAge(-24000);
-            var4.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
-            this.worldObj.spawnEntityInWorld(var4);
+      int var8;
+      if(hatching) {
+         for(var8 = 0; var8 < numHatching; ++var8) {
+            org.bukkit.entity.Entity var9 = this.worldObj.getWorld().spawn(new Location(this.worldObj.getWorld(), this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F), hatchingType.getEntityClass(), SpawnReason.EGG);
+            if(var9 instanceof Ageable) {
+               ((Ageable)var9).setBaby();
+            }
          }
       }
 
-      for(int var5 = 0; var5 < 8; ++var5) {
+      for(var8 = 0; var8 < 8; ++var8) {
          this.worldObj.spawnParticle("snowballpoof", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
       }
 
Binary files mcp-mcdev/net/minecraft/src/EntityEnderCrystal.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEnderCrystal.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityEnderCrystal.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEnderCrystal.java
--- mcp-mcdev/net/minecraft/src/EntityEnderCrystal.java	2012-11-29 21:15:03.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEnderCrystal.java	2012-11-29 20:44:21.000000000 -0800
@@ -6,6 +6,7 @@
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntityEnderCrystal extends Entity {
 
@@ -13,8 +14,8 @@
    public int health;
 
 
-   public EntityEnderCrystal(World var1) {
-      super(var1);
+   public EntityEnderCrystal(World world) {
+      super(world);
       this.preventEntitySpawning = true;
       this.setSize(2.0F, 2.0F);
       this.yOffset = this.height / 2.0F;
@@ -36,33 +37,37 @@
       this.prevPosZ = this.posZ;
       ++this.innerRotation;
       this.dataWatcher.updateObject(8, Integer.valueOf(this.health));
-      int var1 = MathHelper.floor_double(this.posX);
-      int var2 = MathHelper.floor_double(this.posY);
-      int var3 = MathHelper.floor_double(this.posZ);
-      if(this.worldObj.getBlockId(var1, var2, var3) != Block.fire.blockID) {
-         this.worldObj.setBlockWithNotify(var1, var2, var3, Block.fire.blockID);
+      int i = MathHelper.floor_double(this.posX);
+      int j = MathHelper.floor_double(this.posY);
+      int k = MathHelper.floor_double(this.posZ);
+      if(this.worldObj.getBlockId(i, j, k) != Block.fire.blockID) {
+         this.worldObj.setBlockWithNotify(i, j, k, Block.fire.blockID);
       }
 
    }
 
-   protected void writeEntityToNBT(NBTTagCompound var1) {}
+   protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {}
 
-   protected void readEntityFromNBT(NBTTagCompound var1) {}
+   protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {}
 
    public boolean canBeCollidedWith() {
       return true;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
          if(!this.isDead && !this.worldObj.isRemote) {
+            if(CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, i)) {
+               return false;
+            }
+
             this.health = 0;
             if(this.health <= 0) {
                this.setDead();
                if(!this.worldObj.isRemote) {
-                  this.worldObj.createExplosion((Entity)null, this.posX, this.posY, this.posZ, 6.0F, true);
+                  this.worldObj.createExplosion(this, this.posX, this.posY, this.posZ, 6.0F, true);
                }
             }
          }
Binary files mcp-mcdev/net/minecraft/src/EntityEnderPearl.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEnderPearl.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityEnderPearl.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEnderPearl.java
--- mcp-mcdev/net/minecraft/src/EntityEnderPearl.java	2012-11-29 21:15:03.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEnderPearl.java	2012-11-29 20:44:20.000000000 -0800
@@ -6,33 +6,54 @@
 import net.minecraft.src.EntityThrowable;
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.World;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.event.entity.EntityDamageByEntityEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 
 public class EntityEnderPearl extends EntityThrowable {
 
-   public EntityEnderPearl(World var1) {
-      super(var1);
+   public EntityEnderPearl(World world) {
+      super(world);
    }
 
-   public EntityEnderPearl(World var1, EntityLiving var2) {
-      super(var1, var2);
+   public EntityEnderPearl(World world, EntityLiving entityliving) {
+      super(world, entityliving);
    }
 
-   protected void onImpact(MovingObjectPosition var1) {
-      if(var1.entityHit != null) {
-         var1.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this, this.func_85052_h()), 0);
+   protected void onImpact(MovingObjectPosition movingobjectposition) {
+      if(movingobjectposition.entityHit != null) {
+         movingobjectposition.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this, this.func_85052_h()), 0);
       }
 
-      for(int var2 = 0; var2 < 32; ++var2) {
+      for(int entityplayer = 0; entityplayer < 32; ++entityplayer) {
          this.worldObj.spawnParticle("portal", this.posX, this.posY + this.rand.nextDouble() * 2.0D, this.posZ, this.rand.nextGaussian(), 0.0D, this.rand.nextGaussian());
       }
 
       if(!this.worldObj.isRemote) {
          if(this.func_85052_h() != null && this.func_85052_h() instanceof EntityPlayerMP) {
-            EntityPlayerMP var3 = (EntityPlayerMP)this.func_85052_h();
-            if(!var3.playerNetServerHandler.connectionClosed && var3.worldObj == this.worldObj) {
-               this.func_85052_h().setPositionAndUpdate(this.posX, this.posY, this.posZ);
-               this.func_85052_h().fallDistance = 0.0F;
-               this.func_85052_h().attackEntityFrom(DamageSource.fall, 5);
+            EntityPlayerMP var7 = (EntityPlayerMP)this.func_85052_h();
+            if(!var7.playerNetServerHandler.connectionClosed && var7.worldObj == this.worldObj) {
+               CraftPlayer player = var7.getBukkitEntity();
+               Location location = this.getBukkitEntity().getLocation();
+               location.setPitch(player.getLocation().getPitch());
+               location.setYaw(player.getLocation().getYaw());
+               PlayerTeleportEvent teleEvent = new PlayerTeleportEvent(player, player.getLocation(), location, TeleportCause.ENDER_PEARL);
+               Bukkit.getPluginManager().callEvent(teleEvent);
+               if(!teleEvent.isCancelled() && !var7.playerNetServerHandler.connectionClosed) {
+                  var7.playerNetServerHandler.teleport(teleEvent.getTo());
+                  this.func_85052_h().fallDistance = 0.0F;
+                  EntityDamageByEntityEvent damageEvent = new EntityDamageByEntityEvent(this.getBukkitEntity(), player, DamageCause.FALL, 5);
+                  Bukkit.getPluginManager().callEvent(damageEvent);
+                  if(!damageEvent.isCancelled() && !var7.playerNetServerHandler.connectionClosed) {
+                     var7.ticksOfInvuln = -1;
+                     player.setLastDamageCause(damageEvent);
+                     var7.attackEntityFrom(DamageSource.fall, damageEvent.getDamage());
+                  }
+               }
             }
          }
 
Binary files mcp-mcdev/net/minecraft/src/EntityEnderman.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEnderman.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityEnderman.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEnderman.java
--- mcp-mcdev/net/minecraft/src/EntityEnderman.java	2012-11-29 21:15:03.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityEnderman.java	2012-11-29 20:44:21.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.Block;
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.Entity;
@@ -12,6 +13,9 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTeleportEvent;
 
 public class EntityEnderman extends EntityMob {
 
@@ -20,8 +24,8 @@
    private int field_70826_g = 0;
 
 
-   public EntityEnderman(World var1) {
-      super(var1);
+   public EntityEnderman(World world) {
+      super(world);
       this.texture = "/mob/enderman.png";
       this.moveSpeed = 0.2F;
       this.setSize(0.6F, 2.9F);
@@ -39,30 +43,30 @@
       this.dataWatcher.addObject(18, new Byte((byte)0));
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setShort("carried", (short)this.getCarried());
-      var1.setShort("carriedData", (short)this.getCarryingData());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setShort("carried", (short)this.getCarried());
+      nbttagcompound.setShort("carriedData", (short)this.getCarryingData());
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.setCarried(var1.getShort("carried"));
-      this.setCarryingData(var1.getShort("carriedData"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.setCarried(nbttagcompound.getShort("carried"));
+      this.setCarryingData(nbttagcompound.getShort("carriedData"));
    }
 
    protected Entity findPlayerToAttack() {
-      EntityPlayer var1 = this.worldObj.getClosestVulnerablePlayerToEntity(this, 64.0D);
-      if(var1 != null) {
-         if(this.shouldAttackPlayer(var1)) {
+      EntityPlayer entityhuman = this.worldObj.getClosestVulnerablePlayerToEntity(this, 64.0D);
+      if(entityhuman != null) {
+         if(this.shouldAttackPlayer(entityhuman)) {
             if(this.field_70826_g == 0) {
-               this.worldObj.playSoundAtEntity(var1, "mob.endermen.stare", 1.0F, 1.0F);
+               this.worldObj.playSoundAtEntity(entityhuman, "mob.endermen.stare", 1.0F, 1.0F);
             }
 
             if(this.field_70826_g++ == 5) {
                this.field_70826_g = 0;
                this.func_70819_e(true);
-               return var1;
+               return entityhuman;
             }
          } else {
             this.field_70826_g = 0;
@@ -72,17 +76,17 @@
       return null;
    }
 
-   private boolean shouldAttackPlayer(EntityPlayer var1) {
-      ItemStack var2 = var1.inventory.armorInventory[3];
-      if(var2 != null && var2.itemID == Block.pumpkin.blockID) {
+   private boolean shouldAttackPlayer(EntityPlayer entityhuman) {
+      ItemStack itemstack = entityhuman.inventory.armorInventory[3];
+      if(itemstack != null && itemstack.itemID == Block.pumpkin.blockID) {
          return false;
       } else {
-         Vec3 var3 = var1.getLook(1.0F).normalize();
-         Vec3 var4 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX - var1.posX, this.boundingBox.minY + (double)(this.height / 2.0F) - (var1.posY + (double)var1.getEyeHeight()), this.posZ - var1.posZ);
-         double var5 = var4.lengthVector();
-         var4 = var4.normalize();
-         double var7 = var3.dotProduct(var4);
-         return var7 > 1.0D - 0.025D / var5?var1.canEntityBeSeen(this):false;
+         Vec3 vec3d = entityhuman.getLook(1.0F).normalize();
+         Vec3 vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX - entityhuman.posX, this.boundingBox.minY + (double)(this.height / 2.0F) - (entityhuman.posY + (double)entityhuman.getEyeHeight()), this.posZ - entityhuman.posZ);
+         double d0 = vec3d1.lengthVector();
+         vec3d1 = vec3d1.normalize();
+         double d1 = vec3d.dotProduct(vec3d1);
+         return d1 > 1.0D - 0.025D / d0?entityhuman.canEntityBeSeen(this):false;
       }
    }
 
@@ -92,43 +96,46 @@
       }
 
       this.moveSpeed = this.entityToAttack != null?6.5F:0.3F;
-      int var1;
+      int i;
       if(!this.worldObj.isRemote && this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing")) {
-         int var2;
-         int var3;
-         int var4;
+         int f;
+         int k;
+         int l;
          if(this.getCarried() == 0) {
             if(this.rand.nextInt(20) == 0) {
-               var1 = MathHelper.floor_double(this.posX - 2.0D + this.rand.nextDouble() * 4.0D);
-               var2 = MathHelper.floor_double(this.posY + this.rand.nextDouble() * 3.0D);
-               var3 = MathHelper.floor_double(this.posZ - 2.0D + this.rand.nextDouble() * 4.0D);
-               var4 = this.worldObj.getBlockId(var1, var2, var3);
-               if(carriableBlocks[var4]) {
-                  this.setCarried(this.worldObj.getBlockId(var1, var2, var3));
-                  this.setCarryingData(this.worldObj.getBlockMetadata(var1, var2, var3));
-                  this.worldObj.setBlockWithNotify(var1, var2, var3, 0);
+               i = MathHelper.floor_double(this.posX - 2.0D + this.rand.nextDouble() * 4.0D);
+               f = MathHelper.floor_double(this.posY + this.rand.nextDouble() * 3.0D);
+               k = MathHelper.floor_double(this.posZ - 2.0D + this.rand.nextDouble() * 4.0D);
+               l = this.worldObj.getBlockId(i, f, k);
+               if(carriableBlocks[l] && !CraftEventFactory.callEntityChangeBlockEvent(this, this.worldObj.getWorld().getBlockAt(i, f, k), org.bukkit.Material.AIR).isCancelled()) {
+                  this.setCarried(this.worldObj.getBlockId(i, f, k));
+                  this.setCarryingData(this.worldObj.getBlockMetadata(i, f, k));
+                  this.worldObj.setBlockWithNotify(i, f, k, 0);
                }
             }
          } else if(this.rand.nextInt(2000) == 0) {
-            var1 = MathHelper.floor_double(this.posX - 1.0D + this.rand.nextDouble() * 2.0D);
-            var2 = MathHelper.floor_double(this.posY + this.rand.nextDouble() * 2.0D);
-            var3 = MathHelper.floor_double(this.posZ - 1.0D + this.rand.nextDouble() * 2.0D);
-            var4 = this.worldObj.getBlockId(var1, var2, var3);
-            int var5 = this.worldObj.getBlockId(var1, var2 - 1, var3);
-            if(var4 == 0 && var5 > 0 && Block.blocksList[var5].renderAsNormalBlock()) {
-               this.worldObj.setBlockAndMetadataWithNotify(var1, var2, var3, this.getCarried(), this.getCarryingData());
-               this.setCarried(0);
+            i = MathHelper.floor_double(this.posX - 1.0D + this.rand.nextDouble() * 2.0D);
+            f = MathHelper.floor_double(this.posY + this.rand.nextDouble() * 2.0D);
+            k = MathHelper.floor_double(this.posZ - 1.0D + this.rand.nextDouble() * 2.0D);
+            l = this.worldObj.getBlockId(i, f, k);
+            int i1 = this.worldObj.getBlockId(i, f - 1, k);
+            if(l == 0 && i1 > 0 && Block.blocksList[i1].renderAsNormalBlock()) {
+               org.bukkit.block.Block bblock = this.worldObj.getWorld().getBlockAt(i, f, k);
+               if(!CraftEventFactory.callEntityChangeBlockEvent(this, bblock, bblock.getType()).isCancelled()) {
+                  this.worldObj.setBlockAndMetadataWithNotify(i, f, k, this.getCarried(), this.getCarryingData());
+                  this.setCarried(0);
+               }
             }
          }
       }
 
-      for(var1 = 0; var1 < 2; ++var1) {
+      for(i = 0; i < 2; ++i) {
          this.worldObj.spawnParticle("portal", this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height - 0.25D, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, (this.rand.nextDouble() - 0.5D) * 2.0D, -this.rand.nextDouble(), (this.rand.nextDouble() - 0.5D) * 2.0D);
       }
 
       if(this.worldObj.isDaytime() && !this.worldObj.isRemote) {
-         float var6 = this.getBrightness(1.0F);
-         if(var6 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (var6 - 0.4F) * 2.0F) {
+         float var7 = this.getBrightness(1.0F);
+         if(var7 > 0.5F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) && this.rand.nextFloat() * 30.0F < (var7 - 0.4F) * 2.0F) {
             this.entityToAttack = null;
             this.func_70819_e(false);
             this.teleportRandomly();
@@ -169,73 +176,80 @@
    }
 
    protected boolean teleportRandomly() {
-      double var1 = this.posX + (this.rand.nextDouble() - 0.5D) * 64.0D;
-      double var3 = this.posY + (double)(this.rand.nextInt(64) - 32);
-      double var5 = this.posZ + (this.rand.nextDouble() - 0.5D) * 64.0D;
-      return this.teleportTo(var1, var3, var5);
-   }
-
-   protected boolean teleportToEntity(Entity var1) {
-      Vec3 var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX - var1.posX, this.boundingBox.minY + (double)(this.height / 2.0F) - var1.posY + (double)var1.getEyeHeight(), this.posZ - var1.posZ);
-      var2 = var2.normalize();
-      double var3 = 16.0D;
-      double var5 = this.posX + (this.rand.nextDouble() - 0.5D) * 8.0D - var2.xCoord * var3;
-      double var7 = this.posY + (double)(this.rand.nextInt(16) - 8) - var2.yCoord * var3;
-      double var9 = this.posZ + (this.rand.nextDouble() - 0.5D) * 8.0D - var2.zCoord * var3;
-      return this.teleportTo(var5, var7, var9);
-   }
-
-   protected boolean teleportTo(double var1, double var3, double var5) {
-      double var7 = this.posX;
-      double var9 = this.posY;
-      double var11 = this.posZ;
-      this.posX = var1;
-      this.posY = var3;
-      this.posZ = var5;
-      boolean var13 = false;
-      int var14 = MathHelper.floor_double(this.posX);
-      int var15 = MathHelper.floor_double(this.posY);
-      int var16 = MathHelper.floor_double(this.posZ);
-      int var18;
-      if(this.worldObj.blockExists(var14, var15, var16)) {
-         boolean var17 = false;
-
-         while(!var17 && var15 > 0) {
-            var18 = this.worldObj.getBlockId(var14, var15 - 1, var16);
-            if(var18 != 0 && Block.blocksList[var18].blockMaterial.blocksMovement()) {
-               var17 = true;
+      double d0 = this.posX + (this.rand.nextDouble() - 0.5D) * 64.0D;
+      double d1 = this.posY + (double)(this.rand.nextInt(64) - 32);
+      double d2 = this.posZ + (this.rand.nextDouble() - 0.5D) * 64.0D;
+      return this.teleportTo(d0, d1, d2);
+   }
+
+   protected boolean teleportToEntity(Entity entity) {
+      Vec3 vec3d = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX - entity.posX, this.boundingBox.minY + (double)(this.height / 2.0F) - entity.posY + (double)entity.getEyeHeight(), this.posZ - entity.posZ);
+      vec3d = vec3d.normalize();
+      double d0 = 16.0D;
+      double d1 = this.posX + (this.rand.nextDouble() - 0.5D) * 8.0D - vec3d.xCoord * d0;
+      double d2 = this.posY + (double)(this.rand.nextInt(16) - 8) - vec3d.yCoord * d0;
+      double d3 = this.posZ + (this.rand.nextDouble() - 0.5D) * 8.0D - vec3d.zCoord * d0;
+      return this.teleportTo(d1, d2, d3);
+   }
+
+   protected boolean teleportTo(double d0, double d1, double d2) {
+      double d3 = this.posX;
+      double d4 = this.posY;
+      double d5 = this.posZ;
+      this.posX = d0;
+      this.posY = d1;
+      this.posZ = d2;
+      boolean flag = false;
+      int i = MathHelper.floor_double(this.posX);
+      int j = MathHelper.floor_double(this.posY);
+      int k = MathHelper.floor_double(this.posZ);
+      int l;
+      if(this.worldObj.blockExists(i, j, k)) {
+         boolean short1 = false;
+
+         while(!short1 && j > 0) {
+            l = this.worldObj.getBlockId(i, j - 1, k);
+            if(l != 0 && Block.blocksList[l].blockMaterial.blocksMovement()) {
+               short1 = true;
             } else {
                --this.posY;
-               --var15;
+               --j;
             }
          }
 
-         if(var17) {
-            this.setPosition(this.posX, this.posY, this.posZ);
+         if(short1) {
+            EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), new Location(this.worldObj.getWorld(), d3, d4, d5), new Location(this.worldObj.getWorld(), this.posX, this.posY, this.posZ));
+            this.worldObj.getServer().getPluginManager().callEvent(teleport);
+            if(teleport.isCancelled()) {
+               return false;
+            }
+
+            Location to = teleport.getTo();
+            this.setPosition(to.getX(), to.getY(), to.getZ());
             if(this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty() && !this.worldObj.isAnyLiquid(this.boundingBox)) {
-               var13 = true;
+               flag = true;
             }
          }
       }
 
-      if(!var13) {
-         this.setPosition(var7, var9, var11);
+      if(!flag) {
+         this.setPosition(d3, d4, d5);
          return false;
       } else {
-         short var30 = 128;
+         short var32 = 128;
 
-         for(var18 = 0; var18 < var30; ++var18) {
-            double var19 = (double)var18 / ((double)var30 - 1.0D);
-            float var21 = (this.rand.nextFloat() - 0.5F) * 0.2F;
-            float var22 = (this.rand.nextFloat() - 0.5F) * 0.2F;
-            float var23 = (this.rand.nextFloat() - 0.5F) * 0.2F;
-            double var24 = var7 + (this.posX - var7) * var19 + (this.rand.nextDouble() - 0.5D) * (double)this.width * 2.0D;
-            double var26 = var9 + (this.posY - var9) * var19 + this.rand.nextDouble() * (double)this.height;
-            double var28 = var11 + (this.posZ - var11) * var19 + (this.rand.nextDouble() - 0.5D) * (double)this.width * 2.0D;
-            this.worldObj.spawnParticle("portal", var24, var26, var28, (double)var21, (double)var22, (double)var23);
+         for(l = 0; l < var32; ++l) {
+            double d6 = (double)l / ((double)var32 - 1.0D);
+            float f = (this.rand.nextFloat() - 0.5F) * 0.2F;
+            float f1 = (this.rand.nextFloat() - 0.5F) * 0.2F;
+            float f2 = (this.rand.nextFloat() - 0.5F) * 0.2F;
+            double d7 = d3 + (this.posX - d3) * d6 + (this.rand.nextDouble() - 0.5D) * (double)this.width * 2.0D;
+            double d8 = d4 + (this.posY - d4) * d6 + this.rand.nextDouble() * (double)this.height;
+            double d9 = d5 + (this.posZ - d5) * d6 + (this.rand.nextDouble() - 0.5D) * (double)this.width * 2.0D;
+            this.worldObj.spawnParticle("portal", d7, d8, d9, (double)f, (double)f1, (double)f2);
          }
 
-         this.worldObj.playSoundEffect(var7, var9, var11, "mob.endermen.portal", 1.0F, 1.0F);
+         this.worldObj.playSoundEffect(d3, d4, d5, "mob.endermen.portal", 1.0F, 1.0F);
          this.func_85030_a("mob.endermen.portal", 1.0F, 1.0F);
          return true;
       }
@@ -257,39 +271,41 @@
       return Item.enderPearl.shiftedIndex;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.getDropItemId();
-      if(var3 > 0) {
-         int var4 = this.rand.nextInt(2 + var2);
-
-         for(int var5 = 0; var5 < var4; ++var5) {
-            this.dropItem(var3, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      int j = this.getDropItemId();
+      if(j > 0) {
+         ArrayList loot = new ArrayList();
+         int count = this.rand.nextInt(2 + i);
+         if(j > 0 && count > 0) {
+            loot.add(new org.bukkit.inventory.ItemStack(j, count));
          }
+
+         CraftEventFactory.callEntityDeathEvent(this, loot);
       }
 
    }
 
-   public void setCarried(int var1) {
-      this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var1 & 255)));
+   public void setCarried(int i) {
+      this.dataWatcher.updateObject(16, Byte.valueOf((byte)(i & 255)));
    }
 
    public int getCarried() {
       return this.dataWatcher.getWatchableObjectByte(16);
    }
 
-   public void setCarryingData(int var1) {
-      this.dataWatcher.updateObject(17, Byte.valueOf((byte)(var1 & 255)));
+   public void setCarryingData(int i) {
+      this.dataWatcher.updateObject(17, Byte.valueOf((byte)(i & 255)));
    }
 
    public int getCarryingData() {
       return this.dataWatcher.getWatchableObjectByte(17);
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
-      } else if(var1 instanceof EntityDamageSourceIndirect) {
-         for(int var3 = 0; var3 < 64; ++var3) {
+      } else if(damagesource instanceof EntityDamageSourceIndirect) {
+         for(int j = 0; j < 64; ++j) {
             if(this.teleportRandomly()) {
                return true;
             }
@@ -297,11 +313,11 @@
 
          return false;
       } else {
-         if(var1.getEntity() instanceof EntityPlayer) {
+         if(damagesource.getEntity() instanceof EntityPlayer) {
             this.func_70819_e(true);
          }
 
-         return super.attackEntityFrom(var1, var2);
+         return super.attackEntityFrom(damagesource, i);
       }
    }
 
@@ -309,11 +325,11 @@
       return this.dataWatcher.getWatchableObjectByte(18) > 0;
    }
 
-   public void func_70819_e(boolean var1) {
-      this.dataWatcher.updateObject(18, Byte.valueOf((byte)(var1?1:0)));
+   public void func_70819_e(boolean flag) {
+      this.dataWatcher.updateObject(18, Byte.valueOf((byte)(flag?1:0)));
    }
 
-   public int getAttackStrength(Entity var1) {
+   public int getAttackStrength(Entity entity) {
       return 7;
    }
 
Binary files mcp-mcdev/net/minecraft/src/EntityExpBottle.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityExpBottle.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityExpBottle.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityExpBottle.java
--- mcp-mcdev/net/minecraft/src/EntityExpBottle.java	2012-11-29 21:15:03.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityExpBottle.java	2012-11-29 20:44:20.000000000 -0800
@@ -5,19 +5,21 @@
 import net.minecraft.src.EntityXPOrb;
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.ExpBottleEvent;
 
 public class EntityExpBottle extends EntityThrowable {
 
-   public EntityExpBottle(World var1) {
-      super(var1);
+   public EntityExpBottle(World world) {
+      super(world);
    }
 
-   public EntityExpBottle(World var1, EntityLiving var2) {
-      super(var1, var2);
+   public EntityExpBottle(World world, EntityLiving entityliving) {
+      super(world, entityliving);
    }
 
-   public EntityExpBottle(World var1, double var2, double var4, double var6) {
-      super(var1, var2, var4, var6);
+   public EntityExpBottle(World world, double d0, double d1, double d2) {
+      super(world, d0, d1, d2);
    }
 
    protected float getGravityVelocity() {
@@ -32,15 +34,19 @@
       return -20.0F;
    }
 
-   protected void onImpact(MovingObjectPosition var1) {
+   protected void onImpact(MovingObjectPosition movingobjectposition) {
       if(!this.worldObj.isRemote) {
-         this.worldObj.playAuxSFX(2002, (int)Math.round(this.posX), (int)Math.round(this.posY), (int)Math.round(this.posZ), 0);
-         int var2 = 3 + this.worldObj.rand.nextInt(5) + this.worldObj.rand.nextInt(5);
+         int i = 3 + this.worldObj.rand.nextInt(5) + this.worldObj.rand.nextInt(5);
+         ExpBottleEvent event = CraftEventFactory.callExpBottleEvent(this, i);
+         i = event.getExperience();
+         if(event.getShowEffect()) {
+            this.worldObj.playAuxSFX(2002, (int)Math.round(this.posX), (int)Math.round(this.posY), (int)Math.round(this.posZ), 0);
+         }
 
-         while(var2 > 0) {
-            int var3 = EntityXPOrb.getXPSplit(var2);
-            var2 -= var3;
-            this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, var3));
+         while(i > 0) {
+            int j = EntityXPOrb.getXPSplit(i);
+            i -= j;
+            this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
          }
 
          this.setDead();
Binary files mcp-mcdev/net/minecraft/src/EntityFallingSand.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityFallingSand.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityFallingSand.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityFallingSand.java
--- mcp-mcdev/net/minecraft/src/EntityFallingSand.java	2012-11-29 21:15:03.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityFallingSand.java	2012-11-29 20:44:20.000000000 -0800
@@ -10,6 +10,9 @@
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
 
 public class EntityFallingSand extends Entity {
 
@@ -23,8 +26,8 @@
    private float field_82158_h;
 
 
-   public EntityFallingSand(World var1) {
-      super(var1);
+   public EntityFallingSand(World world) {
+      super(world);
       this.fallTime = 0;
       this.shouldDropItem = true;
       this.isBreakingAnvil = false;
@@ -33,30 +36,30 @@
       this.field_82158_h = 2.0F;
    }
 
-   public EntityFallingSand(World var1, double var2, double var4, double var6, int var8) {
-      this(var1, var2, var4, var6, var8, 0);
+   public EntityFallingSand(World world, double d0, double d1, double d2, int i) {
+      this(world, d0, d1, d2, i, 0);
    }
 
-   public EntityFallingSand(World var1, double var2, double var4, double var6, int var8, int var9) {
-      super(var1);
+   public EntityFallingSand(World world, double d0, double d1, double d2, int i, int j) {
+      super(world);
       this.fallTime = 0;
       this.shouldDropItem = true;
       this.isBreakingAnvil = false;
       this.isAnvil = false;
       this.field_82156_g = 20;
       this.field_82158_h = 2.0F;
-      this.blockID = var8;
-      this.metadata = var9;
+      this.blockID = i;
+      this.metadata = j;
       this.preventEntitySpawning = true;
       this.setSize(0.98F, 0.98F);
       this.yOffset = this.height / 2.0F;
-      this.setPosition(var2, var4, var6);
+      this.setPosition(d0, d1, d2);
       this.motionX = 0.0D;
       this.motionY = 0.0D;
       this.motionZ = 0.0D;
-      this.prevPosX = var2;
-      this.prevPosY = var4;
-      this.prevPosZ = var6;
+      this.prevPosX = d0;
+      this.prevPosY = d1;
+      this.prevPosZ = d2;
    }
 
    protected boolean canTriggerWalking() {
@@ -83,32 +86,33 @@
          this.motionY *= 0.9800000190734863D;
          this.motionZ *= 0.9800000190734863D;
          if(!this.worldObj.isRemote) {
-            int var1 = MathHelper.floor_double(this.posX);
-            int var2 = MathHelper.floor_double(this.posY);
-            int var3 = MathHelper.floor_double(this.posZ);
+            int i = MathHelper.floor_double(this.posX);
+            int j = MathHelper.floor_double(this.posY);
+            int k = MathHelper.floor_double(this.posZ);
             if(this.fallTime == 1) {
-               if(this.fallTime == 1 && this.worldObj.getBlockId(var1, var2, var3) == this.blockID) {
-                  this.worldObj.setBlockWithNotify(var1, var2, var3, 0);
-               } else {
+               if(this.fallTime != 1 || this.worldObj.getBlockId(i, j, k) != this.blockID) {
                   this.setDead();
+                  return;
                }
+
+               this.worldObj.setBlockWithNotify(i, j, k, 0);
             }
 
             if(this.onGround) {
                this.motionX *= 0.699999988079071D;
                this.motionZ *= 0.699999988079071D;
                this.motionY *= -0.5D;
-               if(this.worldObj.getBlockId(var1, var2, var3) != Block.pistonMoving.blockID) {
+               if(this.worldObj.getBlockId(i, j, k) != Block.pistonMoving.blockID) {
                   this.setDead();
-                  if(!this.isBreakingAnvil && this.worldObj.canPlaceEntityOnSide(this.blockID, var1, var2, var3, true, 1, (Entity)null) && !BlockSand.canFallBelow(this.worldObj, var1, var2 - 1, var3) && this.worldObj.setBlockAndMetadataWithNotify(var1, var2, var3, this.blockID, this.metadata)) {
+                  if(!this.isBreakingAnvil && this.worldObj.canPlaceEntityOnSide(this.blockID, i, j, k, true, 1, (Entity)null) && !BlockSand.canFallBelow(this.worldObj, i, j - 1, k) && this.worldObj.setBlockAndMetadataWithNotify(i, j, k, this.blockID, this.metadata)) {
                      if(Block.blocksList[this.blockID] instanceof BlockSand) {
-                        ((BlockSand)Block.blocksList[this.blockID]).onFinishFalling(this.worldObj, var1, var2, var3, this.metadata);
+                        ((BlockSand)Block.blocksList[this.blockID]).onFinishFalling(this.worldObj, i, j, k, this.metadata);
                      }
                   } else if(this.shouldDropItem && !this.isBreakingAnvil) {
                      this.entityDropItem(new ItemStack(this.blockID, 1, Block.blocksList[this.blockID].damageDropped(this.metadata)), 0.0F);
                   }
                }
-            } else if(this.fallTime > 100 && !this.worldObj.isRemote && (var2 < 1 || var2 > 256) || this.fallTime > 600) {
+            } else if(this.fallTime > 100 && !this.worldObj.isRemote && (j < 1 || j > 256) || this.fallTime > 600) {
                if(this.shouldDropItem) {
                   this.entityDropItem(new ItemStack(this.blockID, 1, Block.blocksList[this.blockID].damageDropped(this.metadata)), 0.0F);
                }
@@ -116,31 +120,36 @@
                this.setDead();
             }
          }
-
       }
+
    }
 
-   protected void fall(float var1) {
+   protected void fall(float f) {
       if(this.isAnvil) {
-         int var2 = MathHelper.ceiling_float_int(var1 - 1.0F);
-         if(var2 > 0) {
-            ArrayList var3 = new ArrayList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox));
-            DamageSource var4 = this.blockID == Block.anvil.blockID?DamageSource.anvil:DamageSource.fallingBlock;
-            Iterator var5 = var3.iterator();
-
-            while(var5.hasNext()) {
-               Entity var6 = (Entity)var5.next();
-               var6.attackEntityFrom(var4, Math.min(MathHelper.floor_float((float)var2 * this.field_82158_h), this.field_82156_g));
+         int i = MathHelper.ceiling_float_int(f - 1.0F);
+         if(i > 0) {
+            ArrayList arraylist = new ArrayList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox));
+            DamageSource damagesource = this.blockID == Block.anvil.blockID?DamageSource.anvil:DamageSource.fallingBlock;
+            Iterator iterator = arraylist.iterator();
+
+            int k;
+            while(iterator.hasNext()) {
+               Entity j = (Entity)iterator.next();
+               k = Math.min(MathHelper.floor_float((float)i * this.field_82158_h), this.field_82156_g);
+               EntityDamageEvent event = CraftEventFactory.callEntityDamageEvent(this, j, DamageCause.FALLING_BLOCK, k);
+               if(!event.isCancelled()) {
+                  j.attackEntityFrom(damagesource, event.getDamage());
+               }
             }
 
-            if(this.blockID == Block.anvil.blockID && (double)this.rand.nextFloat() < 0.05000000074505806D + (double)var2 * 0.05D) {
-               int var7 = this.metadata >> 2;
-               int var8 = this.metadata & 3;
-               ++var7;
-               if(var7 > 2) {
+            if(this.blockID == Block.anvil.blockID && (double)this.rand.nextFloat() < 0.05000000074505806D + (double)i * 0.05D) {
+               int var9 = this.metadata >> 2;
+               k = this.metadata & 3;
+               ++var9;
+               if(var9 > 2) {
                   this.isBreakingAnvil = true;
                } else {
-                  this.metadata = var8 | var7 << 2;
+                  this.metadata = k | var9 << 2;
                }
             }
          }
@@ -148,30 +157,30 @@
 
    }
 
-   protected void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setByte("Tile", (byte)this.blockID);
-      var1.setByte("Data", (byte)this.metadata);
-      var1.setByte("Time", (byte)this.fallTime);
-      var1.setBoolean("DropItem", this.shouldDropItem);
-      var1.setBoolean("HurtEntities", this.isAnvil);
-      var1.setFloat("FallHurtAmount", this.field_82158_h);
-      var1.setInteger("FallHurtMax", this.field_82156_g);
-   }
-
-   protected void readEntityFromNBT(NBTTagCompound var1) {
-      this.blockID = var1.getByte("Tile") & 255;
-      this.metadata = var1.getByte("Data") & 255;
-      this.fallTime = var1.getByte("Time") & 255;
-      if(var1.hasKey("HurtEntities")) {
-         this.isAnvil = var1.getBoolean("HurtEntities");
-         this.field_82158_h = var1.getFloat("FallHurtAmount");
-         this.field_82156_g = var1.getInteger("FallHurtMax");
+   protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setByte("Tile", (byte)this.blockID);
+      nbttagcompound.setByte("Data", (byte)this.metadata);
+      nbttagcompound.setByte("Time", (byte)this.fallTime);
+      nbttagcompound.setBoolean("DropItem", this.shouldDropItem);
+      nbttagcompound.setBoolean("HurtEntities", this.isAnvil);
+      nbttagcompound.setFloat("FallHurtAmount", this.field_82158_h);
+      nbttagcompound.setInteger("FallHurtMax", this.field_82156_g);
+   }
+
+   protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.blockID = nbttagcompound.getByte("Tile") & 255;
+      this.metadata = nbttagcompound.getByte("Data") & 255;
+      this.fallTime = nbttagcompound.getByte("Time") & 255;
+      if(nbttagcompound.hasKey("HurtEntities")) {
+         this.isAnvil = nbttagcompound.getBoolean("HurtEntities");
+         this.field_82158_h = nbttagcompound.getFloat("FallHurtAmount");
+         this.field_82156_g = nbttagcompound.getInteger("FallHurtMax");
       } else if(this.blockID == Block.anvil.blockID) {
          this.isAnvil = true;
       }
 
-      if(var1.hasKey("DropItem")) {
-         this.shouldDropItem = var1.getBoolean("DropItem");
+      if(nbttagcompound.hasKey("DropItem")) {
+         this.shouldDropItem = nbttagcompound.getBoolean("DropItem");
       }
 
       if(this.blockID == 0) {
@@ -180,7 +189,7 @@
 
    }
 
-   public void setIsAnvil(boolean var1) {
-      this.isAnvil = var1;
+   public void setIsAnvil(boolean flag) {
+      this.isAnvil = flag;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityFireball.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityFireball.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityFireball.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityFireball.java
--- mcp-mcdev/net/minecraft/src/EntityFireball.java	2012-11-29 21:15:02.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityFireball.java	2012-11-29 20:44:20.000000000 -0800
@@ -12,6 +12,8 @@
 import net.minecraft.src.NBTTagList;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.entity.Projectile;
+import org.bukkit.event.entity.ProjectileHitEvent;
 
 public abstract class EntityFireball extends Entity {
 
@@ -26,41 +28,47 @@
    public double accelerationX;
    public double accelerationY;
    public double accelerationZ;
+   public float yield = 1.0F;
+   public boolean isIncendiary = true;
 
 
-   public EntityFireball(World var1) {
-      super(var1);
+   public EntityFireball(World world) {
+      super(world);
       this.setSize(1.0F, 1.0F);
    }
 
    protected void entityInit() {}
 
-   public EntityFireball(World var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-      super(var1);
+   public EntityFireball(World world, double d0, double d1, double d2, double d3, double d4, double d5) {
+      super(world);
       this.setSize(1.0F, 1.0F);
-      this.setLocationAndAngles(var2, var4, var6, this.rotationYaw, this.rotationPitch);
-      this.setPosition(var2, var4, var6);
-      double var14 = (double)MathHelper.sqrt_double(var8 * var8 + var10 * var10 + var12 * var12);
-      this.accelerationX = var8 / var14 * 0.1D;
-      this.accelerationY = var10 / var14 * 0.1D;
-      this.accelerationZ = var12 / var14 * 0.1D;
+      this.setLocationAndAngles(d0, d1, d2, this.rotationYaw, this.rotationPitch);
+      this.setPosition(d0, d1, d2);
+      double d6 = (double)MathHelper.sqrt_double(d3 * d3 + d4 * d4 + d5 * d5);
+      this.accelerationX = d3 / d6 * 0.1D;
+      this.accelerationY = d4 / d6 * 0.1D;
+      this.accelerationZ = d5 / d6 * 0.1D;
    }
 
-   public EntityFireball(World var1, EntityLiving var2, double var3, double var5, double var7) {
-      super(var1);
-      this.shootingEntity = var2;
+   public EntityFireball(World world, EntityLiving entityliving, double d0, double d1, double d2) {
+      super(world);
+      this.shootingEntity = entityliving;
       this.setSize(1.0F, 1.0F);
-      this.setLocationAndAngles(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
+      this.setLocationAndAngles(entityliving.posX, entityliving.posY, entityliving.posZ, entityliving.rotationYaw, entityliving.rotationPitch);
       this.setPosition(this.posX, this.posY, this.posZ);
       this.yOffset = 0.0F;
       this.motionX = this.motionY = this.motionZ = 0.0D;
-      var3 += this.rand.nextGaussian() * 0.4D;
-      var5 += this.rand.nextGaussian() * 0.4D;
-      var7 += this.rand.nextGaussian() * 0.4D;
-      double var9 = (double)MathHelper.sqrt_double(var3 * var3 + var5 * var5 + var7 * var7);
-      this.accelerationX = var3 / var9 * 0.1D;
-      this.accelerationY = var5 / var9 * 0.1D;
-      this.accelerationZ = var7 / var9 * 0.1D;
+      this.setDirection(d0, d1, d2);
+   }
+
+   public void setDirection(double d0, double d1, double d2) {
+      d0 += this.rand.nextGaussian() * 0.4D;
+      d1 += this.rand.nextGaussian() * 0.4D;
+      d2 += this.rand.nextGaussian() * 0.4D;
+      double d3 = (double)MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2);
+      this.accelerationX = d0 / d3 * 0.1D;
+      this.accelerationY = d1 / d3 * 0.1D;
+      this.accelerationZ = d2 / d3 * 0.1D;
    }
 
    public void onUpdate() {
@@ -70,8 +78,8 @@
          super.onUpdate();
          this.setFire(1);
          if(this.inGround) {
-            int var1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-            if(var1 == this.inTile) {
+            int vec3d = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+            if(vec3d == this.inTile) {
                ++this.ticksAlive;
                if(this.ticksAlive == 600) {
                   this.setDead();
@@ -91,49 +99,53 @@
          }
 
          Vec3 var15 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
-         Vec3 var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-         MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var15, var2);
+         Vec3 vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+         MovingObjectPosition movingobjectposition = this.worldObj.rayTraceBlocks(var15, vec3d1);
          var15 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
-         var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-         if(var3 != null) {
-            var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
-         }
-
-         Entity var4 = null;
-         List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-         double var6 = 0.0D;
-
-         for(int var8 = 0; var8 < var5.size(); ++var8) {
-            Entity var9 = (Entity)var5.get(var8);
-            if(var9.canBeCollidedWith() && (!var9.isEntityEqual(this.shootingEntity) || this.ticksInAir >= 25)) {
-               float var10 = 0.3F;
-               AxisAlignedBB var11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
-               MovingObjectPosition var12 = var11.calculateIntercept(var15, var2);
-               if(var12 != null) {
-                  double var13 = var15.distanceTo(var12.hitVec);
-                  if(var13 < var6 || var6 == 0.0D) {
-                     var4 = var9;
-                     var6 = var13;
+         vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+         if(movingobjectposition != null) {
+            vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(movingobjectposition.hitVec.xCoord, movingobjectposition.hitVec.yCoord, movingobjectposition.hitVec.zCoord);
+         }
+
+         Entity entity = null;
+         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+         double d0 = 0.0D;
+
+         for(int f1 = 0; f1 < list.size(); ++f1) {
+            Entity f2 = (Entity)list.get(f1);
+            if(f2.canBeCollidedWith() && (!f2.isEntityEqual(this.shootingEntity) || this.ticksInAir >= 25)) {
+               float k = 0.3F;
+               AxisAlignedBB f3 = f2.boundingBox.expand((double)k, (double)k, (double)k);
+               MovingObjectPosition movingobjectposition1 = f3.calculateIntercept(var15, vec3d1);
+               if(movingobjectposition1 != null) {
+                  double d1 = var15.squareDistanceTo(movingobjectposition1.hitVec);
+                  if(d1 < d0 || d0 == 0.0D) {
+                     entity = f2;
+                     d0 = d1;
                   }
                }
             }
          }
 
-         if(var4 != null) {
-            var3 = new MovingObjectPosition(var4);
+         if(entity != null) {
+            movingobjectposition = new MovingObjectPosition(entity);
          }
 
-         if(var3 != null) {
-            this.onImpact(var3);
+         if(movingobjectposition != null) {
+            this.onImpact(movingobjectposition);
+            if(this.isDead) {
+               ProjectileHitEvent var16 = new ProjectileHitEvent((Projectile)this.getBukkitEntity());
+               this.worldObj.getServer().getPluginManager().callEvent(var16);
+            }
          }
 
          this.posX += this.motionX;
          this.posY += this.motionY;
          this.posZ += this.motionZ;
-         float var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+         float var18 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
          this.rotationYaw = (float)(Math.atan2(this.motionZ, this.motionX) * 180.0D / 3.1415927410125732D) + 90.0F;
 
-         for(this.rotationPitch = (float)(Math.atan2((double)var16, this.motionY) * 180.0D / 3.1415927410125732D) - 90.0F; this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+         for(this.rotationPitch = (float)(Math.atan2((double)var18, this.motionY) * 180.0D / 3.1415927410125732D) - 90.0F; this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
             ;
          }
 
@@ -153,9 +165,9 @@
          this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
          float var17 = this.getMotionFactor();
          if(this.isInWater()) {
-            for(int var19 = 0; var19 < 4; ++var19) {
-               float var18 = 0.25F;
-               this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var18, this.posY - this.motionY * (double)var18, this.posZ - this.motionZ * (double)var18, this.motionX, this.motionY, this.motionZ);
+            for(int var20 = 0; var20 < 4; ++var20) {
+               float var19 = 0.25F;
+               this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var19, this.posY - this.motionY * (double)var19, this.posZ - this.motionZ * (double)var19, this.motionX, this.motionY, this.motionZ);
             }
 
             var17 = 0.8F;
@@ -170,6 +182,7 @@
          this.worldObj.spawnParticle("smoke", this.posX, this.posY + 0.5D, this.posZ, 0.0D, 0.0D, 0.0D);
          this.setPosition(this.posX, this.posY, this.posZ);
       }
+
    }
 
    protected float getMotionFactor() {
@@ -178,26 +191,26 @@
 
    protected abstract void onImpact(MovingObjectPosition var1);
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setShort("xTile", (short)this.xTile);
-      var1.setShort("yTile", (short)this.yTile);
-      var1.setShort("zTile", (short)this.zTile);
-      var1.setByte("inTile", (byte)this.inTile);
-      var1.setByte("inGround", (byte)(this.inGround?1:0));
-      var1.setTag("direction", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
-   }
-
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      this.xTile = var1.getShort("xTile");
-      this.yTile = var1.getShort("yTile");
-      this.zTile = var1.getShort("zTile");
-      this.inTile = var1.getByte("inTile") & 255;
-      this.inGround = var1.getByte("inGround") == 1;
-      if(var1.hasKey("direction")) {
-         NBTTagList var2 = var1.getTagList("direction");
-         this.motionX = ((NBTTagDouble)var2.tagAt(0)).data;
-         this.motionY = ((NBTTagDouble)var2.tagAt(1)).data;
-         this.motionZ = ((NBTTagDouble)var2.tagAt(2)).data;
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setShort("xTile", (short)this.xTile);
+      nbttagcompound.setShort("yTile", (short)this.yTile);
+      nbttagcompound.setShort("zTile", (short)this.zTile);
+      nbttagcompound.setByte("inTile", (byte)this.inTile);
+      nbttagcompound.setByte("inGround", (byte)(this.inGround?1:0));
+      nbttagcompound.setTag("direction", this.newDoubleNBTList(new double[]{this.motionX, this.motionY, this.motionZ}));
+   }
+
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.xTile = nbttagcompound.getShort("xTile");
+      this.yTile = nbttagcompound.getShort("yTile");
+      this.zTile = nbttagcompound.getShort("zTile");
+      this.inTile = nbttagcompound.getByte("inTile") & 255;
+      this.inGround = nbttagcompound.getByte("inGround") == 1;
+      if(nbttagcompound.hasKey("direction")) {
+         NBTTagList nbttaglist = nbttagcompound.getTagList("direction");
+         this.motionX = ((NBTTagDouble)nbttaglist.tagAt(0)).data;
+         this.motionY = ((NBTTagDouble)nbttaglist.tagAt(1)).data;
+         this.motionZ = ((NBTTagDouble)nbttaglist.tagAt(2)).data;
       } else {
          this.setDead();
       }
@@ -212,24 +225,24 @@
       return 1.0F;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
          this.setBeenAttacked();
-         if(var1.getEntity() != null) {
-            Vec3 var3 = var1.getEntity().getLookVec();
-            if(var3 != null) {
-               this.motionX = var3.xCoord;
-               this.motionY = var3.yCoord;
-               this.motionZ = var3.zCoord;
+         if(damagesource.getEntity() != null) {
+            Vec3 vec3d = damagesource.getEntity().getLookVec();
+            if(vec3d != null) {
+               this.motionX = vec3d.xCoord;
+               this.motionY = vec3d.yCoord;
+               this.motionZ = vec3d.zCoord;
                this.accelerationX = this.motionX * 0.1D;
                this.accelerationY = this.motionY * 0.1D;
                this.accelerationZ = this.motionZ * 0.1D;
             }
 
-            if(var1.getEntity() instanceof EntityLiving) {
-               this.shootingEntity = (EntityLiving)var1.getEntity();
+            if(damagesource.getEntity() instanceof EntityLiving) {
+               this.shootingEntity = (EntityLiving)damagesource.getEntity();
             }
 
             return true;
@@ -239,7 +252,7 @@
       }
    }
 
-   public float getBrightness(float var1) {
+   public float getBrightness(float f) {
       return 1.0F;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityFishHook.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityFishHook.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityFishHook.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityFishHook.java
--- mcp-mcdev/net/minecraft/src/EntityFishHook.java	2012-11-29 21:15:02.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityFishHook.java	2012-11-29 20:44:20.000000000 -0800
@@ -16,6 +16,9 @@
 import net.minecraft.src.StatList;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerFishEvent;
+import org.bukkit.event.player.PlayerFishEvent.State;
 
 public class EntityFishHook extends Entity {
 
@@ -38,69 +41,69 @@
    private double fishPitch;
 
 
-   public EntityFishHook(World var1) {
-      super(var1);
+   public EntityFishHook(World world) {
+      super(world);
       this.setSize(0.25F, 0.25F);
       this.ignoreFrustumCheck = true;
    }
 
-   public EntityFishHook(World var1, EntityPlayer var2) {
-      super(var1);
+   public EntityFishHook(World world, EntityPlayer entityhuman) {
+      super(world);
       this.ignoreFrustumCheck = true;
-      this.angler = var2;
+      this.angler = entityhuman;
       this.angler.fishEntity = this;
       this.setSize(0.25F, 0.25F);
-      this.setLocationAndAngles(var2.posX, var2.posY + 1.62D - (double)var2.yOffset, var2.posZ, var2.rotationYaw, var2.rotationPitch);
+      this.setLocationAndAngles(entityhuman.posX, entityhuman.posY + 1.62D - (double)entityhuman.yOffset, entityhuman.posZ, entityhuman.rotationYaw, entityhuman.rotationPitch);
       this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * 0.16F);
       this.posY -= 0.10000000149011612D;
       this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * 0.16F);
       this.setPosition(this.posX, this.posY, this.posZ);
       this.yOffset = 0.0F;
-      float var3 = 0.4F;
-      this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * var3);
-      this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * var3);
-      this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * 3.1415927F) * var3);
+      float f = 0.4F;
+      this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * f);
+      this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * f);
+      this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * 3.1415927F) * f);
       this.calculateVelocity(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
    }
 
    protected void entityInit() {}
 
-   public void calculateVelocity(double var1, double var3, double var5, float var7, float var8) {
-      float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-      var1 /= (double)var9;
-      var3 /= (double)var9;
-      var5 /= (double)var9;
-      var1 += this.rand.nextGaussian() * 0.007499999832361937D * (double)var8;
-      var3 += this.rand.nextGaussian() * 0.007499999832361937D * (double)var8;
-      var5 += this.rand.nextGaussian() * 0.007499999832361937D * (double)var8;
-      var1 *= (double)var7;
-      var3 *= (double)var7;
-      var5 *= (double)var7;
-      this.motionX = var1;
-      this.motionY = var3;
-      this.motionZ = var5;
-      float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-      this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / 3.1415927410125732D);
-      this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / 3.1415927410125732D);
+   public void calculateVelocity(double d0, double d1, double d2, float f, float f1) {
+      float f2 = MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2);
+      d0 /= (double)f2;
+      d1 /= (double)f2;
+      d2 /= (double)f2;
+      d0 += this.rand.nextGaussian() * 0.007499999832361937D * (double)f1;
+      d1 += this.rand.nextGaussian() * 0.007499999832361937D * (double)f1;
+      d2 += this.rand.nextGaussian() * 0.007499999832361937D * (double)f1;
+      d0 *= (double)f;
+      d1 *= (double)f;
+      d2 *= (double)f;
+      this.motionX = d0;
+      this.motionY = d1;
+      this.motionZ = d2;
+      float f3 = MathHelper.sqrt_double(d0 * d0 + d2 * d2);
+      this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(d0, d2) * 180.0D / 3.1415927410125732D);
+      this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(d1, (double)f3) * 180.0D / 3.1415927410125732D);
       this.ticksInGround = 0;
    }
 
    public void onUpdate() {
       super.onUpdate();
       if(this.fishPosRotationIncrements > 0) {
-         double var1 = this.posX + (this.fishX - this.posX) / (double)this.fishPosRotationIncrements;
-         double var3 = this.posY + (this.fishY - this.posY) / (double)this.fishPosRotationIncrements;
-         double var5 = this.posZ + (this.fishZ - this.posZ) / (double)this.fishPosRotationIncrements;
-         double var7 = MathHelper.wrapAngleTo180_double(this.fishYaw - (double)this.rotationYaw);
-         this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.fishPosRotationIncrements);
+         double d0 = this.posX + (this.fishX - this.posX) / (double)this.fishPosRotationIncrements;
+         double d1 = this.posY + (this.fishY - this.posY) / (double)this.fishPosRotationIncrements;
+         double d2 = this.posZ + (this.fishZ - this.posZ) / (double)this.fishPosRotationIncrements;
+         double d3 = MathHelper.wrapAngleTo180_double(this.fishYaw - (double)this.rotationYaw);
+         this.rotationYaw = (float)((double)this.rotationYaw + d3 / (double)this.fishPosRotationIncrements);
          this.rotationPitch = (float)((double)this.rotationPitch + (this.fishPitch - (double)this.rotationPitch) / (double)this.fishPosRotationIncrements);
          --this.fishPosRotationIncrements;
-         this.setPosition(var1, var3, var5);
+         this.setPosition(d0, d1, d2);
          this.setRotation(this.rotationYaw, this.rotationPitch);
       } else {
          if(!this.worldObj.isRemote) {
-            ItemStack var9 = this.angler.getCurrentEquippedItem();
-            if(this.angler.isDead || !this.angler.isEntityAlive() || var9 == null || var9.getItem() != Item.fishingRod || this.getDistanceSqToEntity(this.angler) > 1024.0D) {
+            ItemStack vec3d = this.angler.getCurrentEquippedItem();
+            if(this.angler.isDead || !this.angler.isEntityAlive() || vec3d == null || vec3d.getItem() != Item.fishingRod || this.getDistanceSqToEntity(this.angler) > 1024.0D) {
                this.setDead();
                this.angler.fishEntity = null;
                return;
@@ -144,43 +147,43 @@
          }
 
          Vec3 var36 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
-         Vec3 var10 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-         MovingObjectPosition var11 = this.worldObj.rayTraceBlocks(var36, var10);
+         Vec3 vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+         MovingObjectPosition movingobjectposition = this.worldObj.rayTraceBlocks(var36, vec3d1);
          var36 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
-         var10 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-         if(var11 != null) {
-            var10 = this.worldObj.getWorldVec3Pool().getVecFromPool(var11.hitVec.xCoord, var11.hitVec.yCoord, var11.hitVec.zCoord);
-         }
-
-         Entity var12 = null;
-         List var13 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-         double var14 = 0.0D;
-
-         double var21;
-         for(int var16 = 0; var16 < var13.size(); ++var16) {
-            Entity var17 = (Entity)var13.get(var16);
-            if(var17.canBeCollidedWith() && (var17 != this.angler || this.ticksInAir >= 5)) {
-               float var18 = 0.3F;
-               AxisAlignedBB var19 = var17.boundingBox.expand((double)var18, (double)var18, (double)var18);
-               MovingObjectPosition var20 = var19.calculateIntercept(var36, var10);
-               if(var20 != null) {
-                  var21 = var36.distanceTo(var20.hitVec);
-                  if(var21 < var14 || var14 == 0.0D) {
-                     var12 = var17;
-                     var14 = var21;
+         vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+         if(movingobjectposition != null) {
+            vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(movingobjectposition.hitVec.xCoord, movingobjectposition.hitVec.yCoord, movingobjectposition.hitVec.zCoord);
+         }
+
+         Entity entity = null;
+         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+         double d4 = 0.0D;
+
+         double d5;
+         for(int f1 = 0; f1 < list.size(); ++f1) {
+            Entity f2 = (Entity)list.get(f1);
+            if(f2.canBeCollidedWith() && (f2 != this.angler || this.ticksInAir >= 5)) {
+               float b0 = 0.3F;
+               AxisAlignedBB axisalignedbb = f2.boundingBox.expand((double)b0, (double)b0, (double)b0);
+               MovingObjectPosition movingobjectposition1 = axisalignedbb.calculateIntercept(var36, vec3d1);
+               if(movingobjectposition1 != null) {
+                  d5 = var36.squareDistanceTo(movingobjectposition1.hitVec);
+                  if(d5 < d4 || d4 == 0.0D) {
+                     entity = f2;
+                     d4 = d5;
                   }
                }
             }
          }
 
-         if(var12 != null) {
-            var11 = new MovingObjectPosition(var12);
+         if(entity != null) {
+            movingobjectposition = new MovingObjectPosition(entity);
          }
 
-         if(var11 != null) {
-            if(var11.entityHit != null) {
-               if(var11.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this, this.angler), 0)) {
-                  this.bobber = var11.entityHit;
+         if(movingobjectposition != null) {
+            if(movingobjectposition.entityHit != null) {
+               if(movingobjectposition.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this, this.angler), 0)) {
+                  this.bobber = movingobjectposition.entityHit;
                }
             } else {
                this.inGround = true;
@@ -216,18 +219,18 @@
             }
 
             byte var39 = 5;
-            double var23 = 0.0D;
+            double d6 = 0.0D;
 
-            for(int var25 = 0; var25 < var39; ++var25) {
-               double var26 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var25 + 0) / (double)var39 - 0.125D + 0.125D;
-               double var28 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var25 + 1) / (double)var39 - 0.125D + 0.125D;
-               AxisAlignedBB var30 = AxisAlignedBB.getAABBPool().addOrModifyAABBInPool(this.boundingBox.minX, var26, this.boundingBox.minZ, this.boundingBox.maxX, var28, this.boundingBox.maxZ);
-               if(this.worldObj.isAABBInMaterial(var30, Material.water)) {
-                  var23 += 1.0D / (double)var39;
+            for(int short1 = 0; short1 < var39; ++short1) {
+               double d7 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(short1 + 0) / (double)var39 - 0.125D + 0.125D;
+               double d8 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(short1 + 1) / (double)var39 - 0.125D + 0.125D;
+               AxisAlignedBB axisalignedbb1 = AxisAlignedBB.getAABBPool().addOrModifyAABBInPool(this.boundingBox.minX, d7, this.boundingBox.minZ, this.boundingBox.maxX, d8, this.boundingBox.maxZ);
+               if(this.worldObj.isAABBInMaterial(axisalignedbb1, Material.water)) {
+                  d6 += 1.0D / (double)var39;
                }
             }
 
-            if(var23 > 0.0D) {
+            if(d6 > 0.0D) {
                if(this.ticksCatchable > 0) {
                   --this.ticksCatchable;
                } else {
@@ -240,21 +243,21 @@
                      this.ticksCatchable = this.rand.nextInt(30) + 10;
                      this.motionY -= 0.20000000298023224D;
                      this.func_85030_a("random.splash", 0.25F, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
-                     float var31 = (float)MathHelper.floor_double(this.boundingBox.minY);
+                     float f3 = (float)MathHelper.floor_double(this.boundingBox.minY);
 
-                     float var34;
-                     int var32;
-                     float var33;
-                     for(var32 = 0; (float)var32 < 1.0F + this.width * 20.0F; ++var32) {
-                        var33 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-                        var34 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-                        this.worldObj.spawnParticle("bubble", this.posX + (double)var33, (double)(var31 + 1.0F), this.posZ + (double)var34, this.motionX, this.motionY - (double)(this.rand.nextFloat() * 0.2F), this.motionZ);
+                     float f4;
+                     int l;
+                     float f5;
+                     for(l = 0; (float)l < 1.0F + this.width * 20.0F; ++l) {
+                        f5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+                        f4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+                        this.worldObj.spawnParticle("bubble", this.posX + (double)f5, (double)(f3 + 1.0F), this.posZ + (double)f4, this.motionX, this.motionY - (double)(this.rand.nextFloat() * 0.2F), this.motionZ);
                      }
 
-                     for(var32 = 0; (float)var32 < 1.0F + this.width * 20.0F; ++var32) {
-                        var33 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-                        var34 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-                        this.worldObj.spawnParticle("splash", this.posX + (double)var33, (double)(var31 + 1.0F), this.posZ + (double)var34, this.motionX, this.motionY, this.motionZ);
+                     for(l = 0; (float)l < 1.0F + this.width * 20.0F; ++l) {
+                        f5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+                        f4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
+                        this.worldObj.spawnParticle("splash", this.posX + (double)f5, (double)(f3 + 1.0F), this.posZ + (double)f4, this.motionX, this.motionY, this.motionZ);
                      }
                   }
                }
@@ -264,9 +267,9 @@
                this.motionY -= (double)(this.rand.nextFloat() * this.rand.nextFloat() * this.rand.nextFloat()) * 0.2D;
             }
 
-            var21 = var23 * 2.0D - 1.0D;
-            this.motionY += 0.03999999910593033D * var21;
-            if(var23 > 0.0D) {
+            d5 = d6 * 2.0D - 1.0D;
+            this.motionY += 0.03999999910593033D * d5;
+            if(d6 > 0.0D) {
                var38 = (float)((double)var38 * 0.9D);
                this.motionY *= 0.8D;
             }
@@ -277,64 +280,95 @@
             this.setPosition(this.posX, this.posY, this.posZ);
          }
       }
+
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setShort("xTile", (short)this.xTile);
-      var1.setShort("yTile", (short)this.yTile);
-      var1.setShort("zTile", (short)this.zTile);
-      var1.setByte("inTile", (byte)this.inTile);
-      var1.setByte("shake", (byte)this.shake);
-      var1.setByte("inGround", (byte)(this.inGround?1:0));
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setShort("xTile", (short)this.xTile);
+      nbttagcompound.setShort("yTile", (short)this.yTile);
+      nbttagcompound.setShort("zTile", (short)this.zTile);
+      nbttagcompound.setByte("inTile", (byte)this.inTile);
+      nbttagcompound.setByte("shake", (byte)this.shake);
+      nbttagcompound.setByte("inGround", (byte)(this.inGround?1:0));
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      this.xTile = var1.getShort("xTile");
-      this.yTile = var1.getShort("yTile");
-      this.zTile = var1.getShort("zTile");
-      this.inTile = var1.getByte("inTile") & 255;
-      this.shake = var1.getByte("shake") & 255;
-      this.inGround = var1.getByte("inGround") == 1;
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.xTile = nbttagcompound.getShort("xTile");
+      this.yTile = nbttagcompound.getShort("yTile");
+      this.zTile = nbttagcompound.getShort("zTile");
+      this.inTile = nbttagcompound.getByte("inTile") & 255;
+      this.shake = nbttagcompound.getByte("shake") & 255;
+      this.inGround = nbttagcompound.getByte("inGround") == 1;
    }
 
    public int catchFish() {
       if(this.worldObj.isRemote) {
          return 0;
       } else {
-         byte var1 = 0;
+         byte b0 = 0;
+         PlayerFishEvent playerFishEvent;
          if(this.bobber != null) {
-            double var2 = this.angler.posX - this.posX;
-            double var4 = this.angler.posY - this.posY;
-            double var6 = this.angler.posZ - this.posZ;
-            double var8 = (double)MathHelper.sqrt_double(var2 * var2 + var4 * var4 + var6 * var6);
-            double var10 = 0.1D;
-            this.bobber.motionX += var2 * var10;
-            this.bobber.motionY += var4 * var10 + (double)MathHelper.sqrt_double(var8) * 0.08D;
-            this.bobber.motionZ += var6 * var10;
-            var1 = 3;
+            playerFishEvent = new PlayerFishEvent((Player)this.angler.getBukkitEntity(), this.bobber.getBukkitEntity(), State.CAUGHT_ENTITY);
+            this.worldObj.getServer().getPluginManager().callEvent(playerFishEvent);
+            if(playerFishEvent.isCancelled()) {
+               this.setDead();
+               this.angler.fishEntity = null;
+               return 0;
+            }
+
+            double d0 = this.angler.posX - this.posX;
+            double d1 = this.angler.posY - this.posY;
+            double d2 = this.angler.posZ - this.posZ;
+            double d3 = (double)MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2);
+            double d4 = 0.1D;
+            this.bobber.motionX += d0 * d4;
+            this.bobber.motionY += d1 * d4 + (double)MathHelper.sqrt_double(d3) * 0.08D;
+            this.bobber.motionZ += d2 * d4;
+            b0 = 3;
          } else if(this.ticksCatchable > 0) {
-            EntityItem var12 = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, new ItemStack(Item.fishRaw));
-            double var13 = this.angler.posX - this.posX;
-            double var15 = this.angler.posY - this.posY;
-            double var17 = this.angler.posZ - this.posZ;
-            double var19 = (double)MathHelper.sqrt_double(var13 * var13 + var15 * var15 + var17 * var17);
-            double var21 = 0.1D;
-            var12.motionX = var13 * var21;
-            var12.motionY = var15 * var21 + (double)MathHelper.sqrt_double(var19) * 0.08D;
-            var12.motionZ = var17 * var21;
-            this.worldObj.spawnEntityInWorld(var12);
+            EntityItem playerFishEvent2 = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, new ItemStack(Item.fishRaw));
+            PlayerFishEvent playerFishEvent1 = new PlayerFishEvent((Player)this.angler.getBukkitEntity(), playerFishEvent2.getBukkitEntity(), State.CAUGHT_FISH);
+            this.worldObj.getServer().getPluginManager().callEvent(playerFishEvent1);
+            if(playerFishEvent1.isCancelled()) {
+               this.setDead();
+               this.angler.fishEntity = null;
+               return 0;
+            }
+
+            double d5 = this.angler.posX - this.posX;
+            double d6 = this.angler.posY - this.posY;
+            double d7 = this.angler.posZ - this.posZ;
+            double d8 = (double)MathHelper.sqrt_double(d5 * d5 + d6 * d6 + d7 * d7);
+            double d9 = 0.1D;
+            playerFishEvent2.motionX = d5 * d9;
+            playerFishEvent2.motionY = d6 * d9 + (double)MathHelper.sqrt_double(d8) * 0.08D;
+            playerFishEvent2.motionZ = d7 * d9;
+            this.worldObj.spawnEntityInWorld(playerFishEvent2);
             this.angler.addStat(StatList.fishCaughtStat, 1);
             this.angler.worldObj.spawnEntityInWorld(new EntityXPOrb(this.angler.worldObj, this.angler.posX, this.angler.posY + 0.5D, this.angler.posZ + 0.5D, this.rand.nextInt(3) + 1));
-            var1 = 1;
+            b0 = 1;
          }
 
          if(this.inGround) {
-            var1 = 2;
+            playerFishEvent = new PlayerFishEvent((Player)this.angler.getBukkitEntity(), (org.bukkit.entity.Entity)null, State.IN_GROUND);
+            this.worldObj.getServer().getPluginManager().callEvent(playerFishEvent);
+            if(playerFishEvent.isCancelled()) {
+               this.setDead();
+               this.angler.fishEntity = null;
+               return 0;
+            }
+
+            b0 = 2;
+         }
+
+         if(b0 == 0) {
+            playerFishEvent = new PlayerFishEvent((Player)this.angler.getBukkitEntity(), (org.bukkit.entity.Entity)null, State.FAILED_ATTEMPT);
+            this.worldObj.getServer().getPluginManager().callEvent(playerFishEvent);
          }
 
          this.setDead();
          this.angler.fishEntity = null;
-         return var1;
+         return b0;
       }
    }
 
Binary files mcp-mcdev/net/minecraft/src/EntityGhast.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityGhast.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityGhast.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityGhast.java
--- mcp-mcdev/net/minecraft/src/EntityGhast.java	2012-11-29 21:15:02.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityGhast.java	2012-11-29 20:44:19.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.AchievementList;
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.DamageSource;
@@ -12,6 +13,11 @@
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 
 public class EntityGhast extends EntityFlying implements IMob {
 
@@ -25,23 +31,23 @@
    public int attackCounter = 0;
 
 
-   public EntityGhast(World var1) {
-      super(var1);
+   public EntityGhast(World world) {
+      super(world);
       this.texture = "/mob/ghast.png";
       this.setSize(4.0F, 4.0F);
       this.isImmuneToFire = true;
       this.experienceValue = 5;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
-      } else if("fireball".equals(var1.getDamageType()) && var1.getEntity() instanceof EntityPlayer) {
-         super.attackEntityFrom(var1, 1000);
-         ((EntityPlayer)var1.getEntity()).triggerAchievement(AchievementList.ghast);
+      } else if("fireball".equals(damagesource.getDamageType()) && damagesource.getEntity() instanceof EntityPlayer) {
+         super.attackEntityFrom(damagesource, 1000);
+         ((EntityPlayer)damagesource.getEntity()).triggerAchievement(AchievementList.ghast);
          return true;
       } else {
-         return super.attackEntityFrom(var1, var2);
+         return super.attackEntityFrom(damagesource, i);
       }
    }
 
@@ -56,8 +62,8 @@
 
    public void onUpdate() {
       super.onUpdate();
-      byte var1 = this.dataWatcher.getWatchableObjectByte(16);
-      this.texture = var1 == 1?"/mob/ghast_fire.png":"/mob/ghast.png";
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      this.texture = b0 == 1?"/mob/ghast_fire.png":"/mob/ghast.png";
    }
 
    protected void updateEntityActionState() {
@@ -67,11 +73,11 @@
 
       this.despawnEntity();
       this.prevAttackCounter = this.attackCounter;
-      double var1 = this.waypointX - this.posX;
-      double var3 = this.waypointY - this.posY;
-      double var5 = this.waypointZ - this.posZ;
-      double var7 = var1 * var1 + var3 * var3 + var5 * var5;
-      if(var7 < 1.0D || var7 > 3600.0D) {
+      double d0 = this.waypointX - this.posX;
+      double d1 = this.waypointY - this.posY;
+      double d2 = this.waypointZ - this.posZ;
+      double d3 = d0 * d0 + d1 * d1 + d2 * d2;
+      if(d3 < 1.0D || d3 > 3600.0D) {
          this.waypointX = this.posX + (double)((this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F);
          this.waypointY = this.posY + (double)((this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F);
          this.waypointZ = this.posZ + (double)((this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F);
@@ -79,11 +85,11 @@
 
       if(this.courseChangeCooldown-- <= 0) {
          this.courseChangeCooldown += this.rand.nextInt(5) + 2;
-         var7 = (double)MathHelper.sqrt_double(var7);
-         if(this.isCourseTraversable(this.waypointX, this.waypointY, this.waypointZ, var7)) {
-            this.motionX += var1 / var7 * 0.1D;
-            this.motionY += var3 / var7 * 0.1D;
-            this.motionZ += var5 / var7 * 0.1D;
+         d3 = (double)MathHelper.sqrt_double(d3);
+         if(this.isCourseTraversable(this.waypointX, this.waypointY, this.waypointZ, d3)) {
+            this.motionX += d0 / d3 * 0.1D;
+            this.motionY += d1 / d3 * 0.1D;
+            this.motionZ += d2 / d3 * 0.1D;
          } else {
             this.waypointX = this.posX;
             this.waypointY = this.posY;
@@ -92,22 +98,42 @@
       }
 
       if(this.targetedEntity != null && this.targetedEntity.isDead) {
-         this.targetedEntity = null;
+         EntityTargetEvent target = new EntityTargetEvent(this.getBukkitEntity(), (org.bukkit.entity.Entity)null, TargetReason.TARGET_DIED);
+         this.worldObj.getServer().getPluginManager().callEvent(target);
+         if(!target.isCancelled()) {
+            if(target.getTarget() == null) {
+               this.targetedEntity = null;
+            } else {
+               this.targetedEntity = ((CraftEntity)target.getTarget()).getHandle();
+            }
+         }
       }
 
       if(this.targetedEntity == null || this.aggroCooldown-- <= 0) {
-         this.targetedEntity = this.worldObj.getClosestVulnerablePlayerToEntity(this, 100.0D);
+         EntityPlayer var25 = this.worldObj.getClosestVulnerablePlayerToEntity(this, 100.0D);
+         if(var25 != null) {
+            EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), var25.getBukkitEntity(), TargetReason.CLOSEST_PLAYER);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            if(!event.isCancelled()) {
+               if(event.getTarget() == null) {
+                  this.targetedEntity = null;
+               } else {
+                  this.targetedEntity = ((CraftEntity)event.getTarget()).getHandle();
+               }
+            }
+         }
+
          if(this.targetedEntity != null) {
             this.aggroCooldown = 20;
          }
       }
 
-      double var9 = 64.0D;
-      if(this.targetedEntity != null && this.targetedEntity.getDistanceSqToEntity(this) < var9 * var9) {
-         double var11 = this.targetedEntity.posX - this.posX;
-         double var13 = this.targetedEntity.boundingBox.minY + (double)(this.targetedEntity.height / 2.0F) - (this.posY + (double)(this.height / 2.0F));
-         double var15 = this.targetedEntity.posZ - this.posZ;
-         this.renderYawOffset = this.rotationYaw = -((float)Math.atan2(var11, var15)) * 180.0F / 3.1415927F;
+      double d4 = 64.0D;
+      if(this.targetedEntity != null && this.targetedEntity.getDistanceSqToEntity(this) < d4 * d4) {
+         double d5 = this.targetedEntity.posX - this.posX;
+         double d6 = this.targetedEntity.boundingBox.minY + (double)(this.targetedEntity.height / 2.0F) - (this.posY + (double)(this.height / 2.0F));
+         double d7 = this.targetedEntity.posZ - this.posZ;
+         this.renderYawOffset = this.rotationYaw = -((float)Math.atan2(d5, d7)) * 180.0F / 3.1415927F;
          if(this.canEntityBeSeen(this.targetedEntity)) {
             if(this.attackCounter == 10) {
                this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1007, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
@@ -116,13 +142,13 @@
             ++this.attackCounter;
             if(this.attackCounter == 20) {
                this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1008, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
-               EntityLargeFireball var17 = new EntityLargeFireball(this.worldObj, this, var11, var13, var15);
-               double var18 = 4.0D;
-               Vec3 var20 = this.getLook(1.0F);
-               var17.posX = this.posX + var20.xCoord * var18;
-               var17.posY = this.posY + (double)(this.height / 2.0F) + 0.5D;
-               var17.posZ = this.posZ + var20.zCoord * var18;
-               this.worldObj.spawnEntityInWorld(var17);
+               EntityLargeFireball entitylargefireball = new EntityLargeFireball(this.worldObj, this, d5, d6, d7);
+               double d8 = 4.0D;
+               Vec3 vec3d = this.getLook(1.0F);
+               entitylargefireball.posX = this.posX + vec3d.xCoord * d8;
+               entitylargefireball.posY = this.posY + (double)(this.height / 2.0F) + 0.5D;
+               entitylargefireball.posZ = this.posZ + vec3d.zCoord * d8;
+               this.worldObj.spawnEntityInWorld(entitylargefireball);
                this.attackCounter = -40;
             }
          } else if(this.attackCounter > 0) {
@@ -136,24 +162,24 @@
       }
 
       if(!this.worldObj.isRemote) {
-         byte var21 = this.dataWatcher.getWatchableObjectByte(16);
-         byte var22 = (byte)(this.attackCounter > 10?1:0);
-         if(var21 != var22) {
-            this.dataWatcher.updateObject(16, Byte.valueOf(var22));
+         byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+         byte b1 = (byte)(this.attackCounter > 10?1:0);
+         if(b0 != b1) {
+            this.dataWatcher.updateObject(16, Byte.valueOf(b1));
          }
       }
 
    }
 
-   private boolean isCourseTraversable(double var1, double var3, double var5, double var7) {
-      double var9 = (this.waypointX - this.posX) / var7;
-      double var11 = (this.waypointY - this.posY) / var7;
-      double var13 = (this.waypointZ - this.posZ) / var7;
-      AxisAlignedBB var15 = this.boundingBox.copy();
+   private boolean isCourseTraversable(double d0, double d1, double d2, double d3) {
+      double d4 = (this.waypointX - this.posX) / d3;
+      double d5 = (this.waypointY - this.posY) / d3;
+      double d6 = (this.waypointZ - this.posZ) / d3;
+      AxisAlignedBB axisalignedbb = this.boundingBox.copy();
 
-      for(int var16 = 1; (double)var16 < var7; ++var16) {
-         var15.offset(var9, var11, var13);
-         if(!this.worldObj.getCollidingBoundingBoxes(this, var15).isEmpty()) {
+      for(int i = 1; (double)i < d3; ++i) {
+         axisalignedbb.offset(d4, d5, d6);
+         if(!this.worldObj.getCollidingBoundingBoxes(this, axisalignedbb).isEmpty()) {
             return false;
          }
       }
@@ -177,20 +203,19 @@
       return Item.gunpowder.shiftedIndex;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.rand.nextInt(2) + this.rand.nextInt(1 + var2);
-
-      int var4;
-      for(var4 = 0; var4 < var3; ++var4) {
-         this.dropItem(Item.ghastTear.shiftedIndex, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.rand.nextInt(2) + this.rand.nextInt(1 + i);
+      if(j > 0) {
+         loot.add(new CraftItemStack(Item.ghastTear.shiftedIndex, j));
       }
 
-      var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + var2);
-
-      for(var4 = 0; var4 < var3; ++var4) {
-         this.dropItem(Item.gunpowder.shiftedIndex, 1);
+      j = this.rand.nextInt(3) + this.rand.nextInt(1 + i);
+      if(j > 0) {
+         loot.add(new CraftItemStack(Item.gunpowder.shiftedIndex, j));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
    protected float getSoundVolume() {
Binary files mcp-mcdev/net/minecraft/src/EntityHanging.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityHanging.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityHanging.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityHanging.java
--- mcp-mcdev/net/minecraft/src/EntityHanging.java	2012-11-29 21:15:02.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityHanging.java	2012-11-29 20:44:19.000000000 -0800
@@ -5,11 +5,20 @@
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.Direction;
 import net.minecraft.src.Entity;
+import net.minecraft.src.EntityPainting;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.Material;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.Painting;
+import org.bukkit.event.Event;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.hanging.HangingBreakEvent;
+import org.bukkit.event.hanging.HangingBreakEvent.RemoveCause;
+import org.bukkit.event.painting.PaintingBreakByEntityEvent;
+import org.bukkit.event.painting.PaintingBreakEvent;
 
 public abstract class EntityHanging extends Entity {
 
@@ -20,89 +29,110 @@
    public int zPosition;
 
 
-   public EntityHanging(World var1) {
-      super(var1);
+   public EntityHanging(World world) {
+      super(world);
       this.tickCounter1 = 0;
       this.hangingDirection = 0;
       this.yOffset = 0.0F;
       this.setSize(0.5F, 0.5F);
    }
 
-   public EntityHanging(World var1, int var2, int var3, int var4, int var5) {
-      this(var1);
-      this.xPosition = var2;
-      this.yPosition = var3;
-      this.zPosition = var4;
+   public EntityHanging(World world, int i, int j, int k, int l) {
+      this(world);
+      this.xPosition = i;
+      this.yPosition = j;
+      this.zPosition = k;
    }
 
    protected void entityInit() {}
 
-   public void setDirection(int var1) {
-      this.hangingDirection = var1;
-      this.prevRotationYaw = this.rotationYaw = (float)(var1 * 90);
-      float var2 = (float)this.func_82329_d();
-      float var3 = (float)this.func_82330_g();
-      float var4 = (float)this.func_82329_d();
-      if(var1 != 2 && var1 != 0) {
-         var2 = 0.5F;
+   public void setDirection(int i) {
+      this.hangingDirection = i;
+      this.prevRotationYaw = this.rotationYaw = (float)(i * 90);
+      float f = (float)this.func_82329_d();
+      float f1 = (float)this.func_82330_g();
+      float f2 = (float)this.func_82329_d();
+      if(i != 2 && i != 0) {
+         f = 0.5F;
       } else {
-         var4 = 0.5F;
-         this.rotationYaw = this.prevRotationYaw = (float)(Direction.footInvisibleFaceRemap[var1] * 90);
+         f2 = 0.5F;
+         this.rotationYaw = this.prevRotationYaw = (float)(Direction.footInvisibleFaceRemap[i] * 90);
       }
 
-      var2 /= 32.0F;
-      var3 /= 32.0F;
-      var4 /= 32.0F;
-      float var5 = (float)this.xPosition + 0.5F;
-      float var6 = (float)this.yPosition + 0.5F;
-      float var7 = (float)this.zPosition + 0.5F;
-      float var8 = 0.5625F;
-      if(var1 == 2) {
-         var7 -= var8;
+      f /= 32.0F;
+      f1 /= 32.0F;
+      f2 /= 32.0F;
+      float f3 = (float)this.xPosition + 0.5F;
+      float f4 = (float)this.yPosition + 0.5F;
+      float f5 = (float)this.zPosition + 0.5F;
+      float f6 = 0.5625F;
+      if(i == 2) {
+         f5 -= f6;
       }
 
-      if(var1 == 1) {
-         var5 -= var8;
+      if(i == 1) {
+         f3 -= f6;
       }
 
-      if(var1 == 0) {
-         var7 += var8;
+      if(i == 0) {
+         f5 += f6;
       }
 
-      if(var1 == 3) {
-         var5 += var8;
+      if(i == 3) {
+         f3 += f6;
       }
 
-      if(var1 == 2) {
-         var5 -= this.func_70517_b(this.func_82329_d());
+      if(i == 2) {
+         f3 -= this.func_70517_b(this.func_82329_d());
       }
 
-      if(var1 == 1) {
-         var7 += this.func_70517_b(this.func_82329_d());
+      if(i == 1) {
+         f5 += this.func_70517_b(this.func_82329_d());
       }
 
-      if(var1 == 0) {
-         var5 += this.func_70517_b(this.func_82329_d());
+      if(i == 0) {
+         f3 += this.func_70517_b(this.func_82329_d());
       }
 
-      if(var1 == 3) {
-         var7 -= this.func_70517_b(this.func_82329_d());
+      if(i == 3) {
+         f5 -= this.func_70517_b(this.func_82329_d());
       }
 
-      var6 += this.func_70517_b(this.func_82330_g());
-      this.setPosition((double)var5, (double)var6, (double)var7);
-      float var9 = -0.03125F;
-      this.boundingBox.setBounds((double)(var5 - var2 - var9), (double)(var6 - var3 - var9), (double)(var7 - var4 - var9), (double)(var5 + var2 + var9), (double)(var6 + var3 + var9), (double)(var7 + var4 + var9));
+      f4 += this.func_70517_b(this.func_82330_g());
+      this.setPosition((double)f3, (double)f4, (double)f5);
+      float f7 = -0.03125F;
+      this.boundingBox.setBounds((double)(f3 - f - f7), (double)(f4 - f1 - f7), (double)(f5 - f2 - f7), (double)(f3 + f + f7), (double)(f4 + f1 + f7), (double)(f5 + f2 + f7));
    }
 
-   private float func_70517_b(int var1) {
-      return var1 == 32?0.5F:(var1 == 64?0.5F:0.0F);
+   private float func_70517_b(int i) {
+      return i == 32?0.5F:(i == 64?0.5F:0.0F);
    }
 
    public void onUpdate() {
       if(this.tickCounter1++ == 100 && !this.worldObj.isRemote) {
          this.tickCounter1 = 0;
          if(!this.isDead && !this.onValidSurface()) {
+            Material material = this.worldObj.getBlockMaterial((int)this.posX, (int)this.posY, (int)this.posZ);
+            RemoveCause cause;
+            if(!material.equals(Material.air)) {
+               cause = RemoveCause.OBSTRUCTION;
+            } else {
+               cause = RemoveCause.PHYSICS;
+            }
+
+            HangingBreakEvent event = new HangingBreakEvent((Hanging)this.getBukkitEntity(), cause);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            PaintingBreakEvent paintingEvent = null;
+            if(this instanceof EntityPainting) {
+               paintingEvent = new PaintingBreakEvent((Painting)this.getBukkitEntity(), org.bukkit.event.painting.PaintingBreakEvent.RemoveCause.valueOf(cause.name()));
+               paintingEvent.setCancelled(event.isCancelled());
+               this.worldObj.getServer().getPluginManager().callEvent(paintingEvent);
+            }
+
+            if(this.isDead || event.isCancelled() || paintingEvent != null && paintingEvent.isCancelled()) {
+               return;
+            }
+
             this.setDead();
             this.dropItemStack();
          }
@@ -114,39 +144,39 @@
       if(!this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty()) {
          return false;
       } else {
-         int var1 = Math.max(1, this.func_82329_d() / 16);
-         int var2 = Math.max(1, this.func_82330_g() / 16);
-         int var3 = this.xPosition;
-         int var4 = this.yPosition;
-         int var5 = this.zPosition;
+         int i = Math.max(1, this.func_82329_d() / 16);
+         int j = Math.max(1, this.func_82330_g() / 16);
+         int k = this.xPosition;
+         int l = this.yPosition;
+         int i1 = this.zPosition;
          if(this.hangingDirection == 2) {
-            var3 = MathHelper.floor_double(this.posX - (double)((float)this.func_82329_d() / 32.0F));
+            k = MathHelper.floor_double(this.posX - (double)((float)this.func_82329_d() / 32.0F));
          }
 
          if(this.hangingDirection == 1) {
-            var5 = MathHelper.floor_double(this.posZ - (double)((float)this.func_82329_d() / 32.0F));
+            i1 = MathHelper.floor_double(this.posZ - (double)((float)this.func_82329_d() / 32.0F));
          }
 
          if(this.hangingDirection == 0) {
-            var3 = MathHelper.floor_double(this.posX - (double)((float)this.func_82329_d() / 32.0F));
+            k = MathHelper.floor_double(this.posX - (double)((float)this.func_82329_d() / 32.0F));
          }
 
          if(this.hangingDirection == 3) {
-            var5 = MathHelper.floor_double(this.posZ - (double)((float)this.func_82329_d() / 32.0F));
+            i1 = MathHelper.floor_double(this.posZ - (double)((float)this.func_82329_d() / 32.0F));
          }
 
-         var4 = MathHelper.floor_double(this.posY - (double)((float)this.func_82330_g() / 32.0F));
+         l = MathHelper.floor_double(this.posY - (double)((float)this.func_82330_g() / 32.0F));
 
-         for(int var6 = 0; var6 < var1; ++var6) {
-            for(int var7 = 0; var7 < var2; ++var7) {
-               Material var8;
+         for(int list = 0; list < i; ++list) {
+            for(int iterator = 0; iterator < j; ++iterator) {
+               Material entity;
                if(this.hangingDirection != 2 && this.hangingDirection != 0) {
-                  var8 = this.worldObj.getBlockMaterial(this.xPosition, var4 + var7, var5 + var6);
+                  entity = this.worldObj.getBlockMaterial(this.xPosition, l + iterator, i1 + list);
                } else {
-                  var8 = this.worldObj.getBlockMaterial(var3 + var6, var4 + var7, this.zPosition);
+                  entity = this.worldObj.getBlockMaterial(k + list, l + iterator, this.zPosition);
                }
 
-               if(!var8.isSolid()) {
+               if(!entity.isSolid()) {
                   return false;
                }
             }
@@ -155,16 +185,14 @@
          List var9 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox);
          Iterator var10 = var9.iterator();
 
-         Entity var11;
-         do {
-            if(!var10.hasNext()) {
-               return true;
+         while(var10.hasNext()) {
+            Entity var11 = (Entity)var10.next();
+            if(var11 instanceof EntityHanging) {
+               return false;
             }
+         }
 
-            var11 = (Entity)var10.next();
-         } while(!(var11 instanceof EntityHanging));
-
-         return false;
+         return true;
       }
    }
 
@@ -172,23 +200,44 @@
       return true;
    }
 
-   public boolean func_85031_j(Entity var1) {
-      return var1 instanceof EntityPlayer?this.attackEntityFrom(DamageSource.causePlayerDamage((EntityPlayer)var1), 0):false;
+   public boolean func_85031_j(Entity entity) {
+      return entity instanceof EntityPlayer?this.attackEntityFrom(DamageSource.causePlayerDamage((EntityPlayer)entity), 0):false;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
          if(!this.isDead && !this.worldObj.isRemote) {
+            Object event = new HangingBreakEvent((Hanging)this.getBukkitEntity(), RemoveCause.DEFAULT);
+            PaintingBreakByEntityEvent paintingEvent = null;
+            if(damagesource.getEntity() != null) {
+               event = new HangingBreakByEntityEvent((Hanging)this.getBukkitEntity(), damagesource.getEntity() == null?null:damagesource.getEntity().getBukkitEntity());
+               if(this instanceof EntityPainting) {
+                  paintingEvent = new PaintingBreakByEntityEvent((Painting)this.getBukkitEntity(), damagesource.getEntity() == null?null:damagesource.getEntity().getBukkitEntity());
+               }
+            } else if(damagesource == DamageSource.explosion || damagesource == DamageSource.field_76375_l) {
+               event = new HangingBreakEvent((Hanging)this.getBukkitEntity(), RemoveCause.EXPLOSION);
+            }
+
+            this.worldObj.getServer().getPluginManager().callEvent((Event)event);
+            if(paintingEvent != null) {
+               paintingEvent.setCancelled(((HangingBreakEvent)event).isCancelled());
+               this.worldObj.getServer().getPluginManager().callEvent(paintingEvent);
+            }
+
+            if(this.isDead || ((HangingBreakEvent)event).isCancelled() || paintingEvent != null && paintingEvent.isCancelled()) {
+               return true;
+            }
+
             this.setDead();
             this.setBeenAttacked();
-            EntityPlayer var3 = null;
-            if(var1.getEntity() instanceof EntityPlayer) {
-               var3 = (EntityPlayer)var1.getEntity();
+            EntityPlayer entityhuman = null;
+            if(damagesource.getEntity() instanceof EntityPlayer) {
+               entityhuman = (EntityPlayer)damagesource.getEntity();
             }
 
-            if(var3 != null && var3.capabilities.isCreativeMode) {
+            if(entityhuman != null && entityhuman.capabilities.isCreativeMode) {
                return true;
             }
 
@@ -199,48 +248,46 @@
       }
    }
 
-   public void moveEntity(double var1, double var3, double var5) {
-      if(!this.worldObj.isRemote && !this.isDead && var1 * var1 + var3 * var3 + var5 * var5 > 0.0D) {
-         this.setDead();
-         this.dropItemStack();
-      }
+   public void moveEntity(double d0, double d1, double d2) {
+      if(!this.worldObj.isRemote && !this.isDead && d0 * d0 + d1 * d1 + d2 * d2 > 0.0D) {
+         if(this.isDead) {
+            return;
+         }
 
-   }
-
-   public void addVelocity(double var1, double var3, double var5) {
-      if(!this.worldObj.isRemote && !this.isDead && var1 * var1 + var3 * var3 + var5 * var5 > 0.0D) {
          this.setDead();
          this.dropItemStack();
       }
 
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setByte("Direction", (byte)this.hangingDirection);
-      var1.setInteger("TileX", this.xPosition);
-      var1.setInteger("TileY", this.yPosition);
-      var1.setInteger("TileZ", this.zPosition);
+   public void addVelocity(double d0, double d1, double d2) {}
+
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setByte("Direction", (byte)this.hangingDirection);
+      nbttagcompound.setInteger("TileX", this.xPosition);
+      nbttagcompound.setInteger("TileY", this.yPosition);
+      nbttagcompound.setInteger("TileZ", this.zPosition);
       switch(this.hangingDirection) {
       case 0:
-         var1.setByte("Dir", (byte)2);
+         nbttagcompound.setByte("Dir", (byte)2);
          break;
       case 1:
-         var1.setByte("Dir", (byte)1);
+         nbttagcompound.setByte("Dir", (byte)1);
          break;
       case 2:
-         var1.setByte("Dir", (byte)0);
+         nbttagcompound.setByte("Dir", (byte)0);
          break;
       case 3:
-         var1.setByte("Dir", (byte)3);
+         nbttagcompound.setByte("Dir", (byte)3);
       }
 
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      if(var1.hasKey("Direction")) {
-         this.hangingDirection = var1.getByte("Direction");
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      if(nbttagcompound.hasKey("Direction")) {
+         this.hangingDirection = nbttagcompound.getByte("Direction");
       } else {
-         switch(var1.getByte("Dir")) {
+         switch(nbttagcompound.getByte("Dir")) {
          case 0:
             this.hangingDirection = 2;
             break;
@@ -255,9 +302,9 @@
          }
       }
 
-      this.xPosition = var1.getInteger("TileX");
-      this.yPosition = var1.getInteger("TileY");
-      this.zPosition = var1.getInteger("TileZ");
+      this.xPosition = nbttagcompound.getInteger("TileX");
+      this.yPosition = nbttagcompound.getInteger("TileY");
+      this.zPosition = nbttagcompound.getInteger("TileZ");
       this.setDirection(this.hangingDirection);
    }
 
Binary files mcp-mcdev/net/minecraft/src/EntityIronGolem.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityIronGolem.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityIronGolem.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityIronGolem.java
--- mcp-mcdev/net/minecraft/src/EntityIronGolem.java	2012-11-29 21:15:01.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityIronGolem.java	2012-11-29 20:44:19.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.Block;
 import net.minecraft.src.ChunkCoordinates;
 import net.minecraft.src.DamageSource;
@@ -24,6 +25,8 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.Village;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 
 public class EntityIronGolem extends EntityGolem {
 
@@ -33,8 +36,8 @@
    private int holdRoseTick;
 
 
-   public EntityIronGolem(World var1) {
-      super(var1);
+   public EntityIronGolem(World world) {
+      super(world);
       this.texture = "/mob/villager_golem.png";
       this.setSize(1.4F, 2.9F);
       this.getNavigator().setAvoidsWater(true);
@@ -67,8 +70,8 @@
          if(this.villageObj == null) {
             this.detachHome();
          } else {
-            ChunkCoordinates var1 = this.villageObj.getCenter();
-            this.setHomeArea(var1.posX, var1.posY, var1.posZ, (int)((float)this.villageObj.getVillageRadius() * 0.6F));
+            ChunkCoordinates chunkcoordinates = this.villageObj.getCenter();
+            this.setHomeArea(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, (int)((float)this.villageObj.getVillageRadius() * 0.6F));
          }
       }
 
@@ -79,16 +82,16 @@
       return 100;
    }
 
-   protected int decreaseAirSupply(int var1) {
-      return var1;
+   protected int decreaseAirSupply(int i) {
+      return i;
    }
 
-   protected void collideWithEntity(Entity var1) {
-      if(var1 instanceof IMob && this.getRNG().nextInt(20) == 0) {
-         this.setAttackTarget((EntityLiving)var1);
+   protected void collideWithEntity(Entity entity) {
+      if(entity instanceof IMob && this.getRNG().nextInt(20) == 0) {
+         this.setAttackTarget((EntityLiving)entity);
       }
 
-      super.collideWithEntity(var1);
+      super.collideWithEntity(entity);
    }
 
    public void onLivingUpdate() {
@@ -102,49 +105,49 @@
       }
 
       if(this.motionX * this.motionX + this.motionZ * this.motionZ > 2.500000277905201E-7D && this.rand.nextInt(5) == 0) {
-         int var1 = MathHelper.floor_double(this.posX);
-         int var2 = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
-         int var3 = MathHelper.floor_double(this.posZ);
-         int var4 = this.worldObj.getBlockId(var1, var2, var3);
-         if(var4 > 0) {
-            this.worldObj.spawnParticle("tilecrack_" + var4 + "_" + this.worldObj.getBlockMetadata(var1, var2, var3), this.posX + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, this.boundingBox.minY + 0.1D, this.posZ + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, 4.0D * ((double)this.rand.nextFloat() - 0.5D), 0.5D, ((double)this.rand.nextFloat() - 0.5D) * 4.0D);
+         int i = MathHelper.floor_double(this.posX);
+         int j = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
+         int k = MathHelper.floor_double(this.posZ);
+         int l = this.worldObj.getBlockId(i, j, k);
+         if(l > 0) {
+            this.worldObj.spawnParticle("tilecrack_" + l + "_" + this.worldObj.getBlockMetadata(i, j, k), this.posX + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, this.boundingBox.minY + 0.1D, this.posZ + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, 4.0D * ((double)this.rand.nextFloat() - 0.5D), 0.5D, ((double)this.rand.nextFloat() - 0.5D) * 4.0D);
          }
       }
 
    }
 
-   public boolean canAttackClass(Class var1) {
-      return this.isPlayerCreated() && EntityPlayer.class.isAssignableFrom(var1)?false:super.canAttackClass(var1);
+   public boolean canAttackClass(Class oclass) {
+      return this.isPlayerCreated() && EntityPlayer.class.isAssignableFrom(oclass)?false:super.canAttackClass(oclass);
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setBoolean("PlayerCreated", this.isPlayerCreated());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setBoolean("PlayerCreated", this.isPlayerCreated());
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.setPlayerCreated(var1.getBoolean("PlayerCreated"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.setPlayerCreated(nbttagcompound.getBoolean("PlayerCreated"));
    }
 
-   public boolean attackEntityAsMob(Entity var1) {
+   public boolean attackEntityAsMob(Entity entity) {
       this.attackTimer = 10;
       this.worldObj.setEntityState(this, (byte)4);
-      boolean var2 = var1.attackEntityFrom(DamageSource.causeMobDamage(this), 7 + this.rand.nextInt(15));
-      if(var2) {
-         var1.motionY += 0.4000000059604645D;
+      boolean flag = entity.attackEntityFrom(DamageSource.causeMobDamage(this), 7 + this.rand.nextInt(15));
+      if(flag) {
+         entity.motionY += 0.4000000059604645D;
       }
 
       this.func_85030_a("mob.irongolem.throw", 1.0F, 1.0F);
-      return var2;
+      return flag;
    }
 
    public Village getVillage() {
       return this.villageObj;
    }
 
-   public void setHoldingRose(boolean var1) {
-      this.holdRoseTick = var1?400:0;
+   public void setHoldingRose(boolean flag) {
+      this.holdRoseTick = flag?400:0;
       this.worldObj.setEntityState(this, (byte)11);
    }
 
@@ -160,24 +163,23 @@
       return "mob.irongolem.death";
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.irongolem.walk", 1.0F, 1.0F);
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.rand.nextInt(3);
-
-      int var4;
-      for(var4 = 0; var4 < var3; ++var4) {
-         this.dropItem(Block.plantRed.blockID, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.rand.nextInt(3);
+      if(j > 0) {
+         loot.add(new CraftItemStack(Block.plantRed.blockID, j));
       }
 
-      var4 = 3 + this.rand.nextInt(3);
-
-      for(int var5 = 0; var5 < var4; ++var5) {
-         this.dropItem(Item.ingotIron.shiftedIndex, 1);
+      int k = 3 + this.rand.nextInt(3);
+      if(k > 0) {
+         loot.add(new CraftItemStack(Item.ingotIron.shiftedIndex, k));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
    public int getHoldRoseTick() {
@@ -188,21 +190,21 @@
       return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
    }
 
-   public void setPlayerCreated(boolean var1) {
-      byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-      if(var1) {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 | 1)));
+   public void setPlayerCreated(boolean flag) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      if(flag) {
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 | 1)));
       } else {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 & -2)));
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 & -2)));
       }
 
    }
 
-   public void onDeath(DamageSource var1) {
+   public void onDeath(DamageSource damagesource) {
       if(!this.isPlayerCreated() && this.attackingPlayer != null && this.villageObj != null) {
          this.villageObj.setReputationForPlayer(this.attackingPlayer.getCommandSenderName(), -5);
       }
 
-      super.onDeath(var1);
+      super.onDeath(damagesource);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityItem.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityItem.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityItem.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityItem.java
--- mcp-mcdev/net/minecraft/src/EntityItem.java	2012-11-29 21:15:01.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityItem.java	2012-11-29 20:44:19.000000000 -0800
@@ -13,6 +13,9 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.StatCollector;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerPickupItemEvent;
 
 public class EntityItem extends Entity {
 
@@ -21,26 +24,35 @@
    public int delayBeforeCanPickup;
    private int health = 5;
    public float hoverStart = (float)(Math.random() * 3.141592653589793D * 2.0D);
+   private int lastTick = (int)(System.currentTimeMillis() / 50L);
 
 
-   public EntityItem(World var1, double var2, double var4, double var6, ItemStack var8) {
-      super(var1);
+   public EntityItem(World world, double d0, double d1, double d2, ItemStack itemstack) {
+      super(world);
       this.setSize(0.25F, 0.25F);
       this.yOffset = this.height / 2.0F;
-      this.setPosition(var2, var4, var6);
-      this.item = var8;
-      this.rotationYaw = (float)(Math.random() * 360.0D);
-      this.motionX = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D));
-      this.motionY = 0.20000000298023224D;
-      this.motionZ = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+      this.setPosition(d0, d1, d2);
+      this.item = itemstack;
+      if(this.item == null) {
+         throw new IllegalArgumentException("Can\'t create an EntityItem for a null item");
+      } else {
+         if(this.item.stackSize <= -1) {
+            this.item.stackSize = 1;
+         }
+
+         this.rotationYaw = (float)(Math.random() * 360.0D);
+         this.motionX = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+         this.motionY = 0.20000000298023224D;
+         this.motionZ = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D));
+      }
    }
 
    protected boolean canTriggerWalking() {
       return false;
    }
 
-   public EntityItem(World var1) {
-      super(var1);
+   public EntityItem(World world) {
+      super(world);
       this.setSize(0.25F, 0.25F);
       this.yOffset = this.height / 2.0F;
    }
@@ -49,18 +61,17 @@
 
    public void onUpdate() {
       super.onUpdate();
-      if(this.delayBeforeCanPickup > 0) {
-         --this.delayBeforeCanPickup;
-      }
-
+      int currentTick = (int)(System.currentTimeMillis() / 50L);
+      this.delayBeforeCanPickup -= currentTick - this.lastTick;
+      this.lastTick = currentTick;
       this.prevPosX = this.posX;
       this.prevPosY = this.posY;
       this.prevPosZ = this.posZ;
       this.motionY -= 0.03999999910593033D;
       this.noClip = this.pushOutOfBlocks(this.posX, (this.boundingBox.minY + this.boundingBox.maxY) / 2.0D, this.posZ);
       this.moveEntity(this.motionX, this.motionY, this.motionZ);
-      boolean var1 = (int)this.prevPosX != (int)this.posX || (int)this.prevPosY != (int)this.posY || (int)this.prevPosZ != (int)this.posZ;
-      if(var1) {
+      boolean flag = (int)this.prevPosX != (int)this.posX || (int)this.prevPosY != (int)this.posY || (int)this.prevPosZ != (int)this.posZ;
+      if(flag) {
          if(this.worldObj.getBlockMaterial(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) == Material.lava) {
             this.motionY = 0.20000000298023224D;
             this.motionX = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
@@ -73,61 +84,68 @@
          }
       }
 
-      float var2 = 0.98F;
+      float f = 0.98F;
       if(this.onGround) {
-         var2 = 0.58800006F;
-         int var3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-         if(var3 > 0) {
-            var2 = Block.blocksList[var3].slipperiness * 0.98F;
+         f = 0.58800006F;
+         int i = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+         if(i > 0) {
+            f = Block.blocksList[i].slipperiness * 0.98F;
          }
       }
 
-      this.motionX *= (double)var2;
+      this.motionX *= (double)f;
       this.motionY *= 0.9800000190734863D;
-      this.motionZ *= (double)var2;
+      this.motionZ *= (double)f;
       if(this.onGround) {
          this.motionY *= -0.5D;
       }
 
       ++this.age;
       if(!this.worldObj.isRemote && this.age >= 6000) {
+         if(CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+            this.age = 0;
+            return;
+         }
+
          this.setDead();
       }
 
    }
 
    private void func_85054_d() {
-      Iterator var1 = this.worldObj.getEntitiesWithinAABB(EntityItem.class, this.boundingBox.expand(0.5D, 0.0D, 0.5D)).iterator();
+      Iterator iterator = this.worldObj.getEntitiesWithinAABB(EntityItem.class, this.boundingBox.expand(0.5D, 0.0D, 0.5D)).iterator();
 
-      while(var1.hasNext()) {
-         EntityItem var2 = (EntityItem)var1.next();
-         this.func_70289_a(var2);
+      while(iterator.hasNext()) {
+         EntityItem entityitem = (EntityItem)iterator.next();
+         this.func_70289_a(entityitem);
       }
 
    }
 
-   public boolean func_70289_a(EntityItem var1) {
-      if(var1 == this) {
+   public boolean func_70289_a(EntityItem entityitem) {
+      if(entityitem == this) {
          return false;
-      } else if(var1.isEntityAlive() && this.isEntityAlive()) {
-         if(var1.item.getItem() != this.item.getItem()) {
+      } else if(entityitem.isEntityAlive() && this.isEntityAlive()) {
+         if(entityitem.item.getItem() != this.item.getItem()) {
             return false;
-         } else if(var1.item.hasTagCompound() ^ this.item.hasTagCompound()) {
+         } else if(entityitem.item.hasTagCompound() ^ this.item.hasTagCompound()) {
             return false;
-         } else if(var1.item.hasTagCompound() && !var1.item.getTagCompound().equals(this.item.getTagCompound())) {
+         } else if(entityitem.item.hasTagCompound() && !entityitem.item.getTagCompound().equals(this.item.getTagCompound())) {
             return false;
-         } else if(var1.item.getItem().getHasSubtypes() && var1.item.getItemDamage() != this.item.getItemDamage()) {
+         } else if(entityitem.item.getItem().getHasSubtypes() && entityitem.item.getItemDamage() != this.item.getItemDamage()) {
             return false;
-         } else if(var1.item.stackSize < this.item.stackSize) {
-            return var1.func_70289_a(this);
-         } else if(var1.item.stackSize + this.item.stackSize > var1.item.getMaxStackSize()) {
+         } else if(entityitem.item.stackSize < this.item.stackSize) {
+            return entityitem.func_70289_a(this);
+         } else if(entityitem.item.stackSize + this.item.stackSize > entityitem.item.getMaxStackSize()) {
             return false;
-         } else {
-            var1.item.stackSize += this.item.stackSize;
-            var1.delayBeforeCanPickup = Math.max(var1.delayBeforeCanPickup, this.delayBeforeCanPickup);
-            var1.age = Math.min(var1.age, this.age);
+         } else if(!entityitem.item.isItemEnchanted() && !this.item.isItemEnchanted()) {
+            entityitem.item.stackSize += this.item.stackSize;
+            entityitem.delayBeforeCanPickup = Math.max(entityitem.delayBeforeCanPickup, this.delayBeforeCanPickup);
+            entityitem.age = Math.min(entityitem.age, this.age);
             this.setDead();
             return true;
+         } else {
+            return false;
          }
       } else {
          return false;
@@ -142,16 +160,16 @@
       return this.worldObj.handleMaterialAcceleration(this.boundingBox, Material.water, this);
    }
 
-   protected void dealFireDamage(int var1) {
-      this.attackEntityFrom(DamageSource.inFire, var1);
+   protected void dealFireDamage(int i) {
+      this.attackEntityFrom(DamageSource.inFire, i);
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
          this.setBeenAttacked();
-         this.health -= var2;
+         this.health -= i;
          if(this.health <= 0) {
             this.setDead();
          }
@@ -160,66 +178,80 @@
       }
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setShort("Health", (short)((byte)this.health));
-      var1.setShort("Age", (short)this.age);
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setShort("Health", (short)((byte)this.health));
+      nbttagcompound.setShort("Age", (short)this.age);
       if(this.item != null) {
-         var1.setCompoundTag("Item", this.item.writeToNBT(new NBTTagCompound()));
+         nbttagcompound.setCompoundTag("Item", this.item.writeToNBT(new NBTTagCompound()));
       }
 
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      this.health = var1.getShort("Health") & 255;
-      this.age = var1.getShort("Age");
-      NBTTagCompound var2 = var1.getCompoundTag("Item");
-      this.item = ItemStack.loadItemStackFromNBT(var2);
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.health = nbttagcompound.getShort("Health") & 255;
+      this.age = nbttagcompound.getShort("Age");
+      NBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag("Item");
+      this.item = ItemStack.loadItemStackFromNBT(nbttagcompound1);
       if(this.item == null) {
          this.setDead();
       }
 
    }
 
-   public void onCollideWithPlayer(EntityPlayer var1) {
-      if(!this.worldObj.isRemote) {
-         int var2 = this.item.stackSize;
-         if(this.delayBeforeCanPickup == 0 && var1.inventory.addItemStackToInventory(this.item)) {
+   public void onCollideWithPlayer(EntityPlayer entityhuman) {
+      if(!this.worldObj.isRemote && this.item != null) {
+         int i = this.item.stackSize;
+         int canHold = entityhuman.inventory.canHold(this.item);
+         int remaining = this.item.stackSize - canHold;
+         if(this.delayBeforeCanPickup <= 0 && canHold > 0) {
+            this.item.stackSize = canHold;
+            PlayerPickupItemEvent event = new PlayerPickupItemEvent((Player)entityhuman.getBukkitEntity(), (org.bukkit.entity.Item)this.getBukkitEntity(), remaining);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            this.item.stackSize = canHold + remaining;
+            if(event.isCancelled()) {
+               return;
+            }
+
+            this.delayBeforeCanPickup = 0;
+         }
+
+         if(this.delayBeforeCanPickup == 0 && entityhuman.inventory.addItemStackToInventory(this.item)) {
             if(this.item.itemID == Block.wood.blockID) {
-               var1.triggerAchievement(AchievementList.mineWood);
+               entityhuman.triggerAchievement(AchievementList.mineWood);
             }
 
             if(this.item.itemID == Item.leather.shiftedIndex) {
-               var1.triggerAchievement(AchievementList.killCow);
+               entityhuman.triggerAchievement(AchievementList.killCow);
             }
 
             if(this.item.itemID == Item.diamond.shiftedIndex) {
-               var1.triggerAchievement(AchievementList.diamonds);
+               entityhuman.triggerAchievement(AchievementList.diamonds);
             }
 
             if(this.item.itemID == Item.blazeRod.shiftedIndex) {
-               var1.triggerAchievement(AchievementList.blazeRod);
+               entityhuman.triggerAchievement(AchievementList.blazeRod);
             }
 
             this.func_85030_a("random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            var1.onItemPickup(this, var2);
+            entityhuman.onItemPickup(this, i);
             if(this.item.stackSize <= 0) {
                this.setDead();
             }
          }
-
       }
+
    }
 
    public String getEntityName() {
-      return StatCollector.translateToLocal("item." + this.item.getItemName());
+      return this.item == null?StatCollector.translateToLocal("item.unknown"):StatCollector.translateToLocal("item." + this.item.getItemName());
    }
 
    public boolean canAttackWithItem() {
       return false;
    }
 
-   public void travelToTheEnd(int var1) {
-      super.travelToTheEnd(var1);
+   public void travelToTheEnd(int i) {
+      super.travelToTheEnd(i);
       if(!this.worldObj.isRemote) {
          this.func_85054_d();
       }
Binary files mcp-mcdev/net/minecraft/src/EntityLargeFireball.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLargeFireball.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityLargeFireball.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLargeFireball.java
--- mcp-mcdev/net/minecraft/src/EntityLargeFireball.java	2012-11-29 21:15:01.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLargeFireball.java	2012-11-29 20:44:19.000000000 -0800
@@ -1,29 +1,36 @@
 package net.minecraft.src;
 
 import net.minecraft.src.DamageSource;
-import net.minecraft.src.Entity;
 import net.minecraft.src.EntityFireball;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.Explosive;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
 
 public class EntityLargeFireball extends EntityFireball {
 
-   public EntityLargeFireball(World var1) {
-      super(var1);
+   public EntityLargeFireball(World world) {
+      super(world);
    }
 
-   public EntityLargeFireball(World var1, EntityLiving var2, double var3, double var5, double var7) {
-      super(var1, var2, var3, var5, var7);
+   public EntityLargeFireball(World world, EntityLiving entityliving, double d0, double d1, double d2) {
+      super(world, entityliving, d0, d1, d2);
    }
 
-   protected void onImpact(MovingObjectPosition var1) {
+   protected void onImpact(MovingObjectPosition movingobjectposition) {
       if(!this.worldObj.isRemote) {
-         if(var1.entityHit != null) {
-            var1.entityHit.attackEntityFrom(DamageSource.causeFireballDamage(this, this.shootingEntity), 6);
+         if(movingobjectposition.entityHit != null) {
+            movingobjectposition.entityHit.attackEntityFrom(DamageSource.causeFireballDamage(this, this.shootingEntity), 6);
+         }
+
+         ExplosionPrimeEvent event = new ExplosionPrimeEvent((Explosive)CraftEntity.getEntity(this.worldObj.getServer(), this));
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(!event.isCancelled()) {
+            this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, event.getRadius(), event.getFire(), this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
          }
 
-         this.worldObj.newExplosion((Entity)null, this.posX, this.posY, this.posZ, 1.0F, true, this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
          this.setDead();
       }
 
Binary files mcp-mcdev/net/minecraft/src/EntityLightningBolt.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLightningBolt.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityLightningBolt.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLightningBolt.java
--- mcp-mcdev/net/minecraft/src/EntityLightningBolt.java	2012-11-29 21:15:01.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLightningBolt.java	2012-11-29 20:44:19.000000000 -0800
@@ -8,34 +8,56 @@
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockIgniteEvent;
+import org.bukkit.event.block.BlockIgniteEvent.IgniteCause;
 
 public class EntityLightningBolt extends EntityWeatherEffect {
 
    private int lightningState;
-   public long boltVertex = 0L;
+   public long boltVertex;
    private int boltLivingTime;
+   private CraftWorld cworld;
+   public boolean isEffect;
 
 
-   public EntityLightningBolt(World var1, double var2, double var4, double var6) {
-      super(var1);
-      this.setLocationAndAngles(var2, var4, var6, 0.0F, 0.0F);
+   public EntityLightningBolt(World world, double d0, double d1, double d2) {
+      this(world, d0, d1, d2, false);
+   }
+
+   public EntityLightningBolt(World world, double d0, double d1, double d2, boolean isEffect) {
+      super(world);
+      this.boltVertex = 0L;
+      this.isEffect = false;
+      this.isEffect = isEffect;
+      this.cworld = world.getWorld();
+      this.setLocationAndAngles(d0, d1, d2, 0.0F, 0.0F);
       this.lightningState = 2;
       this.boltVertex = this.rand.nextLong();
       this.boltLivingTime = this.rand.nextInt(3) + 1;
-      if(!var1.isRemote && var1.difficultySetting >= 2 && var1.doChunksNearChunkExist(MathHelper.floor_double(var2), MathHelper.floor_double(var4), MathHelper.floor_double(var6), 10)) {
-         int var8 = MathHelper.floor_double(var2);
-         int var9 = MathHelper.floor_double(var4);
-         int var10 = MathHelper.floor_double(var6);
-         if(var1.getBlockId(var8, var9, var10) == 0 && Block.fire.canPlaceBlockAt(var1, var8, var9, var10)) {
-            var1.setBlockWithNotify(var8, var9, var10, Block.fire.blockID);
+      if(!isEffect && !world.isRemote && world.difficultySetting >= 2 && world.doChunksNearChunkExist(MathHelper.floor_double(d0), MathHelper.floor_double(d1), MathHelper.floor_double(d2), 10)) {
+         int i = MathHelper.floor_double(d0);
+         int j = MathHelper.floor_double(d1);
+         int k = MathHelper.floor_double(d2);
+         if(world.getBlockId(i, j, k) == 0 && Block.fire.canPlaceBlockAt(world, i, j, k)) {
+            BlockIgniteEvent l = new BlockIgniteEvent(this.cworld.getBlockAt(i, j, k), IgniteCause.LIGHTNING, (Player)null);
+            world.getServer().getPluginManager().callEvent(l);
+            if(!l.isCancelled()) {
+               world.setBlockWithNotify(i, j, k, Block.fire.blockID);
+            }
          }
 
-         for(var8 = 0; var8 < 4; ++var8) {
-            var9 = MathHelper.floor_double(var2) + this.rand.nextInt(3) - 1;
-            var10 = MathHelper.floor_double(var4) + this.rand.nextInt(3) - 1;
-            int var11 = MathHelper.floor_double(var6) + this.rand.nextInt(3) - 1;
-            if(var1.getBlockId(var9, var10, var11) == 0 && Block.fire.canPlaceBlockAt(var1, var9, var10, var11)) {
-               var1.setBlockWithNotify(var9, var10, var11, Block.fire.blockID);
+         for(i = 0; i < 4; ++i) {
+            j = MathHelper.floor_double(d0) + this.rand.nextInt(3) - 1;
+            k = MathHelper.floor_double(d1) + this.rand.nextInt(3) - 1;
+            int var14 = MathHelper.floor_double(d2) + this.rand.nextInt(3) - 1;
+            if(world.getBlockId(j, k, var14) == 0 && Block.fire.canPlaceBlockAt(world, j, k, var14)) {
+               BlockIgniteEvent event = new BlockIgniteEvent(this.cworld.getBlockAt(j, k, var14), IgniteCause.LIGHTNING, (Player)null);
+               world.getServer().getPluginManager().callEvent(event);
+               if(!event.isCancelled()) {
+                  world.setBlockWithNotify(j, k, var14, Block.fire.blockID);
+               }
             }
          }
       }
@@ -57,24 +79,28 @@
             --this.boltLivingTime;
             this.lightningState = 1;
             this.boltVertex = this.rand.nextLong();
-            if(!this.worldObj.isRemote && this.worldObj.doChunksNearChunkExist(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ), 10)) {
-               int var1 = MathHelper.floor_double(this.posX);
-               int var2 = MathHelper.floor_double(this.posY);
-               int var3 = MathHelper.floor_double(this.posZ);
-               if(this.worldObj.getBlockId(var1, var2, var3) == 0 && Block.fire.canPlaceBlockAt(this.worldObj, var1, var2, var3)) {
-                  this.worldObj.setBlockWithNotify(var1, var2, var3, Block.fire.blockID);
+            if(!this.isEffect && !this.worldObj.isRemote && this.worldObj.doChunksNearChunkExist(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ), 10)) {
+               int i = MathHelper.floor_double(this.posX);
+               int j = MathHelper.floor_double(this.posY);
+               int list = MathHelper.floor_double(this.posZ);
+               if(this.worldObj.getBlockId(i, j, list) == 0 && Block.fire.canPlaceBlockAt(this.worldObj, i, j, list)) {
+                  BlockIgniteEvent l = new BlockIgniteEvent(this.cworld.getBlockAt(i, j, list), IgniteCause.LIGHTNING, (Player)null);
+                  this.worldObj.getServer().getPluginManager().callEvent(l);
+                  if(!l.isCancelled()) {
+                     this.worldObj.setBlockWithNotify(i, j, list, Block.fire.blockID);
+                  }
                }
             }
          }
       }
 
-      if(!this.worldObj.isRemote && this.lightningState >= 0) {
-         double var4 = 3.0D;
-         List var8 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool(this.posX - var4, this.posY - var4, this.posZ - var4, this.posX + var4, this.posY + 6.0D + var4, this.posZ + var4));
-
-         for(int var6 = 0; var6 < var8.size(); ++var6) {
-            Entity var7 = (Entity)var8.get(var6);
-            var7.onStruckByLightning(this);
+      if(!this.worldObj.isRemote && this.lightningState >= 0 && !this.isEffect) {
+         double d0 = 3.0D;
+         List var8 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool(this.posX - d0, this.posY - d0, this.posZ - d0, this.posX + d0, this.posY + 6.0D + d0, this.posZ + d0));
+
+         for(int var9 = 0; var9 < var8.size(); ++var9) {
+            Entity entity = (Entity)var8.get(var9);
+            entity.onStruckByLightning(this);
          }
 
          this.worldObj.lightningFlash = 2;
@@ -84,7 +110,7 @@
 
    protected void entityInit() {}
 
-   protected void readEntityFromNBT(NBTTagCompound var1) {}
+   protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {}
 
-   protected void writeEntityToNBT(NBTTagCompound var1) {}
+   protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {}
 }
Binary files mcp-mcdev/net/minecraft/src/EntityLiving.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLiving.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityLiving.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLiving.java
--- mcp-mcdev/net/minecraft/src/EntityLiving.java	2012-11-29 21:15:01.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLiving.java	2012-11-29 20:44:19.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -14,6 +15,8 @@
 import net.minecraft.src.EntityArrow;
 import net.minecraft.src.EntityBodyHelper;
 import net.minecraft.src.EntityCreeper;
+import net.minecraft.src.EntityDamageSource;
+import net.minecraft.src.EntityDragon;
 import net.minecraft.src.EntityGhast;
 import net.minecraft.src.EntityItem;
 import net.minecraft.src.EntityJumpHelper;
@@ -45,6 +48,14 @@
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldServer;
+import org.bukkit.craftbukkit.TrigMath;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.entity.EntityDamageByBlockEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
 
 public abstract class EntityLiving extends Entity {
 
@@ -93,14 +104,14 @@
    public float prevLegYaw;
    public float legYaw;
    public float legSwing;
-   protected EntityPlayer attackingPlayer = null;
+   public EntityPlayer attackingPlayer = null;
    protected int recentlyHit = 0;
-   private EntityLiving entityLivingToAttack = null;
+   public EntityLiving entityLivingToAttack = null;
    private int revengeTimer = 0;
    private EntityLiving lastAttackingEntity = null;
    public int arrowHitTimer = 0;
-   protected HashMap activePotionsMap = new HashMap();
-   private boolean potionsNeedUpdate = true;
+   public HashMap activePotionsMap = new HashMap();
+   public boolean potionsNeedUpdate = true;
    private int field_70748_f;
    private EntityLookHelper lookHelper;
    private EntityMoveHelper moveHelper;
@@ -128,7 +139,7 @@
    protected double newRotationYaw;
    protected double newRotationPitch;
    float field_70706_bo = 0.0F;
-   protected int lastDamage = 0;
+   public int lastDamage = 0;
    protected int entityAge = 0;
    protected float moveStrafing;
    protected float moveForward;
@@ -139,18 +150,20 @@
    private int jumpTicks = 0;
    private Entity currentTarget;
    protected int numTicksToChaseTarget = 0;
+   public int expToDrop = 0;
+   public int maxAirTicks = 300;
 
 
-   public EntityLiving(World var1) {
-      super(var1);
+   public EntityLiving(World world) {
+      super(world);
       this.preventEntitySpawning = true;
-      this.tasks = new EntityAITasks(var1 != null && var1.theProfiler != null?var1.theProfiler:null);
-      this.targetTasks = new EntityAITasks(var1 != null && var1.theProfiler != null?var1.theProfiler:null);
+      this.tasks = new EntityAITasks(world != null && world.theProfiler != null?world.theProfiler:null);
+      this.targetTasks = new EntityAITasks(world != null && world.theProfiler != null?world.theProfiler:null);
       this.lookHelper = new EntityLookHelper(this);
       this.moveHelper = new EntityMoveHelper(this);
       this.jumpHelper = new EntityJumpHelper(this);
       this.bodyHelper = new EntityBodyHelper(this);
-      this.navigator = new PathNavigate(this, var1, 16.0F);
+      this.navigator = new PathNavigate(this, world, 16.0F);
       this.senses = new EntitySenses(this);
       this.field_70770_ap = (float)(Math.random() + 1.0D) * 0.01F;
       this.setPosition(this.posX, this.posY, this.posZ);
@@ -158,8 +171,8 @@
       this.rotationYaw = (float)(Math.random() * 3.1415927410125732D * 2.0D);
       this.rotationYawHead = this.rotationYaw;
 
-      for(int var2 = 0; var2 < this.equipmentDropChances.length; ++var2) {
-         this.equipmentDropChances[var2] = 0.05F;
+      for(int i = 0; i < this.equipmentDropChances.length; ++i) {
+         this.equipmentDropChances[i] = 0.05F;
       }
 
       this.stepHeight = 0.5F;
@@ -197,9 +210,9 @@
       return this.lastAttackingEntity;
    }
 
-   public void setLastAttackingEntity(Entity var1) {
-      if(var1 instanceof EntityLiving) {
-         this.lastAttackingEntity = (EntityLiving)var1;
+   public void setLastAttackingEntity(Entity entity) {
+      if(entity instanceof EntityLiving) {
+         this.lastAttackingEntity = (EntityLiving)entity;
       }
 
    }
@@ -216,13 +229,13 @@
       return this.AIMoveSpeed;
    }
 
-   public void setAIMoveSpeed(float var1) {
-      this.AIMoveSpeed = var1;
-      this.setMoveForward(var1);
+   public void setAIMoveSpeed(float f) {
+      this.AIMoveSpeed = f;
+      this.setMoveForward(f);
    }
 
-   public boolean attackEntityAsMob(Entity var1) {
-      this.setLastAttackingEntity(var1);
+   public boolean attackEntityAsMob(Entity entity) {
+      this.setLastAttackingEntity(entity);
       return false;
    }
 
@@ -230,52 +243,52 @@
       return this.attackTarget;
    }
 
-   public void setAttackTarget(EntityLiving var1) {
-      this.attackTarget = var1;
+   public void setAttackTarget(EntityLiving entityliving) {
+      this.attackTarget = entityliving;
    }
 
-   public boolean canAttackClass(Class var1) {
-      return EntityCreeper.class != var1 && EntityGhast.class != var1;
+   public boolean canAttackClass(Class oclass) {
+      return EntityCreeper.class != oclass && EntityGhast.class != oclass;
    }
 
    public void eatGrassBonus() {}
 
-   protected void updateFallState(double var1, boolean var3) {
+   protected void updateFallState(double d0, boolean flag) {
       if(!this.isInWater()) {
          this.handleWaterMovement();
       }
 
-      if(var3 && this.fallDistance > 0.0F) {
-         int var4 = MathHelper.floor_double(this.posX);
-         int var5 = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
-         int var6 = MathHelper.floor_double(this.posZ);
-         int var7 = this.worldObj.getBlockId(var4, var5, var6);
-         if(var7 == 0) {
-            int var8 = this.worldObj.func_85175_e(var4, var5 - 1, var6);
-            if(var8 == 11 || var8 == 32 || var8 == 21) {
-               var7 = this.worldObj.getBlockId(var4, var5 - 1, var6);
+      if(flag && this.fallDistance > 0.0F) {
+         int i = MathHelper.floor_double(this.posX);
+         int j = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
+         int k = MathHelper.floor_double(this.posZ);
+         int l = this.worldObj.getBlockId(i, j, k);
+         if(l == 0) {
+            int i1 = this.worldObj.func_85175_e(i, j - 1, k);
+            if(i1 == 11 || i1 == 32 || i1 == 21) {
+               l = this.worldObj.getBlockId(i, j - 1, k);
             }
          }
 
-         if(var7 > 0) {
-            Block.blocksList[var7].onFallenUpon(this.worldObj, var4, var5, var6, this, this.fallDistance);
+         if(l > 0) {
+            Block.blocksList[l].onFallenUpon(this.worldObj, i, j, k, this, this.fallDistance);
          }
       }
 
-      super.updateFallState(var1, var3);
+      super.updateFallState(d0, flag);
    }
 
    public boolean isWithinHomeDistanceCurrentPosition() {
       return this.isWithinHomeDistance(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
    }
 
-   public boolean isWithinHomeDistance(int var1, int var2, int var3) {
-      return this.maximumHomeDistance == -1.0F?true:this.homePosition.getDistanceSquared(var1, var2, var3) < this.maximumHomeDistance * this.maximumHomeDistance;
+   public boolean isWithinHomeDistance(int i, int j, int k) {
+      return this.maximumHomeDistance == -1.0F?true:this.homePosition.getDistanceSquared(i, j, k) < this.maximumHomeDistance * this.maximumHomeDistance;
    }
 
-   public void setHomeArea(int var1, int var2, int var3, int var4) {
-      this.homePosition.set(var1, var2, var3);
-      this.maximumHomeDistance = (float)var4;
+   public void setHomeArea(int i, int j, int k, int l) {
+      this.homePosition.set(i, j, k);
+      this.maximumHomeDistance = (float)l;
    }
 
    public ChunkCoordinates getHomePosition() {
@@ -294,8 +307,8 @@
       return this.maximumHomeDistance != -1.0F;
    }
 
-   public void setRevengeTarget(EntityLiving var1) {
-      this.entityLivingToAttack = var1;
+   public void setRevengeTarget(EntityLiving entityliving) {
+      this.entityLivingToAttack = entityliving;
       this.revengeTimer = this.entityLivingToAttack != null?60:0;
    }
 
@@ -305,8 +318,8 @@
       this.dataWatcher.addObject(10, Byte.valueOf((byte)0));
    }
 
-   public boolean canEntityBeSeen(Entity var1) {
-      return this.worldObj.rayTraceBlocks(this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ), this.worldObj.getWorldVec3Pool().getVecFromPool(var1.posX, var1.posY + (double)var1.getEyeHeight(), var1.posZ)) == null;
+   public boolean canEntityBeSeen(Entity entity) {
+      return this.worldObj.rayTraceBlocks(this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ), this.worldObj.getWorldVec3Pool().getVecFromPool(entity.posX, entity.posY + (double)entity.getEyeHeight(), entity.posZ)) == null;
    }
 
    public boolean canBeCollidedWith() {
@@ -326,9 +339,9 @@
    }
 
    public void playLivingSound() {
-      String var1 = this.getLivingSound();
-      if(var1 != null) {
-         this.func_85030_a(var1, this.getSoundVolume(), this.getSoundPitch());
+      String s = this.getLivingSound();
+      if(s != null) {
+         this.func_85030_a(s, this.getSoundVolume(), this.getSoundPitch());
       }
 
    }
@@ -342,8 +355,14 @@
          this.playLivingSound();
       }
 
-      if(this.isEntityAlive() && this.isEntityInsideOpaqueBlock()) {
-         this.attackEntityFrom(DamageSource.inWall, 1);
+      EntityDamageEvent event;
+      if(this.isEntityAlive() && this.isEntityInsideOpaqueBlock() && !(this instanceof EntityDragon)) {
+         event = new EntityDamageEvent(this.getBukkitEntity(), DamageCause.SUFFOCATION, 1);
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(!event.isCancelled()) {
+            event.getEntity().setLastDamageCause(event);
+            this.attackEntityFrom(DamageSource.inWall, event.getDamage());
+         }
       }
 
       if(this.isImmuneToFire() || this.worldObj.isRemote) {
@@ -355,19 +374,24 @@
          if(this.getAir() == -20) {
             this.setAir(0);
 
-            for(int var1 = 0; var1 < 8; ++var1) {
-               float var2 = this.rand.nextFloat() - this.rand.nextFloat();
-               float var3 = this.rand.nextFloat() - this.rand.nextFloat();
-               float var4 = this.rand.nextFloat() - this.rand.nextFloat();
-               this.worldObj.spawnParticle("bubble", this.posX + (double)var2, this.posY + (double)var3, this.posZ + (double)var4, this.motionX, this.motionY, this.motionZ);
+            for(int var5 = 0; var5 < 8; ++var5) {
+               float f = this.rand.nextFloat() - this.rand.nextFloat();
+               float f1 = this.rand.nextFloat() - this.rand.nextFloat();
+               float f2 = this.rand.nextFloat() - this.rand.nextFloat();
+               this.worldObj.spawnParticle("bubble", this.posX + (double)f, this.posY + (double)f1, this.posZ + (double)f2, this.motionX, this.motionY, this.motionZ);
             }
 
-            this.attackEntityFrom(DamageSource.drown, 2);
+            event = new EntityDamageEvent(this.getBukkitEntity(), DamageCause.DROWNING, 2);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            if(!event.isCancelled() && event.getDamage() != 0) {
+               event.getEntity().setLastDamageCause(event);
+               this.attackEntityFrom(DamageSource.drown, event.getDamage());
+            }
          }
 
          this.extinguish();
-      } else {
-         this.setAir(300);
+      } else if(this.getAir() != 300) {
+         this.setAir(this.maxAirTicks);
       }
 
       this.prevCameraPitch = this.cameraPitch;
@@ -416,38 +440,41 @@
       this.worldObj.theProfiler.endSection();
    }
 
+   public int getExpReward() {
+      int exp = this.getExperiencePoints(this.attackingPlayer);
+      return !this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && !this.isChild()?exp:0;
+   }
+
    protected void onDeathUpdate() {
       ++this.deathTime;
-      if(this.deathTime == 20) {
-         int var1;
-         if(!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && !this.isChild()) {
-            var1 = this.getExperiencePoints(this.attackingPlayer);
-
-            while(var1 > 0) {
-               int var2 = EntityXPOrb.getXPSplit(var1);
-               var1 -= var2;
-               this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, var2));
-            }
+      if(this.deathTime >= 20 && !this.isDead) {
+         int i = this.expToDrop;
+
+         while(i > 0) {
+            int j = EntityXPOrb.getXPSplit(i);
+            i -= j;
+            this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
          }
 
+         this.expToDrop = 0;
          this.setDead();
 
-         for(var1 = 0; var1 < 20; ++var1) {
-            double var3 = this.rand.nextGaussian() * 0.02D;
-            double var5 = this.rand.nextGaussian() * 0.02D;
-            double var7 = this.rand.nextGaussian() * 0.02D;
-            this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, var3, var5, var7);
+         for(i = 0; i < 20; ++i) {
+            double d0 = this.rand.nextGaussian() * 0.02D;
+            double d1 = this.rand.nextGaussian() * 0.02D;
+            double d2 = this.rand.nextGaussian() * 0.02D;
+            this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d0, d1, d2);
          }
       }
 
    }
 
-   protected int decreaseAirSupply(int var1) {
-      int var2 = EnchantmentHelper.getRespiration(this);
-      return var2 > 0 && this.rand.nextInt(var2 + 1) > 0?var1:var1 - 1;
+   protected int decreaseAirSupply(int i) {
+      int j = EnchantmentHelper.getRespiration(this);
+      return j > 0 && this.rand.nextInt(j + 1) > 0?i:i - 1;
    }
 
-   protected int getExperiencePoints(EntityPlayer var1) {
+   protected int getExperiencePoints(EntityPlayer entityhuman) {
       return this.experienceValue;
    }
 
@@ -456,12 +483,12 @@
    }
 
    public void spawnExplosionParticle() {
-      for(int var1 = 0; var1 < 20; ++var1) {
-         double var2 = this.rand.nextGaussian() * 0.02D;
-         double var4 = this.rand.nextGaussian() * 0.02D;
-         double var6 = this.rand.nextGaussian() * 0.02D;
-         double var8 = 10.0D;
-         this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - var2 * var8, this.posY + (double)(this.rand.nextFloat() * this.height) - var4 * var8, this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - var6 * var8, var2, var4, var6);
+      for(int i = 0; i < 20; ++i) {
+         double d0 = this.rand.nextGaussian() * 0.02D;
+         double d1 = this.rand.nextGaussian() * 0.02D;
+         double d2 = this.rand.nextGaussian() * 0.02D;
+         double d3 = 10.0D;
+         this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d0 * d3, this.posY + (double)(this.rand.nextFloat() * this.height) - d1 * d3, this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - d2 * d3, d0, d1, d2);
       }
 
    }
@@ -476,74 +503,74 @@
    public void onUpdate() {
       super.onUpdate();
       if(!this.worldObj.isRemote) {
-         int var1;
-         for(var1 = 0; var1 < 5; ++var1) {
-            ItemStack var2 = this.getEquipmentInSlot(var1);
-            if(!ItemStack.areItemStacksEqual(var2, this.field_82180_bT[var1])) {
-               ((WorldServer)this.worldObj).getEntityTracker().sendPacketToTrackedPlayers(this, new Packet5PlayerInventory(this.entityId, var1, var2));
-               this.field_82180_bT[var1] = var2 == null?null:var2.copy();
+         int i;
+         for(i = 0; i < 5; ++i) {
+            ItemStack itemstack = this.getEquipmentInSlot(i);
+            if(!ItemStack.areItemStacksEqual(itemstack, this.field_82180_bT[i])) {
+               ((WorldServer)this.worldObj).getEntityTracker().sendPacketToTrackedPlayers(this, new Packet5PlayerInventory(this.entityId, i, itemstack));
+               this.field_82180_bT[i] = itemstack == null?null:itemstack.copy();
             }
          }
 
-         var1 = this.func_85035_bI();
-         if(var1 > 0) {
+         i = this.func_85035_bI();
+         if(i > 0) {
             if(this.arrowHitTimer <= 0) {
-               this.arrowHitTimer = 20 * (30 - var1);
+               this.arrowHitTimer = 20 * (30 - i);
             }
 
             --this.arrowHitTimer;
             if(this.arrowHitTimer <= 0) {
-               this.func_85034_r(var1 - 1);
+               this.func_85034_r(i - 1);
             }
          }
       }
 
       this.onLivingUpdate();
-      double var3 = this.posX - this.prevPosX;
-      double var5 = this.posZ - this.prevPosZ;
-      float var7 = (float)(var3 * var3 + var5 * var5);
-      float var8 = this.renderYawOffset;
-      float var9 = 0.0F;
+      double d0 = this.posX - this.prevPosX;
+      double d1 = this.posZ - this.prevPosZ;
+      float f = (float)(d0 * d0 + d1 * d1);
+      float f1 = this.renderYawOffset;
+      float f2 = 0.0F;
       this.field_70768_au = this.field_70766_av;
-      float var10 = 0.0F;
-      if(var7 > 0.0025000002F) {
-         var10 = 1.0F;
-         var9 = (float)Math.sqrt((double)var7) * 3.0F;
-         var8 = (float)Math.atan2(var5, var3) * 180.0F / 3.1415927F - 90.0F;
+      float f3 = 0.0F;
+      if(f > 0.0025000002F) {
+         f3 = 1.0F;
+         f2 = (float)Math.sqrt((double)f) * 3.0F;
+         f1 = (float)TrigMath.atan2(d1, d0) * 180.0F / 3.1415927F - 90.0F;
       }
 
       if(this.swingProgress > 0.0F) {
-         var8 = this.rotationYaw;
+         f1 = this.rotationYaw;
       }
 
       if(!this.onGround) {
-         var10 = 0.0F;
+         f3 = 0.0F;
       }
 
-      this.field_70766_av += (var10 - this.field_70766_av) * 0.3F;
+      this.field_70766_av += (f3 - this.field_70766_av) * 0.3F;
       this.worldObj.theProfiler.startSection("headTurn");
       if(this.isAIEnabled()) {
          this.bodyHelper.func_75664_a();
       } else {
-         float var11 = MathHelper.wrapAngleTo180_float(var8 - this.renderYawOffset);
-         this.renderYawOffset += var11 * 0.3F;
-         float var12 = MathHelper.wrapAngleTo180_float(this.rotationYaw - this.renderYawOffset);
-         boolean var13 = var12 < -90.0F || var12 >= 90.0F;
-         if(var12 < -75.0F) {
-            var12 = -75.0F;
+         float f4 = MathHelper.wrapAngleTo180_float(f1 - this.renderYawOffset);
+         this.renderYawOffset += f4 * 0.3F;
+         float f5 = MathHelper.wrapAngleTo180_float(this.rotationYaw - this.renderYawOffset);
+         boolean flag = f5 < -90.0F || f5 >= 90.0F;
+         if(f5 < -75.0F) {
+            f5 = -75.0F;
          }
 
-         if(var12 >= 75.0F) {
-            var12 = 75.0F;
+         if(f5 >= 75.0F) {
+            f5 = 75.0F;
          }
 
-         this.renderYawOffset = this.rotationYaw - var12;
-         if(var12 * var12 > 2500.0F) {
-            this.renderYawOffset += var12 * 0.2F;
+         this.renderYawOffset = this.rotationYaw - f5;
+         if(f5 * f5 > 2500.0F) {
+            this.renderYawOffset += f5 * 0.2F;
          }
 
-         if(var13) {
-            var9 *= -1.0F;
+         if(flag) {
+            f2 *= -1.0F;
          }
       }
 
@@ -583,18 +610,28 @@
       }
 
       this.worldObj.theProfiler.endSection();
-      this.field_70764_aw += var9;
+      this.field_70764_aw += f2;
    }
 
-   public void heal(int var1) {
+   public void heal(int i) {
+      this.heal(i, RegainReason.CUSTOM);
+   }
+
+   public void heal(int i, RegainReason regainReason) {
       if(this.health > 0) {
-         this.health += var1;
+         EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), i, regainReason);
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(!event.isCancelled()) {
+            this.health += event.getAmount();
+         }
+
          if(this.health > this.getMaxHealth()) {
             this.health = this.getMaxHealth();
          }
 
          this.hurtResistantTime = this.maxHurtResistantTime / 2;
       }
+
    }
 
    public abstract int getMaxHealth();
@@ -603,15 +640,15 @@
       return this.health;
    }
 
-   public void setEntityHealth(int var1) {
-      this.health = var1;
-      if(var1 > this.getMaxHealth()) {
-         var1 = this.getMaxHealth();
+   public void setEntityHealth(int i) {
+      this.health = i;
+      if(i > this.getMaxHealth()) {
+         i = this.getMaxHealth();
       }
 
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else if(this.worldObj.isRemote) {
@@ -620,78 +657,87 @@
          this.entityAge = 0;
          if(this.health <= 0) {
             return false;
-         } else if(var1.isFireDamage() && this.isPotionActive(Potion.fireResistance)) {
+         } else if(damagesource.isFireDamage() && this.isPotionActive(Potion.fireResistance)) {
             return false;
          } else {
-            if((var1 == DamageSource.anvil || var1 == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null) {
-               var2 = (int)((float)var2 * 0.55F);
+            if((damagesource == DamageSource.anvil || damagesource == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null) {
+               i = (int)((float)i * 0.55F);
             }
 
             this.legYaw = 1.5F;
-            boolean var3 = true;
+            boolean flag = true;
+            if(damagesource instanceof EntityDamageSource) {
+               EntityDamageEvent entity = CraftEventFactory.handleEntityDamageEvent(this, damagesource, i);
+               if(entity.isCancelled()) {
+                  return false;
+               }
+
+               i = entity.getDamage();
+            }
+
             if((float)this.hurtResistantTime > (float)this.maxHurtResistantTime / 2.0F) {
-               if(var2 <= this.lastDamage) {
+               if(i <= this.lastDamage) {
                   return false;
                }
 
-               this.damageEntity(var1, var2 - this.lastDamage);
-               this.lastDamage = var2;
-               var3 = false;
+               this.damageEntity(damagesource, i - this.lastDamage);
+               this.lastDamage = i;
+               flag = false;
             } else {
-               this.lastDamage = var2;
+               this.lastDamage = i;
                this.prevHealth = this.health;
                this.hurtResistantTime = this.maxHurtResistantTime;
-               this.damageEntity(var1, var2);
+               this.damageEntity(damagesource, i);
                this.hurtTime = this.maxHurtTime = 10;
             }
 
             this.attackedAtYaw = 0.0F;
-            Entity var4 = var1.getEntity();
-            if(var4 != null) {
-               if(var4 instanceof EntityLiving) {
-                  this.setRevengeTarget((EntityLiving)var4);
+            Entity entity1 = damagesource.getEntity();
+            if(entity1 != null) {
+               if(entity1 instanceof EntityLiving) {
+                  this.setRevengeTarget((EntityLiving)entity1);
                }
 
-               if(var4 instanceof EntityPlayer) {
+               if(entity1 instanceof EntityPlayer) {
                   this.recentlyHit = 60;
-                  this.attackingPlayer = (EntityPlayer)var4;
-               } else if(var4 instanceof EntityWolf) {
-                  EntityWolf var5 = (EntityWolf)var4;
-                  if(var5.isTamed()) {
+                  this.attackingPlayer = (EntityPlayer)entity1;
+               } else if(entity1 instanceof EntityWolf) {
+                  EntityWolf entitywolf = (EntityWolf)entity1;
+                  if(entitywolf.isTamed()) {
                      this.recentlyHit = 60;
                      this.attackingPlayer = null;
                   }
                }
             }
 
-            if(var3) {
+            if(flag) {
                this.worldObj.setEntityState(this, (byte)2);
-               if(var1 != DamageSource.drown && var1 != DamageSource.field_76375_l) {
+               if(damagesource != DamageSource.drown && damagesource != DamageSource.field_76375_l) {
                   this.setBeenAttacked();
                }
 
-               if(var4 != null) {
-                  double var6 = var4.posX - this.posX;
+               if(entity1 != null) {
+                  double d0 = entity1.posX - this.posX;
 
-                  double var8;
-                  for(var8 = var4.posZ - this.posZ; var6 * var6 + var8 * var8 < 1.0E-4D; var8 = (Math.random() - Math.random()) * 0.01D) {
-                     var6 = (Math.random() - Math.random()) * 0.01D;
+                  double d1;
+                  for(d1 = entity1.posZ - this.posZ; d0 * d0 + d1 * d1 < 1.0E-4D; d1 = (Math.random() - Math.random()) * 0.01D) {
+                     d0 = (Math.random() - Math.random()) * 0.01D;
                   }
 
-                  this.attackedAtYaw = (float)(Math.atan2(var8, var6) * 180.0D / 3.1415927410125732D) - this.rotationYaw;
-                  this.knockBack(var4, var2, var6, var8);
+                  this.attackedAtYaw = (float)(Math.atan2(d1, d0) * 180.0D / 3.1415927410125732D) - this.rotationYaw;
+                  this.knockBack(entity1, i, d0, d1);
                } else {
                   this.attackedAtYaw = (float)((int)(Math.random() * 2.0D) * 180);
                }
             }
 
             if(this.health <= 0) {
-               if(var3) {
+               if(flag) {
                   this.func_85030_a(this.getDeathSound(), this.getSoundVolume(), this.getSoundPitch());
                }
 
-               this.onDeath(var1);
-            } else if(var3) {
+               this.onDeath(damagesource);
+            } else if(flag) {
                this.func_85030_a(this.getHurtSound(), this.getSoundVolume(), this.getSoundPitch());
             }
 
@@ -705,53 +751,54 @@
    }
 
    public int getTotalArmorValue() {
-      int var1 = 0;
-      ItemStack[] var2 = this.getInventory();
-      int var3 = var2.length;
+      int i = 0;
+      ItemStack[] aitemstack = this.getInventory();
+      int j = aitemstack.length;
 
-      for(int var4 = 0; var4 < var3; ++var4) {
-         ItemStack var5 = var2[var4];
-         if(var5 != null && var5.getItem() instanceof ItemArmor) {
-            int var6 = ((ItemArmor)var5.getItem()).damageReduceAmount;
-            var1 += var6;
+      for(int k = 0; k < j; ++k) {
+         ItemStack itemstack = aitemstack[k];
+         if(itemstack != null && itemstack.getItem() instanceof ItemArmor) {
+            int l = ((ItemArmor)itemstack.getItem()).damageReduceAmount;
+            i += l;
          }
       }
 
-      return var1;
+      return i;
    }
 
-   protected void damageArmor(int var1) {}
+   protected void damageArmor(int i) {}
 
-   protected int applyArmorCalculations(DamageSource var1, int var2) {
-      if(!var1.isUnblockable()) {
-         int var3 = 25 - this.getTotalArmorValue();
-         int var4 = var2 * var3 + this.carryoverDamage;
-         this.damageArmor(var2);
-         var2 = var4 / 25;
-         this.carryoverDamage = var4 % 25;
+   protected int applyArmorCalculations(DamageSource damagesource, int i) {
+      if(!damagesource.isUnblockable()) {
+         int j = 25 - this.getTotalArmorValue();
+         int k = i * j + this.carryoverDamage;
+         this.damageArmor(i);
+         i = k / 25;
+         this.carryoverDamage = k % 25;
       }
 
-      return var2;
+      return i;
    }
 
-   protected int applyPotionDamageCalculations(DamageSource var1, int var2) {
+   protected int applyPotionDamageCalculations(DamageSource damagesource, int i) {
       if(this.isPotionActive(Potion.resistance)) {
-         int var3 = (this.getActivePotionEffect(Potion.resistance).getAmplifier() + 1) * 5;
-         int var4 = 25 - var3;
-         int var5 = var2 * var4 + this.carryoverDamage;
-         var2 = var5 / 25;
-         this.carryoverDamage = var5 % 25;
+         int j = (this.getActivePotionEffect(Potion.resistance).getAmplifier() + 1) * 5;
+         int k = 25 - j;
+         int l = i * k + this.carryoverDamage;
+         i = l / 25;
+         this.carryoverDamage = l % 25;
       }
 
-      return var2;
+      return i;
    }
 
-   protected void damageEntity(DamageSource var1, int var2) {
+   protected void damageEntity(DamageSource damagesource, int i) {
       if(!this.func_85032_ar()) {
-         var2 = this.applyArmorCalculations(var1, var2);
-         var2 = this.applyPotionDamageCalculations(var1, var2);
-         this.health -= var2;
+         i = this.applyArmorCalculations(damagesource, i);
+         i = this.applyPotionDamageCalculations(damagesource, i);
+         this.health -= i;
       }
+
    }
 
    protected float getSoundVolume() {
@@ -770,169 +817,187 @@
       return "damage.hit";
    }
 
-   public void knockBack(Entity var1, int var2, double var3, double var5) {
+   public void knockBack(Entity entity, int i, double d0, double d1) {
       this.isAirBorne = true;
-      float var7 = MathHelper.sqrt_double(var3 * var3 + var5 * var5);
-      float var8 = 0.4F;
+      float f = MathHelper.sqrt_double(d0 * d0 + d1 * d1);
+      float f1 = 0.4F;
       this.motionX /= 2.0D;
       this.motionY /= 2.0D;
       this.motionZ /= 2.0D;
-      this.motionX -= var3 / (double)var7 * (double)var8;
-      this.motionY += (double)var8;
-      this.motionZ -= var5 / (double)var7 * (double)var8;
+      this.motionX -= d0 / (double)f * (double)f1;
+      this.motionY += (double)f1;
+      this.motionZ -= d1 / (double)f * (double)f1;
       if(this.motionY > 0.4000000059604645D) {
          this.motionY = 0.4000000059604645D;
       }
 
    }
 
-   public void onDeath(DamageSource var1) {
-      Entity var2 = var1.getEntity();
-      if(this.scoreValue >= 0 && var2 != null) {
-         var2.addToPlayerScore(this, this.scoreValue);
+   public void onDeath(DamageSource damagesource) {
+      Entity entity = damagesource.getEntity();
+      if(this.scoreValue >= 0 && entity != null) {
+         entity.addToPlayerScore(this, this.scoreValue);
       }
 
-      if(var2 != null) {
-         var2.onKillEntity(this);
+      if(entity != null) {
+         entity.onKillEntity(this);
       }
 
       this.dead = true;
       if(!this.worldObj.isRemote) {
-         int var3 = 0;
-         if(var2 instanceof EntityPlayer) {
-            var3 = EnchantmentHelper.getLootingModifier((EntityLiving)var2);
+         int i = 0;
+         if(entity instanceof EntityPlayer) {
+            i = EnchantmentHelper.getLootingModifier((EntityLiving)entity);
          }
 
          if(!this.isChild() && this.worldObj.getGameRules().getGameRuleBooleanValue("doMobLoot")) {
-            this.dropFewItems(this.recentlyHit > 0, var3);
-            this.dropEquipment(this.recentlyHit > 0, var3);
-            if(this.recentlyHit > 0) {
-               int var4 = this.rand.nextInt(200) - var3;
-               if(var4 < 5) {
-                  this.dropRareDrop(var4 <= 0?1:0);
-               }
-            }
+            this.dropFewItems(this.recentlyHit > 0, i);
+            this.dropEquipment(this.recentlyHit > 0, i);
+         } else {
+            CraftEventFactory.callEntityDeathEvent(this);
          }
       }
 
       this.worldObj.setEntityState(this, (byte)3);
    }
 
-   protected void dropRareDrop(int var1) {}
+   protected ItemStack l(int i) {
+      return null;
+   }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.getDropItemId();
-      if(var3 > 0) {
-         int var4 = this.rand.nextInt(3);
-         if(var2 > 0) {
-            var4 += this.rand.nextInt(var2 + 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.getDropItemId();
+      int k;
+      if(j > 0) {
+         k = this.rand.nextInt(3);
+         if(i > 0) {
+            k += this.rand.nextInt(i + 1);
          }
 
-         for(int var5 = 0; var5 < var4; ++var5) {
-            this.dropItem(var3, 1);
+         if(k > 0) {
+            loot.add(new org.bukkit.inventory.ItemStack(j, k));
+         }
+      }
+
+      if(this.recentlyHit > 0) {
+         k = this.rand.nextInt(200) - i;
+         if(k < 5) {
+            ItemStack itemstack = this.l(k <= 0?1:0);
+            if(itemstack != null) {
+               loot.add(new CraftItemStack(itemstack));
+            }
          }
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
    protected int getDropItemId() {
       return 0;
    }
 
-   protected void fall(float var1) {
-      super.fall(var1);
-      int var2 = MathHelper.ceiling_float_int(var1 - 3.0F);
-      if(var2 > 0) {
-         if(var2 > 4) {
-            this.func_85030_a("damage.fallbig", 1.0F, 1.0F);
-         } else {
-            this.func_85030_a("damage.fallsmall", 1.0F, 1.0F);
+   protected void fall(float f) {
+      super.fall(f);
+      int i = MathHelper.ceiling_float_int(f - 3.0F);
+      if(i > 0) {
+         EntityDamageEvent event = new EntityDamageEvent(this.getBukkitEntity(), DamageCause.FALL, i);
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(!event.isCancelled() && event.getDamage() != 0) {
+            i = event.getDamage();
+            if(i > 4) {
+               this.func_85030_a("damage.fallbig", 1.0F, 1.0F);
+            } else {
+               this.func_85030_a("damage.fallsmall", 1.0F, 1.0F);
+            }
+
+            this.getBukkitEntity().setLastDamageCause(event);
+            this.attackEntityFrom(DamageSource.fall, i);
          }
 
-         this.attackEntityFrom(DamageSource.fall, var2);
-         int var3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset), MathHelper.floor_double(this.posZ));
-         if(var3 > 0) {
-            StepSound var4 = Block.blocksList[var3].stepSound;
-            this.func_85030_a(var4.getStepSound(), var4.getVolume() * 0.5F, var4.getPitch() * 0.75F);
+         int j = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset), MathHelper.floor_double(this.posZ));
+         if(j > 0) {
+            StepSound stepsound = Block.blocksList[j].stepSound;
+            this.func_85030_a(stepsound.getStepSound(), stepsound.getVolume() * 0.5F, stepsound.getPitch() * 0.75F);
          }
       }
 
    }
 
-   public void moveEntityWithHeading(float var1, float var2) {
-      double var3;
+   public void moveEntityWithHeading(float f, float f1) {
+      double d0;
+      float f6;
       if(this.isInWater() && (!(this instanceof EntityPlayer) || !((EntityPlayer)this).capabilities.isFlying)) {
-         var3 = this.posY;
-         this.moveFlying(var1, var2, this.isAIEnabled()?0.04F:0.02F);
+         d0 = this.posY;
+         this.moveFlying(f, f1, this.isAIEnabled()?0.04F:0.02F);
          this.moveEntity(this.motionX, this.motionY, this.motionZ);
          this.motionX *= 0.800000011920929D;
          this.motionY *= 0.800000011920929D;
          this.motionZ *= 0.800000011920929D;
          this.motionY -= 0.02D;
-         if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + 0.6000000238418579D - this.posY + var3, this.motionZ)) {
+         if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + 0.6000000238418579D - this.posY + d0, this.motionZ)) {
             this.motionY = 0.30000001192092896D;
          }
       } else if(this.handleLavaMovement() && (!(this instanceof EntityPlayer) || !((EntityPlayer)this).capabilities.isFlying)) {
-         var3 = this.posY;
-         this.moveFlying(var1, var2, 0.02F);
+         d0 = this.posY;
+         this.moveFlying(f, f1, 0.02F);
          this.moveEntity(this.motionX, this.motionY, this.motionZ);
          this.motionX *= 0.5D;
          this.motionY *= 0.5D;
          this.motionZ *= 0.5D;
          this.motionY -= 0.02D;
-         if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + 0.6000000238418579D - this.posY + var3, this.motionZ)) {
+         if(this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + 0.6000000238418579D - this.posY + d0, this.motionZ)) {
             this.motionY = 0.30000001192092896D;
          }
       } else {
-         float var5 = 0.91F;
+         float f2 = 0.91F;
          if(this.onGround) {
-            var5 = 0.54600006F;
-            int var6 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-            if(var6 > 0) {
-               var5 = Block.blocksList[var6].slipperiness * 0.91F;
+            f2 = 0.54600006F;
+            int f3 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+            if(f3 > 0) {
+               f2 = Block.blocksList[f3].slipperiness * 0.91F;
             }
          }
 
-         float var12 = 0.16277136F / (var5 * var5 * var5);
-         float var7;
+         float f31 = 0.16277136F / (f2 * f2 * f2);
          if(this.onGround) {
             if(this.isAIEnabled()) {
-               var7 = this.getAIMoveSpeed();
+               f6 = this.getAIMoveSpeed();
             } else {
-               var7 = this.landMovementFactor;
+               f6 = this.landMovementFactor;
             }
 
-            var7 *= var12;
+            f6 *= f31;
          } else {
-            var7 = this.jumpMovementFactor;
+            f6 = this.jumpMovementFactor;
          }
 
-         this.moveFlying(var1, var2, var7);
-         var5 = 0.91F;
+         this.moveFlying(f, f1, f6);
+         f2 = 0.91F;
          if(this.onGround) {
-            var5 = 0.54600006F;
-            int var8 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-            if(var8 > 0) {
-               var5 = Block.blocksList[var8].slipperiness * 0.91F;
+            f2 = 0.54600006F;
+            int f5 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+            if(f5 > 0) {
+               f2 = Block.blocksList[f5].slipperiness * 0.91F;
             }
          }
 
          if(this.isOnLadder()) {
-            float var13 = 0.15F;
-            if(this.motionX < (double)(-var13)) {
-               this.motionX = (double)(-var13);
+            float f51 = 0.15F;
+            if(this.motionX < (double)(-f51)) {
+               this.motionX = (double)(-f51);
             }
 
-            if(this.motionX > (double)var13) {
-               this.motionX = (double)var13;
+            if(this.motionX > (double)f51) {
+               this.motionX = (double)f51;
             }
 
-            if(this.motionZ < (double)(-var13)) {
-               this.motionZ = (double)(-var13);
+            if(this.motionZ < (double)(-f51)) {
+               this.motionZ = (double)(-f51);
             }
 
-            if(this.motionZ > (double)var13) {
-               this.motionZ = (double)var13;
+            if(this.motionZ > (double)f51) {
+               this.motionZ = (double)f51;
             }
 
             this.fallDistance = 0.0F;
@@ -940,8 +1005,8 @@
                this.motionY = -0.15D;
             }
 
-            boolean var9 = this.isSneaking() && this instanceof EntityPlayer;
-            if(var9 && this.motionY < 0.0D) {
+            boolean flag = this.isSneaking() && this instanceof EntityPlayer;
+            if(flag && this.motionY < 0.0D) {
                this.motionY = 0.0D;
             }
          }
@@ -962,64 +1027,64 @@
          }
 
          this.motionY *= 0.9800000190734863D;
-         this.motionX *= (double)var5;
-         this.motionZ *= (double)var5;
+         this.motionX *= (double)f2;
+         this.motionZ *= (double)f2;
       }
 
       this.prevLegYaw = this.legYaw;
-      var3 = this.posX - this.prevPosX;
-      double var10 = this.posZ - this.prevPosZ;
-      float var14 = MathHelper.sqrt_double(var3 * var3 + var10 * var10) * 4.0F;
-      if(var14 > 1.0F) {
-         var14 = 1.0F;
+      d0 = this.posX - this.prevPosX;
+      double d1 = this.posZ - this.prevPosZ;
+      f6 = MathHelper.sqrt_double(d0 * d0 + d1 * d1) * 4.0F;
+      if(f6 > 1.0F) {
+         f6 = 1.0F;
       }
 
-      this.legYaw += (var14 - this.legYaw) * 0.4F;
+      this.legYaw += (f6 - this.legYaw) * 0.4F;
       this.legSwing += this.legYaw;
    }
 
    public boolean isOnLadder() {
-      int var1 = MathHelper.floor_double(this.posX);
-      int var2 = MathHelper.floor_double(this.boundingBox.minY);
-      int var3 = MathHelper.floor_double(this.posZ);
-      int var4 = this.worldObj.getBlockId(var1, var2, var3);
-      return var4 == Block.ladder.blockID || var4 == Block.vine.blockID;
+      int i = MathHelper.floor_double(this.posX);
+      int j = MathHelper.floor_double(this.boundingBox.minY);
+      int k = MathHelper.floor_double(this.posZ);
+      int l = this.worldObj.getBlockId(i, j, k);
+      return l == Block.ladder.blockID || l == Block.vine.blockID;
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
       if(this.health < -32768) {
          this.health = -32768;
       }
 
-      var1.setShort("Health", (short)this.health);
-      var1.setShort("HurtTime", (short)this.hurtTime);
-      var1.setShort("DeathTime", (short)this.deathTime);
-      var1.setShort("AttackTime", (short)this.attackTime);
-      var1.setBoolean("CanPickUpLoot", this.canPickUpLoot);
-      var1.setBoolean("PersistenceRequired", this.persistenceRequired);
-      NBTTagList var2 = new NBTTagList();
+      nbttagcompound.setShort("Health", (short)this.health);
+      nbttagcompound.setShort("HurtTime", (short)this.hurtTime);
+      nbttagcompound.setShort("DeathTime", (short)this.deathTime);
+      nbttagcompound.setShort("AttackTime", (short)this.attackTime);
+      nbttagcompound.setBoolean("CanPickUpLoot", this.canPickUpLoot);
+      nbttagcompound.setBoolean("PersistenceRequired", this.persistenceRequired);
+      NBTTagList nbttaglist = new NBTTagList();
 
-      for(int var3 = 0; var3 < this.equipment.length; ++var3) {
-         NBTTagCompound var4 = new NBTTagCompound();
-         if(this.equipment[var3] != null) {
-            this.equipment[var3].writeToNBT(var4);
+      for(int nbttaglist1 = 0; nbttaglist1 < this.equipment.length; ++nbttaglist1) {
+         NBTTagCompound j = new NBTTagCompound();
+         if(this.equipment[nbttaglist1] != null) {
+            this.equipment[nbttaglist1].writeToNBT(j);
          }
 
-         var2.appendTag(var4);
+         nbttaglist.appendTag(j);
       }
 
-      var1.setTag("Equipment", var2);
+      nbttagcompound.setTag("Equipment", nbttaglist);
       NBTTagList var6;
       if(!this.activePotionsMap.isEmpty()) {
          var6 = new NBTTagList();
          Iterator var7 = this.activePotionsMap.values().iterator();
 
          while(var7.hasNext()) {
-            PotionEffect var5 = (PotionEffect)var7.next();
-            var6.appendTag(var5.writeCustomPotionEffectToNBT(new NBTTagCompound()));
+            PotionEffect mobeffect = (PotionEffect)var7.next();
+            var6.appendTag(mobeffect.writeCustomPotionEffectToNBT(new NBTTagCompound()));
          }
 
-         var1.setTag("ActiveEffects", var6);
+         nbttagcompound.setTag("ActiveEffects", var6);
       }
 
       var6 = new NBTTagList();
@@ -1028,45 +1093,45 @@
          var6.appendTag(new NBTTagFloat(var8 + "", this.equipmentDropChances[var8]));
       }
 
-      var1.setTag("DropChances", var6);
+      nbttagcompound.setTag("DropChances", var6);
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      this.health = var1.getShort("Health");
-      if(!var1.hasKey("Health")) {
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.health = nbttagcompound.getShort("Health");
+      if(!nbttagcompound.hasKey("Health")) {
          this.health = this.getMaxHealth();
       }
 
-      this.hurtTime = var1.getShort("HurtTime");
-      this.deathTime = var1.getShort("DeathTime");
-      this.attackTime = var1.getShort("AttackTime");
-      this.canPickUpLoot = var1.getBoolean("CanPickUpLoot");
-      this.persistenceRequired = var1.getBoolean("PersistenceRequired");
-      NBTTagList var2;
-      int var3;
-      if(var1.hasKey("Equipment")) {
-         var2 = var1.getTagList("Equipment");
+      this.hurtTime = nbttagcompound.getShort("HurtTime");
+      this.deathTime = nbttagcompound.getShort("DeathTime");
+      this.attackTime = nbttagcompound.getShort("AttackTime");
+      this.canPickUpLoot = nbttagcompound.getBoolean("CanPickUpLoot");
+      this.persistenceRequired = nbttagcompound.getBoolean("PersistenceRequired");
+      NBTTagList nbttaglist;
+      int i;
+      if(nbttagcompound.hasKey("Equipment")) {
+         nbttaglist = nbttagcompound.getTagList("Equipment");
 
-         for(var3 = 0; var3 < this.equipment.length; ++var3) {
-            this.equipment[var3] = ItemStack.loadItemStackFromNBT((NBTTagCompound)var2.tagAt(var3));
+         for(i = 0; i < this.equipment.length; ++i) {
+            this.equipment[i] = ItemStack.loadItemStackFromNBT((NBTTagCompound)nbttaglist.tagAt(i));
          }
       }
 
-      if(var1.hasKey("ActiveEffects")) {
-         var2 = var1.getTagList("ActiveEffects");
+      if(nbttagcompound.hasKey("ActiveEffects")) {
+         nbttaglist = nbttagcompound.getTagList("ActiveEffects");
 
-         for(var3 = 0; var3 < var2.tagCount(); ++var3) {
-            NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-            PotionEffect var5 = PotionEffect.readCustomPotionEffectFromNBT(var4);
-            this.activePotionsMap.put(Integer.valueOf(var5.getPotionID()), var5);
+         for(i = 0; i < nbttaglist.tagCount(); ++i) {
+            NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbttaglist.tagAt(i);
+            PotionEffect mobeffect = PotionEffect.readCustomPotionEffectFromNBT(nbttagcompound1);
+            this.activePotionsMap.put(Integer.valueOf(mobeffect.getPotionID()), mobeffect);
          }
       }
 
-      if(var1.hasKey("DropChances")) {
-         var2 = var1.getTagList("DropChances");
+      if(nbttagcompound.hasKey("DropChances")) {
+         nbttaglist = nbttagcompound.getTagList("DropChances");
 
-         for(var3 = 0; var3 < var2.tagCount(); ++var3) {
-            this.equipmentDropChances[var3] = ((NBTTagFloat)var2.tagAt(var3)).data;
+         for(i = 0; i < nbttaglist.tagCount(); ++i) {
+            this.equipmentDropChances[i] = ((NBTTagFloat)nbttaglist.tagAt(i)).data;
          }
       }
 
@@ -1080,12 +1145,12 @@
       return false;
    }
 
-   public void setMoveForward(float var1) {
-      this.moveForward = var1;
+   public void setMoveForward(float f) {
+      this.moveForward = f;
    }
 
-   public void setJumping(boolean var1) {
-      this.isJumping = var1;
+   public void setJumping(boolean flag) {
+      this.isJumping = flag;
    }
 
    public void onLivingUpdate() {
@@ -1094,14 +1159,14 @@
       }
 
       if(this.newPosRotationIncrements > 0) {
-         double var1 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
-         double var3 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
-         double var5 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
-         double var7 = MathHelper.wrapAngleTo180_double(this.newRotationYaw - (double)this.rotationYaw);
-         this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.newPosRotationIncrements);
+         double d0 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
+         double d1 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
+         double d2 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
+         double d3 = MathHelper.wrapAngleTo180_double(this.newRotationYaw - (double)this.rotationYaw);
+         this.rotationYaw = (float)((double)this.rotationYaw + d3 / (double)this.newPosRotationIncrements);
          this.rotationPitch = (float)((double)this.rotationPitch + (this.newRotationPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
          --this.newPosRotationIncrements;
-         this.setPosition(var1, var3, var5);
+         this.setPosition(d0, d1, d2);
          this.setRotation(this.rotationYaw, this.rotationPitch);
       }
 
@@ -1156,10 +1221,10 @@
       this.moveStrafing *= 0.98F;
       this.moveForward *= 0.98F;
       this.randomYawVelocity *= 0.9F;
-      float var9 = this.landMovementFactor;
+      float f = this.landMovementFactor;
       this.landMovementFactor *= this.getSpeedModifier();
       this.moveEntityWithHeading(this.moveStrafing, this.moveForward);
-      this.landMovementFactor = var9;
+      this.landMovementFactor = f;
       this.worldObj.theProfiler.endSection();
       this.worldObj.theProfiler.startSection("push");
       if(!this.worldObj.isRemote) {
@@ -1169,57 +1234,57 @@
       this.worldObj.theProfiler.endSection();
       this.worldObj.theProfiler.startSection("looting");
       if(!this.worldObj.isRemote && this.canPickUpLoot && !this.dead && this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing")) {
-         List var10 = this.worldObj.getEntitiesWithinAABB(EntityItem.class, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
-         Iterator var11 = var10.iterator();
+         List list = this.worldObj.getEntitiesWithinAABB(EntityItem.class, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
+         Iterator iterator = list.iterator();
 
-         while(var11.hasNext()) {
-            EntityItem var12 = (EntityItem)var11.next();
-            if(!var12.isDead && var12.item != null) {
-               ItemStack var13 = var12.item;
-               int var14 = func_82159_b(var13);
-               if(var14 > -1) {
-                  boolean var15 = true;
-                  ItemStack var16 = this.getEquipmentInSlot(var14);
-                  if(var16 != null) {
-                     if(var14 == 0) {
-                        if(var13.getItem() instanceof ItemSword && !(var16.getItem() instanceof ItemSword)) {
-                           var15 = true;
-                        } else if(var13.getItem() instanceof ItemSword && var16.getItem() instanceof ItemSword) {
-                           ItemSword var17 = (ItemSword)var13.getItem();
-                           ItemSword var18 = (ItemSword)var16.getItem();
-                           if(var17.func_82803_g() == var18.func_82803_g()) {
-                              var15 = var13.getItemDamage() > var16.getItemDamage() || var13.hasTagCompound() && !var16.hasTagCompound();
+         while(iterator.hasNext()) {
+            EntityItem entityitem = (EntityItem)iterator.next();
+            if(!entityitem.isDead && entityitem.item != null) {
+               ItemStack itemstack = entityitem.item;
+               int i = func_82159_b(itemstack);
+               if(i > -1) {
+                  boolean flag = true;
+                  ItemStack itemstack1 = this.getEquipmentInSlot(i);
+                  if(itemstack1 != null) {
+                     if(i == 0) {
+                        if(itemstack.getItem() instanceof ItemSword && !(itemstack1.getItem() instanceof ItemSword)) {
+                           flag = true;
+                        } else if(itemstack.getItem() instanceof ItemSword && itemstack1.getItem() instanceof ItemSword) {
+                           ItemSword itemarmor = (ItemSword)itemstack.getItem();
+                           ItemSword itemarmor1 = (ItemSword)itemstack1.getItem();
+                           if(itemarmor.func_82803_g() == itemarmor1.func_82803_g()) {
+                              flag = itemstack.getItemDamage() > itemstack1.getItemDamage() || itemstack.hasTagCompound() && !itemstack1.hasTagCompound();
                            } else {
-                              var15 = var17.func_82803_g() > var18.func_82803_g();
+                              flag = itemarmor.func_82803_g() > itemarmor1.func_82803_g();
                            }
                         } else {
-                           var15 = false;
+                           flag = false;
                         }
-                     } else if(var13.getItem() instanceof ItemArmor && !(var16.getItem() instanceof ItemArmor)) {
-                        var15 = true;
-                     } else if(var13.getItem() instanceof ItemArmor && var16.getItem() instanceof ItemArmor) {
-                        ItemArmor var19 = (ItemArmor)var13.getItem();
-                        ItemArmor var20 = (ItemArmor)var16.getItem();
+                     } else if(itemstack.getItem() instanceof ItemArmor && !(itemstack1.getItem() instanceof ItemArmor)) {
+                        flag = true;
+                     } else if(itemstack.getItem() instanceof ItemArmor && itemstack1.getItem() instanceof ItemArmor) {
+                        ItemArmor var19 = (ItemArmor)itemstack.getItem();
+                        ItemArmor var20 = (ItemArmor)itemstack1.getItem();
                         if(var19.damageReduceAmount == var20.damageReduceAmount) {
-                           var15 = var13.getItemDamage() > var16.getItemDamage() || var13.hasTagCompound() && !var16.hasTagCompound();
+                           flag = itemstack.getItemDamage() > itemstack1.getItemDamage() || itemstack.hasTagCompound() && !itemstack1.hasTagCompound();
                         } else {
-                           var15 = var19.damageReduceAmount > var20.damageReduceAmount;
+                           flag = var19.damageReduceAmount > var20.damageReduceAmount;
                         }
                      } else {
-                        var15 = false;
+                        flag = false;
                      }
                   }
 
-                  if(var15) {
-                     if(var16 != null && this.rand.nextFloat() - 0.1F < this.equipmentDropChances[var14]) {
-                        this.entityDropItem(var16, 0.0F);
+                  if(flag) {
+                     if(itemstack1 != null && this.rand.nextFloat() - 0.1F < this.equipmentDropChances[i]) {
+                        this.entityDropItem(itemstack1, 0.0F);
                      }
 
-                     this.setCurrentItemOrArmor(var14, var13);
-                     this.equipmentDropChances[var14] = 2.0F;
+                     this.setCurrentItemOrArmor(i, itemstack);
+                     this.equipmentDropChances[i] = 2.0F;
                      this.persistenceRequired = true;
-                     this.onItemPickup(var12, 1);
-                     var12.setDead();
+                     this.onItemPickup(entityitem, 1);
+                     entityitem.setDead();
                   }
                }
             }
@@ -1230,20 +1295,20 @@
    }
 
    protected void func_85033_bc() {
-      List var1 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
-      if(var1 != null && !var1.isEmpty()) {
-         for(int var2 = 0; var2 < var1.size(); ++var2) {
-            Entity var3 = (Entity)var1.get(var2);
-            if(var3.canBePushed()) {
-               this.collideWithEntity(var3);
+      List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+      if(list != null && !list.isEmpty()) {
+         for(int i = 0; i < list.size(); ++i) {
+            Entity entity = (Entity)list.get(i);
+            if(entity.canBePushed()) {
+               this.collideWithEntity(entity);
             }
          }
       }
 
    }
 
-   protected void collideWithEntity(Entity var1) {
-      var1.applyEntityCollision(this);
+   protected void collideWithEntity(Entity entity) {
+      entity.applyEntityCollision(this);
    }
 
    protected boolean isAIEnabled() {
@@ -1269,9 +1334,9 @@
       }
 
       if(this.isSprinting()) {
-         float var1 = this.rotationYaw * 0.017453292F;
-         this.motionX -= (double)(MathHelper.sin(var1) * 0.2F);
-         this.motionZ += (double)(MathHelper.cos(var1) * 0.2F);
+         float f = this.rotationYaw * 0.017453292F;
+         this.motionX -= (double)(MathHelper.sin(f) * 0.2F);
+         this.motionZ += (double)(MathHelper.cos(f) * 0.2F);
       }
 
       this.isAirBorne = true;
@@ -1283,24 +1348,24 @@
 
    protected void despawnEntity() {
       if(!this.persistenceRequired) {
-         EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
-         if(var1 != null) {
-            double var2 = var1.posX - this.posX;
-            double var4 = var1.posY - this.posY;
-            double var6 = var1.posZ - this.posZ;
-            double var8 = var2 * var2 + var4 * var4 + var6 * var6;
-            if(this.canDespawn() && var8 > 16384.0D) {
+         EntityPlayer entityhuman = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
+         if(entityhuman != null) {
+            double d0 = entityhuman.posX - this.posX;
+            double d1 = entityhuman.posY - this.posY;
+            double d2 = entityhuman.posZ - this.posZ;
+            double d3 = d0 * d0 + d1 * d1 + d2 * d2;
+            if(this.canDespawn() && d3 > 16384.0D) {
                this.setDead();
             }
 
-            if(this.entityAge > 600 && this.rand.nextInt(800) == 0 && var8 > 1024.0D && this.canDespawn()) {
+            if(this.entityAge > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0D && this.canDespawn()) {
                this.setDead();
-            } else if(var8 < 1024.0D) {
+            } else if(d3 < 1024.0D) {
                this.entityAge = 0;
             }
          }
-
       }
+
    }
 
    protected void updateAITasks() {
@@ -1341,11 +1406,11 @@
       this.despawnEntity();
       this.moveStrafing = 0.0F;
       this.moveForward = 0.0F;
-      float var1 = 8.0F;
+      float f = 8.0F;
       if(this.rand.nextFloat() < 0.02F) {
-         EntityPlayer var2 = this.worldObj.getClosestPlayerToEntity(this, (double)var1);
-         if(var2 != null) {
-            this.currentTarget = var2;
+         EntityPlayer flag = this.worldObj.getClosestPlayerToEntity(this, (double)f);
+         if(flag != null) {
+            this.currentTarget = flag;
             this.numTicksToChaseTarget = 10 + this.rand.nextInt(20);
          } else {
             this.randomYawVelocity = (this.rand.nextFloat() - 0.5F) * 20.0F;
@@ -1354,7 +1419,7 @@
 
       if(this.currentTarget != null) {
          this.faceEntity(this.currentTarget, 10.0F, (float)this.getVerticalFaceSpeed());
-         if(this.numTicksToChaseTarget-- <= 0 || this.currentTarget.isDead || this.currentTarget.getDistanceSqToEntity(this) > (double)(var1 * var1)) {
+         if(this.numTicksToChaseTarget-- <= 0 || this.currentTarget.isDead || this.currentTarget.getDistanceSqToEntity(this) > (double)(f * f)) {
             this.currentTarget = null;
          }
       } else {
@@ -1367,18 +1432,18 @@
       }
 
       boolean var4 = this.isInWater();
-      boolean var3 = this.handleLavaMovement();
-      if(var4 || var3) {
+      boolean flag1 = this.handleLavaMovement();
+      if(var4 || flag1) {
          this.isJumping = this.rand.nextFloat() < 0.8F;
       }
 
    }
 
    protected void updateArmSwingProgress() {
-      int var1 = this.getArmSwingAnimationEnd();
+      int i = this.getArmSwingAnimationEnd();
       if(this.isSwingInProgress) {
          ++this.swingProgressInt;
-         if(this.swingProgressInt >= var1) {
+         if(this.swingProgressInt >= i) {
             this.swingProgressInt = 0;
             this.isSwingInProgress = false;
          }
@@ -1386,42 +1451,42 @@
          this.swingProgressInt = 0;
       }
 
-      this.swingProgress = (float)this.swingProgressInt / (float)var1;
+      this.swingProgress = (float)this.swingProgressInt / (float)i;
    }
 
    public int getVerticalFaceSpeed() {
       return 40;
    }
 
-   public void faceEntity(Entity var1, float var2, float var3) {
-      double var4 = var1.posX - this.posX;
-      double var6 = var1.posZ - this.posZ;
-      double var9;
-      if(var1 instanceof EntityLiving) {
-         EntityLiving var8 = (EntityLiving)var1;
-         var9 = this.posY + (double)this.getEyeHeight() - (var8.posY + (double)var8.getEyeHeight());
+   public void faceEntity(Entity entity, float f, float f1) {
+      double d0 = entity.posX - this.posX;
+      double d1 = entity.posZ - this.posZ;
+      double d2;
+      if(entity instanceof EntityLiving) {
+         EntityLiving entityliving = (EntityLiving)entity;
+         d2 = this.posY + (double)this.getEyeHeight() - (entityliving.posY + (double)entityliving.getEyeHeight());
       } else {
-         var9 = (var1.boundingBox.minY + var1.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
+         d2 = (entity.boundingBox.minY + entity.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
       }
 
-      double var11 = (double)MathHelper.sqrt_double(var4 * var4 + var6 * var6);
-      float var13 = (float)(Math.atan2(var6, var4) * 180.0D / 3.1415927410125732D) - 90.0F;
-      float var14 = (float)(-(Math.atan2(var9, var11) * 180.0D / 3.1415927410125732D));
-      this.rotationPitch = -this.updateRotation(this.rotationPitch, var14, var3);
-      this.rotationYaw = this.updateRotation(this.rotationYaw, var13, var2);
+      double d3 = (double)MathHelper.sqrt_double(d0 * d0 + d1 * d1);
+      float f2 = (float)(Math.atan2(d1, d0) * 180.0D / 3.1415927410125732D) - 90.0F;
+      float f3 = (float)(-(Math.atan2(d2, d3) * 180.0D / 3.1415927410125732D));
+      this.rotationPitch = -this.updateRotation(this.rotationPitch, f3, f1);
+      this.rotationYaw = this.updateRotation(this.rotationYaw, f2, f);
    }
 
-   private float updateRotation(float var1, float var2, float var3) {
-      float var4 = MathHelper.wrapAngleTo180_float(var2 - var1);
-      if(var4 > var3) {
-         var4 = var3;
+   private float updateRotation(float f, float f1, float f2) {
+      float f3 = MathHelper.wrapAngleTo180_float(f1 - f);
+      if(f3 > f2) {
+         f3 = f2;
       }
 
-      if(var4 < -var3) {
-         var4 = -var3;
+      if(f3 < -f2) {
+         f3 = -f2;
       }
 
-      return var1 + var4;
+      return f + f3;
    }
 
    public boolean getCanSpawnHere() {
@@ -1429,32 +1494,37 @@
    }
 
    protected void kill() {
-      this.attackEntityFrom(DamageSource.outOfWorld, 4);
+      EntityDamageByBlockEvent event = new EntityDamageByBlockEvent((org.bukkit.block.Block)null, this.getBukkitEntity(), DamageCause.VOID, 4);
+      this.worldObj.getServer().getPluginManager().callEvent(event);
+      if(!event.isCancelled() && event.getDamage() != 0) {
+         event.getEntity().setLastDamageCause(event);
+         this.attackEntityFrom(DamageSource.outOfWorld, event.getDamage());
+      }
    }
 
    public Vec3 getLookVec() {
       return this.getLook(1.0F);
    }
 
-   public Vec3 getLook(float var1) {
-      float var2;
-      float var3;
-      float var4;
-      float var5;
-      if(var1 == 1.0F) {
-         var2 = MathHelper.cos(-this.rotationYaw * 0.017453292F - 3.1415927F);
-         var3 = MathHelper.sin(-this.rotationYaw * 0.017453292F - 3.1415927F);
-         var4 = -MathHelper.cos(-this.rotationPitch * 0.017453292F);
-         var5 = MathHelper.sin(-this.rotationPitch * 0.017453292F);
-         return this.worldObj.getWorldVec3Pool().getVecFromPool((double)(var3 * var4), (double)var5, (double)(var2 * var4));
+   public Vec3 getLook(float f) {
+      float f1;
+      float f2;
+      float f3;
+      float f4;
+      if(f == 1.0F) {
+         f1 = MathHelper.cos(-this.rotationYaw * 0.017453292F - 3.1415927F);
+         f2 = MathHelper.sin(-this.rotationYaw * 0.017453292F - 3.1415927F);
+         f3 = -MathHelper.cos(-this.rotationPitch * 0.017453292F);
+         f4 = MathHelper.sin(-this.rotationPitch * 0.017453292F);
+         return this.worldObj.getWorldVec3Pool().getVecFromPool((double)(f2 * f3), (double)f4, (double)(f1 * f3));
       } else {
-         var2 = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * var1;
-         var3 = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * var1;
-         var4 = MathHelper.cos(-var3 * 0.017453292F - 3.1415927F);
-         var5 = MathHelper.sin(-var3 * 0.017453292F - 3.1415927F);
-         float var6 = -MathHelper.cos(-var2 * 0.017453292F);
-         float var7 = MathHelper.sin(-var2 * 0.017453292F);
-         return this.worldObj.getWorldVec3Pool().getVecFromPool((double)(var5 * var6), (double)var7, (double)(var4 * var6));
+         f1 = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * f;
+         f2 = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * f;
+         f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
+         f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
+         float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+         float f6 = MathHelper.sin(-f1 * 0.017453292F);
+         return this.worldObj.getWorldVec3Pool().getVecFromPool((double)(f4 * f5), (double)f6, (double)(f3 * f5));
       }
    }
 
@@ -1467,22 +1537,22 @@
    }
 
    protected void updatePotionEffects() {
-      Iterator var1 = this.activePotionsMap.keySet().iterator();
+      Iterator iterator = this.activePotionsMap.keySet().iterator();
 
-      while(var1.hasNext()) {
-         Integer var2 = (Integer)var1.next();
-         PotionEffect var3 = (PotionEffect)this.activePotionsMap.get(var2);
-         if(!var3.onUpdate(this)) {
+      while(iterator.hasNext()) {
+         Integer i = (Integer)iterator.next();
+         PotionEffect flag = (PotionEffect)this.activePotionsMap.get(i);
+         if(!flag.onUpdate(this)) {
             if(!this.worldObj.isRemote) {
-               var1.remove();
-               this.onFinishedPotionEffect(var3);
+               iterator.remove();
+               this.onFinishedPotionEffect(flag);
             }
-         } else if(var3.getDuration() % 600 == 0) {
-            this.onChangedPotionEffect(var3);
+         } else if(flag.getDuration() % 600 == 0) {
+            this.onChangedPotionEffect(flag);
          }
       }
 
-      int var11;
+      int i1;
       if(this.potionsNeedUpdate) {
          if(!this.worldObj.isRemote) {
             if(this.activePotionsMap.isEmpty()) {
@@ -1490,9 +1560,9 @@
                this.dataWatcher.updateObject(8, Integer.valueOf(0));
                this.setHasActivePotion(false);
             } else {
-               var11 = PotionHelper.calcPotionLiquidColor(this.activePotionsMap.values());
+               i1 = PotionHelper.calcPotionLiquidColor(this.activePotionsMap.values());
                this.dataWatcher.updateObject(9, Byte.valueOf((byte)(PotionHelper.func_82817_b(this.activePotionsMap.values())?1:0)));
-               this.dataWatcher.updateObject(8, Integer.valueOf(var11));
+               this.dataWatcher.updateObject(8, Integer.valueOf(i1));
                this.setHasActivePotion(this.isPotionActive(Potion.invisibility.id));
             }
          }
@@ -1500,39 +1570,39 @@
          this.potionsNeedUpdate = false;
       }
 
-      var11 = this.dataWatcher.getWatchableObjectInt(8);
-      boolean var12 = this.dataWatcher.getWatchableObjectByte(9) > 0;
-      if(var11 > 0) {
-         boolean var4 = false;
+      i1 = this.dataWatcher.getWatchableObjectInt(8);
+      boolean flag1 = this.dataWatcher.getWatchableObjectByte(9) > 0;
+      if(i1 > 0) {
+         boolean flag1 = false;
          if(!this.getHasActivePotion()) {
-            var4 = this.rand.nextBoolean();
+            flag1 = this.rand.nextBoolean();
          } else {
-            var4 = this.rand.nextInt(15) == 0;
+            flag1 = this.rand.nextInt(15) == 0;
          }
 
-         if(var12) {
-            var4 &= this.rand.nextInt(5) == 0;
+         if(flag1) {
+            flag1 &= this.rand.nextInt(5) == 0;
          }
 
-         if(var4 && var11 > 0) {
-            double var5 = (double)(var11 >> 16 & 255) / 255.0D;
-            double var7 = (double)(var11 >> 8 & 255) / 255.0D;
-            double var9 = (double)(var11 >> 0 & 255) / 255.0D;
-            this.worldObj.spawnParticle(var12?"mobSpellAmbient":"mobSpell", this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height - (double)this.yOffset, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, var5, var7, var9);
+         if(flag1 && i1 > 0) {
+            double d0 = (double)(i1 >> 16 & 255) / 255.0D;
+            double d1 = (double)(i1 >> 8 & 255) / 255.0D;
+            double d2 = (double)(i1 >> 0 & 255) / 255.0D;
+            this.worldObj.spawnParticle(flag1?"mobSpellAmbient":"mobSpell", this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height - (double)this.yOffset, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, d0, d1, d2);
          }
       }
 
    }
 
    public void clearActivePotions() {
-      Iterator var1 = this.activePotionsMap.keySet().iterator();
+      Iterator iterator = this.activePotionsMap.keySet().iterator();
 
-      while(var1.hasNext()) {
-         Integer var2 = (Integer)var1.next();
-         PotionEffect var3 = (PotionEffect)this.activePotionsMap.get(var2);
+      while(iterator.hasNext()) {
+         Integer integer = (Integer)iterator.next();
+         PotionEffect mobeffect = (PotionEffect)this.activePotionsMap.get(integer);
          if(!this.worldObj.isRemote) {
-            var1.remove();
-            this.onFinishedPotionEffect(var3);
+            iterator.remove();
+            this.onFinishedPotionEffect(mobeffect);
          }
       }
 
@@ -1542,35 +1612,35 @@
       return this.activePotionsMap.values();
    }
 
-   public boolean isPotionActive(int var1) {
-      return this.activePotionsMap.containsKey(Integer.valueOf(var1));
+   public boolean isPotionActive(int i) {
+      return this.activePotionsMap.containsKey(Integer.valueOf(i));
    }
 
-   public boolean isPotionActive(Potion var1) {
-      return this.activePotionsMap.containsKey(Integer.valueOf(var1.id));
+   public boolean isPotionActive(Potion mobeffectlist) {
+      return this.activePotionsMap.containsKey(Integer.valueOf(mobeffectlist.id));
    }
 
-   public PotionEffect getActivePotionEffect(Potion var1) {
-      return (PotionEffect)this.activePotionsMap.get(Integer.valueOf(var1.id));
+   public PotionEffect getActivePotionEffect(Potion mobeffectlist) {
+      return (PotionEffect)this.activePotionsMap.get(Integer.valueOf(mobeffectlist.id));
    }
 
-   public void addPotionEffect(PotionEffect var1) {
-      if(this.isPotionApplicable(var1)) {
-         if(this.activePotionsMap.containsKey(Integer.valueOf(var1.getPotionID()))) {
-            ((PotionEffect)this.activePotionsMap.get(Integer.valueOf(var1.getPotionID()))).combine(var1);
-            this.onChangedPotionEffect((PotionEffect)this.activePotionsMap.get(Integer.valueOf(var1.getPotionID())));
+   public void addPotionEffect(PotionEffect mobeffect) {
+      if(this.isPotionApplicable(mobeffect)) {
+         if(this.activePotionsMap.containsKey(Integer.valueOf(mobeffect.getPotionID()))) {
+            ((PotionEffect)this.activePotionsMap.get(Integer.valueOf(mobeffect.getPotionID()))).combine(mobeffect);
+            this.onChangedPotionEffect((PotionEffect)this.activePotionsMap.get(Integer.valueOf(mobeffect.getPotionID())));
          } else {
-            this.activePotionsMap.put(Integer.valueOf(var1.getPotionID()), var1);
-            this.onNewPotionEffect(var1);
+            this.activePotionsMap.put(Integer.valueOf(mobeffect.getPotionID()), mobeffect);
+            this.onNewPotionEffect(mobeffect);
          }
-
       }
+
    }
 
-   public boolean isPotionApplicable(PotionEffect var1) {
+   public boolean isPotionApplicable(PotionEffect mobeffect) {
       if(this.getCreatureAttribute() == EnumCreatureAttribute.UNDEAD) {
-         int var2 = var1.getPotionID();
-         if(var2 == Potion.regeneration.id || var2 == Potion.poison.id) {
+         int i = mobeffect.getPotionID();
+         if(i == Potion.regeneration.id || i == Potion.poison.id) {
             return false;
          }
       }
@@ -1582,41 +1652,41 @@
       return this.getCreatureAttribute() == EnumCreatureAttribute.UNDEAD;
    }
 
-   public void removePotionEffect(int var1) {
-      PotionEffect var2 = (PotionEffect)this.activePotionsMap.remove(Integer.valueOf(var1));
-      if(var2 != null) {
-         this.onFinishedPotionEffect(var2);
+   public void removePotionEffect(int i) {
+      PotionEffect mobeffect = (PotionEffect)this.activePotionsMap.remove(Integer.valueOf(i));
+      if(mobeffect != null) {
+         this.onFinishedPotionEffect(mobeffect);
       }
 
    }
 
-   protected void onNewPotionEffect(PotionEffect var1) {
+   protected void onNewPotionEffect(PotionEffect mobeffect) {
       this.potionsNeedUpdate = true;
    }
 
-   protected void onChangedPotionEffect(PotionEffect var1) {
+   protected void onChangedPotionEffect(PotionEffect mobeffect) {
       this.potionsNeedUpdate = true;
    }
 
-   protected void onFinishedPotionEffect(PotionEffect var1) {
+   protected void onFinishedPotionEffect(PotionEffect mobeffect) {
       this.potionsNeedUpdate = true;
    }
 
    public float getSpeedModifier() {
-      float var1 = 1.0F;
+      float f = 1.0F;
       if(this.isPotionActive(Potion.moveSpeed)) {
-         var1 *= 1.0F + 0.2F * (float)(this.getActivePotionEffect(Potion.moveSpeed).getAmplifier() + 1);
+         f *= 1.0F + 0.2F * (float)(this.getActivePotionEffect(Potion.moveSpeed).getAmplifier() + 1);
       }
 
       if(this.isPotionActive(Potion.moveSlowdown)) {
-         var1 *= 1.0F - 0.15F * (float)(this.getActivePotionEffect(Potion.moveSlowdown).getAmplifier() + 1);
+         f *= 1.0F - 0.15F * (float)(this.getActivePotionEffect(Potion.moveSlowdown).getAmplifier() + 1);
       }
 
-      return var1;
+      return f;
    }
 
-   public void setPositionAndUpdate(double var1, double var3, double var5) {
-      this.setLocationAndAngles(var1, var3, var5, this.rotationYaw, this.rotationPitch);
+   public void setPositionAndUpdate(double d0, double d1, double d2) {
+      this.setLocationAndAngles(d0, d1, d2, this.rotationYaw, this.rotationPitch);
    }
 
    public boolean isChild() {
@@ -1627,18 +1697,18 @@
       return EnumCreatureAttribute.UNDEFINED;
    }
 
-   public void renderBrokenItemStack(ItemStack var1) {
+   public void renderBrokenItemStack(ItemStack itemstack) {
       this.func_85030_a("random.break", 0.8F, 0.8F + this.worldObj.rand.nextFloat() * 0.4F);
 
-      for(int var2 = 0; var2 < 5; ++var2) {
-         Vec3 var3 = this.worldObj.getWorldVec3Pool().getVecFromPool(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
-         var3.rotateAroundX(-this.rotationPitch * 3.1415927F / 180.0F);
-         var3.rotateAroundY(-this.rotationYaw * 3.1415927F / 180.0F);
-         Vec3 var4 = this.worldObj.getWorldVec3Pool().getVecFromPool(((double)this.rand.nextFloat() - 0.5D) * 0.3D, (double)(-this.rand.nextFloat()) * 0.6D - 0.3D, 0.6D);
-         var4.rotateAroundX(-this.rotationPitch * 3.1415927F / 180.0F);
-         var4.rotateAroundY(-this.rotationYaw * 3.1415927F / 180.0F);
-         var4 = var4.addVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ);
-         this.worldObj.spawnParticle("iconcrack_" + var1.getItem().shiftedIndex, var4.xCoord, var4.yCoord, var4.zCoord, var3.xCoord, var3.yCoord + 0.05D, var3.zCoord);
+      for(int i = 0; i < 5; ++i) {
+         Vec3 vec3d = this.worldObj.getWorldVec3Pool().getVecFromPool(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+         vec3d.rotateAroundX(-this.rotationPitch * 3.1415927F / 180.0F);
+         vec3d.rotateAroundY(-this.rotationYaw * 3.1415927F / 180.0F);
+         Vec3 vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(((double)this.rand.nextFloat() - 0.5D) * 0.3D, (double)(-this.rand.nextFloat()) * 0.6D - 0.3D, 0.6D);
+         vec3d1.rotateAroundX(-this.rotationPitch * 3.1415927F / 180.0F);
+         vec3d1.rotateAroundY(-this.rotationYaw * 3.1415927F / 180.0F);
+         vec3d1 = vec3d1.addVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ);
+         this.worldObj.spawnParticle("iconcrack_" + itemstack.getItem().shiftedIndex, vec3d1.xCoord, vec3d1.yCoord, vec3d1.zCoord, vec3d.xCoord, vec3d.yCoord + 0.05D, vec3d.zCoord);
       }
 
    }
@@ -1647,13 +1717,13 @@
       if(this.getAttackTarget() == null) {
          return 3;
       } else {
-         int var1 = (int)((float)this.health - (float)this.getMaxHealth() * 0.33F);
-         var1 -= (3 - this.worldObj.difficultySetting) * 4;
-         if(var1 < 0) {
-            var1 = 0;
+         int i = (int)((float)this.health - (float)this.getMaxHealth() * 0.33F);
+         i -= (3 - this.worldObj.difficultySetting) * 4;
+         if(i < 0) {
+            i = 0;
          }
 
-         return var1 + 3;
+         return i + 3;
       }
    }
 
@@ -1661,42 +1731,42 @@
       return this.equipment[0];
    }
 
-   public ItemStack getEquipmentInSlot(int var1) {
-      return this.equipment[var1];
+   public ItemStack getEquipmentInSlot(int i) {
+      return this.equipment[i];
    }
 
-   public ItemStack getCurrentArmor(int var1) {
-      return this.equipment[var1 + 1];
+   public ItemStack getCurrentArmor(int i) {
+      return this.equipment[i + 1];
    }
 
-   public void setCurrentItemOrArmor(int var1, ItemStack var2) {
-      this.equipment[var1] = var2;
+   public void setCurrentItemOrArmor(int i, ItemStack itemstack) {
+      this.equipment[i] = itemstack;
    }
 
    public ItemStack[] getInventory() {
       return this.equipment;
    }
 
-   protected void dropEquipment(boolean var1, int var2) {
-      for(int var3 = 0; var3 < this.getInventory().length; ++var3) {
-         ItemStack var4 = this.getEquipmentInSlot(var3);
-         boolean var5 = this.equipmentDropChances[var3] > 1.0F;
-         if(var4 != null && (var1 || var5) && this.rand.nextFloat() - (float)var2 * 0.01F < this.equipmentDropChances[var3]) {
-            if(!var5 && var4.isItemStackDamageable()) {
-               int var6 = Math.max(var4.getMaxDamage() - 25, 1);
-               int var7 = var4.getMaxDamage() - this.rand.nextInt(this.rand.nextInt(var6) + 1);
-               if(var7 > var6) {
-                  var7 = var6;
+   protected void dropEquipment(boolean flag, int i) {
+      for(int j = 0; j < this.getInventory().length; ++j) {
+         ItemStack itemstack = this.getEquipmentInSlot(j);
+         boolean flag1 = this.equipmentDropChances[j] > 1.0F;
+         if(itemstack != null && (flag || flag1) && this.rand.nextFloat() - (float)i * 0.01F < this.equipmentDropChances[j]) {
+            if(!flag1 && itemstack.isItemStackDamageable()) {
+               int k = Math.max(itemstack.getMaxDamage() - 25, 1);
+               int l = itemstack.getMaxDamage() - this.rand.nextInt(this.rand.nextInt(k) + 1);
+               if(l > k) {
+                  l = k;
                }
 
-               if(var7 < 1) {
-                  var7 = 1;
+               if(l < 1) {
+                  l = 1;
                }
 
-               var4.setItemDamage(var7);
+               itemstack.setItemDamage(l);
             }
 
-            this.entityDropItem(var4, 0.0F);
+            this.entityDropItem(itemstack, 0.0F);
          }
       }
 
@@ -1704,30 +1774,30 @@
 
    protected void func_82164_bB() {
       if(this.rand.nextFloat() < field_82176_d[this.worldObj.difficultySetting]) {
-         int var1 = this.rand.nextInt(2);
-         float var2 = this.worldObj.difficultySetting == 3?0.1F:0.25F;
+         int i = this.rand.nextInt(2);
+         float f = this.worldObj.difficultySetting == 3?0.1F:0.25F;
          if(this.rand.nextFloat() < 0.07F) {
-            ++var1;
+            ++i;
          }
 
          if(this.rand.nextFloat() < 0.07F) {
-            ++var1;
+            ++i;
          }
 
          if(this.rand.nextFloat() < 0.07F) {
-            ++var1;
+            ++i;
          }
 
-         for(int var3 = 3; var3 >= 0; --var3) {
-            ItemStack var4 = this.getCurrentArmor(var3);
-            if(var3 < 3 && this.rand.nextFloat() < var2) {
+         for(int j = 3; j >= 0; --j) {
+            ItemStack itemstack = this.getCurrentArmor(j);
+            if(j < 3 && this.rand.nextFloat() < f) {
                break;
             }
 
-            if(var4 == null) {
-               Item var5 = getArmorItemForSlot(var3 + 1, var1);
-               if(var5 != null) {
-                  this.setCurrentItemOrArmor(var3 + 1, new ItemStack(var5));
+            if(itemstack == null) {
+               Item item = getArmorItemForSlot(j + 1, i);
+               if(item != null) {
+                  this.setCurrentItemOrArmor(j + 1, new ItemStack(item));
                }
             }
          }
@@ -1735,28 +1805,28 @@
 
    }
 
-   public void onItemPickup(Entity var1, int var2) {
-      if(!var1.isDead && !this.worldObj.isRemote) {
-         EntityTracker var3 = ((WorldServer)this.worldObj).getEntityTracker();
-         if(var1 instanceof EntityItem) {
-            var3.sendPacketToTrackedPlayers(var1, new Packet22Collect(var1.entityId, this.entityId));
+   public void onItemPickup(Entity entity, int i) {
+      if(!entity.isDead && !this.worldObj.isRemote) {
+         EntityTracker entitytracker = ((WorldServer)this.worldObj).getEntityTracker();
+         if(entity instanceof EntityItem) {
+            entitytracker.sendPacketToTrackedPlayers(entity, new Packet22Collect(entity.entityId, this.entityId));
          }
 
-         if(var1 instanceof EntityArrow) {
-            var3.sendPacketToTrackedPlayers(var1, new Packet22Collect(var1.entityId, this.entityId));
+         if(entity instanceof EntityArrow) {
+            entitytracker.sendPacketToTrackedPlayers(entity, new Packet22Collect(entity.entityId, this.entityId));
          }
 
-         if(var1 instanceof EntityXPOrb) {
-            var3.sendPacketToTrackedPlayers(var1, new Packet22Collect(var1.entityId, this.entityId));
+         if(entity instanceof EntityXPOrb) {
+            entitytracker.sendPacketToTrackedPlayers(entity, new Packet22Collect(entity.entityId, this.entityId));
          }
       }
 
    }
 
-   public static int func_82159_b(ItemStack var0) {
-      if(var0.itemID != Block.pumpkin.blockID && var0.itemID != Item.skull.shiftedIndex) {
-         if(var0.getItem() instanceof ItemArmor) {
-            switch(((ItemArmor)var0.getItem()).armorType) {
+   public static int func_82159_b(ItemStack itemstack) {
+      if(itemstack.itemID != Block.pumpkin.blockID && itemstack.itemID != Item.skull.shiftedIndex) {
+         if(itemstack.getItem() instanceof ItemArmor) {
+            switch(((ItemArmor)itemstack.getItem()).armorType) {
             case 0:
                return 4;
             case 1:
@@ -1774,54 +1844,54 @@
       }
    }
 
-   public static Item getArmorItemForSlot(int var0, int var1) {
-      switch(var0) {
+   public static Item getArmorItemForSlot(int i, int j) {
+      switch(i) {
       case 4:
-         if(var1 == 0) {
+         if(j == 0) {
             return Item.helmetLeather;
-         } else if(var1 == 1) {
+         } else if(j == 1) {
             return Item.helmetGold;
-         } else if(var1 == 2) {
+         } else if(j == 2) {
             return Item.helmetChain;
-         } else if(var1 == 3) {
+         } else if(j == 3) {
             return Item.helmetSteel;
-         } else if(var1 == 4) {
+         } else if(j == 4) {
             return Item.helmetDiamond;
          }
       case 3:
-         if(var1 == 0) {
+         if(j == 0) {
             return Item.plateLeather;
-         } else if(var1 == 1) {
+         } else if(j == 1) {
             return Item.plateGold;
-         } else if(var1 == 2) {
+         } else if(j == 2) {
             return Item.plateChain;
-         } else if(var1 == 3) {
+         } else if(j == 3) {
             return Item.plateSteel;
-         } else if(var1 == 4) {
+         } else if(j == 4) {
             return Item.plateDiamond;
          }
       case 2:
-         if(var1 == 0) {
+         if(j == 0) {
             return Item.legsLeather;
-         } else if(var1 == 1) {
+         } else if(j == 1) {
             return Item.legsGold;
-         } else if(var1 == 2) {
+         } else if(j == 2) {
             return Item.legsChain;
-         } else if(var1 == 3) {
+         } else if(j == 3) {
             return Item.legsSteel;
-         } else if(var1 == 4) {
+         } else if(j == 4) {
             return Item.legsDiamond;
          }
       case 1:
-         if(var1 == 0) {
+         if(j == 0) {
             return Item.bootsLeather;
-         } else if(var1 == 1) {
+         } else if(j == 1) {
             return Item.bootsGold;
-         } else if(var1 == 2) {
+         } else if(j == 2) {
             return Item.bootsChain;
-         } else if(var1 == 3) {
+         } else if(j == 3) {
             return Item.bootsSteel;
-         } else if(var1 == 4) {
+         } else if(j == 4) {
             return Item.bootsDiamond;
          }
       default:
@@ -1834,10 +1904,10 @@
          EnchantmentHelper.addRandomEnchantment(this.rand, this.getHeldItem(), 5);
       }
 
-      for(int var1 = 0; var1 < 4; ++var1) {
-         ItemStack var2 = this.getCurrentArmor(var1);
-         if(var2 != null && this.rand.nextFloat() < field_82178_c[this.worldObj.difficultySetting]) {
-            EnchantmentHelper.addRandomEnchantment(this.rand, var2, 5);
+      for(int i = 0; i < 4; ++i) {
+         ItemStack itemstack = this.getCurrentArmor(i);
+         if(itemstack != null && this.rand.nextFloat() < field_82178_c[this.worldObj.difficultySetting]) {
+            EnchantmentHelper.addRandomEnchantment(this.rand, itemstack, 5);
          }
       }
 
@@ -1868,8 +1938,8 @@
       return this.dataWatcher.getWatchableObjectByte(10);
    }
 
-   public final void func_85034_r(int var1) {
-      this.dataWatcher.updateObject(10, Byte.valueOf((byte)var1));
+   public final void func_85034_r(int i) {
+      this.dataWatcher.updateObject(10, Byte.valueOf((byte)i));
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/EntityLookHelper.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLookHelper.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityLookHelper.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLookHelper.java
--- mcp-mcdev/net/minecraft/src/EntityLookHelper.java	2012-11-29 21:14:59.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityLookHelper.java	2012-11-29 20:44:16.000000000 -0800
@@ -3,6 +3,7 @@
 import net.minecraft.src.Entity;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.MathHelper;
+import org.bukkit.craftbukkit.TrigMath;
 
 public class EntityLookHelper {
 
@@ -15,30 +16,30 @@
    private double posZ;
 
 
-   public EntityLookHelper(EntityLiving var1) {
-      this.entity = var1;
+   public EntityLookHelper(EntityLiving entityliving) {
+      this.entity = entityliving;
    }
 
-   public void setLookPositionWithEntity(Entity var1, float var2, float var3) {
-      this.posX = var1.posX;
-      if(var1 instanceof EntityLiving) {
-         this.posY = var1.posY + (double)var1.getEyeHeight();
+   public void setLookPositionWithEntity(Entity entity, float f, float f1) {
+      this.posX = entity.posX;
+      if(entity instanceof EntityLiving) {
+         this.posY = entity.posY + (double)entity.getEyeHeight();
       } else {
-         this.posY = (var1.boundingBox.minY + var1.boundingBox.maxY) / 2.0D;
+         this.posY = (entity.boundingBox.minY + entity.boundingBox.maxY) / 2.0D;
       }
 
-      this.posZ = var1.posZ;
-      this.deltaLookYaw = var2;
-      this.deltaLookPitch = var3;
+      this.posZ = entity.posZ;
+      this.deltaLookYaw = f;
+      this.deltaLookPitch = f1;
       this.isLooking = true;
    }
 
-   public void setLookPosition(double var1, double var3, double var5, float var7, float var8) {
-      this.posX = var1;
-      this.posY = var3;
-      this.posZ = var5;
-      this.deltaLookYaw = var7;
-      this.deltaLookPitch = var8;
+   public void setLookPosition(double d0, double d1, double d2, float f, float f1) {
+      this.posX = d0;
+      this.posY = d1;
+      this.posZ = d2;
+      this.deltaLookYaw = f;
+      this.deltaLookPitch = f1;
       this.isLooking = true;
    }
 
@@ -46,41 +47,41 @@
       this.entity.rotationPitch = 0.0F;
       if(this.isLooking) {
          this.isLooking = false;
-         double var1 = this.posX - this.entity.posX;
-         double var3 = this.posY - (this.entity.posY + (double)this.entity.getEyeHeight());
-         double var5 = this.posZ - this.entity.posZ;
-         double var7 = (double)MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-         float var9 = (float)(Math.atan2(var5, var1) * 180.0D / 3.1415927410125732D) - 90.0F;
-         float var10 = (float)(-(Math.atan2(var3, var7) * 180.0D / 3.1415927410125732D));
-         this.entity.rotationPitch = this.updateRotation(this.entity.rotationPitch, var10, this.deltaLookPitch);
-         this.entity.rotationYawHead = this.updateRotation(this.entity.rotationYawHead, var9, this.deltaLookYaw);
+         double d0 = this.posX - this.entity.posX;
+         double d1 = this.posY - (this.entity.posY + (double)this.entity.getEyeHeight());
+         double d2 = this.posZ - this.entity.posZ;
+         double d3 = (double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);
+         float f = (float)(TrigMath.atan2(d2, d0) * 180.0D / 3.1415927410125732D) - 90.0F;
+         float f1 = (float)(-(TrigMath.atan2(d1, d3) * 180.0D / 3.1415927410125732D));
+         this.entity.rotationPitch = this.updateRotation(this.entity.rotationPitch, f1, this.deltaLookPitch);
+         this.entity.rotationYawHead = this.updateRotation(this.entity.rotationYawHead, f, this.deltaLookYaw);
       } else {
          this.entity.rotationYawHead = this.updateRotation(this.entity.rotationYawHead, this.entity.renderYawOffset, 10.0F);
       }
 
-      float var11 = MathHelper.wrapAngleTo180_float(this.entity.rotationYawHead - this.entity.renderYawOffset);
+      float f2 = MathHelper.wrapAngleTo180_float(this.entity.rotationYawHead - this.entity.renderYawOffset);
       if(!this.entity.getNavigator().noPath()) {
-         if(var11 < -75.0F) {
+         if(f2 < -75.0F) {
             this.entity.rotationYawHead = this.entity.renderYawOffset - 75.0F;
          }
 
-         if(var11 > 75.0F) {
+         if(f2 > 75.0F) {
             this.entity.rotationYawHead = this.entity.renderYawOffset + 75.0F;
          }
       }
 
    }
 
-   private float updateRotation(float var1, float var2, float var3) {
-      float var4 = MathHelper.wrapAngleTo180_float(var2 - var1);
-      if(var4 > var3) {
-         var4 = var3;
+   private float updateRotation(float f, float f1, float f2) {
+      float f3 = MathHelper.wrapAngleTo180_float(f1 - f);
+      if(f3 > f2) {
+         f3 = f2;
       }
 
-      if(var4 < -var3) {
-         var4 = -var3;
+      if(f3 < -f2) {
+         f3 = -f2;
       }
 
-      return var1 + var4;
+      return f + f3;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityMagmaCube.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMagmaCube.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityMagmaCube.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMagmaCube.java
--- mcp-mcdev/net/minecraft/src/EntityMagmaCube.java	2012-11-29 21:14:59.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMagmaCube.java	2012-11-29 20:44:16.000000000 -0800
@@ -1,13 +1,15 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.EntitySlime;
 import net.minecraft.src.Item;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntityMagmaCube extends EntitySlime {
 
-   public EntityMagmaCube(World var1) {
-      super(var1);
+   public EntityMagmaCube(World world) {
+      super(world);
       this.texture = "/mob/lava.png";
       this.isImmuneToFire = true;
       this.landMovementFactor = 0.2F;
@@ -21,7 +23,7 @@
       return this.getSlimeSize() * 3;
    }
 
-   public float getBrightness(float var1) {
+   public float getBrightness(float f) {
       return 1.0F;
    }
 
@@ -37,19 +39,21 @@
       return Item.magmaCream.shiftedIndex;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.getDropItemId();
-      if(var3 > 0 && this.getSlimeSize() > 1) {
-         int var4 = this.rand.nextInt(4) - 2;
-         if(var2 > 0) {
-            var4 += this.rand.nextInt(var2 + 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.getDropItemId();
+      if(j > 0 && this.getSlimeSize() > 1) {
+         int k = this.rand.nextInt(4) - 2;
+         if(i > 0) {
+            k += this.rand.nextInt(i + 1);
          }
 
-         for(int var5 = 0; var5 < var4; ++var5) {
-            this.dropItem(var3, 1);
+         if(k > 0) {
+            loot.add(new org.bukkit.inventory.ItemStack(j, k));
          }
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
    public boolean isBurning() {
@@ -69,7 +73,7 @@
       this.isAirBorne = true;
    }
 
-   protected void fall(float var1) {}
+   protected void fall(float f) {}
 
    protected boolean canDamagePlayer() {
       return true;
Binary files mcp-mcdev/net/minecraft/src/EntityMinecart.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMinecart.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityMinecart.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMinecart.java
--- mcp-mcdev/net/minecraft/src/EntityMinecart.java	2012-11-29 21:14:59.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMinecart.java	2012-11-29 20:44:16.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.Block;
@@ -19,6 +20,18 @@
 import net.minecraft.src.NBTTagList;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleCreateEvent;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.event.vehicle.VehicleMoveEvent;
+import org.bukkit.event.vehicle.VehicleUpdateEvent;
+import org.bukkit.inventory.InventoryHolder;
+import org.bukkit.util.Vector;
 
 public class EntityMinecart extends Entity implements IInventory {
 
@@ -37,18 +50,63 @@
    private double minecartZ;
    private double minecartYaw;
    private double minecartPitch;
+   public boolean slowWhenEmpty;
+   private double derailedX;
+   private double derailedY;
+   private double derailedZ;
+   private double flyingX;
+   private double flyingY;
+   private double flyingZ;
+   public double maxSpeed;
+   public List transaction;
+   private int maxStack;
 
 
-   public EntityMinecart(World var1) {
-      super(var1);
-      this.cargoItems = new ItemStack[36];
+   public ItemStack[] getContents() {
+      return this.cargoItems;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public InventoryHolder getOwner() {
+      org.bukkit.entity.Entity cart = this.getBukkitEntity();
+      return cart instanceof InventoryHolder?(InventoryHolder)cart:null;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
+   public EntityMinecart(World world) {
+      super(world);
+      this.slowWhenEmpty = true;
+      this.derailedX = 0.5D;
+      this.derailedY = 0.5D;
+      this.derailedZ = 0.5D;
+      this.flyingX = 0.95D;
+      this.flyingY = 0.95D;
+      this.flyingZ = 0.95D;
+      this.maxSpeed = 0.4D;
+      this.transaction = new ArrayList();
+      this.maxStack = 64;
+      this.cargoItems = new ItemStack[27];
       this.fuel = 0;
       this.field_70499_f = false;
       this.field_82345_h = true;
       this.preventEntitySpawning = true;
       this.setSize(0.98F, 0.7F);
       this.yOffset = this.height / 2.0F;
-      this.field_82344_g = var1 != null?var1.func_82735_a(this):null;
+      this.field_82344_g = world != null?world.func_82735_a(this):null;
    }
 
    protected boolean canTriggerWalking() {
@@ -62,8 +120,8 @@
       this.dataWatcher.addObject(19, new Integer(0));
    }
 
-   public AxisAlignedBB getCollisionBox(Entity var1) {
-      return var1.canBePushed()?var1.boundingBox:null;
+   public AxisAlignedBB getCollisionBox(Entity entity) {
+      return entity.canBePushed()?entity.boundingBox:null;
    }
 
    public AxisAlignedBB getBoundingBox() {
@@ -74,32 +132,40 @@
       return true;
    }
 
-   public EntityMinecart(World var1, double var2, double var4, double var6, int var8) {
-      this(var1);
-      this.setPosition(var2, var4 + (double)this.yOffset, var6);
+   public EntityMinecart(World world, double d0, double d1, double d2, int i) {
+      this(world);
+      this.setPosition(d0, d1 + (double)this.yOffset, d2);
       this.motionX = 0.0D;
       this.motionY = 0.0D;
       this.motionZ = 0.0D;
-      this.prevPosX = var2;
-      this.prevPosY = var4;
-      this.prevPosZ = var6;
-      this.minecartType = var8;
+      this.prevPosX = d0;
+      this.prevPosY = d1;
+      this.prevPosZ = d2;
+      this.minecartType = i;
+      this.worldObj.getServer().getPluginManager().callEvent(new VehicleCreateEvent((Vehicle)this.getBukkitEntity()));
    }
 
    public double getMountedYOffset() {
       return (double)this.height * 0.0D - 0.30000001192092896D;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
-      if(!this.worldObj.isRemote && !this.isDead) {
-         if(this.func_85032_ar()) {
-            return false;
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
+      if(this.func_85032_ar()) {
+         return false;
+      } else if(!this.worldObj.isRemote && !this.isDead) {
+         Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+         org.bukkit.entity.Entity passenger = damagesource.getEntity() == null?null:damagesource.getEntity().getBukkitEntity();
+         VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, i);
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(event.isCancelled()) {
+            return true;
          } else {
+            i = event.getDamage();
             this.func_70494_i(-this.func_70493_k());
             this.func_70497_h(10);
             this.setBeenAttacked();
-            this.setDamage(this.getDamage() + var2 * 10);
-            if(var1.getEntity() instanceof EntityPlayer && ((EntityPlayer)var1.getEntity()).capabilities.isCreativeMode) {
+            this.setDamage(this.getDamage() + i * 10);
+            if(damagesource.getEntity() instanceof EntityPlayer && ((EntityPlayer)damagesource.getEntity()).capabilities.isCreativeMode) {
                this.setDamage(100);
             }
 
@@ -108,31 +174,38 @@
                   this.riddenByEntity.mountEntity(this);
                }
 
+               VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
+               this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
+               if(destroyEvent.isCancelled()) {
+                  this.setDamage(40);
+                  return true;
+               }
+
                this.setDead();
                this.dropItemWithOffset(Item.minecartEmpty.shiftedIndex, 1, 0.0F);
                if(this.minecartType == 1) {
-                  EntityMinecart var3 = this;
+                  EntityMinecart entityminecart = this;
 
-                  for(int var4 = 0; var4 < var3.getSizeInventory(); ++var4) {
-                     ItemStack var5 = var3.getStackInSlot(var4);
-                     if(var5 != null) {
-                        float var6 = this.rand.nextFloat() * 0.8F + 0.1F;
-                        float var7 = this.rand.nextFloat() * 0.8F + 0.1F;
-                        float var8 = this.rand.nextFloat() * 0.8F + 0.1F;
-
-                        while(var5.stackSize > 0) {
-                           int var9 = this.rand.nextInt(21) + 10;
-                           if(var9 > var5.stackSize) {
-                              var9 = var5.stackSize;
+                  for(int j = 0; j < entityminecart.getSizeInventory(); ++j) {
+                     ItemStack itemstack = entityminecart.getStackInSlot(j);
+                     if(itemstack != null) {
+                        float f = this.rand.nextFloat() * 0.8F + 0.1F;
+                        float f1 = this.rand.nextFloat() * 0.8F + 0.1F;
+                        float f2 = this.rand.nextFloat() * 0.8F + 0.1F;
+
+                        while(itemstack.stackSize > 0) {
+                           int k = this.rand.nextInt(21) + 10;
+                           if(k > itemstack.stackSize) {
+                              k = itemstack.stackSize;
                            }
 
-                           var5.stackSize -= var9;
-                           EntityItem var10 = new EntityItem(this.worldObj, this.posX + (double)var6, this.posY + (double)var7, this.posZ + (double)var8, new ItemStack(var5.itemID, var9, var5.getItemDamage()));
-                           float var11 = 0.05F;
-                           var10.motionX = (double)((float)this.rand.nextGaussian() * var11);
-                           var10.motionY = (double)((float)this.rand.nextGaussian() * var11 + 0.2F);
-                           var10.motionZ = (double)((float)this.rand.nextGaussian() * var11);
-                           this.worldObj.spawnEntityInWorld(var10);
+                           itemstack.stackSize -= k;
+                           EntityItem entityitem = new EntityItem(this.worldObj, this.posX + (double)f, this.posY + (double)f1, this.posZ + (double)f2, new ItemStack(itemstack.itemID, k, itemstack.getItemDamage(), itemstack.getEnchantmentTagList()));
+                           float f3 = 0.05F;
+                           entityitem.motionX = (double)((float)this.rand.nextGaussian() * f3);
+                           entityitem.motionY = (double)((float)this.rand.nextGaussian() * f3 + 0.2F);
+                           entityitem.motionZ = (double)((float)this.rand.nextGaussian() * f3);
+                           this.worldObj.spawnEntityInWorld(entityitem);
                         }
                      }
                   }
@@ -156,30 +229,30 @@
 
    public void setDead() {
       if(this.field_82345_h) {
-         for(int var1 = 0; var1 < this.getSizeInventory(); ++var1) {
-            ItemStack var2 = this.getStackInSlot(var1);
-            if(var2 != null) {
-               float var3 = this.rand.nextFloat() * 0.8F + 0.1F;
-               float var4 = this.rand.nextFloat() * 0.8F + 0.1F;
-               float var5 = this.rand.nextFloat() * 0.8F + 0.1F;
-
-               while(var2.stackSize > 0) {
-                  int var6 = this.rand.nextInt(21) + 10;
-                  if(var6 > var2.stackSize) {
-                     var6 = var2.stackSize;
+         for(int i = 0; i < this.getSizeInventory(); ++i) {
+            ItemStack itemstack = this.getStackInSlot(i);
+            if(itemstack != null) {
+               float f = this.rand.nextFloat() * 0.8F + 0.1F;
+               float f1 = this.rand.nextFloat() * 0.8F + 0.1F;
+               float f2 = this.rand.nextFloat() * 0.8F + 0.1F;
+
+               while(itemstack.stackSize > 0) {
+                  int j = this.rand.nextInt(21) + 10;
+                  if(j > itemstack.stackSize) {
+                     j = itemstack.stackSize;
                   }
 
-                  var2.stackSize -= var6;
-                  EntityItem var7 = new EntityItem(this.worldObj, this.posX + (double)var3, this.posY + (double)var4, this.posZ + (double)var5, new ItemStack(var2.itemID, var6, var2.getItemDamage()));
-                  if(var2.hasTagCompound()) {
-                     var7.item.setTagCompound((NBTTagCompound)var2.getTagCompound().copy());
+                  itemstack.stackSize -= j;
+                  EntityItem entityitem = new EntityItem(this.worldObj, this.posX + (double)f, this.posY + (double)f1, this.posZ + (double)f2, new ItemStack(itemstack.itemID, j, itemstack.getItemDamage()));
+                  if(itemstack.hasTagCompound()) {
+                     entityitem.item.setTagCompound((NBTTagCompound)itemstack.getTagCompound().copy());
                   }
 
-                  float var8 = 0.05F;
-                  var7.motionX = (double)((float)this.rand.nextGaussian() * var8);
-                  var7.motionY = (double)((float)this.rand.nextGaussian() * var8 + 0.2F);
-                  var7.motionZ = (double)((float)this.rand.nextGaussian() * var8);
-                  this.worldObj.spawnEntityInWorld(var7);
+                  float f3 = 0.05F;
+                  entityitem.motionX = (double)((float)this.rand.nextGaussian() * f3);
+                  entityitem.motionY = (double)((float)this.rand.nextGaussian() * f3 + 0.2F);
+                  entityitem.motionZ = (double)((float)this.rand.nextGaussian() * f3);
+                  this.worldObj.spawnEntityInWorld(entityitem);
                }
             }
          }
@@ -192,12 +265,17 @@
 
    }
 
-   public void travelToTheEnd(int var1) {
+   public void travelToTheEnd(int i) {
       this.field_82345_h = false;
-      super.travelToTheEnd(var1);
+      super.travelToTheEnd(i);
    }
 
    public void onUpdate() {
+      double prevX = this.posX;
+      double prevY = this.posY;
+      double prevZ = this.posZ;
+      float prevYaw = this.rotationYaw;
+      float prevPitch = this.rotationPitch;
       if(this.field_82344_g != null) {
          this.field_82344_g.update();
       }
@@ -220,99 +298,98 @@
 
       if(this.worldObj.isRemote) {
          if(this.turnProgress > 0) {
-            double var1 = this.posX + (this.minecartX - this.posX) / (double)this.turnProgress;
-            double var3 = this.posY + (this.minecartY - this.posY) / (double)this.turnProgress;
-            double var5 = this.posZ + (this.minecartZ - this.posZ) / (double)this.turnProgress;
-            double var7 = MathHelper.wrapAngleTo180_double(this.minecartYaw - (double)this.rotationYaw);
-            this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.turnProgress);
+            double d0 = this.posX + (this.minecartX - this.posX) / (double)this.turnProgress;
+            double d1 = this.posY + (this.minecartY - this.posY) / (double)this.turnProgress;
+            double d2 = this.posZ + (this.minecartZ - this.posZ) / (double)this.turnProgress;
+            double d3 = MathHelper.wrapAngleTo180_double(this.minecartYaw - (double)this.rotationYaw);
+            this.rotationYaw = (float)((double)this.rotationYaw + d3 / (double)this.turnProgress);
             this.rotationPitch = (float)((double)this.rotationPitch + (this.minecartPitch - (double)this.rotationPitch) / (double)this.turnProgress);
             --this.turnProgress;
-            this.setPosition(var1, var3, var5);
+            this.setPosition(d0, d1, d2);
             this.setRotation(this.rotationYaw, this.rotationPitch);
          } else {
             this.setPosition(this.posX, this.posY, this.posZ);
             this.setRotation(this.rotationYaw, this.rotationPitch);
          }
-
       } else {
          this.prevPosX = this.posX;
          this.prevPosY = this.posY;
          this.prevPosZ = this.posZ;
          this.motionY -= 0.03999999910593033D;
-         int var9 = MathHelper.floor_double(this.posX);
-         int var10 = MathHelper.floor_double(this.posY);
-         int var11 = MathHelper.floor_double(this.posZ);
-         if(BlockRail.isRailBlockAt(this.worldObj, var9, var10 - 1, var11)) {
-            --var10;
+         int i = MathHelper.floor_double(this.posX);
+         int j = MathHelper.floor_double(this.posY);
+         int k = MathHelper.floor_double(this.posZ);
+         if(BlockRail.isRailBlockAt(this.worldObj, i, j - 1, k)) {
+            --j;
          }
 
-         double var12 = 0.4D;
-         double var14 = 0.0078125D;
-         int var16 = this.worldObj.getBlockId(var9, var10, var11);
-         if(BlockRail.isRailBlock(var16)) {
+         double d4 = this.maxSpeed;
+         double d5 = 0.0078125D;
+         int l = this.worldObj.getBlockId(i, j, k);
+         if(BlockRail.isRailBlock(l)) {
             this.fallDistance = 0.0F;
-            Vec3 var17 = this.func_70489_a(this.posX, this.posY, this.posZ);
-            int var18 = this.worldObj.getBlockMetadata(var9, var10, var11);
-            this.posY = (double)var10;
-            boolean var19 = false;
-            boolean var20 = false;
-            if(var16 == Block.railPowered.blockID) {
-               var19 = (var18 & 8) != 0;
-               var20 = !var19;
+            Vec3 vec3d = this.func_70489_a(this.posX, this.posY, this.posZ);
+            int i1 = this.worldObj.getBlockMetadata(i, j, k);
+            this.posY = (double)j;
+            boolean flag = false;
+            boolean flag1 = false;
+            if(l == Block.railPowered.blockID) {
+               flag = (i1 & 8) != 0;
+               flag1 = !flag;
             }
 
-            if(((BlockRail)Block.blocksList[var16]).isPowered()) {
-               var18 &= 7;
+            if(((BlockRail)Block.blocksList[l]).isPowered()) {
+               i1 &= 7;
             }
 
-            if(var18 >= 2 && var18 <= 5) {
-               this.posY = (double)(var10 + 1);
+            if(i1 >= 2 && i1 <= 5) {
+               this.posY = (double)(j + 1);
             }
 
-            if(var18 == 2) {
-               this.motionX -= var14;
+            if(i1 == 2) {
+               this.motionX -= d5;
             }
 
-            if(var18 == 3) {
-               this.motionX += var14;
+            if(i1 == 3) {
+               this.motionX += d5;
             }
 
-            if(var18 == 4) {
-               this.motionZ += var14;
+            if(i1 == 4) {
+               this.motionZ += d5;
             }
 
-            if(var18 == 5) {
-               this.motionZ -= var14;
+            if(i1 == 5) {
+               this.motionZ -= d5;
             }
 
-            int[][] var21 = field_70500_g[var18];
-            double var22 = (double)(var21[1][0] - var21[0][0]);
-            double var24 = (double)(var21[1][2] - var21[0][2]);
-            double var26 = Math.sqrt(var22 * var22 + var24 * var24);
-            double var28 = this.motionX * var22 + this.motionZ * var24;
-            if(var28 < 0.0D) {
-               var22 = -var22;
-               var24 = -var24;
+            int[][] aint = field_70500_g[i1];
+            double d6 = (double)(aint[1][0] - aint[0][0]);
+            double d7 = (double)(aint[1][2] - aint[0][2]);
+            double d8 = Math.sqrt(d6 * d6 + d7 * d7);
+            double d9 = this.motionX * d6 + this.motionZ * d7;
+            if(d9 < 0.0D) {
+               d6 = -d6;
+               d7 = -d7;
             }
 
-            double var30 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.motionX = var30 * var22 / var26;
-            this.motionZ = var30 * var24 / var26;
-            double var34;
-            double var32;
+            double d10 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+            this.motionX = d10 * d6 / d8;
+            this.motionZ = d10 * d7 / d8;
+            double d11;
+            double d12;
             if(this.riddenByEntity != null) {
-               var32 = this.riddenByEntity.motionX * this.riddenByEntity.motionX + this.riddenByEntity.motionZ * this.riddenByEntity.motionZ;
-               var34 = this.motionX * this.motionX + this.motionZ * this.motionZ;
-               if(var32 > 1.0E-4D && var34 < 0.01D) {
+               d12 = this.riddenByEntity.motionX * this.riddenByEntity.motionX + this.riddenByEntity.motionZ * this.riddenByEntity.motionZ;
+               d11 = this.motionX * this.motionX + this.motionZ * this.motionZ;
+               if(d12 > 1.0E-4D && d11 < 0.01D) {
                   this.motionX += this.riddenByEntity.motionX * 0.1D;
                   this.motionZ += this.riddenByEntity.motionZ * 0.1D;
-                  var20 = false;
+                  flag1 = false;
                }
             }
 
-            if(var20) {
-               var32 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-               if(var32 < 0.03D) {
+            if(flag1) {
+               d12 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+               if(d12 < 0.03D) {
                   this.motionX *= 0.0D;
                   this.motionY *= 0.0D;
                   this.motionZ *= 0.0D;
@@ -323,77 +400,73 @@
                }
             }
 
-            var32 = 0.0D;
-            var34 = (double)var9 + 0.5D + (double)var21[0][0] * 0.5D;
-            double var36 = (double)var11 + 0.5D + (double)var21[0][2] * 0.5D;
-            double var38 = (double)var9 + 0.5D + (double)var21[1][0] * 0.5D;
-            double var40 = (double)var11 + 0.5D + (double)var21[1][2] * 0.5D;
-            var22 = var38 - var34;
-            var24 = var40 - var36;
-            double var42;
-            double var44;
-            if(var22 == 0.0D) {
-               this.posX = (double)var9 + 0.5D;
-               var32 = this.posZ - (double)var11;
-            } else if(var24 == 0.0D) {
-               this.posZ = (double)var11 + 0.5D;
-               var32 = this.posX - (double)var9;
+            d12 = 0.0D;
+            d11 = (double)i + 0.5D + (double)aint[0][0] * 0.5D;
+            double d13 = (double)k + 0.5D + (double)aint[0][2] * 0.5D;
+            double d14 = (double)i + 0.5D + (double)aint[1][0] * 0.5D;
+            double d15 = (double)k + 0.5D + (double)aint[1][2] * 0.5D;
+            d6 = d14 - d11;
+            d7 = d15 - d13;
+            double d16;
+            double d17;
+            if(d6 == 0.0D) {
+               this.posX = (double)i + 0.5D;
+               d12 = this.posZ - (double)k;
+            } else if(d7 == 0.0D) {
+               this.posZ = (double)k + 0.5D;
+               d12 = this.posX - (double)i;
             } else {
-               var42 = this.posX - var34;
-               var44 = this.posZ - var36;
-               var32 = (var42 * var22 + var44 * var24) * 2.0D;
+               d16 = this.posX - d11;
+               d17 = this.posZ - d13;
+               d12 = (d16 * d6 + d17 * d7) * 2.0D;
             }
 
-            this.posX = var34 + var22 * var32;
-            this.posZ = var36 + var24 * var32;
+            this.posX = d11 + d6 * d12;
+            this.posZ = d13 + d7 * d12;
             this.setPosition(this.posX, this.posY + (double)this.yOffset, this.posZ);
-            var42 = this.motionX;
-            var44 = this.motionZ;
+            d16 = this.motionX;
+            d17 = this.motionZ;
             if(this.riddenByEntity != null) {
-               var42 *= 0.75D;
-               var44 *= 0.75D;
+               d16 *= 0.75D;
+               d17 *= 0.75D;
             }
 
-            if(var42 < -var12) {
-               var42 = -var12;
+            if(d16 < -d4) {
+               d16 = -d4;
             }
 
-            if(var42 > var12) {
-               var42 = var12;
+            if(d16 > d4) {
+               d16 = d4;
             }
 
-            if(var44 < -var12) {
-               var44 = -var12;
+            if(d17 < -d4) {
+               d17 = -d4;
             }
 
-            if(var44 > var12) {
-               var44 = var12;
+            if(d17 > d4) {
+               d17 = d4;
             }
 
-            this.moveEntity(var42, 0.0D, var44);
-            if(var21[0][1] != 0 && MathHelper.floor_double(this.posX) - var9 == var21[0][0] && MathHelper.floor_double(this.posZ) - var11 == var21[0][2]) {
-               this.setPosition(this.posX, this.posY + (double)var21[0][1], this.posZ);
-            } else if(var21[1][1] != 0 && MathHelper.floor_double(this.posX) - var9 == var21[1][0] && MathHelper.floor_double(this.posZ) - var11 == var21[1][2]) {
-               this.setPosition(this.posX, this.posY + (double)var21[1][1], this.posZ);
+            this.moveEntity(d16, 0.0D, d17);
+            if(aint[0][1] != 0 && MathHelper.floor_double(this.posX) - i == aint[0][0] && MathHelper.floor_double(this.posZ) - k == aint[0][2]) {
+               this.setPosition(this.posX, this.posY + (double)aint[0][1], this.posZ);
+            } else if(aint[1][1] != 0 && MathHelper.floor_double(this.posX) - i == aint[1][0] && MathHelper.floor_double(this.posZ) - k == aint[1][2]) {
+               this.setPosition(this.posX, this.posY + (double)aint[1][1], this.posZ);
             }
 
-            if(this.riddenByEntity != null) {
-               this.motionX *= 0.996999979019165D;
-               this.motionY *= 0.0D;
-               this.motionZ *= 0.996999979019165D;
-            } else {
+            if(this.riddenByEntity == null && this.slowWhenEmpty) {
                if(this.minecartType == 2) {
-                  double var46 = this.pushX * this.pushX + this.pushZ * this.pushZ;
-                  if(var46 > 1.0E-4D) {
-                     var46 = (double)MathHelper.sqrt_double(var46);
-                     this.pushX /= var46;
-                     this.pushZ /= var46;
-                     double var48 = 0.04D;
+                  double d18 = this.pushX * this.pushX + this.pushZ * this.pushZ;
+                  if(d18 > 1.0E-4D) {
+                     d18 = (double)MathHelper.sqrt_double(d18);
+                     this.pushX /= d18;
+                     this.pushZ /= d18;
+                     double d19 = 0.04D;
                      this.motionX *= 0.800000011920929D;
                      this.motionY *= 0.0D;
                      this.motionZ *= 0.800000011920929D;
-                     this.motionX += this.pushX * var48;
-                     this.motionZ += this.pushZ * var48;
+                     this.motionX += this.pushX * d19;
+                     this.motionZ += this.pushZ * d19;
                   } else {
                      this.motionX *= 0.8999999761581421D;
                      this.motionY *= 0.0D;
@@ -404,35 +477,39 @@
                this.motionX *= 0.9599999785423279D;
                this.motionY *= 0.0D;
                this.motionZ *= 0.9599999785423279D;
+            } else {
+               this.motionX *= 0.996999979019165D;
+               this.motionY *= 0.0D;
+               this.motionZ *= 0.996999979019165D;
             }
 
-            Vec3 var50 = this.func_70489_a(this.posX, this.posY, this.posZ);
-            if(var50 != null && var17 != null) {
-               double var51 = (var17.yCoord - var50.yCoord) * 0.05D;
-               var30 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-               if(var30 > 0.0D) {
-                  this.motionX = this.motionX / var30 * (var30 + var51);
-                  this.motionZ = this.motionZ / var30 * (var30 + var51);
+            Vec3 vec3d1 = this.func_70489_a(this.posX, this.posY, this.posZ);
+            if(vec3d1 != null && vec3d != null) {
+               double d20 = (vec3d.yCoord - vec3d1.yCoord) * 0.05D;
+               d10 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+               if(d10 > 0.0D) {
+                  this.motionX = this.motionX / d10 * (d10 + d20);
+                  this.motionZ = this.motionZ / d10 * (d10 + d20);
                }
 
-               this.setPosition(this.posX, var50.yCoord, this.posZ);
+               this.setPosition(this.posX, vec3d1.yCoord, this.posZ);
             }
 
-            int var53 = MathHelper.floor_double(this.posX);
-            int var54 = MathHelper.floor_double(this.posZ);
-            if(var53 != var9 || var54 != var11) {
-               var30 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-               this.motionX = var30 * (double)(var53 - var9);
-               this.motionZ = var30 * (double)(var54 - var11);
+            int j1 = MathHelper.floor_double(this.posX);
+            int k1 = MathHelper.floor_double(this.posZ);
+            if(j1 != i || k1 != k) {
+               d10 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+               this.motionX = d10 * (double)(j1 - i);
+               this.motionZ = d10 * (double)(k1 - k);
             }
 
-            double var55;
+            double d21;
             if(this.minecartType == 2) {
-               var55 = this.pushX * this.pushX + this.pushZ * this.pushZ;
-               if(var55 > 1.0E-4D && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.0010D) {
-                  var55 = (double)MathHelper.sqrt_double(var55);
-                  this.pushX /= var55;
-                  this.pushZ /= var55;
+               d21 = this.pushX * this.pushX + this.pushZ * this.pushZ;
+               if(d21 > 1.0E-4D && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.0010D) {
+                  d21 = (double)MathHelper.sqrt_double(d21);
+                  this.pushX /= d21;
+                  this.pushZ /= d21;
                   if(this.pushX * this.motionX + this.pushZ * this.motionZ < 0.0D) {
                      this.pushX = 0.0D;
                      this.pushZ = 0.0D;
@@ -443,81 +520,90 @@
                }
             }
 
-            if(var19) {
-               var55 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-               if(var55 > 0.01D) {
-                  double var57 = 0.06D;
-                  this.motionX += this.motionX / var55 * var57;
-                  this.motionZ += this.motionZ / var55 * var57;
-               } else if(var18 == 1) {
-                  if(this.worldObj.isBlockNormalCube(var9 - 1, var10, var11)) {
+            if(flag) {
+               d21 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+               if(d21 > 0.01D) {
+                  double d22 = 0.06D;
+                  this.motionX += this.motionX / d21 * d22;
+                  this.motionZ += this.motionZ / d21 * d22;
+               } else if(i1 == 1) {
+                  if(this.worldObj.isBlockNormalCube(i - 1, j, k)) {
                      this.motionX = 0.02D;
-                  } else if(this.worldObj.isBlockNormalCube(var9 + 1, var10, var11)) {
+                  } else if(this.worldObj.isBlockNormalCube(i + 1, j, k)) {
                      this.motionX = -0.02D;
                   }
-               } else if(var18 == 0) {
-                  if(this.worldObj.isBlockNormalCube(var9, var10, var11 - 1)) {
+               } else if(i1 == 0) {
+                  if(this.worldObj.isBlockNormalCube(i, j, k - 1)) {
                      this.motionZ = 0.02D;
-                  } else if(this.worldObj.isBlockNormalCube(var9, var10, var11 + 1)) {
+                  } else if(this.worldObj.isBlockNormalCube(i, j, k + 1)) {
                      this.motionZ = -0.02D;
                   }
                }
             }
          } else {
-            if(this.motionX < -var12) {
-               this.motionX = -var12;
+            if(this.motionX < -d4) {
+               this.motionX = -d4;
             }
 
-            if(this.motionX > var12) {
-               this.motionX = var12;
+            if(this.motionX > d4) {
+               this.motionX = d4;
             }
 
-            if(this.motionZ < -var12) {
-               this.motionZ = -var12;
+            if(this.motionZ < -d4) {
+               this.motionZ = -d4;
             }
 
-            if(this.motionZ > var12) {
-               this.motionZ = var12;
+            if(this.motionZ > d4) {
+               this.motionZ = d4;
             }
 
             if(this.onGround) {
-               this.motionX *= 0.5D;
-               this.motionY *= 0.5D;
-               this.motionZ *= 0.5D;
+               this.motionX *= this.derailedX;
+               this.motionY *= this.derailedY;
+               this.motionZ *= this.derailedZ;
             }
 
             this.moveEntity(this.motionX, this.motionY, this.motionZ);
             if(!this.onGround) {
-               this.motionX *= 0.949999988079071D;
-               this.motionY *= 0.949999988079071D;
-               this.motionZ *= 0.949999988079071D;
+               this.motionX *= this.flyingX;
+               this.motionY *= this.flyingY;
+               this.motionZ *= this.flyingZ;
             }
          }
 
          this.doBlockCollisions();
          this.rotationPitch = 0.0F;
-         double var59 = this.prevPosX - this.posX;
-         double var61 = this.prevPosZ - this.posZ;
-         if(var59 * var59 + var61 * var61 > 0.0010D) {
-            this.rotationYaw = (float)(Math.atan2(var61, var59) * 180.0D / 3.141592653589793D);
+         double d23 = this.prevPosX - this.posX;
+         double d24 = this.prevPosZ - this.posZ;
+         if(d23 * d23 + d24 * d24 > 0.0010D) {
+            this.rotationYaw = (float)(Math.atan2(d24, d23) * 180.0D / 3.141592653589793D);
             if(this.field_70499_f) {
                this.rotationYaw += 180.0F;
             }
          }
 
-         double var63 = (double)MathHelper.wrapAngleTo180_float(this.rotationYaw - this.prevRotationYaw);
-         if(var63 < -170.0D || var63 >= 170.0D) {
+         double d25 = (double)MathHelper.wrapAngleTo180_float(this.rotationYaw - this.prevRotationYaw);
+         if(d25 < -170.0D || d25 >= 170.0D) {
             this.rotationYaw += 180.0F;
             this.field_70499_f = !this.field_70499_f;
          }
 
          this.setRotation(this.rotationYaw, this.rotationPitch);
-         List var65 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
-         if(var65 != null && !var65.isEmpty()) {
-            for(int var66 = 0; var66 < var65.size(); ++var66) {
-               Entity var67 = (Entity)var65.get(var66);
-               if(var67 != this.riddenByEntity && var67.canBePushed() && var67 instanceof EntityMinecart) {
-                  var67.applyEntityCollision(this);
+         CraftWorld bworld = this.worldObj.getWorld();
+         Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+         Location to = new Location(bworld, this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+         Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+         this.worldObj.getServer().getPluginManager().callEvent(new VehicleUpdateEvent(vehicle));
+         if(!from.equals(to)) {
+            this.worldObj.getServer().getPluginManager().callEvent(new VehicleMoveEvent(vehicle, from, to));
+         }
+
+         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+         if(list != null && !list.isEmpty()) {
+            for(int l1 = 0; l1 < list.size(); ++l1) {
+               Entity entity = (Entity)list.get(l1);
+               if(entity != this.riddenByEntity && entity.canBePushed() && entity instanceof EntityMinecart) {
+                  entity.applyEntityCollision(this);
                }
             }
          }
@@ -540,225 +626,232 @@
 
          this.setMinecartPowered(this.fuel > 0);
       }
+
    }
 
-   public Vec3 func_70489_a(double var1, double var3, double var5) {
-      int var7 = MathHelper.floor_double(var1);
-      int var8 = MathHelper.floor_double(var3);
-      int var9 = MathHelper.floor_double(var5);
-      if(BlockRail.isRailBlockAt(this.worldObj, var7, var8 - 1, var9)) {
-         --var8;
-      }
-
-      int var10 = this.worldObj.getBlockId(var7, var8, var9);
-      if(BlockRail.isRailBlock(var10)) {
-         int var11 = this.worldObj.getBlockMetadata(var7, var8, var9);
-         var3 = (double)var8;
-         if(((BlockRail)Block.blocksList[var10]).isPowered()) {
-            var11 &= 7;
-         }
-
-         if(var11 >= 2 && var11 <= 5) {
-            var3 = (double)(var8 + 1);
-         }
-
-         int[][] var12 = field_70500_g[var11];
-         double var13 = 0.0D;
-         double var15 = (double)var7 + 0.5D + (double)var12[0][0] * 0.5D;
-         double var17 = (double)var8 + 0.5D + (double)var12[0][1] * 0.5D;
-         double var19 = (double)var9 + 0.5D + (double)var12[0][2] * 0.5D;
-         double var21 = (double)var7 + 0.5D + (double)var12[1][0] * 0.5D;
-         double var23 = (double)var8 + 0.5D + (double)var12[1][1] * 0.5D;
-         double var25 = (double)var9 + 0.5D + (double)var12[1][2] * 0.5D;
-         double var27 = var21 - var15;
-         double var29 = (var23 - var17) * 2.0D;
-         double var31 = var25 - var19;
-         if(var27 == 0.0D) {
-            var1 = (double)var7 + 0.5D;
-            var13 = var5 - (double)var9;
-         } else if(var31 == 0.0D) {
-            var5 = (double)var9 + 0.5D;
-            var13 = var1 - (double)var7;
+   public Vec3 func_70489_a(double d0, double d1, double d2) {
+      int i = MathHelper.floor_double(d0);
+      int j = MathHelper.floor_double(d1);
+      int k = MathHelper.floor_double(d2);
+      if(BlockRail.isRailBlockAt(this.worldObj, i, j - 1, k)) {
+         --j;
+      }
+
+      int l = this.worldObj.getBlockId(i, j, k);
+      if(BlockRail.isRailBlock(l)) {
+         int i1 = this.worldObj.getBlockMetadata(i, j, k);
+         d1 = (double)j;
+         if(((BlockRail)Block.blocksList[l]).isPowered()) {
+            i1 &= 7;
+         }
+
+         if(i1 >= 2 && i1 <= 5) {
+            d1 = (double)(j + 1);
+         }
+
+         int[][] aint = field_70500_g[i1];
+         double d3 = 0.0D;
+         double d4 = (double)i + 0.5D + (double)aint[0][0] * 0.5D;
+         double d5 = (double)j + 0.5D + (double)aint[0][1] * 0.5D;
+         double d6 = (double)k + 0.5D + (double)aint[0][2] * 0.5D;
+         double d7 = (double)i + 0.5D + (double)aint[1][0] * 0.5D;
+         double d8 = (double)j + 0.5D + (double)aint[1][1] * 0.5D;
+         double d9 = (double)k + 0.5D + (double)aint[1][2] * 0.5D;
+         double d10 = d7 - d4;
+         double d11 = (d8 - d5) * 2.0D;
+         double d12 = d9 - d6;
+         if(d10 == 0.0D) {
+            d0 = (double)i + 0.5D;
+            d3 = d2 - (double)k;
+         } else if(d12 == 0.0D) {
+            d2 = (double)k + 0.5D;
+            d3 = d0 - (double)i;
          } else {
-            double var33 = var1 - var15;
-            double var35 = var5 - var19;
-            var13 = (var33 * var27 + var35 * var31) * 2.0D;
+            double d13 = d0 - d4;
+            double d14 = d2 - d6;
+            d3 = (d13 * d10 + d14 * d12) * 2.0D;
          }
 
-         var1 = var15 + var27 * var13;
-         var3 = var17 + var29 * var13;
-         var5 = var19 + var31 * var13;
-         if(var29 < 0.0D) {
-            ++var3;
+         d0 = d4 + d10 * d3;
+         d1 = d5 + d11 * d3;
+         d2 = d6 + d12 * d3;
+         if(d11 < 0.0D) {
+            ++d1;
          }
 
-         if(var29 > 0.0D) {
-            var3 += 0.5D;
+         if(d11 > 0.0D) {
+            d1 += 0.5D;
          }
 
-         return this.worldObj.getWorldVec3Pool().getVecFromPool(var1, var3, var5);
+         return this.worldObj.getWorldVec3Pool().getVecFromPool(d0, d1, d2);
       } else {
          return null;
       }
    }
 
-   protected void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setInteger("Type", this.minecartType);
+   protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setInteger("Type", this.minecartType);
       if(this.minecartType == 2) {
-         var1.setDouble("PushX", this.pushX);
-         var1.setDouble("PushZ", this.pushZ);
-         var1.setShort("Fuel", (short)this.fuel);
+         nbttagcompound.setDouble("PushX", this.pushX);
+         nbttagcompound.setDouble("PushZ", this.pushZ);
+         nbttagcompound.setShort("Fuel", (short)this.fuel);
       } else if(this.minecartType == 1) {
-         NBTTagList var2 = new NBTTagList();
+         NBTTagList nbttaglist = new NBTTagList();
 
-         for(int var3 = 0; var3 < this.cargoItems.length; ++var3) {
-            if(this.cargoItems[var3] != null) {
-               NBTTagCompound var4 = new NBTTagCompound();
-               var4.setByte("Slot", (byte)var3);
-               this.cargoItems[var3].writeToNBT(var4);
-               var2.appendTag(var4);
+         for(int i = 0; i < this.cargoItems.length; ++i) {
+            if(this.cargoItems[i] != null) {
+               NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+               nbttagcompound1.setByte("Slot", (byte)i);
+               this.cargoItems[i].writeToNBT(nbttagcompound1);
+               nbttaglist.appendTag(nbttagcompound1);
             }
          }
 
-         var1.setTag("Items", var2);
+         nbttagcompound.setTag("Items", nbttaglist);
       }
 
    }
 
-   protected void readEntityFromNBT(NBTTagCompound var1) {
-      this.minecartType = var1.getInteger("Type");
+   protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.minecartType = nbttagcompound.getInteger("Type");
       if(this.minecartType == 2) {
-         this.pushX = var1.getDouble("PushX");
-         this.pushZ = var1.getDouble("PushZ");
-         this.fuel = var1.getShort("Fuel");
+         this.pushX = nbttagcompound.getDouble("PushX");
+         this.pushZ = nbttagcompound.getDouble("PushZ");
+         this.fuel = nbttagcompound.getShort("Fuel");
       } else if(this.minecartType == 1) {
-         NBTTagList var2 = var1.getTagList("Items");
+         NBTTagList nbttaglist = nbttagcompound.getTagList("Items");
          this.cargoItems = new ItemStack[this.getSizeInventory()];
 
-         for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-            NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-            int var5 = var4.getByte("Slot") & 255;
-            if(var5 >= 0 && var5 < this.cargoItems.length) {
-               this.cargoItems[var5] = ItemStack.loadItemStackFromNBT(var4);
+         for(int i = 0; i < nbttaglist.tagCount(); ++i) {
+            NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbttaglist.tagAt(i);
+            int j = nbttagcompound1.getByte("Slot") & 255;
+            if(j >= 0 && j < this.cargoItems.length) {
+               this.cargoItems[j] = ItemStack.loadItemStackFromNBT(nbttagcompound1);
             }
          }
       }
 
    }
 
-   public void applyEntityCollision(Entity var1) {
-      if(!this.worldObj.isRemote) {
-         if(var1 != this.riddenByEntity) {
-            if(var1 instanceof EntityLiving && !(var1 instanceof EntityPlayer) && !(var1 instanceof EntityIronGolem) && this.minecartType == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && var1.ridingEntity == null) {
-               var1.mountEntity(this);
-            }
-
-            double var2 = var1.posX - this.posX;
-            double var4 = var1.posZ - this.posZ;
-            double var6 = var2 * var2 + var4 * var4;
-            if(var6 >= 9.999999747378752E-5D) {
-               var6 = (double)MathHelper.sqrt_double(var6);
-               var2 /= var6;
-               var4 /= var6;
-               double var8 = 1.0D / var6;
-               if(var8 > 1.0D) {
-                  var8 = 1.0D;
-               }
-
-               var2 *= var8;
-               var4 *= var8;
-               var2 *= 0.10000000149011612D;
-               var4 *= 0.10000000149011612D;
-               var2 *= (double)(1.0F - this.entityCollisionReduction);
-               var4 *= (double)(1.0F - this.entityCollisionReduction);
-               var2 *= 0.5D;
-               var4 *= 0.5D;
-               if(var1 instanceof EntityMinecart) {
-                  double var10 = var1.posX - this.posX;
-                  double var12 = var1.posZ - this.posZ;
-                  Vec3 var14 = this.worldObj.getWorldVec3Pool().getVecFromPool(var10, 0.0D, var12).normalize();
-                  Vec3 var15 = this.worldObj.getWorldVec3Pool().getVecFromPool((double)MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F), 0.0D, (double)MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F)).normalize();
-                  double var16 = Math.abs(var14.dotProduct(var15));
-                  if(var16 < 0.800000011920929D) {
-                     return;
-                  }
-
-                  double var18 = var1.motionX + this.motionX;
-                  double var20 = var1.motionZ + this.motionZ;
-                  if(((EntityMinecart)var1).minecartType == 2 && this.minecartType != 2) {
-                     this.motionX *= 0.20000000298023224D;
-                     this.motionZ *= 0.20000000298023224D;
-                     this.addVelocity(var1.motionX - var2, 0.0D, var1.motionZ - var4);
-                     var1.motionX *= 0.949999988079071D;
-                     var1.motionZ *= 0.949999988079071D;
-                  } else if(((EntityMinecart)var1).minecartType != 2 && this.minecartType == 2) {
-                     var1.motionX *= 0.20000000298023224D;
-                     var1.motionZ *= 0.20000000298023224D;
-                     var1.addVelocity(this.motionX + var2, 0.0D, this.motionZ + var4);
-                     this.motionX *= 0.949999988079071D;
-                     this.motionZ *= 0.949999988079071D;
-                  } else {
-                     var18 /= 2.0D;
-                     var20 /= 2.0D;
-                     this.motionX *= 0.20000000298023224D;
-                     this.motionZ *= 0.20000000298023224D;
-                     this.addVelocity(var18 - var2, 0.0D, var20 - var4);
-                     var1.motionX *= 0.20000000298023224D;
-                     var1.motionZ *= 0.20000000298023224D;
-                     var1.addVelocity(var18 + var2, 0.0D, var20 + var4);
-                  }
+   public void applyEntityCollision(Entity entity) {
+      if(!this.worldObj.isRemote && entity != this.riddenByEntity) {
+         Vehicle vehicle = (Vehicle)this.getBukkitEntity();
+         org.bukkit.entity.Entity hitEntity = entity == null?null:entity.getBukkitEntity();
+         VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, hitEntity);
+         this.worldObj.getServer().getPluginManager().callEvent(collisionEvent);
+         if(collisionEvent.isCancelled()) {
+            return;
+         }
+
+         if(entity instanceof EntityLiving && !(entity instanceof EntityPlayer) && !(entity instanceof EntityIronGolem) && this.minecartType == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && entity.ridingEntity == null) {
+            entity.mountEntity(this);
+         }
+
+         double d0 = entity.posX - this.posX;
+         double d1 = entity.posZ - this.posZ;
+         double d2 = d0 * d0 + d1 * d1;
+         if(d2 >= 9.999999747378752E-5D && !collisionEvent.isCollisionCancelled()) {
+            d2 = (double)MathHelper.sqrt_double(d2);
+            d0 /= d2;
+            d1 /= d2;
+            double d3 = 1.0D / d2;
+            if(d3 > 1.0D) {
+               d3 = 1.0D;
+            }
+
+            d0 *= d3;
+            d1 *= d3;
+            d0 *= 0.10000000149011612D;
+            d1 *= 0.10000000149011612D;
+            d0 *= (double)(1.0F - this.entityCollisionReduction);
+            d1 *= (double)(1.0F - this.entityCollisionReduction);
+            d0 *= 0.5D;
+            d1 *= 0.5D;
+            if(entity instanceof EntityMinecart) {
+               double d4 = entity.posX - this.posX;
+               double d5 = entity.posZ - this.posZ;
+               Vec3 vec3d = this.worldObj.getWorldVec3Pool().getVecFromPool(d4, 0.0D, d5).normalize();
+               Vec3 vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool((double)MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F), 0.0D, (double)MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F)).normalize();
+               double d6 = Math.abs(vec3d.dotProduct(vec3d1));
+               if(d6 < 0.800000011920929D) {
+                  return;
+               }
+
+               double d7 = entity.motionX + this.motionX;
+               double d8 = entity.motionZ + this.motionZ;
+               if(((EntityMinecart)entity).minecartType == 2 && this.minecartType != 2) {
+                  this.motionX *= 0.20000000298023224D;
+                  this.motionZ *= 0.20000000298023224D;
+                  this.addVelocity(entity.motionX - d0, 0.0D, entity.motionZ - d1);
+                  entity.motionX *= 0.949999988079071D;
+                  entity.motionZ *= 0.949999988079071D;
+               } else if(((EntityMinecart)entity).minecartType != 2 && this.minecartType == 2) {
+                  entity.motionX *= 0.20000000298023224D;
+                  entity.motionZ *= 0.20000000298023224D;
+                  entity.addVelocity(this.motionX + d0, 0.0D, this.motionZ + d1);
+                  this.motionX *= 0.949999988079071D;
+                  this.motionZ *= 0.949999988079071D;
                } else {
-                  this.addVelocity(-var2, 0.0D, -var4);
-                  var1.addVelocity(var2 / 4.0D, 0.0D, var4 / 4.0D);
+                  d7 /= 2.0D;
+                  d8 /= 2.0D;
+                  this.motionX *= 0.20000000298023224D;
+                  this.motionZ *= 0.20000000298023224D;
+                  this.addVelocity(d7 - d0, 0.0D, d8 - d1);
+                  entity.motionX *= 0.20000000298023224D;
+                  entity.motionZ *= 0.20000000298023224D;
+                  entity.addVelocity(d7 + d0, 0.0D, d8 + d1);
                }
+            } else {
+               this.addVelocity(-d0, 0.0D, -d1);
+               entity.addVelocity(d0 / 4.0D, 0.0D, d1 / 4.0D);
             }
-
          }
       }
+
    }
 
    public int getSizeInventory() {
       return 27;
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      return this.cargoItems[var1];
+   public ItemStack getStackInSlot(int i) {
+      return this.cargoItems[i];
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      if(this.cargoItems[var1] != null) {
-         ItemStack var3;
-         if(this.cargoItems[var1].stackSize <= var2) {
-            var3 = this.cargoItems[var1];
-            this.cargoItems[var1] = null;
-            return var3;
+   public ItemStack decrStackSize(int i, int j) {
+      if(this.cargoItems[i] != null) {
+         ItemStack itemstack;
+         if(this.cargoItems[i].stackSize <= j) {
+            itemstack = this.cargoItems[i];
+            this.cargoItems[i] = null;
+            return itemstack;
          } else {
-            var3 = this.cargoItems[var1].splitStack(var2);
-            if(this.cargoItems[var1].stackSize == 0) {
-               this.cargoItems[var1] = null;
+            itemstack = this.cargoItems[i].splitStack(j);
+            if(this.cargoItems[i].stackSize == 0) {
+               this.cargoItems[i] = null;
             }
 
-            return var3;
+            return itemstack;
          }
       } else {
          return null;
       }
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      if(this.cargoItems[var1] != null) {
-         ItemStack var2 = this.cargoItems[var1];
-         this.cargoItems[var1] = null;
-         return var2;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      if(this.cargoItems[i] != null) {
+         ItemStack itemstack = this.cargoItems[i];
+         this.cargoItems[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      this.cargoItems[var1] = var2;
-      if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-         var2.stackSize = this.getInventoryStackLimit();
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      this.cargoItems[i] = itemstack;
+      if(itemstack != null && itemstack.stackSize > this.getInventoryStackLimit()) {
+         itemstack.stackSize = this.getInventoryStackLimit();
       }
 
    }
@@ -768,51 +861,51 @@
    }
 
    public int getInventoryStackLimit() {
-      return 64;
+      return this.maxStack;
    }
 
    public void onInventoryChanged() {}
 
-   public boolean interact(EntityPlayer var1) {
+   public boolean interact(EntityPlayer entityhuman) {
       if(this.minecartType == 0) {
-         if(this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayer && this.riddenByEntity != var1) {
+         if(this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayer && this.riddenByEntity != entityhuman) {
             return true;
          }
 
          if(!this.worldObj.isRemote) {
-            var1.mountEntity(this);
+            entityhuman.mountEntity(this);
          }
       } else if(this.minecartType == 1) {
          if(!this.worldObj.isRemote) {
-            var1.displayGUIChest(this);
+            entityhuman.displayGUIChest(this);
          }
       } else if(this.minecartType == 2) {
-         ItemStack var2 = var1.inventory.getCurrentItem();
-         if(var2 != null && var2.itemID == Item.coal.shiftedIndex) {
-            if(--var2.stackSize == 0) {
-               var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+         ItemStack itemstack = entityhuman.inventory.getCurrentItem();
+         if(itemstack != null && itemstack.itemID == Item.coal.shiftedIndex) {
+            if(--itemstack.stackSize == 0) {
+               entityhuman.inventory.setInventorySlotContents(entityhuman.inventory.currentItem, (ItemStack)null);
             }
 
             this.fuel += 3600;
          }
 
-         this.pushX = this.posX - var1.posX;
-         this.pushZ = this.posZ - var1.posZ;
+         this.pushX = this.posX - entityhuman.posX;
+         this.pushZ = this.posZ - entityhuman.posZ;
       }
 
       return true;
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.isDead?false:var1.getDistanceSqToEntity(this) <= 64.0D;
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.isDead?false:entityhuman.getDistanceSqToEntity(this) <= 64.0D;
    }
 
    protected boolean isMinecartPowered() {
       return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
    }
 
-   protected void setMinecartPowered(boolean var1) {
-      if(var1) {
+   protected void setMinecartPowered(boolean flag) {
+      if(flag) {
          this.dataWatcher.updateObject(16, Byte.valueOf((byte)(this.dataWatcher.getWatchableObjectByte(16) | 1)));
       } else {
          this.dataWatcher.updateObject(16, Byte.valueOf((byte)(this.dataWatcher.getWatchableObjectByte(16) & -2)));
@@ -824,28 +917,48 @@
 
    public void closeChest() {}
 
-   public void setDamage(int var1) {
-      this.dataWatcher.updateObject(19, Integer.valueOf(var1));
+   public void setDamage(int i) {
+      this.dataWatcher.updateObject(19, Integer.valueOf(i));
    }
 
    public int getDamage() {
       return this.dataWatcher.getWatchableObjectInt(19);
    }
 
-   public void func_70497_h(int var1) {
-      this.dataWatcher.updateObject(17, Integer.valueOf(var1));
+   public void func_70497_h(int i) {
+      this.dataWatcher.updateObject(17, Integer.valueOf(i));
    }
 
    public int func_70496_j() {
       return this.dataWatcher.getWatchableObjectInt(17);
    }
 
-   public void func_70494_i(int var1) {
-      this.dataWatcher.updateObject(18, Integer.valueOf(var1));
+   public void func_70494_i(int i) {
+      this.dataWatcher.updateObject(18, Integer.valueOf(i));
    }
 
    public int func_70493_k() {
       return this.dataWatcher.getWatchableObjectInt(18);
    }
 
+   public Vector getFlyingVelocityMod() {
+      return new Vector(this.flyingX, this.flyingY, this.flyingZ);
+   }
+
+   public void setFlyingVelocityMod(Vector flying) {
+      this.flyingX = flying.getX();
+      this.flyingY = flying.getY();
+      this.flyingZ = flying.getZ();
+   }
+
+   public Vector getDerailedVelocityMod() {
+      return new Vector(this.derailedX, this.derailedY, this.derailedZ);
+   }
+
+   public void setDerailedVelocityMod(Vector derailed) {
+      this.derailedX = derailed.getX();
+      this.derailedY = derailed.getY();
+      this.derailedZ = derailed.getZ();
+   }
+
 }
Binary files mcp-mcdev/net/minecraft/src/EntityMob.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMob.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityMob.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMob.java
--- mcp-mcdev/net/minecraft/src/EntityMob.java	2012-11-29 21:14:58.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMob.java	2012-11-29 20:44:14.000000000 -0800
@@ -3,26 +3,35 @@
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.EnchantmentHelper;
 import net.minecraft.src.Entity;
+import net.minecraft.src.EntityBlaze;
 import net.minecraft.src.EntityCreature;
+import net.minecraft.src.EntityEnderman;
+import net.minecraft.src.EntityGiantZombie;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntitySilverfish;
+import net.minecraft.src.EntitySpider;
 import net.minecraft.src.EnumSkyBlock;
 import net.minecraft.src.IMob;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.Potion;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 
 public abstract class EntityMob extends EntityCreature implements IMob {
 
-   public EntityMob(World var1) {
-      super(var1);
+   public EntityMob(World world) {
+      super(world);
       this.experienceValue = 5;
    }
 
    public void onLivingUpdate() {
       this.updateArmSwingProgress();
-      float var1 = this.getBrightness(1.0F);
-      if(var1 > 0.5F) {
+      float f = this.getBrightness(1.0F);
+      if(f > 0.5F) {
          this.entityAge += 2;
       }
 
@@ -38,90 +47,101 @@
    }
 
    protected Entity findPlayerToAttack() {
-      EntityPlayer var1 = this.worldObj.getClosestVulnerablePlayerToEntity(this, 16.0D);
-      return var1 != null && this.canEntityBeSeen(var1)?var1:null;
+      EntityPlayer entityhuman = this.worldObj.getClosestVulnerablePlayerToEntity(this, 16.0D);
+      return entityhuman != null && this.canEntityBeSeen(entityhuman)?entityhuman:null;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
-      } else if(super.attackEntityFrom(var1, var2)) {
-         Entity var3 = var1.getEntity();
-         if(this.riddenByEntity != var3 && this.ridingEntity != var3) {
-            if(var3 != this) {
-               this.entityToAttack = var3;
+      } else if(!super.attackEntityFrom(damagesource, i)) {
+         return false;
+      } else {
+         Entity entity = damagesource.getEntity();
+         if(this.riddenByEntity != entity && this.ridingEntity != entity) {
+            if(entity != this) {
+               if(entity != this.entityToAttack && (this instanceof EntityBlaze || this instanceof EntityEnderman || this instanceof EntitySpider || this instanceof EntityGiantZombie || this instanceof EntitySilverfish)) {
+                  EntityTargetEvent event = CraftEventFactory.callEntityTargetEvent(this, entity, TargetReason.TARGET_ATTACKED_ENTITY);
+                  if(!event.isCancelled()) {
+                     if(event.getTarget() == null) {
+                        this.entityToAttack = null;
+                     } else {
+                        this.entityToAttack = ((CraftEntity)event.getTarget()).getHandle();
+                     }
+                  }
+               } else {
+                  this.entityToAttack = entity;
+               }
             }
 
             return true;
          } else {
             return true;
          }
-      } else {
-         return false;
       }
    }
 
-   public boolean attackEntityAsMob(Entity var1) {
-      int var2 = this.getAttackStrength(var1);
+   public boolean attackEntityAsMob(Entity entity) {
+      int i = this.getAttackStrength(entity);
       if(this.isPotionActive(Potion.damageBoost)) {
-         var2 += 3 << this.getActivePotionEffect(Potion.damageBoost).getAmplifier();
+         i += 3 << this.getActivePotionEffect(Potion.damageBoost).getAmplifier();
       }
 
       if(this.isPotionActive(Potion.weakness)) {
-         var2 -= 2 << this.getActivePotionEffect(Potion.weakness).getAmplifier();
+         i -= 2 << this.getActivePotionEffect(Potion.weakness).getAmplifier();
       }
 
-      int var3 = 0;
-      if(var1 instanceof EntityLiving) {
-         var2 += EnchantmentHelper.getEnchantmentModifierLiving(this, (EntityLiving)var1);
-         var3 += EnchantmentHelper.getKnockbackModifier(this, (EntityLiving)var1);
+      int j = 0;
+      if(entity instanceof EntityLiving) {
+         i += EnchantmentHelper.getEnchantmentModifierLiving(this, (EntityLiving)entity);
+         j += EnchantmentHelper.getKnockbackModifier(this, (EntityLiving)entity);
       }
 
-      boolean var4 = var1.attackEntityFrom(DamageSource.causeMobDamage(this), var2);
-      if(var4) {
-         if(var3 > 0) {
-            var1.addVelocity((double)(-MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F) * (float)var3 * 0.5F), 0.1D, (double)(MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F) * (float)var3 * 0.5F));
+      boolean flag = entity.attackEntityFrom(DamageSource.causeMobDamage(this), i);
+      if(flag) {
+         if(j > 0) {
+            entity.addVelocity((double)(-MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F) * (float)j * 0.5F), 0.1D, (double)(MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F) * (float)j * 0.5F));
             this.motionX *= 0.6D;
             this.motionZ *= 0.6D;
          }
 
-         int var5 = EnchantmentHelper.func_90036_a(this);
-         if(var5 > 0) {
-            var1.setFire(var5 * 4);
+         int k = EnchantmentHelper.func_90036_a(this);
+         if(k > 0) {
+            entity.setFire(k * 4);
          }
       }
 
-      return var4;
+      return flag;
    }
 
-   protected void attackEntity(Entity var1, float var2) {
-      if(this.attackTime <= 0 && var2 < 2.0F && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
+   protected void attackEntity(Entity entity, float f) {
+      if(this.attackTime <= 0 && f < 2.0F && entity.boundingBox.maxY > this.boundingBox.minY && entity.boundingBox.minY < this.boundingBox.maxY) {
          this.attackTime = 20;
-         this.attackEntityAsMob(var1);
+         this.attackEntityAsMob(entity);
       }
 
    }
 
-   public float getBlockPathWeight(int var1, int var2, int var3) {
-      return 0.5F - this.worldObj.getLightBrightness(var1, var2, var3);
+   public float getBlockPathWeight(int i, int j, int k) {
+      return 0.5F - this.worldObj.getLightBrightness(i, j, k);
    }
 
    protected boolean isValidLightLevel() {
-      int var1 = MathHelper.floor_double(this.posX);
-      int var2 = MathHelper.floor_double(this.boundingBox.minY);
-      int var3 = MathHelper.floor_double(this.posZ);
-      if(this.worldObj.getSavedLightValue(EnumSkyBlock.Sky, var1, var2, var3) > this.rand.nextInt(32)) {
+      int i = MathHelper.floor_double(this.posX);
+      int j = MathHelper.floor_double(this.boundingBox.minY);
+      int k = MathHelper.floor_double(this.posZ);
+      if(this.worldObj.getSavedLightValue(EnumSkyBlock.Sky, i, j, k) > this.rand.nextInt(32)) {
          return false;
       } else {
-         int var4 = this.worldObj.getBlockLightValue(var1, var2, var3);
+         int l = this.worldObj.getBlockLightValue(i, j, k);
          if(this.worldObj.isThundering()) {
-            int var5 = this.worldObj.skylightSubtracted;
+            int i1 = this.worldObj.skylightSubtracted;
             this.worldObj.skylightSubtracted = 10;
-            var4 = this.worldObj.getBlockLightValue(var1, var2, var3);
-            this.worldObj.skylightSubtracted = var5;
+            l = this.worldObj.getBlockLightValue(i, j, k);
+            this.worldObj.skylightSubtracted = i1;
          }
 
-         return var4 <= this.rand.nextInt(8);
+         return l <= this.rand.nextInt(8);
       }
    }
 
@@ -129,7 +149,7 @@
       return this.isValidLightLevel() && super.getCanSpawnHere();
    }
 
-   public int getAttackStrength(Entity var1) {
+   public int getAttackStrength(Entity entity) {
       return 2;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityMooshroom.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMooshroom.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityMooshroom.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMooshroom.java
--- mcp-mcdev/net/minecraft/src/EntityMooshroom.java	2012-11-29 21:14:58.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMooshroom.java	2012-11-29 20:44:14.000000000 -0800
@@ -8,61 +8,67 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerShearEntityEvent;
 
 public class EntityMooshroom extends EntityCow {
 
-   public EntityMooshroom(World var1) {
-      super(var1);
+   public EntityMooshroom(World world) {
+      super(world);
       this.texture = "/mob/redcow.png";
       this.setSize(0.9F, 1.3F);
    }
 
-   public boolean interact(EntityPlayer var1) {
-      ItemStack var2 = var1.inventory.getCurrentItem();
-      if(var2 != null && var2.itemID == Item.bowlEmpty.shiftedIndex && this.getGrowingAge() >= 0) {
-         if(var2.stackSize == 1) {
-            var1.inventory.setInventorySlotContents(var1.inventory.currentItem, new ItemStack(Item.bowlSoup));
+   public boolean interact(EntityPlayer entityhuman) {
+      ItemStack itemstack = entityhuman.inventory.getCurrentItem();
+      if(itemstack != null && itemstack.itemID == Item.bowlEmpty.shiftedIndex && this.getGrowingAge() >= 0) {
+         if(itemstack.stackSize == 1) {
+            entityhuman.inventory.setInventorySlotContents(entityhuman.inventory.currentItem, new ItemStack(Item.bowlSoup));
             return true;
          }
 
-         if(var1.inventory.addItemStackToInventory(new ItemStack(Item.bowlSoup)) && !var1.capabilities.isCreativeMode) {
-            var1.inventory.decrStackSize(var1.inventory.currentItem, 1);
+         if(entityhuman.inventory.addItemStackToInventory(new ItemStack(Item.bowlSoup)) && !entityhuman.capabilities.isCreativeMode) {
+            entityhuman.inventory.decrStackSize(entityhuman.inventory.currentItem, 1);
             return true;
          }
       }
 
-      if(var2 != null && var2.itemID == Item.shears.shiftedIndex && this.getGrowingAge() >= 0) {
-         this.setDead();
-         this.worldObj.spawnParticle("largeexplode", this.posX, this.posY + (double)(this.height / 2.0F), this.posZ, 0.0D, 0.0D, 0.0D);
-         if(!this.worldObj.isRemote) {
-            EntityCow var3 = new EntityCow(this.worldObj);
-            var3.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
-            var3.setEntityHealth(this.getHealth());
-            var3.renderYawOffset = this.renderYawOffset;
-            this.worldObj.spawnEntityInWorld(var3);
+      if(itemstack != null && itemstack.itemID == Item.shears.shiftedIndex && this.getGrowingAge() >= 0) {
+         PlayerShearEntityEvent event = new PlayerShearEntityEvent((Player)entityhuman.getBukkitEntity(), this.getBukkitEntity());
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(event.isCancelled()) {
+            return false;
+         } else {
+            this.setDead();
+            this.worldObj.spawnParticle("largeexplode", this.posX, this.posY + (double)(this.height / 2.0F), this.posZ, 0.0D, 0.0D, 0.0D);
+            if(!this.worldObj.isRemote) {
+               EntityCow entitycow = new EntityCow(this.worldObj);
+               entitycow.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+               entitycow.setEntityHealth(this.getHealth());
+               entitycow.renderYawOffset = this.renderYawOffset;
+               this.worldObj.spawnEntityInWorld(entitycow);
 
-            for(int var4 = 0; var4 < 5; ++var4) {
-               this.worldObj.spawnEntityInWorld(new EntityItem(this.worldObj, this.posX, this.posY + (double)this.height, this.posZ, new ItemStack(Block.mushroomRed)));
+               for(int i = 0; i < 5; ++i) {
+                  this.worldObj.spawnEntityInWorld(new EntityItem(this.worldObj, this.posX, this.posY + (double)this.height, this.posZ, new ItemStack(Block.mushroomRed)));
+               }
             }
-         }
 
-         return true;
+            return true;
+         }
       } else {
-         return super.interact(var1);
+         return super.interact(entityhuman);
       }
    }
 
-   public EntityMooshroom spawnBabyAnimal(EntityAgeable var1) {
+   public EntityMooshroom spawnBabyAnimal(EntityAgeable entityageable) {
       return new EntityMooshroom(this.worldObj);
    }
 
-   // $FF: synthetic method
-   public EntityCow spawnBabyAnimal(EntityAgeable var1) {
-      return this.spawnBabyAnimal(var1);
+   public EntityCow spawnBabyAnimal(EntityAgeable entityageable) {
+      return this.spawnBabyAnimal(entityageable);
    }
 
-   // $FF: synthetic method
-   public EntityAgeable func_90011_a(EntityAgeable var1) {
-      return this.spawnBabyAnimal(var1);
+   public EntityAgeable func_90011_a(EntityAgeable entityageable) {
+      return this.spawnBabyAnimal(entityageable);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityMoveHelper.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMoveHelper.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityMoveHelper.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMoveHelper.java
--- mcp-mcdev/net/minecraft/src/EntityMoveHelper.java	2012-11-29 21:14:58.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityMoveHelper.java	2012-11-29 20:44:14.000000000 -0800
@@ -2,6 +2,7 @@
 
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.MathHelper;
+import org.bukkit.craftbukkit.TrigMath;
 
 public class EntityMoveHelper {
 
@@ -13,11 +14,11 @@
    private boolean field_75643_f = false;
 
 
-   public EntityMoveHelper(EntityLiving var1) {
-      this.entity = var1;
-      this.posX = var1.posX;
-      this.posY = var1.posY;
-      this.posZ = var1.posZ;
+   public EntityMoveHelper(EntityLiving entityliving) {
+      this.entity = entityliving;
+      this.posX = entityliving.posX;
+      this.posY = entityliving.posY;
+      this.posZ = entityliving.posZ;
    }
 
    public boolean func_75640_a() {
@@ -28,11 +29,11 @@
       return this.speed;
    }
 
-   public void setMoveTo(double var1, double var3, double var5, float var7) {
-      this.posX = var1;
-      this.posY = var3;
-      this.posZ = var5;
-      this.speed = var7;
+   public void setMoveTo(double d0, double d1, double d2, float f) {
+      this.posX = d0;
+      this.posY = d1;
+      this.posZ = d2;
+      this.speed = f;
       this.field_75643_f = true;
    }
 
@@ -40,33 +41,33 @@
       this.entity.setMoveForward(0.0F);
       if(this.field_75643_f) {
          this.field_75643_f = false;
-         int var1 = MathHelper.floor_double(this.entity.boundingBox.minY + 0.5D);
-         double var2 = this.posX - this.entity.posX;
-         double var4 = this.posZ - this.entity.posZ;
-         double var6 = this.posY - (double)var1;
-         double var8 = var2 * var2 + var6 * var6 + var4 * var4;
-         if(var8 >= 2.500000277905201E-7D) {
-            float var10 = (float)(Math.atan2(var4, var2) * 180.0D / 3.1415927410125732D) - 90.0F;
-            this.entity.rotationYaw = this.func_75639_a(this.entity.rotationYaw, var10, 30.0F);
+         int i = MathHelper.floor_double(this.entity.boundingBox.minY + 0.5D);
+         double d0 = this.posX - this.entity.posX;
+         double d1 = this.posZ - this.entity.posZ;
+         double d2 = this.posY - (double)i;
+         double d3 = d0 * d0 + d2 * d2 + d1 * d1;
+         if(d3 >= 2.500000277905201E-7D) {
+            float f = (float)(TrigMath.atan2(d1, d0) * 180.0D / 3.1415927410125732D) - 90.0F;
+            this.entity.rotationYaw = this.func_75639_a(this.entity.rotationYaw, f, 30.0F);
             this.entity.setAIMoveSpeed(this.speed * this.entity.getSpeedModifier());
-            if(var6 > 0.0D && var2 * var2 + var4 * var4 < 1.0D) {
+            if(d2 > 0.0D && d0 * d0 + d1 * d1 < 1.0D) {
                this.entity.getJumpHelper().setJumping();
             }
-
          }
       }
+
    }
 
-   private float func_75639_a(float var1, float var2, float var3) {
-      float var4 = MathHelper.wrapAngleTo180_float(var2 - var1);
-      if(var4 > var3) {
-         var4 = var3;
+   private float func_75639_a(float f, float f1, float f2) {
+      float f3 = MathHelper.wrapAngleTo180_float(f1 - f);
+      if(f3 > f2) {
+         f3 = f2;
       }
 
-      if(var4 < -var3) {
-         var4 = -var3;
+      if(f3 < -f2) {
+         f3 = -f2;
       }
 
-      return var1 + var4;
+      return f + f3;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityOcelot.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityOcelot.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityOcelot.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityOcelot.java
--- mcp-mcdev/net/minecraft/src/EntityOcelot.java	2012-11-29 21:14:58.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityOcelot.java	2012-11-29 20:44:14.000000000 -0800
@@ -24,14 +24,15 @@
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntityOcelot extends EntityTameable {
 
    private EntityAITempt aiTempt;
 
 
-   public EntityOcelot(World var1) {
-      super(var1);
+   public EntityOcelot(World world) {
+      super(world);
       this.texture = "/mob/ozelot.png";
       this.setSize(0.6F, 0.8F);
       this.getNavigator().setAvoidsWater(true);
@@ -56,11 +57,11 @@
 
    public void updateAITick() {
       if(this.getMoveHelper().func_75640_a()) {
-         float var1 = this.getMoveHelper().getSpeed();
-         if(var1 == 0.18F) {
+         float f = this.getMoveHelper().getSpeed();
+         if(f == 0.18F) {
             this.setSneaking(true);
             this.setSprinting(false);
-         } else if(var1 == 0.4F) {
+         } else if(f == 0.4F) {
             this.setSneaking(false);
             this.setSprinting(true);
          } else {
@@ -86,16 +87,16 @@
       return 10;
    }
 
-   protected void fall(float var1) {}
+   protected void fall(float f) {}
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setInteger("CatType", this.getTameSkin());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setInteger("CatType", this.getTameSkin());
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.setTameSkin(var1.getInteger("CatType"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.setTameSkin(nbttagcompound.getInteger("CatType"));
    }
 
    protected String getLivingSound() {
@@ -118,41 +119,43 @@
       return Item.leather.shiftedIndex;
    }
 
-   public boolean attackEntityAsMob(Entity var1) {
-      return var1.attackEntityFrom(DamageSource.causeMobDamage(this), 3);
+   public boolean attackEntityAsMob(Entity entity) {
+      return entity.attackEntityFrom(DamageSource.causeMobDamage(this), 3);
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
          this.aiSit.setSitting(false);
-         return super.attackEntityFrom(var1, var2);
+         return super.attackEntityFrom(damagesource, i);
       }
    }
 
-   protected void dropFewItems(boolean var1, int var2) {}
+   protected void dropFewItems(boolean flag, int i) {
+      CraftEventFactory.callEntityDeathEvent(this);
+   }
 
-   public boolean interact(EntityPlayer var1) {
-      ItemStack var2 = var1.inventory.getCurrentItem();
+   public boolean interact(EntityPlayer entityhuman) {
+      ItemStack itemstack = entityhuman.inventory.getCurrentItem();
       if(this.isTamed()) {
-         if(var1.username.equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(var2)) {
+         if(entityhuman.username.equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(itemstack)) {
             this.aiSit.setSitting(!this.isSitting());
          }
-      } else if(this.aiTempt.func_75277_f() && var2 != null && var2.itemID == Item.fishRaw.shiftedIndex && var1.getDistanceSqToEntity(this) < 9.0D) {
-         if(!var1.capabilities.isCreativeMode) {
-            --var2.stackSize;
+      } else if(this.aiTempt.func_75277_f() && itemstack != null && itemstack.itemID == Item.fishRaw.shiftedIndex && entityhuman.getDistanceSqToEntity(this) < 9.0D) {
+         if(!entityhuman.capabilities.isCreativeMode) {
+            --itemstack.stackSize;
          }
 
-         if(var2.stackSize <= 0) {
-            var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+         if(itemstack.stackSize <= 0) {
+            entityhuman.inventory.setInventorySlotContents(entityhuman.inventory.currentItem, (ItemStack)null);
          }
 
          if(!this.worldObj.isRemote) {
-            if(this.rand.nextInt(3) == 0) {
+            if(this.rand.nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
                this.setTamed(true);
                this.setTameSkin(1 + this.worldObj.rand.nextInt(3));
-               this.setOwner(var1.username);
+               this.setOwner(entityhuman.username);
                this.playTameEffect(true);
                this.aiSit.setSitting(true);
                this.worldObj.setEntityState(this, (byte)7);
@@ -165,34 +168,34 @@
          return true;
       }
 
-      return super.interact(var1);
+      return super.interact(entityhuman);
    }
 
-   public EntityOcelot spawnBabyAnimal(EntityAgeable var1) {
-      EntityOcelot var2 = new EntityOcelot(this.worldObj);
+   public EntityOcelot spawnBabyAnimal(EntityAgeable entityageable) {
+      EntityOcelot entityocelot = new EntityOcelot(this.worldObj);
       if(this.isTamed()) {
-         var2.setOwner(this.getOwnerName());
-         var2.setTamed(true);
-         var2.setTameSkin(this.getTameSkin());
+         entityocelot.setOwner(this.getOwnerName());
+         entityocelot.setTamed(true);
+         entityocelot.setTameSkin(this.getTameSkin());
       }
 
-      return var2;
+      return entityocelot;
    }
 
-   public boolean isBreedingItem(ItemStack var1) {
-      return var1 != null && var1.itemID == Item.fishRaw.shiftedIndex;
+   public boolean isBreedingItem(ItemStack itemstack) {
+      return itemstack != null && itemstack.itemID == Item.fishRaw.shiftedIndex;
    }
 
-   public boolean canMateWith(EntityAnimal var1) {
-      if(var1 == this) {
+   public boolean canMateWith(EntityAnimal entityanimal) {
+      if(entityanimal == this) {
          return false;
       } else if(!this.isTamed()) {
          return false;
-      } else if(!(var1 instanceof EntityOcelot)) {
+      } else if(!(entityanimal instanceof EntityOcelot)) {
          return false;
       } else {
-         EntityOcelot var2 = (EntityOcelot)var1;
-         return !var2.isTamed()?false:this.isInLove() && var2.isInLove();
+         EntityOcelot entityocelot = (EntityOcelot)entityanimal;
+         return !entityocelot.isTamed()?false:this.isInLove() && entityocelot.isInLove();
       }
    }
 
@@ -200,8 +203,8 @@
       return this.dataWatcher.getWatchableObjectByte(18);
    }
 
-   public void setTameSkin(int var1) {
-      this.dataWatcher.updateObject(18, Byte.valueOf((byte)var1));
+   public void setTameSkin(int i) {
+      this.dataWatcher.updateObject(18, Byte.valueOf((byte)i));
    }
 
    public boolean getCanSpawnHere() {
@@ -209,15 +212,15 @@
          return false;
       } else {
          if(this.worldObj.checkIfAABBIsClear(this.boundingBox) && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty() && !this.worldObj.isAnyLiquid(this.boundingBox)) {
-            int var1 = MathHelper.floor_double(this.posX);
-            int var2 = MathHelper.floor_double(this.boundingBox.minY);
-            int var3 = MathHelper.floor_double(this.posZ);
-            if(var2 < 63) {
+            int i = MathHelper.floor_double(this.posX);
+            int j = MathHelper.floor_double(this.boundingBox.minY);
+            int k = MathHelper.floor_double(this.posZ);
+            if(j < 63) {
                return false;
             }
 
-            int var4 = this.worldObj.getBlockId(var1, var2 - 1, var3);
-            if(var4 == Block.grass.blockID || var4 == Block.leaves.blockID) {
+            int l = this.worldObj.getBlockId(i, j - 1, k);
+            if(l == Block.grass.blockID || l == Block.leaves.blockID) {
                return true;
             }
          }
@@ -232,18 +235,17 @@
 
    public void initCreature() {
       if(this.worldObj.rand.nextInt(7) == 0) {
-         for(int var1 = 0; var1 < 2; ++var1) {
-            EntityOcelot var2 = new EntityOcelot(this.worldObj);
-            var2.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
-            var2.setGrowingAge(-24000);
-            this.worldObj.spawnEntityInWorld(var2);
+         for(int i = 0; i < 2; ++i) {
+            EntityOcelot entityocelot = new EntityOcelot(this.worldObj);
+            entityocelot.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
+            entityocelot.setGrowingAge(-24000);
+            this.worldObj.spawnEntityInWorld(entityocelot);
          }
       }
 
    }
 
-   // $FF: synthetic method
-   public EntityAgeable func_90011_a(EntityAgeable var1) {
-      return this.spawnBabyAnimal(var1);
+   public EntityAgeable func_90011_a(EntityAgeable entityageable) {
+      return this.spawnBabyAnimal(entityageable);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityPainting.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPainting.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityPainting.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPainting.java
--- mcp-mcdev/net/minecraft/src/EntityPainting.java	2012-11-29 21:14:58.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPainting.java	2012-11-29 20:44:14.000000000 -0800
@@ -13,46 +13,47 @@
    public EnumArt art;
 
 
-   public EntityPainting(World var1) {
-      super(var1);
+   public EntityPainting(World world) {
+      super(world);
+      this.art = EnumArt.values()[this.rand.nextInt(EnumArt.values().length)];
    }
 
-   public EntityPainting(World var1, int var2, int var3, int var4, int var5) {
-      super(var1, var2, var3, var4, var5);
-      ArrayList var6 = new ArrayList();
-      EnumArt[] var7 = EnumArt.values();
-      int var8 = var7.length;
-
-      for(int var9 = 0; var9 < var8; ++var9) {
-         EnumArt var10 = var7[var9];
-         this.art = var10;
-         this.setDirection(var5);
+   public EntityPainting(World world, int i, int j, int k, int l) {
+      super(world, i, j, k, l);
+      ArrayList arraylist = new ArrayList();
+      EnumArt[] aenumart = EnumArt.values();
+      int i1 = aenumart.length;
+
+      for(int j1 = 0; j1 < i1; ++j1) {
+         EnumArt enumart = aenumart[j1];
+         this.art = enumart;
+         this.setDirection(l);
          if(this.onValidSurface()) {
-            var6.add(var10);
+            arraylist.add(enumart);
          }
       }
 
-      if(!var6.isEmpty()) {
-         this.art = (EnumArt)var6.get(this.rand.nextInt(var6.size()));
+      if(!arraylist.isEmpty()) {
+         this.art = (EnumArt)arraylist.get(this.rand.nextInt(arraylist.size()));
       }
 
-      this.setDirection(var5);
+      this.setDirection(l);
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setString("Motive", this.art.title);
-      super.writeEntityToNBT(var1);
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setString("Motive", this.art.title);
+      super.writeEntityToNBT(nbttagcompound);
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      String var2 = var1.getString("Motive");
-      EnumArt[] var3 = EnumArt.values();
-      int var4 = var3.length;
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      String s = nbttagcompound.getString("Motive");
+      EnumArt[] aenumart = EnumArt.values();
+      int i = aenumart.length;
 
-      for(int var5 = 0; var5 < var4; ++var5) {
-         EnumArt var6 = var3[var5];
-         if(var6.title.equals(var2)) {
-            this.art = var6;
+      for(int j = 0; j < i; ++j) {
+         EnumArt enumart = aenumart[j];
+         if(enumart.title.equals(s)) {
+            this.art = enumart;
          }
       }
 
@@ -60,7 +61,7 @@
          this.art = EnumArt.Kebab;
       }
 
-      super.readEntityFromNBT(var1);
+      super.readEntityFromNBT(nbttagcompound);
    }
 
    public int func_82329_d() {
Binary files mcp-mcdev/net/minecraft/src/EntityPig.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPig.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityPig.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPig.java
--- mcp-mcdev/net/minecraft/src/EntityPig.java	2012-11-29 21:14:58.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPig.java	2012-11-29 20:44:14.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.AchievementList;
 import net.minecraft.src.EntityAIControlledByPlayer;
 import net.minecraft.src.EntityAIFollowParent;
@@ -19,26 +20,28 @@
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public class EntityPig extends EntityAnimal {
 
    private final EntityAIControlledByPlayer aiControlledByPlayer;
 
 
-   public EntityPig(World var1) {
-      super(var1);
+   public EntityPig(World world) {
+      super(world);
       this.texture = "/mob/pig.png";
       this.setSize(0.9F, 0.9F);
       this.getNavigator().setAvoidsWater(true);
-      float var2 = 0.25F;
+      float f = 0.25F;
       this.tasks.addTask(0, new EntityAISwimming(this));
       this.tasks.addTask(1, new EntityAIPanic(this, 0.38F));
       this.tasks.addTask(2, this.aiControlledByPlayer = new EntityAIControlledByPlayer(this, 0.34F));
-      this.tasks.addTask(3, new EntityAIMate(this, var2));
+      this.tasks.addTask(3, new EntityAIMate(this, f));
       this.tasks.addTask(4, new EntityAITempt(this, 0.3F, Item.carrotOnAStick.shiftedIndex, false));
       this.tasks.addTask(4, new EntityAITempt(this, 0.3F, Item.carrot.shiftedIndex, false));
       this.tasks.addTask(5, new EntityAIFollowParent(this, 0.28F));
-      this.tasks.addTask(6, new EntityAIWander(this, var2));
+      this.tasks.addTask(6, new EntityAIWander(this, f));
       this.tasks.addTask(7, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
       this.tasks.addTask(8, new EntityAILookIdle(this));
    }
@@ -56,8 +59,8 @@
    }
 
    public boolean canBeSteered() {
-      ItemStack var1 = ((EntityPlayer)this.riddenByEntity).getHeldItem();
-      return var1 != null && var1.itemID == Item.carrotOnAStick.shiftedIndex;
+      ItemStack itemstack = ((EntityPlayer)this.riddenByEntity).getHeldItem();
+      return itemstack != null && itemstack.itemID == Item.carrotOnAStick.shiftedIndex;
    }
 
    protected void entityInit() {
@@ -65,14 +68,14 @@
       this.dataWatcher.addObject(16, Byte.valueOf((byte)0));
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setBoolean("Saddle", this.getSaddled());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setBoolean("Saddle", this.getSaddled());
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.setSaddled(var1.getBoolean("Saddle"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.setSaddled(nbttagcompound.getBoolean("Saddle"));
    }
 
    protected String getLivingSound() {
@@ -87,15 +90,15 @@
       return "mob.pig.death";
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.pig.step", 0.15F, 1.0F);
    }
 
-   public boolean interact(EntityPlayer var1) {
-      if(super.interact(var1)) {
+   public boolean interact(EntityPlayer entityhuman) {
+      if(super.interact(entityhuman)) {
          return true;
-      } else if(this.getSaddled() && !this.worldObj.isRemote && (this.riddenByEntity == null || this.riddenByEntity == var1)) {
-         var1.mountEntity(this);
+      } else if(this.getSaddled() && !this.worldObj.isRemote && (this.riddenByEntity == null || this.riddenByEntity == entityhuman)) {
+         entityhuman.mountEntity(this);
          return true;
       } else {
          return false;
@@ -106,29 +109,30 @@
       return this.isBurning()?Item.porkCooked.shiftedIndex:Item.porkRaw.shiftedIndex;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.rand.nextInt(3) + 1 + this.rand.nextInt(1 + var2);
-
-      for(int var4 = 0; var4 < var3; ++var4) {
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.rand.nextInt(3) + 1 + this.rand.nextInt(1 + i);
+      if(j > 0) {
          if(this.isBurning()) {
-            this.dropItem(Item.porkCooked.shiftedIndex, 1);
+            loot.add(new org.bukkit.inventory.ItemStack(Item.porkCooked.shiftedIndex, j));
          } else {
-            this.dropItem(Item.porkRaw.shiftedIndex, 1);
+            loot.add(new org.bukkit.inventory.ItemStack(Item.porkRaw.shiftedIndex, j));
          }
       }
 
       if(this.getSaddled()) {
-         this.dropItem(Item.saddle.shiftedIndex, 1);
+         loot.add(new org.bukkit.inventory.ItemStack(Item.saddle.shiftedIndex, 1));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
    public boolean getSaddled() {
       return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
    }
 
-   public void setSaddled(boolean var1) {
-      if(var1) {
+   public void setSaddled(boolean flag) {
+      if(flag) {
          this.dataWatcher.updateObject(16, Byte.valueOf((byte)1));
       } else {
          this.dataWatcher.updateObject(16, Byte.valueOf((byte)0));
@@ -136,37 +140,41 @@
 
    }
 
-   public void onStruckByLightning(EntityLightningBolt var1) {
+   public void onStruckByLightning(EntityLightningBolt entitylightning) {
       if(!this.worldObj.isRemote) {
-         EntityPigZombie var2 = new EntityPigZombie(this.worldObj);
-         var2.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
-         this.worldObj.spawnEntityInWorld(var2);
+         EntityPigZombie entitypigzombie = new EntityPigZombie(this.worldObj);
+         if(CraftEventFactory.callPigZapEvent(this, entitylightning, entitypigzombie).isCancelled()) {
+            return;
+         }
+
+         entitypigzombie.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+         this.worldObj.addEntity(entitypigzombie, SpawnReason.LIGHTNING);
          this.setDead();
       }
+
    }
 
-   protected void fall(float var1) {
-      super.fall(var1);
-      if(var1 > 5.0F && this.riddenByEntity instanceof EntityPlayer) {
+   protected void fall(float f) {
+      super.fall(f);
+      if(f > 5.0F && this.riddenByEntity instanceof EntityPlayer) {
          ((EntityPlayer)this.riddenByEntity).triggerAchievement(AchievementList.flyPig);
       }
 
    }
 
-   public EntityPig spawnBabyAnimal(EntityAgeable var1) {
+   public EntityPig spawnBabyAnimal(EntityAgeable entityageable) {
       return new EntityPig(this.worldObj);
    }
 
-   public boolean isBreedingItem(ItemStack var1) {
-      return var1 != null && var1.itemID == Item.carrot.shiftedIndex;
+   public boolean isBreedingItem(ItemStack itemstack) {
+      return itemstack != null && itemstack.itemID == Item.carrot.shiftedIndex;
    }
 
    public EntityAIControlledByPlayer getAIControlledByPlayer() {
       return this.aiControlledByPlayer;
    }
 
-   // $FF: synthetic method
-   public EntityAgeable func_90011_a(EntityAgeable var1) {
-      return this.spawnBabyAnimal(var1);
+   public EntityAgeable func_90011_a(EntityAgeable entityageable) {
+      return this.spawnBabyAnimal(entityageable);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityPigZombie.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPigZombie.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityPigZombie.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPigZombie.java
--- mcp-mcdev/net/minecraft/src/EntityPigZombie.java	2012-11-29 21:14:57.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPigZombie.java	2012-11-29 20:44:14.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.Entity;
@@ -9,15 +10,20 @@
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 
 public class EntityPigZombie extends EntityZombie {
 
-   private int angerLevel = 0;
+   public int angerLevel = 0;
    private int randomSoundDelay = 0;
 
 
-   public EntityPigZombie(World var1) {
-      super(var1);
+   public EntityPigZombie(World world) {
+      super(world);
       this.texture = "/mob/pigzombie.png";
       this.moveSpeed = 0.5F;
       this.isImmuneToFire = true;
@@ -40,47 +46,57 @@
       return this.worldObj.difficultySetting > 0 && this.worldObj.checkIfAABBIsClear(this.boundingBox) && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty() && !this.worldObj.isAnyLiquid(this.boundingBox);
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setShort("Anger", (short)this.angerLevel);
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setShort("Anger", (short)this.angerLevel);
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.angerLevel = var1.getShort("Anger");
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.angerLevel = nbttagcompound.getShort("Anger");
    }
 
    protected Entity findPlayerToAttack() {
       return this.angerLevel == 0?null:super.findPlayerToAttack();
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
-         Entity var3 = var1.getEntity();
-         if(var3 instanceof EntityPlayer) {
-            List var4 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(32.0D, 32.0D, 32.0D));
-
-            for(int var5 = 0; var5 < var4.size(); ++var5) {
-               Entity var6 = (Entity)var4.get(var5);
-               if(var6 instanceof EntityPigZombie) {
-                  EntityPigZombie var7 = (EntityPigZombie)var6;
-                  var7.becomeAngryAt(var3);
+         Entity entity = damagesource.getEntity();
+         if(entity instanceof EntityPlayer) {
+            List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(32.0D, 32.0D, 32.0D));
+
+            for(int j = 0; j < list.size(); ++j) {
+               Entity entity1 = (Entity)list.get(j);
+               if(entity1 instanceof EntityPigZombie) {
+                  EntityPigZombie entitypigzombie = (EntityPigZombie)entity1;
+                  entitypigzombie.becomeAngryAt(entity);
                }
             }
 
-            this.becomeAngryAt(var3);
+            this.becomeAngryAt(entity);
          }
 
-         return super.attackEntityFrom(var1, var2);
+         return super.attackEntityFrom(damagesource, i);
       }
    }
 
-   private void becomeAngryAt(Entity var1) {
-      this.entityToAttack = var1;
-      this.angerLevel = 400 + this.rand.nextInt(400);
-      this.randomSoundDelay = this.rand.nextInt(40);
+   private void becomeAngryAt(Entity entity) {
+      org.bukkit.entity.Entity bukkitTarget = entity == null?null:entity.getBukkitEntity();
+      EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), bukkitTarget, TargetReason.PIG_ZOMBIE_TARGET);
+      this.worldObj.getServer().getPluginManager().callEvent(event);
+      if(!event.isCancelled()) {
+         if(event.getTarget() == null) {
+            this.entityToAttack = null;
+         } else {
+            entity = ((CraftEntity)event.getTarget()).getHandle();
+            this.entityToAttack = entity;
+            this.angerLevel = 400 + this.rand.nextInt(400);
+            this.randomSoundDelay = this.rand.nextInt(40);
+         }
+      }
    }
 
    protected String getLivingSound() {
@@ -95,28 +111,37 @@
       return "mob.zombiepig.zpigdeath";
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.rand.nextInt(2 + var2);
-
-      int var4;
-      for(var4 = 0; var4 < var3; ++var4) {
-         this.dropItem(Item.rottenFlesh.shiftedIndex, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.rand.nextInt(2 + i);
+      if(j > 0) {
+         loot.add(new CraftItemStack(Item.rottenFlesh.shiftedIndex, j));
       }
 
-      var3 = this.rand.nextInt(2 + var2);
+      j = this.rand.nextInt(2 + i);
+      if(j > 0) {
+         loot.add(new CraftItemStack(Item.goldNugget.shiftedIndex, j));
+      }
 
-      for(var4 = 0; var4 < var3; ++var4) {
-         this.dropItem(Item.goldNugget.shiftedIndex, 1);
+      if(this.recentlyHit > 0) {
+         int k = this.rand.nextInt(200) - i;
+         if(k < 5) {
+            ItemStack itemstack = this.l(k <= 0?1:0);
+            if(itemstack != null) {
+               loot.add(new CraftItemStack(itemstack));
+            }
+         }
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
-   public boolean interact(EntityPlayer var1) {
+   public boolean interact(EntityPlayer entityhuman) {
       return false;
    }
 
-   protected void dropRareDrop(int var1) {
-      this.dropItem(Item.ingotGold.shiftedIndex, 1);
+   protected ItemStack l(int i) {
+      return new ItemStack(Item.ingotGold.shiftedIndex, 1, 0);
    }
 
    protected int getDropItemId() {
@@ -132,13 +157,13 @@
       this.setVillager(false);
    }
 
-   public int getAttackStrength(Entity var1) {
-      ItemStack var2 = this.getHeldItem();
-      int var3 = 5;
-      if(var2 != null) {
-         var3 += var2.getDamageVsEntity(this);
+   public int getAttackStrength(Entity entity) {
+      ItemStack itemstack = this.getHeldItem();
+      int i = 5;
+      if(itemstack != null) {
+         i += itemstack.getDamageVsEntity(this);
       }
 
-      return var3;
+      return i;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityPlayer.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPlayer.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityPlayer.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPlayer.java
--- mcp-mcdev/net/minecraft/src/EntityPlayer.java	2012-11-29 21:14:57.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPlayer.java	2012-11-29 20:44:14.000000000 -0800
@@ -52,6 +52,16 @@
 import net.minecraft.src.TileEntityFurnace;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.TrigMath;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
+import org.bukkit.event.player.PlayerBedEnterEvent;
+import org.bukkit.event.player.PlayerBedLeaveEvent;
+import org.bukkit.event.player.PlayerDropItemEvent;
 
 public abstract class EntityPlayer extends EntityLiving implements ICommandSender {
 
@@ -72,15 +82,18 @@
    public double field_71094_bP;
    public double field_71095_bQ;
    public double field_71085_bR;
-   protected boolean sleeping;
+   public boolean sleeping;
+   public boolean fauxSleeping;
+   public String spawnWorld = "";
    public ChunkCoordinates playerLocation;
-   private int sleepTimer;
+   public int sleepTimer;
    public float field_71079_bU;
    public float field_71089_bV;
    private ChunkCoordinates spawnChunk;
    private boolean spawnForced;
    private ChunkCoordinates startMinecartRidingCoordinate;
    public PlayerCapabilities capabilities = new PlayerCapabilities();
+   public int oldLevel = -1;
    public int experienceLevel;
    public int experienceTotal;
    public float experience;
@@ -92,13 +105,17 @@
    public EntityFishHook fishEntity = null;
 
 
-   public EntityPlayer(World var1) {
-      super(var1);
-      this.inventoryContainer = new ContainerPlayer(this.inventory, !var1.isRemote, this);
+   public HumanEntity getBukkitEntity() {
+      return (HumanEntity)super.getBukkitEntity();
+   }
+
+   public EntityPlayer(World world) {
+      super(world);
+      this.inventoryContainer = new ContainerPlayer(this.inventory, !world.isRemote, this);
       this.openContainer = this.inventoryContainer;
       this.yOffset = 1.62F;
-      ChunkCoordinates var2 = var1.getSpawnPoint();
-      this.setLocationAndAngles((double)var2.posX + 0.5D, (double)(var2.posY + 1), (double)var2.posZ + 0.5D, 0.0F, 0.0F);
+      ChunkCoordinates chunkcoordinates = world.getSpawnPoint();
+      this.setLocationAndAngles((double)chunkcoordinates.posX + 0.5D, (double)(chunkcoordinates.posY + 1), (double)chunkcoordinates.posZ + 0.5D, 0.0F, 0.0F);
       this.entityType = "humanoid";
       this.field_70741_aB = 180.0F;
       this.fireResistance = 20;
@@ -143,10 +160,10 @@
 
    public void onUpdate() {
       if(this.itemInUse != null) {
-         ItemStack var1 = this.inventory.getCurrentItem();
-         if(var1 == this.itemInUse) {
+         ItemStack itemstack = this.inventory.getCurrentItem();
+         if(itemstack == this.itemInUse) {
             if(this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0) {
-               this.updateItemUse(var1, 5);
+               this.updateItemUse(itemstack, 5);
             }
 
             if(--this.itemInUseCount == 0 && !this.worldObj.isRemote) {
@@ -194,37 +211,37 @@
       this.field_71091_bM = this.field_71094_bP;
       this.field_71096_bN = this.field_71095_bQ;
       this.field_71097_bO = this.field_71085_bR;
-      double var2 = this.posX - this.field_71094_bP;
-      double var4 = this.posY - this.field_71095_bQ;
-      double var6 = this.posZ - this.field_71085_bR;
-      double var8 = 10.0D;
-      if(var2 > var8) {
+      double d0 = this.posX - this.field_71094_bP;
+      double d1 = this.posY - this.field_71095_bQ;
+      double d2 = this.posZ - this.field_71085_bR;
+      double d3 = 10.0D;
+      if(d0 > d3) {
          this.field_71091_bM = this.field_71094_bP = this.posX;
       }
 
-      if(var6 > var8) {
+      if(d2 > d3) {
          this.field_71097_bO = this.field_71085_bR = this.posZ;
       }
 
-      if(var4 > var8) {
+      if(d1 > d3) {
          this.field_71096_bN = this.field_71095_bQ = this.posY;
       }
 
-      if(var2 < -var8) {
+      if(d0 < -d3) {
          this.field_71091_bM = this.field_71094_bP = this.posX;
       }
 
-      if(var6 < -var8) {
+      if(d2 < -d3) {
          this.field_71097_bO = this.field_71085_bR = this.posZ;
       }
 
-      if(var4 < -var8) {
+      if(d1 < -d3) {
          this.field_71096_bN = this.field_71095_bQ = this.posY;
       }
 
-      this.field_71094_bP += var2 * 0.25D;
-      this.field_71085_bR += var6 * 0.25D;
-      this.field_71095_bQ += var4 * 0.25D;
+      this.field_71094_bP += d0 * 0.25D;
+      this.field_71085_bR += d2 * 0.25D;
+      this.field_71095_bQ += d1 * 0.25D;
       this.addStat(StatList.minutesPlayedStat, 1);
       if(this.ridingEntity == null) {
          this.startMinecartRidingCoordinate = null;
@@ -244,25 +261,25 @@
       return 10;
    }
 
-   protected void func_85030_a(String var1, float var2, float var3) {
-      this.worldObj.func_85173_a(this, var1, var2, var3);
+   protected void func_85030_a(String s, float f, float f1) {
+      this.worldObj.func_85173_a(this, s, f, f1);
    }
 
-   protected void updateItemUse(ItemStack var1, int var2) {
-      if(var1.getItemUseAction() == EnumAction.drink) {
+   protected void updateItemUse(ItemStack itemstack, int i) {
+      if(itemstack.getItemUseAction() == EnumAction.drink) {
          this.func_85030_a("random.drink", 0.5F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
       }
 
-      if(var1.getItemUseAction() == EnumAction.eat) {
-         for(int var3 = 0; var3 < var2; ++var3) {
-            Vec3 var4 = this.worldObj.getWorldVec3Pool().getVecFromPool(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
-            var4.rotateAroundX(-this.rotationPitch * 3.1415927F / 180.0F);
-            var4.rotateAroundY(-this.rotationYaw * 3.1415927F / 180.0F);
-            Vec3 var5 = this.worldObj.getWorldVec3Pool().getVecFromPool(((double)this.rand.nextFloat() - 0.5D) * 0.3D, (double)(-this.rand.nextFloat()) * 0.6D - 0.3D, 0.6D);
-            var5.rotateAroundX(-this.rotationPitch * 3.1415927F / 180.0F);
-            var5.rotateAroundY(-this.rotationYaw * 3.1415927F / 180.0F);
-            var5 = var5.addVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ);
-            this.worldObj.spawnParticle("iconcrack_" + var1.getItem().shiftedIndex, var5.xCoord, var5.yCoord, var5.zCoord, var4.xCoord, var4.yCoord + 0.05D, var4.zCoord);
+      if(itemstack.getItemUseAction() == EnumAction.eat) {
+         for(int j = 0; j < i; ++j) {
+            Vec3 vec3d = this.worldObj.getWorldVec3Pool().getVecFromPool(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            vec3d.rotateAroundX(-this.rotationPitch * 3.1415927F / 180.0F);
+            vec3d.rotateAroundY(-this.rotationYaw * 3.1415927F / 180.0F);
+            Vec3 vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(((double)this.rand.nextFloat() - 0.5D) * 0.3D, (double)(-this.rand.nextFloat()) * 0.6D - 0.3D, 0.6D);
+            vec3d1.rotateAroundX(-this.rotationPitch * 3.1415927F / 180.0F);
+            vec3d1.rotateAroundY(-this.rotationYaw * 3.1415927F / 180.0F);
+            vec3d1 = vec3d1.addVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ);
+            this.worldObj.spawnParticle("iconcrack_" + itemstack.getItem().shiftedIndex, vec3d1.xCoord, vec3d1.yCoord, vec3d1.zCoord, vec3d.xCoord, vec3d.yCoord + 0.05D, vec3d.zCoord);
          }
 
          this.func_85030_a("random.eat", 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
@@ -273,11 +290,11 @@
    protected void onItemUseFinish() {
       if(this.itemInUse != null) {
          this.updateItemUse(this.itemInUse, 16);
-         int var1 = this.itemInUse.stackSize;
-         ItemStack var2 = this.itemInUse.onFoodEaten(this.worldObj, this);
-         if(var2 != this.itemInUse || var2 != null && var2.stackSize != var1) {
-            this.inventory.mainInventory[this.inventory.currentItem] = var2;
-            if(var2.stackSize == 0) {
+         int i = this.itemInUse.stackSize;
+         ItemStack itemstack = this.itemInUse.onFoodEaten(this.worldObj, this);
+         if(itemstack != this.itemInUse || itemstack != null && itemstack.stackSize != i) {
+            this.inventory.mainInventory[this.inventory.currentItem] = itemstack;
+            if(itemstack.stackSize == 0) {
                this.inventory.mainInventory[this.inventory.currentItem] = null;
             }
          }
@@ -291,23 +308,23 @@
       return this.getHealth() <= 0 || this.isPlayerSleeping();
    }
 
-   protected void closeScreen() {
+   public void closeScreen() {
       this.openContainer = this.inventoryContainer;
    }
 
    public void updateRidden() {
-      double var1 = this.posX;
-      double var3 = this.posY;
-      double var5 = this.posZ;
-      float var7 = this.rotationYaw;
-      float var8 = this.rotationPitch;
+      double d0 = this.posX;
+      double d1 = this.posY;
+      double d2 = this.posZ;
+      float f = this.rotationYaw;
+      float f1 = this.rotationPitch;
       super.updateRidden();
       this.prevCameraYaw = this.cameraYaw;
       this.cameraYaw = 0.0F;
-      this.addMountedMovementStat(this.posX - var1, this.posY - var3, this.posZ - var5);
+      this.addMountedMovementStat(this.posX - d0, this.posY - d1, this.posZ - d2);
       if(this.ridingEntity instanceof EntityPig) {
-         this.rotationPitch = var8;
-         this.rotationYaw = var7;
+         this.rotationPitch = f1;
+         this.rotationYaw = f;
          this.renderYawOffset = ((EntityPig)this.ridingEntity).renderYawOffset;
       }
 
@@ -323,7 +340,7 @@
       }
 
       if(this.worldObj.difficultySetting == 0 && this.getHealth() < this.getMaxHealth() && this.ticksExisted % 20 * 12 == 0) {
-         this.heal(1);
+         this.heal(1, RegainReason.REGEN);
       }
 
       this.inventory.decrementAnimations();
@@ -336,29 +353,29 @@
          this.jumpMovementFactor = (float)((double)this.jumpMovementFactor + (double)this.speedInAir * 0.3D);
       }
 
-      float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-      float var2 = (float)Math.atan(-this.motionY * 0.20000000298023224D) * 15.0F;
-      if(var1 > 0.1F) {
-         var1 = 0.1F;
+      float f = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+      float f1 = (float)TrigMath.atan(-this.motionY * 0.20000000298023224D) * 15.0F;
+      if(f > 0.1F) {
+         f = 0.1F;
       }
 
       if(!this.onGround || this.getHealth() <= 0) {
-         var1 = 0.0F;
+         f = 0.0F;
       }
 
       if(this.onGround || this.getHealth() <= 0) {
-         var2 = 0.0F;
+         f1 = 0.0F;
       }
 
-      this.cameraYaw += (var1 - this.cameraYaw) * 0.4F;
-      this.cameraPitch += (var2 - this.cameraPitch) * 0.8F;
+      this.cameraYaw += (f - this.cameraYaw) * 0.4F;
+      this.cameraPitch += (f1 - this.cameraPitch) * 0.8F;
       if(this.getHealth() > 0) {
-         List var3 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0D, 0.5D, 1.0D));
-         if(var3 != null) {
-            for(int var4 = 0; var4 < var3.size(); ++var4) {
-               Entity var5 = (Entity)var3.get(var4);
-               if(!var5.isDead) {
-                  this.collideWithPlayer(var5);
+         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0D, 0.5D, 1.0D));
+         if(list != null) {
+            for(int i = 0; i < list.size(); ++i) {
+               Entity entity = (Entity)list.get(i);
+               if(!entity.isDead) {
+                  this.collideWithPlayer(entity);
                }
             }
          }
@@ -366,25 +383,25 @@
 
    }
 
-   private void collideWithPlayer(Entity var1) {
-      var1.onCollideWithPlayer(this);
+   private void collideWithPlayer(Entity entity) {
+      entity.onCollideWithPlayer(this);
    }
 
    public int getScore() {
       return this.dataWatcher.getWatchableObjectInt(18);
    }
 
-   public void func_85040_s(int var1) {
-      this.dataWatcher.updateObject(18, Integer.valueOf(var1));
+   public void func_85040_s(int i) {
+      this.dataWatcher.updateObject(18, Integer.valueOf(i));
    }
 
-   public void func_85039_t(int var1) {
-      int var2 = this.getScore();
-      this.dataWatcher.updateObject(18, Integer.valueOf(var2 + var1));
+   public void func_85039_t(int i) {
+      int j = this.getScore();
+      this.dataWatcher.updateObject(18, Integer.valueOf(j + i));
    }
 
-   public void onDeath(DamageSource var1) {
-      super.onDeath(var1);
+   public void onDeath(DamageSource damagesource) {
+      super.onDeath(damagesource);
       this.setSize(0.2F, 0.2F);
       this.setPosition(this.posX, this.posY, this.posZ);
       this.motionY = 0.10000000149011612D;
@@ -396,7 +413,7 @@
          this.inventory.dropAllItems();
       }
 
-      if(var1 != null) {
+      if(damagesource != null) {
          this.motionX = (double)(-MathHelper.cos((this.attackedAtYaw + this.rotationYaw) * 3.1415927F / 180.0F) * 0.1F);
          this.motionZ = (double)(-MathHelper.sin((this.attackedAtYaw + this.rotationYaw) * 3.1415927F / 180.0F) * 0.1F);
       } else {
@@ -407,9 +424,9 @@
       this.addStat(StatList.deathsStat, 1);
    }
 
-   public void addToPlayerScore(Entity var1, int var2) {
-      this.func_85039_t(var2);
-      if(var1 instanceof EntityPlayer) {
+   public void addToPlayerScore(Entity entity, int i) {
+      this.func_85039_t(i);
+      if(entity instanceof EntityPlayer) {
          this.addStat(StatList.playerKillsStat, 1);
       } else {
          this.addStat(StatList.mobKillsStat, 1);
@@ -421,134 +438,149 @@
       return this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
    }
 
-   public EntityItem dropPlayerItem(ItemStack var1) {
-      return this.dropPlayerItemWithRandomChoice(var1, false);
+   public EntityItem dropPlayerItem(ItemStack itemstack) {
+      return this.dropPlayerItemWithRandomChoice(itemstack, false);
    }
 
-   public EntityItem dropPlayerItemWithRandomChoice(ItemStack var1, boolean var2) {
-      if(var1 == null) {
+   public EntityItem dropPlayerItemWithRandomChoice(ItemStack itemstack, boolean flag) {
+      if(itemstack == null) {
          return null;
       } else {
-         EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY - 0.30000001192092896D + (double)this.getEyeHeight(), this.posZ, var1);
-         var3.delayBeforeCanPickup = 40;
-         float var4 = 0.1F;
-         float var5;
-         if(var2) {
-            var5 = this.rand.nextFloat() * 0.5F;
-            float var6 = this.rand.nextFloat() * 3.1415927F * 2.0F;
-            var3.motionX = (double)(-MathHelper.sin(var6) * var5);
-            var3.motionZ = (double)(MathHelper.cos(var6) * var5);
-            var3.motionY = 0.20000000298023224D;
+         EntityItem entityitem = new EntityItem(this.worldObj, this.posX, this.posY - 0.30000001192092896D + (double)this.getEyeHeight(), this.posZ, itemstack);
+         entityitem.delayBeforeCanPickup = 40;
+         float f = 0.1F;
+         float f1;
+         if(flag) {
+            f1 = this.rand.nextFloat() * 0.5F;
+            float player = this.rand.nextFloat() * 3.1415927F * 2.0F;
+            entityitem.motionX = (double)(-MathHelper.sin(player) * f1);
+            entityitem.motionZ = (double)(MathHelper.cos(player) * f1);
+            entityitem.motionY = 0.20000000298023224D;
          } else {
-            var4 = 0.3F;
-            var3.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * var4);
-            var3.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * var4);
-            var3.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * 3.1415927F) * var4 + 0.1F);
-            var4 = 0.02F;
-            var5 = this.rand.nextFloat() * 3.1415927F * 2.0F;
-            var4 *= this.rand.nextFloat();
-            var3.motionX += Math.cos((double)var5) * (double)var4;
-            var3.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-            var3.motionZ += Math.sin((double)var5) * (double)var4;
+            f = 0.3F;
+            entityitem.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * f);
+            entityitem.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * f);
+            entityitem.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * 3.1415927F) * f + 0.1F);
+            f = 0.02F;
+            f1 = this.rand.nextFloat() * 3.1415927F * 2.0F;
+            f *= this.rand.nextFloat();
+            entityitem.motionX += Math.cos((double)f1) * (double)f;
+            entityitem.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+            entityitem.motionZ += Math.sin((double)f1) * (double)f;
+         }
+
+         Player player1 = (Player)this.getBukkitEntity();
+         CraftItem drop = new CraftItem(this.worldObj.getServer(), entityitem);
+         PlayerDropItemEvent event = new PlayerDropItemEvent(player1, drop);
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(event.isCancelled()) {
+            player1.getInventory().addItem(new org.bukkit.inventory.ItemStack[]{drop.getItemStack()});
+            return null;
+         } else {
+            this.joinEntityItemWithWorld(entityitem);
+            this.addStat(StatList.dropStat, 1);
+            return entityitem;
          }
-
-         this.joinEntityItemWithWorld(var3);
-         this.addStat(StatList.dropStat, 1);
-         return var3;
       }
    }
 
-   protected void joinEntityItemWithWorld(EntityItem var1) {
-      this.worldObj.spawnEntityInWorld(var1);
+   protected void joinEntityItemWithWorld(EntityItem entityitem) {
+      this.worldObj.spawnEntityInWorld(entityitem);
    }
 
-   public float getCurrentPlayerStrVsBlock(Block var1) {
-      float var2 = this.inventory.getStrVsBlock(var1);
-      int var3 = EnchantmentHelper.getEfficiencyModifier(this);
-      if(var3 > 0 && this.inventory.canHarvestBlock(var1)) {
-         var2 += (float)(var3 * var3 + 1);
+   public float getCurrentPlayerStrVsBlock(Block block) {
+      float f = this.inventory.getStrVsBlock(block);
+      int i = EnchantmentHelper.getEfficiencyModifier(this);
+      if(i > 0 && this.inventory.canHarvestBlock(block)) {
+         f += (float)(i * i + 1);
       }
 
       if(this.isPotionActive(Potion.digSpeed)) {
-         var2 *= 1.0F + (float)(this.getActivePotionEffect(Potion.digSpeed).getAmplifier() + 1) * 0.2F;
+         f *= 1.0F + (float)(this.getActivePotionEffect(Potion.digSpeed).getAmplifier() + 1) * 0.2F;
       }
 
       if(this.isPotionActive(Potion.digSlowdown)) {
-         var2 *= 1.0F - (float)(this.getActivePotionEffect(Potion.digSlowdown).getAmplifier() + 1) * 0.2F;
+         f *= 1.0F - (float)(this.getActivePotionEffect(Potion.digSlowdown).getAmplifier() + 1) * 0.2F;
       }
 
       if(this.isInsideOfMaterial(Material.water) && !EnchantmentHelper.getAquaAffinityModifier(this)) {
-         var2 /= 5.0F;
+         f /= 5.0F;
       }
 
       if(!this.onGround) {
-         var2 /= 5.0F;
+         f /= 5.0F;
       }
 
-      return var2;
+      return f;
    }
 
-   public boolean canHarvestBlock(Block var1) {
-      return this.inventory.canHarvestBlock(var1);
+   public boolean canHarvestBlock(Block block) {
+      return this.inventory.canHarvestBlock(block);
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      NBTTagList var2 = var1.getTagList("Inventory");
-      this.inventory.readFromNBT(var2);
-      this.sleeping = var1.getBoolean("Sleeping");
-      this.sleepTimer = var1.getShort("SleepTimer");
-      this.experience = var1.getFloat("XpP");
-      this.experienceLevel = var1.getInteger("XpLevel");
-      this.experienceTotal = var1.getInteger("XpTotal");
-      this.func_85040_s(var1.getInteger("Score"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      NBTTagList nbttaglist = nbttagcompound.getTagList("Inventory");
+      this.inventory.readFromNBT(nbttaglist);
+      this.sleeping = nbttagcompound.getBoolean("Sleeping");
+      this.sleepTimer = nbttagcompound.getShort("SleepTimer");
+      this.experience = nbttagcompound.getFloat("XpP");
+      this.experienceLevel = nbttagcompound.getInteger("XpLevel");
+      this.experienceTotal = nbttagcompound.getInteger("XpTotal");
+      this.func_85040_s(nbttagcompound.getInteger("Score"));
       if(this.sleeping) {
          this.playerLocation = new ChunkCoordinates(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
          this.wakeUpPlayer(true, true, false);
       }
 
-      if(var1.hasKey("SpawnX") && var1.hasKey("SpawnY") && var1.hasKey("SpawnZ")) {
-         this.spawnChunk = new ChunkCoordinates(var1.getInteger("SpawnX"), var1.getInteger("SpawnY"), var1.getInteger("SpawnZ"));
-         this.spawnForced = var1.getBoolean("SpawnForced");
+      this.spawnWorld = nbttagcompound.getString("SpawnWorld");
+      if("".equals(this.spawnWorld)) {
+         this.spawnWorld = ((org.bukkit.World)this.worldObj.getServer().getWorlds().get(0)).getName();
       }
 
-      this.foodStats.readNBT(var1);
-      this.capabilities.readCapabilitiesFromNBT(var1);
-      if(var1.hasKey("EnderItems")) {
-         NBTTagList var3 = var1.getTagList("EnderItems");
-         this.theInventoryEnderChest.loadInventoryFromNBT(var3);
+      if(nbttagcompound.hasKey("SpawnX") && nbttagcompound.hasKey("SpawnY") && nbttagcompound.hasKey("SpawnZ")) {
+         this.spawnChunk = new ChunkCoordinates(nbttagcompound.getInteger("SpawnX"), nbttagcompound.getInteger("SpawnY"), nbttagcompound.getInteger("SpawnZ"));
+         this.spawnForced = nbttagcompound.getBoolean("SpawnForced");
+      }
+
+      this.foodStats.readNBT(nbttagcompound);
+      this.capabilities.readCapabilitiesFromNBT(nbttagcompound);
+      if(nbttagcompound.hasKey("EnderItems")) {
+         NBTTagList nbttaglist1 = nbttagcompound.getTagList("EnderItems");
+         this.theInventoryEnderChest.loadInventoryFromNBT(nbttaglist1);
       }
 
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
-      var1.setBoolean("Sleeping", this.sleeping);
-      var1.setShort("SleepTimer", (short)this.sleepTimer);
-      var1.setFloat("XpP", this.experience);
-      var1.setInteger("XpLevel", this.experienceLevel);
-      var1.setInteger("XpTotal", this.experienceTotal);
-      var1.setInteger("Score", this.getScore());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
+      nbttagcompound.setBoolean("Sleeping", this.sleeping);
+      nbttagcompound.setShort("SleepTimer", (short)this.sleepTimer);
+      nbttagcompound.setFloat("XpP", this.experience);
+      nbttagcompound.setInteger("XpLevel", this.experienceLevel);
+      nbttagcompound.setInteger("XpTotal", this.experienceTotal);
+      nbttagcompound.setInteger("Score", this.getScore());
       if(this.spawnChunk != null) {
-         var1.setInteger("SpawnX", this.spawnChunk.posX);
-         var1.setInteger("SpawnY", this.spawnChunk.posY);
-         var1.setInteger("SpawnZ", this.spawnChunk.posZ);
-         var1.setBoolean("SpawnForced", this.spawnForced);
+         nbttagcompound.setInteger("SpawnX", this.spawnChunk.posX);
+         nbttagcompound.setInteger("SpawnY", this.spawnChunk.posY);
+         nbttagcompound.setInteger("SpawnZ", this.spawnChunk.posZ);
+         nbttagcompound.setBoolean("SpawnForced", this.spawnForced);
+         nbttagcompound.setString("SpawnWorld", this.spawnWorld);
       }
 
-      this.foodStats.writeNBT(var1);
-      this.capabilities.writeCapabilitiesToNBT(var1);
-      var1.setTag("EnderItems", this.theInventoryEnderChest.saveInventoryToNBT());
+      this.foodStats.writeNBT(nbttagcompound);
+      this.capabilities.writeCapabilitiesToNBT(nbttagcompound);
+      nbttagcompound.setTag("EnderItems", this.theInventoryEnderChest.saveInventoryToNBT());
    }
 
-   public void displayGUIChest(IInventory var1) {}
+   public void displayGUIChest(IInventory iinventory) {}
 
-   public void displayGUIEnchantment(int var1, int var2, int var3) {}
+   public void displayGUIEnchantment(int i, int j, int k) {}
 
-   public void displayGUIAnvil(int var1, int var2, int var3) {}
+   public void displayGUIAnvil(int i, int j, int k) {}
 
-   public void displayGUIWorkbench(int var1, int var2, int var3) {}
+   public void displayGUIWorkbench(int i, int j, int k) {}
 
    public float getEyeHeight() {
       return 0.12F;
@@ -558,10 +590,10 @@
       this.yOffset = 1.62F;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
-      } else if(this.capabilities.disableDamage && !var1.canHarmInCreative()) {
+      } else if(this.capabilities.disableDamage && !damagesource.canHarmInCreative()) {
          return false;
       } else {
          this.entityAge = 0;
@@ -572,57 +604,53 @@
                this.wakeUpPlayer(true, true, false);
             }
 
-            if(var1.func_76350_n()) {
+            if(damagesource.func_76350_n()) {
                if(this.worldObj.difficultySetting == 0) {
-                  var2 = 0;
+                  return false;
                }
 
                if(this.worldObj.difficultySetting == 1) {
-                  var2 = var2 / 2 + 1;
+                  i = i / 2 + 1;
                }
 
                if(this.worldObj.difficultySetting == 3) {
-                  var2 = var2 * 3 / 2;
+                  i = i * 3 / 2;
                }
             }
 
-            if(var2 == 0) {
-               return false;
-            } else {
-               Entity var3 = var1.getEntity();
-               if(var3 instanceof EntityArrow && ((EntityArrow)var3).shootingEntity != null) {
-                  var3 = ((EntityArrow)var3).shootingEntity;
-               }
-
-               if(var3 instanceof EntityLiving) {
-                  this.alertWolves((EntityLiving)var3, false);
-               }
+            Entity entity = damagesource.getEntity();
+            if(entity instanceof EntityArrow && ((EntityArrow)entity).shootingEntity != null) {
+               entity = ((EntityArrow)entity).shootingEntity;
+            }
 
-               this.addStat(StatList.damageTakenStat, var2);
-               return super.attackEntityFrom(var1, var2);
+            if(entity instanceof EntityLiving) {
+               this.alertWolves((EntityLiving)entity, false);
             }
+
+            this.addStat(StatList.damageTakenStat, i);
+            return super.attackEntityFrom(damagesource, i);
          }
       }
    }
 
-   protected int applyPotionDamageCalculations(DamageSource var1, int var2) {
-      int var3 = super.applyPotionDamageCalculations(var1, var2);
-      if(var3 <= 0) {
+   protected int applyPotionDamageCalculations(DamageSource damagesource, int i) {
+      int j = super.applyPotionDamageCalculations(damagesource, i);
+      if(j <= 0) {
          return 0;
       } else {
-         int var4 = EnchantmentHelper.getEnchantmentModifierDamage(this.inventory.armorInventory, var1);
-         if(var4 > 20) {
-            var4 = 20;
+         int k = EnchantmentHelper.getEnchantmentModifierDamage(this.inventory.armorInventory, damagesource);
+         if(k > 20) {
+            k = 20;
          }
 
-         if(var4 > 0 && var4 <= 20) {
-            int var5 = 25 - var4;
-            int var6 = var3 * var5 + this.carryoverDamage;
-            var3 = var6 / 25;
-            this.carryoverDamage = var6 % 25;
+         if(k > 0 && k <= 20) {
+            int l = 25 - k;
+            int i1 = j * l + this.carryoverDamage;
+            j = i1 / 25;
+            this.carryoverDamage = i1 % 25;
          }
 
-         return var3;
+         return j;
       }
    }
 
@@ -630,33 +658,33 @@
       return false;
    }
 
-   protected void alertWolves(EntityLiving var1, boolean var2) {
-      if(!(var1 instanceof EntityCreeper) && !(var1 instanceof EntityGhast)) {
-         if(var1 instanceof EntityWolf) {
-            EntityWolf var3 = (EntityWolf)var1;
-            if(var3.isTamed() && this.username.equals(var3.getOwnerName())) {
+   protected void alertWolves(EntityLiving entityliving, boolean flag) {
+      if(!(entityliving instanceof EntityCreeper) && !(entityliving instanceof EntityGhast)) {
+         if(entityliving instanceof EntityWolf) {
+            EntityWolf list = (EntityWolf)entityliving;
+            if(list.isTamed() && this.username.equals(list.getOwnerName())) {
                return;
             }
          }
 
-         if(!(var1 instanceof EntityPlayer) || this.isPVPEnabled()) {
-            List var6 = this.worldObj.getEntitiesWithinAABB(EntityWolf.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool(this.posX, this.posY, this.posZ, this.posX + 1.0D, this.posY + 1.0D, this.posZ + 1.0D).expand(16.0D, 4.0D, 16.0D));
-            Iterator var4 = var6.iterator();
-
-            while(var4.hasNext()) {
-               EntityWolf var5 = (EntityWolf)var4.next();
-               if(var5.isTamed() && var5.getEntityToAttack() == null && this.username.equals(var5.getOwnerName()) && (!var2 || !var5.isSitting())) {
-                  var5.setSitting(false);
-                  var5.setTarget(var1);
+         if(!(entityliving instanceof EntityPlayer) || this.isPVPEnabled()) {
+            List list1 = this.worldObj.getEntitiesWithinAABB(EntityWolf.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool(this.posX, this.posY, this.posZ, this.posX + 1.0D, this.posY + 1.0D, this.posZ + 1.0D).expand(16.0D, 4.0D, 16.0D));
+            Iterator iterator = list1.iterator();
+
+            while(iterator.hasNext()) {
+               EntityWolf entitywolf1 = (EntityWolf)iterator.next();
+               if(entitywolf1.isTamed() && entitywolf1.getEntityToAttack() == null && this.username.equals(entitywolf1.getOwnerName()) && (!flag || !entitywolf1.isSitting())) {
+                  entitywolf1.setSitting(false);
+                  entitywolf1.setTarget(entityliving);
                }
             }
-
          }
       }
+
    }
 
-   protected void damageArmor(int var1) {
-      this.inventory.damageArmor(var1);
+   protected void damageArmor(int i) {
+      this.inventory.damageArmor(i);
    }
 
    public int getTotalArmorValue() {
@@ -664,59 +692,60 @@
    }
 
    public float func_82243_bO() {
-      int var1 = 0;
-      ItemStack[] var2 = this.inventory.armorInventory;
-      int var3 = var2.length;
+      int i = 0;
+      ItemStack[] aitemstack = this.inventory.armorInventory;
+      int j = aitemstack.length;
 
-      for(int var4 = 0; var4 < var3; ++var4) {
-         ItemStack var5 = var2[var4];
-         if(var5 != null) {
-            ++var1;
+      for(int k = 0; k < j; ++k) {
+         ItemStack itemstack = aitemstack[k];
+         if(itemstack != null) {
+            ++i;
          }
       }
 
-      return (float)var1 / (float)this.inventory.armorInventory.length;
+      return (float)i / (float)this.inventory.armorInventory.length;
    }
 
-   protected void damageEntity(DamageSource var1, int var2) {
+   protected void damageEntity(DamageSource damagesource, int i) {
       if(!this.func_85032_ar()) {
-         if(!var1.isUnblockable() && this.isBlocking()) {
-            var2 = 1 + var2 >> 1;
+         if(!damagesource.isUnblockable() && this.isBlocking()) {
+            i = 1 + i >> 1;
          }
 
-         var2 = this.applyArmorCalculations(var1, var2);
-         var2 = this.applyPotionDamageCalculations(var1, var2);
-         this.addExhaustion(var1.getHungerDamage());
-         this.health -= var2;
+         i = this.applyArmorCalculations(damagesource, i);
+         i = this.applyPotionDamageCalculations(damagesource, i);
+         this.addExhaustion(damagesource.getHungerDamage());
+         this.health -= i;
       }
+
    }
 
-   public void displayGUIFurnace(TileEntityFurnace var1) {}
+   public void displayGUIFurnace(TileEntityFurnace tileentityfurnace) {}
 
-   public void displayGUIDispenser(TileEntityDispenser var1) {}
+   public void displayGUIDispenser(TileEntityDispenser tileentitydispenser) {}
 
-   public void displayGUIEditSign(TileEntity var1) {}
+   public void displayGUIEditSign(TileEntity tileentity) {}
 
-   public void displayGUIBrewingStand(TileEntityBrewingStand var1) {}
+   public void displayGUIBrewingStand(TileEntityBrewingStand tileentitybrewingstand) {}
 
-   public void displayGUIBeacon(TileEntityBeacon var1) {}
+   public void displayGUIBeacon(TileEntityBeacon tileentitybeacon) {}
 
-   public void displayGUIMerchant(IMerchant var1) {}
+   public void displayGUIMerchant(IMerchant imerchant) {}
 
-   public void displayGUIBook(ItemStack var1) {}
+   public void displayGUIBook(ItemStack itemstack) {}
 
-   public boolean interactWith(Entity var1) {
-      if(var1.interact(this)) {
+   public boolean interactWith(Entity entity) {
+      if(entity.interact(this)) {
          return true;
       } else {
-         ItemStack var2 = this.getCurrentEquippedItem();
-         if(var2 != null && var1 instanceof EntityLiving) {
+         ItemStack itemstack = this.getCurrentEquippedItem();
+         if(itemstack != null && entity instanceof EntityLiving) {
             if(this.capabilities.isCreativeMode) {
-               var2 = var2.copy();
+               itemstack = itemstack.copy();
             }
 
-            if(var2.interactWith((EntityLiving)var1)) {
-               if(var2.stackSize <= 0 && !this.capabilities.isCreativeMode) {
+            if(itemstack.interactWith((EntityLiving)entity)) {
+               if(itemstack.stackSize == 0 && !this.capabilities.isCreativeMode) {
                   this.destroyCurrentEquippedItem();
                }
 
@@ -740,98 +769,108 @@
       return (double)(this.yOffset - 0.5F);
    }
 
-   public void attackTargetEntityWithCurrentItem(Entity var1) {
-      if(var1.canAttackWithItem()) {
-         if(!var1.func_85031_j(this)) {
-            int var2 = this.inventory.getDamageVsEntity(var1);
-            if(this.isPotionActive(Potion.damageBoost)) {
-               var2 += 3 << this.getActivePotionEffect(Potion.damageBoost).getAmplifier();
-            }
+   public void attackTargetEntityWithCurrentItem(Entity entity) {
+      if(entity.canAttackWithItem() && !entity.func_85031_j(this)) {
+         int i = this.inventory.getDamageVsEntity(entity);
+         if(this.isPotionActive(Potion.damageBoost)) {
+            i += 3 << this.getActivePotionEffect(Potion.damageBoost).getAmplifier();
+         }
 
-            if(this.isPotionActive(Potion.weakness)) {
-               var2 -= 2 << this.getActivePotionEffect(Potion.weakness).getAmplifier();
-            }
+         if(this.isPotionActive(Potion.weakness)) {
+            i -= 2 << this.getActivePotionEffect(Potion.weakness).getAmplifier();
+         }
+
+         int j = 0;
+         int k = 0;
+         if(entity instanceof EntityLiving) {
+            k = EnchantmentHelper.getEnchantmentModifierLiving(this, (EntityLiving)entity);
+            j += EnchantmentHelper.getKnockbackModifier(this, (EntityLiving)entity);
+         }
+
+         if(this.isSprinting()) {
+            ++j;
+         }
 
-            int var3 = 0;
-            int var4 = 0;
-            if(var1 instanceof EntityLiving) {
-               var4 = EnchantmentHelper.getEnchantmentModifierLiving(this, (EntityLiving)var1);
-               var3 += EnchantmentHelper.getKnockbackModifier(this, (EntityLiving)var1);
+         if(i > 0 || k > 0) {
+            boolean flag = this.fallDistance > 0.0F && !this.onGround && !this.isOnLadder() && !this.isInWater() && !this.isPotionActive(Potion.blindness) && this.ridingEntity == null && entity instanceof EntityLiving;
+            if(flag) {
+               i += this.rand.nextInt(i / 2 + 2);
             }
 
-            if(this.isSprinting()) {
-               ++var3;
+            i += k;
+            boolean flag1 = false;
+            int l = EnchantmentHelper.func_90036_a(this);
+            if(entity instanceof EntityLiving && l > 0 && !entity.isBurning()) {
+               flag1 = true;
+               entity.setFire(1);
             }
 
-            if(var2 > 0 || var4 > 0) {
-               boolean var5 = this.fallDistance > 0.0F && !this.onGround && !this.isOnLadder() && !this.isInWater() && !this.isPotionActive(Potion.blindness) && this.ridingEntity == null && var1 instanceof EntityLiving;
-               if(var5) {
-                  var2 += this.rand.nextInt(var2 / 2 + 2);
+            boolean flag2 = entity.attackEntityFrom(DamageSource.causePlayerDamage(this), i);
+            if(!flag2) {
+               if(flag1) {
+                  entity.extinguish();
                }
 
-               var2 += var4;
-               boolean var6 = false;
-               int var7 = EnchantmentHelper.func_90036_a(this);
-               if(var1 instanceof EntityLiving && var7 > 0 && !var1.isBurning()) {
-                  var6 = true;
-                  var1.setFire(1);
+               return;
+            }
+
+            if(flag2) {
+               if(j > 0) {
+                  entity.addVelocity((double)(-MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F) * (float)j * 0.5F), 0.1D, (double)(MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F) * (float)j * 0.5F));
+                  this.motionX *= 0.6D;
+                  this.motionZ *= 0.6D;
+                  this.setSprinting(false);
                }
 
-               boolean var8 = var1.attackEntityFrom(DamageSource.causePlayerDamage(this), var2);
-               if(var8) {
-                  if(var3 > 0) {
-                     var1.addVelocity((double)(-MathHelper.sin(this.rotationYaw * 3.1415927F / 180.0F) * (float)var3 * 0.5F), 0.1D, (double)(MathHelper.cos(this.rotationYaw * 3.1415927F / 180.0F) * (float)var3 * 0.5F));
-                     this.motionX *= 0.6D;
-                     this.motionZ *= 0.6D;
-                     this.setSprinting(false);
-                  }
+               if(flag) {
+                  this.onCriticalHit(entity);
+               }
 
-                  if(var5) {
-                     this.onCriticalHit(var1);
-                  }
+               if(k > 0) {
+                  this.onEnchantmentCritical(entity);
+               }
 
-                  if(var4 > 0) {
-                     this.onEnchantmentCritical(var1);
-                  }
+               if(i >= 18) {
+                  this.triggerAchievement(AchievementList.overkill);
+               }
 
-                  if(var2 >= 18) {
-                     this.triggerAchievement(AchievementList.overkill);
-                  }
+               this.setLastAttackingEntity(entity);
+            }
 
-                  this.setLastAttackingEntity(var1);
+            ItemStack itemstack = this.getCurrentEquippedItem();
+            if(itemstack != null && entity instanceof EntityLiving) {
+               itemstack.hitEntity((EntityLiving)entity, this);
+               if(itemstack.stackSize == 0) {
+                  this.destroyCurrentEquippedItem();
                }
+            }
 
-               ItemStack var9 = this.getCurrentEquippedItem();
-               if(var9 != null && var1 instanceof EntityLiving) {
-                  var9.hitEntity((EntityLiving)var1, this);
-                  if(var9.stackSize <= 0) {
-                     this.destroyCurrentEquippedItem();
-                  }
+            if(entity instanceof EntityLiving) {
+               if(entity.isEntityAlive()) {
+                  this.alertWolves((EntityLiving)entity, true);
                }
 
-               if(var1 instanceof EntityLiving) {
-                  if(var1.isEntityAlive()) {
-                     this.alertWolves((EntityLiving)var1, true);
-                  }
-
-                  this.addStat(StatList.damageDealtStat, var2);
-                  if(var7 > 0 && var8) {
-                     var1.setFire(var7 * 4);
-                  } else if(var6) {
-                     var1.extinguish();
+               this.addStat(StatList.damageDealtStat, i);
+               if(l > 0 && flag2) {
+                  EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), l * 4);
+                  Bukkit.getPluginManager().callEvent(combustEvent);
+                  if(!combustEvent.isCancelled()) {
+                     entity.setFire(combustEvent.getDuration());
                   }
+               } else if(flag1) {
+                  entity.extinguish();
                }
-
-               this.addExhaustion(0.3F);
             }
 
+            this.addExhaustion(0.3F);
          }
       }
+
    }
 
-   public void onCriticalHit(Entity var1) {}
+   public void onCriticalHit(Entity entity) {}
 
-   public void onEnchantmentCritical(Entity var1) {}
+   public void onEnchantmentCritical(Entity entity) {}
 
    public void setDead() {
       super.setDead();
@@ -850,7 +889,7 @@
       return false;
    }
 
-   public EnumStatus sleepInBedAt(int var1, int var2, int var3) {
+   public EnumStatus sleepInBedAt(int i, int j, int k) {
       if(!this.worldObj.isRemote) {
          if(this.isPlayerSleeping() || !this.isEntityAlive()) {
             return EnumStatus.OTHER_PROBLEM;
@@ -864,48 +903,58 @@
             return EnumStatus.NOT_POSSIBLE_NOW;
          }
 
-         if(Math.abs(this.posX - (double)var1) > 3.0D || Math.abs(this.posY - (double)var2) > 2.0D || Math.abs(this.posZ - (double)var3) > 3.0D) {
+         if(Math.abs(this.posX - (double)i) > 3.0D || Math.abs(this.posY - (double)j) > 2.0D || Math.abs(this.posZ - (double)k) > 3.0D) {
             return EnumStatus.TOO_FAR_AWAY;
          }
 
-         double var4 = 8.0D;
-         double var6 = 5.0D;
-         List var8 = this.worldObj.getEntitiesWithinAABB(EntityMob.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)var1 - var4, (double)var2 - var6, (double)var3 - var4, (double)var1 + var4, (double)var2 + var6, (double)var3 + var4));
-         if(!var8.isEmpty()) {
+         double d0 = 8.0D;
+         double d1 = 5.0D;
+         List list = this.worldObj.getEntitiesWithinAABB(EntityMob.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)i - d0, (double)j - d1, (double)k - d0, (double)i + d0, (double)j + d1, (double)k + d0));
+         if(!list.isEmpty()) {
             return EnumStatus.NOT_SAFE;
          }
       }
 
+      if(this.getBukkitEntity() instanceof Player) {
+         Player l = (Player)this.getBukkitEntity();
+         org.bukkit.block.Block i1 = this.worldObj.getWorld().getBlockAt(i, j, k);
+         PlayerBedEnterEvent f = new PlayerBedEnterEvent(l, i1);
+         this.worldObj.getServer().getPluginManager().callEvent(f);
+         if(f.isCancelled()) {
+            return EnumStatus.OTHER_PROBLEM;
+         }
+      }
+
       this.setSize(0.2F, 0.2F);
       this.yOffset = 0.2F;
-      if(this.worldObj.blockExists(var1, var2, var3)) {
-         int var9 = this.worldObj.getBlockMetadata(var1, var2, var3);
-         int var10 = BlockBed.getDirection(var9);
-         float var11 = 0.5F;
-         float var12 = 0.5F;
-         switch(var10) {
+      if(this.worldObj.blockExists(i, j, k)) {
+         int l1 = this.worldObj.getBlockMetadata(i, j, k);
+         int i11 = BlockBed.getDirection(l1);
+         float f1 = 0.5F;
+         float f1 = 0.5F;
+         switch(i11) {
          case 0:
-            var12 = 0.9F;
+            f1 = 0.9F;
             break;
          case 1:
-            var11 = 0.1F;
+            f1 = 0.1F;
             break;
          case 2:
-            var12 = 0.1F;
+            f1 = 0.1F;
             break;
          case 3:
-            var11 = 0.9F;
+            f1 = 0.9F;
          }
 
-         this.func_71013_b(var10);
-         this.setPosition((double)((float)var1 + var11), (double)((float)var2 + 0.9375F), (double)((float)var3 + var12));
+         this.func_71013_b(i11);
+         this.setPosition((double)((float)i + f1), (double)((float)j + 0.9375F), (double)((float)k + f1));
       } else {
-         this.setPosition((double)((float)var1 + 0.5F), (double)((float)var2 + 0.9375F), (double)((float)var3 + 0.5F));
+         this.setPosition((double)((float)i + 0.5F), (double)((float)j + 0.9375F), (double)((float)k + 0.5F));
       }
 
       this.sleeping = true;
       this.sleepTimer = 0;
-      this.playerLocation = new ChunkCoordinates(var1, var2, var3);
+      this.playerLocation = new ChunkCoordinates(i, j, k);
       this.motionX = this.motionZ = this.motionY = 0.0D;
       if(!this.worldObj.isRemote) {
          this.worldObj.updateAllPlayersSleepingFlag();
@@ -914,10 +963,10 @@
       return EnumStatus.OK;
    }
 
-   private void func_71013_b(int var1) {
+   private void func_71013_b(int i) {
       this.field_71079_bU = 0.0F;
       this.field_71089_bV = 0.0F;
-      switch(var1) {
+      switch(i) {
       case 0:
          this.field_71089_bV = -1.8F;
          break;
@@ -933,33 +982,46 @@
 
    }
 
-   public void wakeUpPlayer(boolean var1, boolean var2, boolean var3) {
+   public void wakeUpPlayer(boolean flag, boolean flag1, boolean flag2) {
       this.setSize(0.6F, 1.8F);
       this.resetHeight();
-      ChunkCoordinates var4 = this.playerLocation;
-      ChunkCoordinates var5 = this.playerLocation;
-      if(var4 != null && this.worldObj.getBlockId(var4.posX, var4.posY, var4.posZ) == Block.bed.blockID) {
-         BlockBed.setBedOccupied(this.worldObj, var4.posX, var4.posY, var4.posZ, false);
-         var5 = BlockBed.getNearestEmptyChunkCoordinates(this.worldObj, var4.posX, var4.posY, var4.posZ, 0);
-         if(var5 == null) {
-            var5 = new ChunkCoordinates(var4.posX, var4.posY + 1, var4.posZ);
+      ChunkCoordinates chunkcoordinates = this.playerLocation;
+      ChunkCoordinates chunkcoordinates1 = this.playerLocation;
+      if(chunkcoordinates != null && this.worldObj.getBlockId(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ) == Block.bed.blockID) {
+         BlockBed.setBedOccupied(this.worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, false);
+         chunkcoordinates1 = BlockBed.getNearestEmptyChunkCoordinates(this.worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, 0);
+         if(chunkcoordinates1 == null) {
+            chunkcoordinates1 = new ChunkCoordinates(chunkcoordinates.posX, chunkcoordinates.posY + 1, chunkcoordinates.posZ);
          }
 
-         this.setPosition((double)((float)var5.posX + 0.5F), (double)((float)var5.posY + this.yOffset + 0.1F), (double)((float)var5.posZ + 0.5F));
+         this.setPosition((double)((float)chunkcoordinates1.posX + 0.5F), (double)((float)chunkcoordinates1.posY + this.yOffset + 0.1F), (double)((float)chunkcoordinates1.posZ + 0.5F));
       }
 
       this.sleeping = false;
-      if(!this.worldObj.isRemote && var2) {
+      if(!this.worldObj.isRemote && flag1) {
          this.worldObj.updateAllPlayersSleepingFlag();
       }
 
-      if(var1) {
+      if(this.getBukkitEntity() instanceof Player) {
+         Player player = (Player)this.getBukkitEntity();
+         org.bukkit.block.Block bed;
+         if(chunkcoordinates != null) {
+            bed = this.worldObj.getWorld().getBlockAt(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ);
+         } else {
+            bed = this.worldObj.getWorld().getBlockAt(player.getLocation());
+         }
+
+         PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed);
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+      }
+
+      if(flag) {
          this.sleepTimer = 0;
       } else {
          this.sleepTimer = 100;
       }
 
-      if(var3) {
+      if(flag2) {
          this.setSpawnChunk(this.playerLocation, false);
       }
 
@@ -969,21 +1031,21 @@
       return this.worldObj.getBlockId(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ) == Block.bed.blockID;
    }
 
-   public static ChunkCoordinates verifyRespawnCoordinates(World var0, ChunkCoordinates var1, boolean var2) {
-      IChunkProvider var3 = var0.getChunkProvider();
-      var3.loadChunk(var1.posX - 3 >> 4, var1.posZ - 3 >> 4);
-      var3.loadChunk(var1.posX + 3 >> 4, var1.posZ - 3 >> 4);
-      var3.loadChunk(var1.posX - 3 >> 4, var1.posZ + 3 >> 4);
-      var3.loadChunk(var1.posX + 3 >> 4, var1.posZ + 3 >> 4);
-      if(var0.getBlockId(var1.posX, var1.posY, var1.posZ) == Block.bed.blockID) {
-         ChunkCoordinates var8 = BlockBed.getNearestEmptyChunkCoordinates(var0, var1.posX, var1.posY, var1.posZ, 0);
-         return var8;
+   public static ChunkCoordinates verifyRespawnCoordinates(World world, ChunkCoordinates chunkcoordinates, boolean flag) {
+      IChunkProvider ichunkprovider = world.getChunkProvider();
+      ichunkprovider.loadChunk(chunkcoordinates.posX - 3 >> 4, chunkcoordinates.posZ - 3 >> 4);
+      ichunkprovider.loadChunk(chunkcoordinates.posX + 3 >> 4, chunkcoordinates.posZ - 3 >> 4);
+      ichunkprovider.loadChunk(chunkcoordinates.posX - 3 >> 4, chunkcoordinates.posZ + 3 >> 4);
+      ichunkprovider.loadChunk(chunkcoordinates.posX + 3 >> 4, chunkcoordinates.posZ + 3 >> 4);
+      if(world.getBlockId(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ) == Block.bed.blockID) {
+         ChunkCoordinates material1 = BlockBed.getNearestEmptyChunkCoordinates(world, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, 0);
+         return material1;
       } else {
-         Material var4 = var0.getBlockMaterial(var1.posX, var1.posY, var1.posZ);
-         Material var5 = var0.getBlockMaterial(var1.posX, var1.posY + 1, var1.posZ);
-         boolean var6 = !var4.isSolid() && !var4.isLiquid();
-         boolean var7 = !var5.isSolid() && !var5.isLiquid();
-         return var2 && var6 && var7?var1:null;
+         Material material = world.getBlockMaterial(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ);
+         Material material1 = world.getBlockMaterial(chunkcoordinates.posX, chunkcoordinates.posY + 1, chunkcoordinates.posZ);
+         boolean flag1 = !material.isSolid() && !material.isLiquid();
+         boolean flag2 = !material1.isSolid() && !material1.isLiquid();
+         return flag && flag1 && flag2?chunkcoordinates:null;
       }
    }
 
@@ -995,17 +1057,17 @@
       return this.sleeping && this.sleepTimer >= 100;
    }
 
-   protected void setHideCape(int var1, boolean var2) {
-      byte var3 = this.dataWatcher.getWatchableObjectByte(16);
-      if(var2) {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var3 | 1 << var1)));
+   protected void setHideCape(int i, boolean flag) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      if(flag) {
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 | 1 << i)));
       } else {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var3 & ~(1 << var1))));
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 & ~(1 << i))));
       }
 
    }
 
-   public void addChatMessage(String var1) {}
+   public void addChatMessage(String s) {}
 
    public ChunkCoordinates getBedLocation() {
       return this.spawnChunk;
@@ -1015,10 +1077,11 @@
       return this.spawnForced;
    }
 
-   public void setSpawnChunk(ChunkCoordinates var1, boolean var2) {
-      if(var1 != null) {
-         this.spawnChunk = new ChunkCoordinates(var1);
-         this.spawnForced = var2;
+   public void setSpawnChunk(ChunkCoordinates chunkcoordinates, boolean flag) {
+      if(chunkcoordinates != null) {
+         this.spawnChunk = new ChunkCoordinates(chunkcoordinates);
+         this.spawnForced = flag;
+         this.spawnWorld = this.worldObj.worldInfo.getWorldName();
       } else {
          this.spawnChunk = null;
          this.spawnForced = false;
@@ -1026,11 +1089,11 @@
 
    }
 
-   public void triggerAchievement(StatBase var1) {
-      this.addStat(var1, 1);
+   public void triggerAchievement(StatBase statistic) {
+      this.addStat(statistic, 1);
    }
 
-   public void addStat(StatBase var1, int var2) {}
+   public void addStat(StatBase statistic, int i) {}
 
    protected void jump() {
       super.jump();
@@ -1043,96 +1106,97 @@
 
    }
 
-   public void moveEntityWithHeading(float var1, float var2) {
-      double var3 = this.posX;
-      double var5 = this.posY;
-      double var7 = this.posZ;
+   public void moveEntityWithHeading(float f, float f1) {
+      double d0 = this.posX;
+      double d1 = this.posY;
+      double d2 = this.posZ;
       if(this.capabilities.isFlying && this.ridingEntity == null) {
-         double var9 = this.motionY;
-         float var11 = this.jumpMovementFactor;
+         double d3 = this.motionY;
+         float f2 = this.jumpMovementFactor;
          this.jumpMovementFactor = this.capabilities.getFlySpeed();
-         super.moveEntityWithHeading(var1, var2);
-         this.motionY = var9 * 0.6D;
-         this.jumpMovementFactor = var11;
+         super.moveEntityWithHeading(f, f1);
+         this.motionY = d3 * 0.6D;
+         this.jumpMovementFactor = f2;
       } else {
-         super.moveEntityWithHeading(var1, var2);
+         super.moveEntityWithHeading(f, f1);
       }
 
-      this.addMovementStat(this.posX - var3, this.posY - var5, this.posZ - var7);
+      this.addMovementStat(this.posX - d0, this.posY - d1, this.posZ - d2);
    }
 
-   public void addMovementStat(double var1, double var3, double var5) {
+   public void addMovementStat(double d0, double d1, double d2) {
       if(this.ridingEntity == null) {
-         int var7;
+         int i;
          if(this.isInsideOfMaterial(Material.water)) {
-            var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
-            if(var7 > 0) {
-               this.addStat(StatList.distanceDoveStat, var7);
-               this.addExhaustion(0.015F * (float)var7 * 0.01F);
+            i = Math.round(MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
+            if(i > 0) {
+               this.addStat(StatList.distanceDoveStat, i);
+               this.addExhaustion(0.015F * (float)i * 0.01F);
             }
          } else if(this.isInWater()) {
-            var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var5 * var5) * 100.0F);
-            if(var7 > 0) {
-               this.addStat(StatList.distanceSwumStat, var7);
-               this.addExhaustion(0.015F * (float)var7 * 0.01F);
+            i = Math.round(MathHelper.sqrt_double(d0 * d0 + d2 * d2) * 100.0F);
+            if(i > 0) {
+               this.addStat(StatList.distanceSwumStat, i);
+               this.addExhaustion(0.015F * (float)i * 0.01F);
             }
          } else if(this.isOnLadder()) {
-            if(var3 > 0.0D) {
-               this.addStat(StatList.distanceClimbedStat, (int)Math.round(var3 * 100.0D));
+            if(d1 > 0.0D) {
+               this.addStat(StatList.distanceClimbedStat, (int)Math.round(d1 * 100.0D));
             }
          } else if(this.onGround) {
-            var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var5 * var5) * 100.0F);
-            if(var7 > 0) {
-               this.addStat(StatList.distanceWalkedStat, var7);
+            i = Math.round(MathHelper.sqrt_double(d0 * d0 + d2 * d2) * 100.0F);
+            if(i > 0) {
+               this.addStat(StatList.distanceWalkedStat, i);
                if(this.isSprinting()) {
-                  this.addExhaustion(0.099999994F * (float)var7 * 0.01F);
+                  this.addExhaustion(0.099999994F * (float)i * 0.01F);
                } else {
-                  this.addExhaustion(0.01F * (float)var7 * 0.01F);
+                  this.addExhaustion(0.01F * (float)i * 0.01F);
                }
             }
          } else {
-            var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var5 * var5) * 100.0F);
-            if(var7 > 25) {
-               this.addStat(StatList.distanceFlownStat, var7);
+            i = Math.round(MathHelper.sqrt_double(d0 * d0 + d2 * d2) * 100.0F);
+            if(i > 25) {
+               this.addStat(StatList.distanceFlownStat, i);
             }
          }
-
       }
+
    }
 
-   private void addMountedMovementStat(double var1, double var3, double var5) {
+   private void addMountedMovementStat(double d0, double d1, double d2) {
       if(this.ridingEntity != null) {
-         int var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
-         if(var7 > 0) {
+         int i = Math.round(MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
+         if(i > 0) {
             if(this.ridingEntity instanceof EntityMinecart) {
-               this.addStat(StatList.distanceByMinecartStat, var7);
+               this.addStat(StatList.distanceByMinecartStat, i);
                if(this.startMinecartRidingCoordinate == null) {
                   this.startMinecartRidingCoordinate = new ChunkCoordinates(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
                } else if((double)this.startMinecartRidingCoordinate.getDistanceSquared(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) >= 1000000.0D) {
                   this.addStat(AchievementList.onARail, 1);
                }
             } else if(this.ridingEntity instanceof EntityBoat) {
-               this.addStat(StatList.distanceByBoatStat, var7);
+               this.addStat(StatList.distanceByBoatStat, i);
             } else if(this.ridingEntity instanceof EntityPig) {
-               this.addStat(StatList.distanceByPigStat, var7);
+               this.addStat(StatList.distanceByPigStat, i);
             }
          }
       }
 
    }
 
-   protected void fall(float var1) {
+   protected void fall(float f) {
       if(!this.capabilities.allowFlying) {
-         if(var1 >= 2.0F) {
-            this.addStat(StatList.distanceFallenStat, (int)Math.round((double)var1 * 100.0D));
+         if(f >= 2.0F) {
+            this.addStat(StatList.distanceFallenStat, (int)Math.round((double)f * 100.0D));
          }
 
-         super.fall(var1);
+         super.fall(f);
       }
+
    }
 
-   public void onKillEntity(EntityLiving var1) {
-      if(var1 instanceof IMob) {
+   public void onKillEntity(EntityLiving entityliving) {
+      if(entityliving instanceof IMob) {
          this.triggerAchievement(AchievementList.killEnemy);
       }
 
@@ -1145,39 +1209,39 @@
 
    }
 
-   public ItemStack getCurrentArmor(int var1) {
-      return this.inventory.armorItemInSlot(var1);
+   public ItemStack getCurrentArmor(int i) {
+      return this.inventory.armorItemInSlot(i);
    }
 
    protected void func_82164_bB() {}
 
    protected void func_82162_bC() {}
 
-   public void addExperience(int var1) {
-      this.func_85039_t(var1);
-      int var2 = Integer.MAX_VALUE - this.experienceTotal;
-      if(var1 > var2) {
-         var1 = var2;
+   public void addExperience(int i) {
+      this.func_85039_t(i);
+      int j = Integer.MAX_VALUE - this.experienceTotal;
+      if(i > j) {
+         i = j;
       }
 
-      this.experience += (float)var1 / (float)this.xpBarCap();
+      this.experience += (float)i / (float)this.xpBarCap();
 
-      for(this.experienceTotal += var1; this.experience >= 1.0F; this.experience /= (float)this.xpBarCap()) {
+      for(this.experienceTotal += i; this.experience >= 1.0F; this.experience /= (float)this.xpBarCap()) {
          this.experience = (this.experience - 1.0F) * (float)this.xpBarCap();
          this.addExperienceLevel(1);
       }
 
    }
 
-   public void addExperienceLevel(int var1) {
-      this.experienceLevel += var1;
+   public void addExperienceLevel(int i) {
+      this.experienceLevel += i;
       if(this.experienceLevel < 0) {
          this.experienceLevel = 0;
       }
 
-      if(var1 > 0 && this.experienceLevel % 5 == 0 && (float)this.field_82249_h < (float)this.ticksExisted - 100.0F) {
-         float var2 = this.experienceLevel > 30?1.0F:(float)this.experienceLevel / 30.0F;
-         this.func_85030_a("random.levelup", var2 * 0.75F, 1.0F);
+      if(i > 0 && this.experienceLevel % 5 == 0 && (float)this.field_82249_h < (float)this.ticksExisted - 100.0F) {
+         float f = this.experienceLevel > 30?1.0F:(float)this.experienceLevel / 30.0F;
+         this.func_85030_a("random.levelup", f * 0.75F, 1.0F);
          this.field_82249_h = this.ticksExisted;
       }
 
@@ -1187,52 +1251,50 @@
       return this.experienceLevel >= 30?62 + (this.experienceLevel - 30) * 7:(this.experienceLevel >= 15?17 + (this.experienceLevel - 15) * 3:17);
    }
 
-   public void addExhaustion(float var1) {
-      if(!this.capabilities.disableDamage) {
-         if(!this.worldObj.isRemote) {
-            this.foodStats.addExhaustion(var1);
-         }
-
+   public void addExhaustion(float f) {
+      if(!this.capabilities.disableDamage && !this.worldObj.isRemote) {
+         this.foodStats.addExhaustion(f);
       }
+
    }
 
    public FoodStats getFoodStats() {
       return this.foodStats;
    }
 
-   public boolean canEat(boolean var1) {
-      return (var1 || this.foodStats.needFood()) && !this.capabilities.disableDamage;
+   public boolean canEat(boolean flag) {
+      return (flag || this.foodStats.needFood()) && !this.capabilities.disableDamage;
    }
 
    public boolean shouldHeal() {
       return this.getHealth() > 0 && this.getHealth() < this.getMaxHealth();
    }
 
-   public void setItemInUse(ItemStack var1, int var2) {
-      if(var1 != this.itemInUse) {
-         this.itemInUse = var1;
-         this.itemInUseCount = var2;
+   public void setItemInUse(ItemStack itemstack, int i) {
+      if(itemstack != this.itemInUse) {
+         this.itemInUse = itemstack;
+         this.itemInUseCount = i;
          if(!this.worldObj.isRemote) {
             this.setEating(true);
          }
-
       }
+
    }
 
-   public boolean canCurrentToolHarvestBlock(int var1, int var2, int var3) {
+   public boolean canCurrentToolHarvestBlock(int i, int j, int k) {
       if(this.capabilities.allowEdit) {
          return true;
       } else {
-         int var4 = this.worldObj.getBlockId(var1, var2, var3);
-         if(var4 > 0) {
-            Block var5 = Block.blocksList[var4];
-            if(var5.blockMaterial.func_85157_q()) {
+         int l = this.worldObj.getBlockId(i, j, k);
+         if(l > 0) {
+            Block block = Block.blocksList[l];
+            if(block.blockMaterial.func_85157_q()) {
                return true;
             }
 
             if(this.getCurrentEquippedItem() != null) {
-               ItemStack var6 = this.getCurrentEquippedItem();
-               if(var6.canHarvestBlock(var5) || var6.getStrVsBlock(var5) > 1.0F) {
+               ItemStack itemstack = this.getCurrentEquippedItem();
+               if(itemstack.canHarvestBlock(block) || itemstack.getStrVsBlock(block) > 1.0F) {
                   return true;
                }
             }
@@ -1242,16 +1304,16 @@
       }
    }
 
-   public boolean canPlayerEdit(int var1, int var2, int var3, int var4, ItemStack var5) {
-      return this.capabilities.allowEdit?true:(var5 != null?var5.func_82835_x():false);
+   public boolean canPlayerEdit(int i, int j, int k, int l, ItemStack itemstack) {
+      return this.capabilities.allowEdit?true:(itemstack != null?itemstack.func_82835_x():false);
    }
 
-   protected int getExperiencePoints(EntityPlayer var1) {
+   protected int getExperiencePoints(EntityPlayer entityhuman) {
       if(this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory")) {
          return 0;
       } else {
-         int var2 = this.experienceLevel * 7;
-         return var2 > 100?100:var2;
+         int i = this.experienceLevel * 7;
+         return i > 100?100:i;
       }
    }
 
@@ -1263,25 +1325,25 @@
       return this.username;
    }
 
-   public void clonePlayer(EntityPlayer var1, boolean var2) {
-      if(var2) {
-         this.inventory.copyInventory(var1.inventory);
-         this.health = var1.health;
-         this.foodStats = var1.foodStats;
-         this.experienceLevel = var1.experienceLevel;
-         this.experienceTotal = var1.experienceTotal;
-         this.experience = var1.experience;
-         this.func_85040_s(var1.getScore());
-         this.field_82152_aq = var1.field_82152_aq;
+   public void clonePlayer(EntityPlayer entityhuman, boolean flag) {
+      if(flag) {
+         this.inventory.copyInventory(entityhuman.inventory);
+         this.health = entityhuman.health;
+         this.foodStats = entityhuman.foodStats;
+         this.experienceLevel = entityhuman.experienceLevel;
+         this.experienceTotal = entityhuman.experienceTotal;
+         this.experience = entityhuman.experience;
+         this.func_85040_s(entityhuman.getScore());
+         this.field_82152_aq = entityhuman.field_82152_aq;
       } else if(this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory")) {
-         this.inventory.copyInventory(var1.inventory);
-         this.experienceLevel = var1.experienceLevel;
-         this.experienceTotal = var1.experienceTotal;
-         this.experience = var1.experience;
-         this.func_85040_s(var1.getScore());
+         this.inventory.copyInventory(entityhuman.inventory);
+         this.experienceLevel = entityhuman.experienceLevel;
+         this.experienceTotal = entityhuman.experienceTotal;
+         this.experience = entityhuman.experience;
+         this.func_85040_s(entityhuman.getScore());
       }
 
-      this.theInventoryEnderChest = var1.theInventoryEnderChest;
+      this.theInventoryEnderChest = entityhuman.theInventoryEnderChest;
    }
 
    protected boolean canTriggerWalking() {
@@ -1290,7 +1352,7 @@
 
    public void sendPlayerAbilities() {}
 
-   public void setGameType(EnumGameType var1) {}
+   public void setGameType(EnumGameType enumgamemode) {}
 
    public String getCommandSenderName() {
       return this.username;
@@ -1300,24 +1362,24 @@
       return StringTranslate.getInstance();
    }
 
-   public String translateString(String var1, Object ... var2) {
-      return this.getTranslator().translateKeyFormat(var1, var2);
+   public String translateString(String s, Object ... aobject) {
+      return this.getTranslator().translateKeyFormat(s, aobject);
    }
 
    public InventoryEnderChest getInventoryEnderChest() {
       return this.theInventoryEnderChest;
    }
 
-   public ItemStack getEquipmentInSlot(int var1) {
-      return var1 == 0?this.inventory.getCurrentItem():this.inventory.armorInventory[var1 - 1];
+   public ItemStack getEquipmentInSlot(int i) {
+      return i == 0?this.inventory.getCurrentItem():this.inventory.armorInventory[i - 1];
    }
 
    public ItemStack getHeldItem() {
       return this.inventory.getCurrentItem();
    }
 
-   public void setCurrentItemOrArmor(int var1, ItemStack var2) {
-      this.inventory.armorInventory[var1] = var2;
+   public void setCurrentItemOrArmor(int i, ItemStack itemstack) {
+      this.inventory.armorInventory[i] = itemstack;
    }
 
    public ItemStack[] getInventory() {
Binary files mcp-mcdev/net/minecraft/src/EntityPlayerMP.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPlayerMP.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityPlayerMP.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPlayerMP.java
--- mcp-mcdev/net/minecraft/src/EntityPlayerMP.java	2012-11-29 21:14:56.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPlayerMP.java	2012-11-29 20:44:12.000000000 -0800
@@ -4,6 +4,7 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.EnumSet;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
@@ -30,6 +31,7 @@
 import net.minecraft.src.EnumAction;
 import net.minecraft.src.EnumGameType;
 import net.minecraft.src.EnumStatus;
+import net.minecraft.src.FoodStats;
 import net.minecraft.src.ICrafting;
 import net.minecraft.src.IInventory;
 import net.minecraft.src.IMerchant;
@@ -75,6 +77,14 @@
 import net.minecraft.src.TileEntityFurnace;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.entity.PlayerDeathEvent;
+import org.bukkit.event.inventory.InventoryType;
 
 public class EntityPlayerMP extends EntityPlayer implements ICrafting {
 
@@ -89,8 +99,8 @@
    private int lastHealth = -99999999;
    private int lastFoodLevel = -99999999;
    private boolean wasHungry = true;
-   private int lastExperience = -99999999;
-   private int ticksOfInvuln = 60;
+   public int lastExperience = -99999999;
+   public int ticksOfInvuln = 60;
    private int renderDistance = 0;
    private int chatVisibility = 0;
    private boolean chatColours = true;
@@ -98,46 +108,85 @@
    public boolean isChangingQuantityOnly;
    public int ping;
    public boolean playerConqueredTheEnd = false;
-
-
-   public EntityPlayerMP(MinecraftServer var1, World var2, String var3, ItemInWorldManager var4) {
-      super(var2);
-      var4.thisPlayerMP = this;
-      this.theItemInWorldManager = var4;
-      this.renderDistance = var1.getConfigurationManager().getViewDistance();
-      ChunkCoordinates var5 = var2.getSpawnPoint();
-      int var6 = var5.posX;
-      int var7 = var5.posZ;
-      int var8 = var5.posY;
-      if(!var2.provider.hasNoSky && var2.getWorldInfo().getGameType() != EnumGameType.ADVENTURE) {
-         int var9 = Math.max(5, var1.getSpawnProtectionSize() - 6);
-         var6 += this.rand.nextInt(var9 * 2) - var9;
-         var7 += this.rand.nextInt(var9 * 2) - var9;
-         var8 = var2.getTopSolidOrLiquidBlock(var6, var7);
+   public String displayName;
+   public String listName;
+   public Location compassTarget;
+   public int newExp = 0;
+   public int newLevel = 0;
+   public int newTotalExp = 0;
+   public boolean keepLevel = false;
+   public long timeOffset = 0L;
+   public boolean relativeTime = true;
+
+
+   public EntityPlayerMP(MinecraftServer minecraftserver, World world, String s, ItemInWorldManager iteminworldmanager) {
+      super(world);
+      iteminworldmanager.thisPlayerMP = this;
+      this.theItemInWorldManager = iteminworldmanager;
+      this.renderDistance = minecraftserver.getConfigurationManager().getViewDistance();
+      ChunkCoordinates chunkcoordinates = world.getSpawnPoint();
+      int i = chunkcoordinates.posX;
+      int j = chunkcoordinates.posZ;
+      int k = chunkcoordinates.posY;
+      if(!world.provider.hasNoSky && world.getWorldInfo().getGameType() != EnumGameType.ADVENTURE) {
+         int l = Math.max(5, minecraftserver.getSpawnProtectionSize() - 6);
+         i += this.rand.nextInt(l * 2) - l;
+         j += this.rand.nextInt(l * 2) - l;
+         k = world.getTopSolidOrLiquidBlock(i, j);
       }
 
-      this.setLocationAndAngles((double)var6 + 0.5D, (double)var8, (double)var7 + 0.5D, 0.0F, 0.0F);
-      this.mcServer = var1;
+      this.setLocationAndAngles((double)i + 0.5D, (double)k, (double)j + 0.5D, 0.0F, 0.0F);
+      this.mcServer = minecraftserver;
       this.stepHeight = 0.0F;
-      this.username = var3;
+      this.username = s;
       this.yOffset = 0.0F;
+      this.displayName = this.username;
+      this.listName = this.username;
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      if(var1.hasKey("playerGameType")) {
-         this.theItemInWorldManager.setGameType(EnumGameType.getByID(var1.getInteger("playerGameType")));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      if(nbttagcompound.hasKey("playerGameType")) {
+         this.theItemInWorldManager.setGameType(EnumGameType.getByID(nbttagcompound.getInteger("playerGameType")));
       }
 
+      this.getBukkitEntity().readExtraData(nbttagcompound);
+   }
+
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setInteger("playerGameType", this.theItemInWorldManager.getGameType().getID());
+      this.getBukkitEntity().setExtraData(nbttagcompound);
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setInteger("playerGameType", this.theItemInWorldManager.getGameType().getID());
+   public void spawnIn(World world) {
+      super.setWorld((World)world);
+      if(world == null) {
+         this.isDead = false;
+         ChunkCoordinates position = null;
+         if(this.spawnWorld != null && !this.spawnWorld.equals("")) {
+            CraftWorld cworld = (CraftWorld)Bukkit.getServer().getWorld(this.spawnWorld);
+            if(cworld != null && this.getBedLocation() != null) {
+               world = cworld.getHandle();
+               position = EntityPlayer.verifyRespawnCoordinates(cworld.getHandle(), this.getBedLocation(), false);
+            }
+         }
+
+         if(world == null || position == null) {
+            world = ((CraftWorld)Bukkit.getServer().getWorlds().get(0)).getHandle();
+            position = ((World)world).getSpawnPoint();
+         }
+
+         this.worldObj = (World)world;
+         this.setPosition((double)position.posX + 0.5D, (double)position.posY, (double)position.posZ + 0.5D);
+      }
+
+      this.dimension = ((WorldServer)this.worldObj).dimension;
+      this.theItemInWorldManager.setWorld((WorldServer)world);
    }
 
-   public void addExperienceLevel(int var1) {
-      super.addExperienceLevel(var1);
+   public void addExperienceLevel(int i) {
+      super.addExperienceLevel(i);
       this.lastExperience = -1;
    }
 
@@ -159,17 +208,17 @@
       this.openContainer.updateCraftingResults();
 
       while(!this.destroyedItemsNetCache.isEmpty()) {
-         int var1 = Math.min(this.destroyedItemsNetCache.size(), 127);
-         int[] var2 = new int[var1];
-         Iterator var3 = this.destroyedItemsNetCache.iterator();
-         int var4 = 0;
-
-         while(var3.hasNext() && var4 < var1) {
-            var2[var4++] = ((Integer)var3.next()).intValue();
-            var3.remove();
+         int arraylist = Math.min(this.destroyedItemsNetCache.size(), 127);
+         int[] iterator1 = new int[arraylist];
+         Iterator arraylist1 = this.destroyedItemsNetCache.iterator();
+         int iterator2 = 0;
+
+         while(arraylist1.hasNext() && iterator2 < arraylist) {
+            iterator1[iterator2++] = ((Integer)arraylist1.next()).intValue();
+            arraylist1.remove();
          }
 
-         this.playerNetServerHandler.sendPacket(new Packet29DestroyEntity(var2));
+         this.playerNetServerHandler.sendPacket(new Packet29DestroyEntity(iterator1));
       }
 
       if(!this.loadedChunks.isEmpty()) {
@@ -191,8 +240,8 @@
             Iterator var11 = var8.iterator();
 
             while(var11.hasNext()) {
-               TileEntity var5 = (TileEntity)var11.next();
-               this.getTileEntityInfo(var5);
+               TileEntity chunk = (TileEntity)var11.next();
+               this.getTileEntityInfo(chunk);
             }
 
             var11 = var6.iterator();
@@ -209,12 +258,12 @@
    public void onUpdateEntity() {
       super.onUpdate();
 
-      for(int var1 = 0; var1 < this.inventory.getSizeInventory(); ++var1) {
-         ItemStack var2 = this.inventory.getStackInSlot(var1);
-         if(var2 != null && Item.itemsList[var2.itemID].isMap() && this.playerNetServerHandler.getNumChunkDataPackets() <= 5) {
-            Packet var3 = ((ItemMapBase)Item.itemsList[var2.itemID]).getUpdatePacket(var2, this.worldObj, this);
-            if(var3 != null) {
-               this.playerNetServerHandler.sendPacket(var3);
+      for(int i = 0; i < this.inventory.getSizeInventory(); ++i) {
+         ItemStack itemstack = this.inventory.getStackInSlot(i);
+         if(itemstack != null && Item.itemsList[itemstack.itemID].isMap() && this.playerNetServerHandler.getNumChunkDataPackets() <= 5) {
+            Packet packet = ((ItemMapBase)Item.itemsList[itemstack.itemID]).getUpdatePacket(itemstack, this.worldObj, this);
+            if(packet != null) {
+               this.playerNetServerHandler.sendPacket(packet);
             }
          }
       }
@@ -231,39 +280,81 @@
          this.playerNetServerHandler.sendPacket(new Packet43Experience(this.experience, this.experienceTotal, this.experienceLevel));
       }
 
+      if(this.oldLevel == -1) {
+         this.oldLevel = this.experienceLevel;
+      }
+
+      if(this.oldLevel != this.experienceLevel) {
+         CraftEventFactory.callPlayerLevelChangeEvent(this.worldObj.getServer().getPlayer(this), this.oldLevel, this.experienceLevel);
+         this.oldLevel = this.experienceLevel;
+      }
+
    }
 
-   public void onDeath(DamageSource var1) {
-      this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new Packet3Chat(var1.getDeathMessage(this)));
-      if(!this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory")) {
-         this.inventory.dropAllItems();
-      }
+   public void onDeath(DamageSource damagesource) {
+      if(!this.isDead) {
+         ArrayList loot = new ArrayList();
+         boolean keepInventory = this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory");
+         if(!keepInventory) {
+            int event;
+            for(event = 0; event < this.inventory.mainInventory.length; ++event) {
+               if(this.inventory.mainInventory[event] != null) {
+                  loot.add(new CraftItemStack(this.inventory.mainInventory[event]));
+               }
+            }
+
+            for(event = 0; event < this.inventory.armorInventory.length; ++event) {
+               if(this.inventory.armorInventory[event] != null) {
+                  loot.add(new CraftItemStack(this.inventory.armorInventory[event]));
+               }
+            }
+         }
 
+         PlayerDeathEvent var7 = CraftEventFactory.callPlayerDeathEvent(this, loot, damagesource.getDeathMessage(this));
+         String deathMessage = var7.getDeathMessage();
+         if(deathMessage != null && deathMessage.length() > 0) {
+            this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new Packet3Chat(var7.getDeathMessage()));
+         }
+
+         if(!keepInventory) {
+            int i;
+            for(i = 0; i < this.inventory.mainInventory.length; ++i) {
+               this.inventory.mainInventory[i] = null;
+            }
+
+            for(i = 0; i < this.inventory.armorInventory.length; ++i) {
+               this.inventory.armorInventory[i] = null;
+            }
+         }
+
+         this.closeScreen();
+         this.potionsNeedUpdate = true;
+      }
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
-         boolean var3 = this.mcServer.isDedicatedServer() && this.mcServer.isPVPEnabled() && "fall".equals(var1.damageType);
-         if(!var3 && this.ticksOfInvuln > 0) {
+         boolean flag = this.mcServer.isDedicatedServer() && this.worldObj.pvpMode && "fall".equals(damagesource.damageType);
+         if(!flag && this.ticksOfInvuln > 0) {
             return false;
          } else {
-            if(!this.mcServer.isPVPEnabled() && var1 instanceof EntityDamageSource) {
-               Entity var4 = var1.getEntity();
-               if(var4 instanceof EntityPlayer) {
+            if(!this.worldObj.pvpMode && damagesource instanceof EntityDamageSource) {
+               Entity entity = damagesource.getEntity();
+               if(entity instanceof EntityPlayer) {
                   return false;
                }
 
-               if(var4 instanceof EntityArrow) {
-                  EntityArrow var5 = (EntityArrow)var4;
-                  if(var5.shootingEntity instanceof EntityPlayer) {
+               if(entity instanceof EntityArrow) {
+                  EntityArrow entityarrow = (EntityArrow)entity;
+                  if(entityarrow.shootingEntity instanceof EntityPlayer) {
                      return false;
                   }
                }
             }
 
-            return super.attackEntityFrom(var1, var2);
+            return super.attackEntityFrom(damagesource, i);
          }
       }
    }
@@ -272,26 +363,15 @@
       return this.mcServer.isPVPEnabled();
    }
 
-   public void travelToTheEnd(int var1) {
-      if(this.dimension == 1 && var1 == 1) {
+   public void travelToTheEnd(int i) {
+      if(this.dimension == 1 && i == 1) {
          this.triggerAchievement(AchievementList.theEnd2);
          this.worldObj.setEntityDead(this);
          this.playerConqueredTheEnd = true;
          this.playerNetServerHandler.sendPacket(new Packet70GameEvent(4, 0));
       } else {
-         if(this.dimension == 1 && var1 == 0) {
-            this.triggerAchievement(AchievementList.theEnd);
-            ChunkCoordinates var2 = this.mcServer.worldServerForDimension(var1).getEntrancePortalLocation();
-            if(var2 != null) {
-               this.playerNetServerHandler.setPlayerLocation((double)var2.posX, (double)var2.posY, (double)var2.posZ, 0.0F, 0.0F);
-            }
-
-            var1 = 1;
-         } else {
-            this.triggerAchievement(AchievementList.portal);
-         }
-
-         this.mcServer.getConfigurationManager().sendPlayerToOtherDimension(this, var1);
+         this.triggerAchievement(AchievementList.theEnd);
+         this.mcServer.getConfigurationManager().sendPlayerToOtherDimension(this, i);
          this.lastExperience = -1;
          this.lastHealth = -1;
          this.lastFoodLevel = -1;
@@ -299,170 +379,207 @@
 
    }
 
-   private void getTileEntityInfo(TileEntity var1) {
-      if(var1 != null) {
-         Packet var2 = var1.getDescriptionPacket();
-         if(var2 != null) {
-            this.playerNetServerHandler.sendPacket(var2);
+   private void getTileEntityInfo(TileEntity tileentity) {
+      if(tileentity != null) {
+         Packet packet = tileentity.getDescriptionPacket();
+         if(packet != null) {
+            this.playerNetServerHandler.sendPacket(packet);
          }
       }
 
    }
 
-   public void onItemPickup(Entity var1, int var2) {
-      super.onItemPickup(var1, var2);
+   public void onItemPickup(Entity entity, int i) {
+      super.onItemPickup(entity, i);
       this.openContainer.updateCraftingResults();
    }
 
-   public EnumStatus sleepInBedAt(int var1, int var2, int var3) {
-      EnumStatus var4 = super.sleepInBedAt(var1, var2, var3);
-      if(var4 == EnumStatus.OK) {
-         Packet17Sleep var5 = new Packet17Sleep(this, 0, var1, var2, var3);
-         this.getServerForPlayer().getEntityTracker().sendPacketToTrackedPlayers(this, var5);
+   public EnumStatus sleepInBedAt(int i, int j, int k) {
+      EnumStatus enumbedresult = super.sleepInBedAt(i, j, k);
+      if(enumbedresult == EnumStatus.OK) {
+         Packet17Sleep packet17entitylocationaction = new Packet17Sleep(this, 0, i, j, k);
+         this.getServerForPlayer().getEntityTracker().sendPacketToTrackedPlayers(this, packet17entitylocationaction);
          this.playerNetServerHandler.setPlayerLocation(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
-         this.playerNetServerHandler.sendPacket(var5);
+         this.playerNetServerHandler.sendPacket(packet17entitylocationaction);
       }
 
-      return var4;
+      return enumbedresult;
    }
 
-   public void wakeUpPlayer(boolean var1, boolean var2, boolean var3) {
-      if(this.isPlayerSleeping()) {
-         this.getServerForPlayer().getEntityTracker().sendPacketToTrackedPlayersAndTrackedEntity(this, new Packet18Animation(this, 3));
-      }
+   public void wakeUpPlayer(boolean flag, boolean flag1, boolean flag2) {
+      if(!this.fauxSleeping || this.sleeping) {
+         if(this.isPlayerSleeping()) {
+            this.getServerForPlayer().getEntityTracker().sendPacketToTrackedPlayersAndTrackedEntity(this, new Packet18Animation(this, 3));
+         }
 
-      super.wakeUpPlayer(var1, var2, var3);
-      if(this.playerNetServerHandler != null) {
-         this.playerNetServerHandler.setPlayerLocation(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
-      }
+         super.wakeUpPlayer(flag, flag1, flag2);
+         if(this.playerNetServerHandler != null) {
+            this.playerNetServerHandler.setPlayerLocation(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+         }
 
+      }
    }
 
-   public void mountEntity(Entity var1) {
-      super.mountEntity(var1);
+   public void mountEntity(Entity entity) {
+      this.setPassengerOf(entity);
+   }
+
+   public void setPassengerOf(Entity entity) {
+      super.setPassengerOf(entity);
       this.playerNetServerHandler.sendPacket(new Packet39AttachEntity(this, this.ridingEntity));
       this.playerNetServerHandler.setPlayerLocation(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
    }
 
-   protected void updateFallState(double var1, boolean var3) {}
+   protected void updateFallState(double d0, boolean flag) {}
 
-   public void handleFalling(double var1, boolean var3) {
-      super.updateFallState(var1, var3);
+   public void handleFalling(double d0, boolean flag) {
+      super.updateFallState(d0, flag);
    }
 
-   private void getNextWindowId() {
+   public int nextContainerCounter() {
       this.currentWindowId = this.currentWindowId % 100 + 1;
+      return this.currentWindowId;
    }
 
-   public void displayGUIWorkbench(int var1, int var2, int var3) {
-      this.getNextWindowId();
-      this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 1, "Crafting", 9));
-      this.openContainer = new ContainerWorkbench(this.inventory, this.worldObj, var1, var2, var3);
-      this.openContainer.windowId = this.currentWindowId;
-      this.openContainer.onCraftGuiOpened(this);
+   public void displayGUIWorkbench(int i, int j, int k) {
+      Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerWorkbench(this.inventory, this.worldObj, i, j, k));
+      if(container != null) {
+         this.nextContainerCounter();
+         this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 1, "Crafting", 9));
+         this.openContainer = container;
+         this.openContainer.windowId = this.currentWindowId;
+         this.openContainer.onCraftGuiOpened(this);
+      }
    }
 
-   public void displayGUIEnchantment(int var1, int var2, int var3) {
-      this.getNextWindowId();
-      this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 4, "Enchanting", 9));
-      this.openContainer = new ContainerEnchantment(this.inventory, this.worldObj, var1, var2, var3);
-      this.openContainer.windowId = this.currentWindowId;
-      this.openContainer.onCraftGuiOpened(this);
+   public void displayGUIEnchantment(int i, int j, int k) {
+      Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerEnchantment(this.inventory, this.worldObj, i, j, k));
+      if(container != null) {
+         this.nextContainerCounter();
+         this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 4, "Enchanting", 9));
+         this.openContainer = container;
+         this.openContainer.windowId = this.currentWindowId;
+         this.openContainer.onCraftGuiOpened(this);
+      }
    }
 
-   public void displayGUIAnvil(int var1, int var2, int var3) {
-      this.getNextWindowId();
-      this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 8, "Repairing", 9));
-      this.openContainer = new ContainerRepair(this.inventory, this.worldObj, var1, var2, var3, this);
-      this.openContainer.windowId = this.currentWindowId;
-      this.openContainer.onCraftGuiOpened(this);
+   public void displayGUIAnvil(int i, int j, int k) {
+      Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerRepair(this.inventory, this.worldObj, i, j, k, this));
+      if(container != null) {
+         this.nextContainerCounter();
+         this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 8, "Repairing", 9));
+         this.openContainer = container;
+         this.openContainer.windowId = this.currentWindowId;
+         this.openContainer.onCraftGuiOpened(this);
+      }
    }
 
-   public void displayGUIChest(IInventory var1) {
+   public void displayGUIChest(IInventory iinventory) {
       if(this.openContainer != this.inventoryContainer) {
          this.closeScreen();
       }
 
-      this.getNextWindowId();
-      this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 0, var1.getInvName(), var1.getSizeInventory()));
-      this.openContainer = new ContainerChest(this.inventory, var1);
-      this.openContainer.windowId = this.currentWindowId;
-      this.openContainer.onCraftGuiOpened(this);
-   }
-
-   public void displayGUIFurnace(TileEntityFurnace var1) {
-      this.getNextWindowId();
-      this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 2, var1.getInvName(), var1.getSizeInventory()));
-      this.openContainer = new ContainerFurnace(this.inventory, var1);
-      this.openContainer.windowId = this.currentWindowId;
-      this.openContainer.onCraftGuiOpened(this);
-   }
-
-   public void displayGUIDispenser(TileEntityDispenser var1) {
-      this.getNextWindowId();
-      this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 3, var1.getInvName(), var1.getSizeInventory()));
-      this.openContainer = new ContainerDispenser(this.inventory, var1);
-      this.openContainer.windowId = this.currentWindowId;
-      this.openContainer.onCraftGuiOpened(this);
-   }
-
-   public void displayGUIBrewingStand(TileEntityBrewingStand var1) {
-      this.getNextWindowId();
-      this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 5, var1.getInvName(), var1.getSizeInventory()));
-      this.openContainer = new ContainerBrewingStand(this.inventory, var1);
-      this.openContainer.windowId = this.currentWindowId;
-      this.openContainer.onCraftGuiOpened(this);
-   }
-
-   public void displayGUIBeacon(TileEntityBeacon var1) {
-      this.getNextWindowId();
-      this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 7, var1.getInvName(), var1.getSizeInventory()));
-      this.openContainer = new ContainerBeacon(this.inventory, var1);
-      this.openContainer.windowId = this.currentWindowId;
-      this.openContainer.onCraftGuiOpened(this);
-   }
-
-   public void displayGUIMerchant(IMerchant var1) {
-      this.getNextWindowId();
-      this.openContainer = new ContainerMerchant(this.inventory, var1, this.worldObj);
-      this.openContainer.windowId = this.currentWindowId;
-      this.openContainer.onCraftGuiOpened(this);
-      InventoryMerchant var2 = ((ContainerMerchant)this.openContainer).getMerchantInventory();
-      this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 6, var2.getInvName(), var2.getSizeInventory()));
-      MerchantRecipeList var3 = var1.getRecipes(this);
-      if(var3 != null) {
-         try {
-            ByteArrayOutputStream var4 = new ByteArrayOutputStream();
-            DataOutputStream var5 = new DataOutputStream(var4);
-            var5.writeInt(this.currentWindowId);
-            var3.writeRecipiesToStream(var5);
-            this.playerNetServerHandler.sendPacket(new Packet250CustomPayload("MC|TrList", var4.toByteArray()));
-         } catch (IOException var6) {
-            var6.printStackTrace();
+      Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerChest(this.inventory, iinventory));
+      if(container != null) {
+         this.nextContainerCounter();
+         this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 0, iinventory.getInvName(), iinventory.getSizeInventory()));
+         this.openContainer = container;
+         this.openContainer.windowId = this.currentWindowId;
+         this.openContainer.onCraftGuiOpened(this);
+      }
+   }
+
+   public void displayGUIFurnace(TileEntityFurnace tileentityfurnace) {
+      Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerFurnace(this.inventory, tileentityfurnace));
+      if(container != null) {
+         this.nextContainerCounter();
+         this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 2, tileentityfurnace.getInvName(), tileentityfurnace.getSizeInventory()));
+         this.openContainer = container;
+         this.openContainer.windowId = this.currentWindowId;
+         this.openContainer.onCraftGuiOpened(this);
+      }
+   }
+
+   public void displayGUIDispenser(TileEntityDispenser tileentitydispenser) {
+      Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerDispenser(this.inventory, tileentitydispenser));
+      if(container != null) {
+         this.nextContainerCounter();
+         this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 3, tileentitydispenser.getInvName(), tileentitydispenser.getSizeInventory()));
+         this.openContainer = container;
+         this.openContainer.windowId = this.currentWindowId;
+         this.openContainer.onCraftGuiOpened(this);
+      }
+   }
+
+   public void displayGUIBrewingStand(TileEntityBrewingStand tileentitybrewingstand) {
+      Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerBrewingStand(this.inventory, tileentitybrewingstand));
+      if(container != null) {
+         this.nextContainerCounter();
+         this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 5, tileentitybrewingstand.getInvName(), tileentitybrewingstand.getSizeInventory()));
+         this.openContainer = container;
+         this.openContainer.windowId = this.currentWindowId;
+         this.openContainer.onCraftGuiOpened(this);
+      }
+   }
+
+   public void displayGUIBeacon(TileEntityBeacon tileentitybeacon) {
+      Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerBeacon(this.inventory, tileentitybeacon));
+      if(container != null) {
+         this.nextContainerCounter();
+         this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 7, tileentitybeacon.getInvName(), tileentitybeacon.getSizeInventory()));
+         this.openContainer = container;
+         this.openContainer.windowId = this.currentWindowId;
+         this.openContainer.onCraftGuiOpened(this);
+      }
+   }
+
+   public void displayGUIMerchant(IMerchant imerchant) {
+      Container container = CraftEventFactory.callInventoryOpenEvent(this, new ContainerMerchant(this.inventory, imerchant, this.worldObj));
+      if(container != null) {
+         this.nextContainerCounter();
+         this.openContainer = container;
+         this.openContainer.windowId = this.currentWindowId;
+         this.openContainer.onCraftGuiOpened(this);
+         InventoryMerchant inventorymerchant = ((ContainerMerchant)this.openContainer).getMerchantInventory();
+         this.playerNetServerHandler.sendPacket(new Packet100OpenWindow(this.currentWindowId, 6, inventorymerchant.getInvName(), inventorymerchant.getSizeInventory()));
+         MerchantRecipeList merchantrecipelist = imerchant.getRecipes(this);
+         if(merchantrecipelist != null) {
+            try {
+               ByteArrayOutputStream ioexception = new ByteArrayOutputStream();
+               DataOutputStream dataoutputstream = new DataOutputStream(ioexception);
+               dataoutputstream.writeInt(this.currentWindowId);
+               merchantrecipelist.writeRecipiesToStream(dataoutputstream);
+               this.playerNetServerHandler.sendPacket(new Packet250CustomPayload("MC|TrList", ioexception.toByteArray()));
+            } catch (IOException var7) {
+               var7.printStackTrace();
+            }
          }
-      }
 
+      }
    }
 
-   public void sendSlotContents(Container var1, int var2, ItemStack var3) {
-      if(!(var1.getSlot(var2) instanceof SlotCrafting)) {
-         if(!this.isChangingQuantityOnly) {
-            this.playerNetServerHandler.sendPacket(new Packet103SetSlot(var1.windowId, var2, var3));
-         }
+   public void sendSlotContents(Container container, int i, ItemStack itemstack) {
+      if(!(container.getSlot(i) instanceof SlotCrafting) && !this.isChangingQuantityOnly) {
+         this.playerNetServerHandler.sendPacket(new Packet103SetSlot(container.windowId, i, itemstack));
       }
+
    }
 
-   public void sendContainerToPlayer(Container var1) {
-      this.updateCraftingInventory(var1, var1.getInventory());
+   public void sendContainerToPlayer(Container container) {
+      this.updateCraftingInventory(container, container.getInventory());
    }
 
-   public void updateCraftingInventory(Container var1, List var2) {
-      this.playerNetServerHandler.sendPacket(new Packet104WindowItems(var1.windowId, var2));
+   public void updateCraftingInventory(Container container, List list) {
+      this.playerNetServerHandler.sendPacket(new Packet104WindowItems(container.windowId, list));
       this.playerNetServerHandler.sendPacket(new Packet103SetSlot(-1, -1, this.inventory.getItemStack()));
+      if(EnumSet.of(InventoryType.CRAFTING, InventoryType.WORKBENCH).contains(container.getBukkitView().getType())) {
+         this.playerNetServerHandler.sendPacket(new Packet103SetSlot(container.windowId, 0, container.getSlot(0).getStack()));
+      }
+
    }
 
-   public void sendProgressBarUpdate(Container var1, int var2, int var3) {
-      this.playerNetServerHandler.sendPacket(new Packet105UpdateProgressbar(var1.windowId, var2, var3));
+   public void sendProgressBarUpdate(Container container, int i, int j) {
+      this.playerNetServerHandler.sendPacket(new Packet105UpdateProgressbar(container.windowId, i, j));
    }
 
    public void closeScreen() {
@@ -474,6 +591,7 @@
       if(!this.isChangingQuantityOnly) {
          this.playerNetServerHandler.sendPacket(new Packet103SetSlot(-1, -1, this.inventory.getItemStack()));
       }
+
    }
 
    public void closeCraftingGui() {
@@ -481,18 +599,16 @@
       this.openContainer = this.inventoryContainer;
    }
 
-   public void addStat(StatBase var1, int var2) {
-      if(var1 != null) {
-         if(!var1.isIndependent) {
-            while(var2 > 100) {
-               this.playerNetServerHandler.sendPacket(new Packet200Statistic(var1.statId, 100));
-               var2 -= 100;
-            }
-
-            this.playerNetServerHandler.sendPacket(new Packet200Statistic(var1.statId, var2));
+   public void addStat(StatBase statistic, int i) {
+      if(statistic != null && !statistic.isIndependent) {
+         while(i > 100) {
+            this.playerNetServerHandler.sendPacket(new Packet200Statistic(statistic.statId, 100));
+            i -= 100;
          }
 
+         this.playerNetServerHandler.sendPacket(new Packet200Statistic(statistic.statId, i));
       }
+
    }
 
    public void mountEntityAndWakeUp() {
@@ -512,12 +628,13 @@
 
    public void setPlayerHealthUpdated() {
       this.lastHealth = -99999999;
+      this.lastExperience = -1;
    }
 
-   public void addChatMessage(String var1) {
-      StringTranslate var2 = StringTranslate.getInstance();
-      String var3 = var2.translateKey(var1);
-      this.playerNetServerHandler.sendPacket(new Packet3Chat(var3));
+   public void addChatMessage(String s) {
+      StringTranslate localelanguage = StringTranslate.getInstance();
+      String s1 = localelanguage.translateKey(s);
+      this.playerNetServerHandler.sendPacket(new Packet3Chat(s1));
    }
 
    protected void onItemUseFinish() {
@@ -525,96 +642,97 @@
       super.onItemUseFinish();
    }
 
-   public void setItemInUse(ItemStack var1, int var2) {
-      super.setItemInUse(var1, var2);
-      if(var1 != null && var1.getItem() != null && var1.getItem().getItemUseAction(var1) == EnumAction.eat) {
+   public void setItemInUse(ItemStack itemstack, int i) {
+      super.setItemInUse(itemstack, i);
+      if(itemstack != null && itemstack.getItem() != null && itemstack.getItem().getItemUseAction(itemstack) == EnumAction.eat) {
          this.getServerForPlayer().getEntityTracker().sendPacketToTrackedPlayersAndTrackedEntity(this, new Packet18Animation(this, 5));
       }
 
    }
 
-   public void clonePlayer(EntityPlayer var1, boolean var2) {
-      super.clonePlayer(var1, var2);
+   public void clonePlayer(EntityPlayer entityhuman, boolean flag) {
+      super.clonePlayer(entityhuman, flag);
       this.lastExperience = -1;
       this.lastHealth = -1;
       this.lastFoodLevel = -1;
-      this.destroyedItemsNetCache.addAll(((EntityPlayerMP)var1).destroyedItemsNetCache);
+      this.destroyedItemsNetCache.addAll(((EntityPlayerMP)entityhuman).destroyedItemsNetCache);
    }
 
-   protected void onNewPotionEffect(PotionEffect var1) {
-      super.onNewPotionEffect(var1);
-      this.playerNetServerHandler.sendPacket(new Packet41EntityEffect(this.entityId, var1));
+   protected void onNewPotionEffect(PotionEffect mobeffect) {
+      super.onNewPotionEffect(mobeffect);
+      this.playerNetServerHandler.sendPacket(new Packet41EntityEffect(this.entityId, mobeffect));
    }
 
-   protected void onChangedPotionEffect(PotionEffect var1) {
-      super.onChangedPotionEffect(var1);
-      this.playerNetServerHandler.sendPacket(new Packet41EntityEffect(this.entityId, var1));
+   protected void onChangedPotionEffect(PotionEffect mobeffect) {
+      super.onChangedPotionEffect(mobeffect);
+      this.playerNetServerHandler.sendPacket(new Packet41EntityEffect(this.entityId, mobeffect));
    }
 
-   protected void onFinishedPotionEffect(PotionEffect var1) {
-      super.onFinishedPotionEffect(var1);
-      this.playerNetServerHandler.sendPacket(new Packet42RemoveEntityEffect(this.entityId, var1));
+   protected void onFinishedPotionEffect(PotionEffect mobeffect) {
+      super.onFinishedPotionEffect(mobeffect);
+      this.playerNetServerHandler.sendPacket(new Packet42RemoveEntityEffect(this.entityId, mobeffect));
    }
 
-   public void setPositionAndUpdate(double var1, double var3, double var5) {
-      this.playerNetServerHandler.setPlayerLocation(var1, var3, var5, this.rotationYaw, this.rotationPitch);
+   public void setPositionAndUpdate(double d0, double d1, double d2) {
+      this.playerNetServerHandler.setPlayerLocation(d0, d1, d2, this.rotationYaw, this.rotationPitch);
    }
 
-   public void onCriticalHit(Entity var1) {
-      this.getServerForPlayer().getEntityTracker().sendPacketToTrackedPlayersAndTrackedEntity(this, new Packet18Animation(var1, 6));
+   public void onCriticalHit(Entity entity) {
+      this.getServerForPlayer().getEntityTracker().sendPacketToTrackedPlayersAndTrackedEntity(this, new Packet18Animation(entity, 6));
    }
 
-   public void onEnchantmentCritical(Entity var1) {
-      this.getServerForPlayer().getEntityTracker().sendPacketToTrackedPlayersAndTrackedEntity(this, new Packet18Animation(var1, 7));
+   public void onEnchantmentCritical(Entity entity) {
+      this.getServerForPlayer().getEntityTracker().sendPacketToTrackedPlayersAndTrackedEntity(this, new Packet18Animation(entity, 7));
    }
 
    public void sendPlayerAbilities() {
       if(this.playerNetServerHandler != null) {
          this.playerNetServerHandler.sendPacket(new Packet202PlayerAbilities(this.capabilities));
       }
+
    }
 
    public WorldServer getServerForPlayer() {
       return (WorldServer)this.worldObj;
    }
 
-   public void setGameType(EnumGameType var1) {
-      this.theItemInWorldManager.setGameType(var1);
-      this.playerNetServerHandler.sendPacket(new Packet70GameEvent(3, var1.getID()));
+   public void setGameType(EnumGameType enumgamemode) {
+      this.theItemInWorldManager.setGameType(enumgamemode);
+      this.playerNetServerHandler.sendPacket(new Packet70GameEvent(3, enumgamemode.getID()));
    }
 
-   public void sendChatToPlayer(String var1) {
-      this.playerNetServerHandler.sendPacket(new Packet3Chat(var1));
+   public void sendChatToPlayer(String s) {
+      this.playerNetServerHandler.sendPacket(new Packet3Chat(s));
    }
 
-   public boolean canCommandSenderUseCommand(int var1, String var2) {
-      return "seed".equals(var2) && !this.mcServer.isDedicatedServer()?true:(!"tell".equals(var2) && !"help".equals(var2) && !"me".equals(var2)?this.mcServer.getConfigurationManager().areCommandsAllowed(this.username):true);
+   public boolean canCommandSenderUseCommand(int i, String s) {
+      return "seed".equals(s) && !this.mcServer.isDedicatedServer()?true:(!"tell".equals(s) && !"help".equals(s) && !"me".equals(s)?this.mcServer.getConfigurationManager().areCommandsAllowed(this.username):true);
    }
 
    public String func_71114_r() {
-      String var1 = this.playerNetServerHandler.netManager.getRemoteAddress().toString();
-      var1 = var1.substring(var1.indexOf("/") + 1);
-      var1 = var1.substring(0, var1.indexOf(":"));
-      return var1;
+      String s = this.playerNetServerHandler.netManager.getRemoteAddress().toString();
+      s = s.substring(s.indexOf("/") + 1);
+      s = s.substring(0, s.indexOf(":"));
+      return s;
    }
 
-   public void updateClientInfo(Packet204ClientInfo var1) {
-      if(this.translator.getLanguageList().containsKey(var1.getLanguage())) {
-         this.translator.setLanguage(var1.getLanguage());
+   public void updateClientInfo(Packet204ClientInfo packet204localeandviewdistance) {
+      if(this.translator.getLanguageList().containsKey(packet204localeandviewdistance.getLanguage())) {
+         this.translator.setLanguage(packet204localeandviewdistance.getLanguage());
       }
 
-      int var2 = 256 >> var1.getRenderDistance();
-      if(var2 > 3 && var2 < 15) {
-         this.renderDistance = var2;
+      int i = 256 >> packet204localeandviewdistance.getRenderDistance();
+      if(i > 3 && i < 15) {
+         this.renderDistance = i;
       }
 
-      this.chatVisibility = var1.getChatVisibility();
-      this.chatColours = var1.getChatColours();
+      this.chatVisibility = packet204localeandviewdistance.getChatVisibility();
+      this.chatColours = packet204localeandviewdistance.getChatColours();
       if(this.mcServer.isSinglePlayer() && this.mcServer.getServerOwner().equals(this.username)) {
-         this.mcServer.setDifficultyForAllWorlds(var1.getDifficulty());
+         this.mcServer.setDifficultyForAllWorlds(packet204localeandviewdistance.getDifficulty());
       }
 
-      this.setHideCape(1, !var1.getShowCape());
+      this.setHideCape(1, !packet204localeandviewdistance.getShowCape());
    }
 
    public StringTranslate getTranslator() {
@@ -625,12 +743,53 @@
       return this.chatVisibility;
    }
 
-   public void requestTexturePackLoad(String var1, int var2) {
-      String var3 = var1 + " " + var2;
-      this.playerNetServerHandler.sendPacket(new Packet250CustomPayload("MC|TPack", var3.getBytes()));
+   public void requestTexturePackLoad(String s, int i) {
+      String s1 = s + " " + i;
+      this.playerNetServerHandler.sendPacket(new Packet250CustomPayload("MC|TPack", s1.getBytes()));
    }
 
    public ChunkCoordinates getCommandSenderPosition() {
       return new ChunkCoordinates(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY + 0.5D), MathHelper.floor_double(this.posZ));
    }
+
+   public long getPlayerTime() {
+      return this.relativeTime?this.worldObj.getWorldTime() + this.timeOffset:this.worldObj.getWorldTime() - this.worldObj.getWorldTime() % 24000L + this.timeOffset;
+   }
+
+   public String toString() {
+      return super.toString() + "(" + this.username + " at " + this.posX + "," + this.posY + "," + this.posZ + ")";
+   }
+
+   public void reset() {
+      float exp = 0.0F;
+      boolean keepInventory = this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory");
+      if(this.keepLevel || keepInventory) {
+         exp = this.experience;
+         this.newTotalExp = this.experienceTotal;
+         this.newLevel = this.experienceLevel;
+      }
+
+      this.health = 20;
+      this.fire = 0;
+      this.fallDistance = 0.0F;
+      this.foodStats = new FoodStats();
+      this.experienceLevel = this.newLevel;
+      this.experienceTotal = this.newTotalExp;
+      this.experience = 0.0F;
+      this.deathTime = 0;
+      this.activePotionsMap.clear();
+      this.openContainer = this.inventoryContainer;
+      this.lastExperience = -1;
+      if(!this.keepLevel && !keepInventory) {
+         this.addExperience(this.newExp);
+      } else {
+         this.experience = exp;
+      }
+
+      this.keepLevel = false;
+   }
+
+   public CraftPlayer getBukkitEntity() {
+      return (CraftPlayer)super.getBukkitEntity();
+   }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityPotion.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPotion.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityPotion.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPotion.java
--- mcp-mcdev/net/minecraft/src/EntityPotion.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityPotion.java	2012-11-29 20:44:11.000000000 -0800
@@ -1,9 +1,11 @@
 package net.minecraft.src;
 
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.EntityLiving;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.EntityThrowable;
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
@@ -12,28 +14,32 @@
 import net.minecraft.src.Potion;
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.PotionSplashEvent;
 
 public class EntityPotion extends EntityThrowable {
 
    private ItemStack potionDamage;
 
 
-   public EntityPotion(World var1) {
-      super(var1);
+   public EntityPotion(World world) {
+      super(world);
    }
 
-   public EntityPotion(World var1, EntityLiving var2, int var3) {
-      this(var1, var2, new ItemStack(Item.potion, 1, var3));
+   public EntityPotion(World world, EntityLiving entityliving, int i) {
+      this(world, entityliving, new ItemStack(Item.potion, 1, i));
    }
 
-   public EntityPotion(World var1, EntityLiving var2, ItemStack var3) {
-      super(var1, var2);
-      this.potionDamage = var3;
+   public EntityPotion(World world, EntityLiving entityliving, ItemStack itemstack) {
+      super(world, entityliving);
+      this.potionDamage = itemstack;
    }
 
-   public EntityPotion(World var1, double var2, double var4, double var6, ItemStack var8) {
-      super(var1, var2, var4, var6);
-      this.potionDamage = var8;
+   public EntityPotion(World world, double d0, double d1, double d2, ItemStack itemstack) {
+      super(world, d0, d1, d2);
+      this.potionDamage = itemstack;
    }
 
    protected float getGravityVelocity() {
@@ -48,12 +54,12 @@
       return -20.0F;
    }
 
-   public void setPotionDamage(int var1) {
+   public void setPotionDamage(int i) {
       if(this.potionDamage == null) {
          this.potionDamage = new ItemStack(Item.potion, 1, 0);
       }
 
-      this.potionDamage.setItemDamage(var1);
+      this.potionDamage.setItemDamage(i);
    }
 
    public int getPotionDamage() {
@@ -64,35 +70,52 @@
       return this.potionDamage.getItemDamage();
    }
 
-   protected void onImpact(MovingObjectPosition var1) {
+   protected void onImpact(MovingObjectPosition movingobjectposition) {
       if(!this.worldObj.isRemote) {
-         List var2 = Item.potion.getEffects(this.potionDamage);
-         if(var2 != null && !var2.isEmpty()) {
-            AxisAlignedBB var3 = this.boundingBox.expand(4.0D, 2.0D, 4.0D);
-            List var4 = this.worldObj.getEntitiesWithinAABB(EntityLiving.class, var3);
-            if(var4 != null && !var4.isEmpty()) {
-               Iterator var5 = var4.iterator();
-
-               while(var5.hasNext()) {
-                  EntityLiving var6 = (EntityLiving)var5.next();
-                  double var7 = this.getDistanceSqToEntity(var6);
-                  if(var7 < 16.0D) {
-                     double var9 = 1.0D - Math.sqrt(var7) / 4.0D;
-                     if(var6 == var1.entityHit) {
-                        var9 = 1.0D;
+         List list = Item.potion.getEffects(this.potionDamage);
+         if(list != null && !list.isEmpty()) {
+            AxisAlignedBB axisalignedbb = this.boundingBox.expand(4.0D, 2.0D, 4.0D);
+            List list1 = this.worldObj.getEntitiesWithinAABB(EntityLiving.class, axisalignedbb);
+            if(list1 != null && !list1.isEmpty()) {
+               Iterator iterator = list1.iterator();
+               HashMap affected = new HashMap();
+
+               while(iterator.hasNext()) {
+                  EntityLiving event = (EntityLiving)iterator.next();
+                  double d0 = this.getDistanceSqToEntity(event);
+                  if(d0 < 16.0D) {
+                     double d1 = 1.0D - Math.sqrt(d0) / 4.0D;
+                     if(event == movingobjectposition.entityHit) {
+                        d1 = 1.0D;
                      }
 
-                     Iterator var11 = var2.iterator();
+                     affected.put((LivingEntity)event.getBukkitEntity(), Double.valueOf(d1));
+                  }
+               }
 
-                     while(var11.hasNext()) {
-                        PotionEffect var12 = (PotionEffect)var11.next();
-                        int var13 = var12.getPotionID();
-                        if(Potion.potionTypes[var13].isInstant()) {
-                           Potion.potionTypes[var13].affectEntity(this.func_85052_h(), var6, var12.getAmplifier(), var9);
-                        } else {
-                           int var14 = (int)(var9 * (double)var12.getDuration() + 0.5D);
-                           if(var14 > 20) {
-                              var6.addPotionEffect(new PotionEffect(var13, var14, var12.getAmplifier()));
+               PotionSplashEvent event1 = CraftEventFactory.callPotionSplashEvent(this, affected);
+               if(!event1.isCancelled()) {
+                  Iterator i$ = event1.getAffectedEntities().iterator();
+
+                  while(i$.hasNext()) {
+                     LivingEntity victim = (LivingEntity)i$.next();
+                     if(victim instanceof CraftLivingEntity) {
+                        EntityLiving entityliving = ((CraftLivingEntity)victim).getHandle();
+                        double d11 = event1.getIntensity(victim);
+                        Iterator iterator1 = list.iterator();
+
+                        while(iterator1.hasNext()) {
+                           PotionEffect mobeffect = (PotionEffect)iterator1.next();
+                           int i = mobeffect.getPotionID();
+                           if(this.worldObj.pvpMode || !(entityliving instanceof EntityPlayerMP) || entityliving == this.func_85052_h() || i != 2 && i != 4 && i != 7 && i != 15 && i != 17 && i != 18 && i != 19) {
+                              if(Potion.potionTypes[i].isInstant()) {
+                                 Potion.potionTypes[i].applyInstantEffect(this.func_85052_h(), entityliving, mobeffect.getAmplifier(), d11, this);
+                              } else {
+                                 int j = (int)(d11 * (double)mobeffect.getDuration() + 0.5D);
+                                 if(j > 20) {
+                                    entityliving.addPotionEffect(new PotionEffect(i, j, mobeffect.getAmplifier()));
+                                 }
+                              }
                            }
                         }
                      }
@@ -107,12 +130,12 @@
 
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      if(var1.hasKey("Potion")) {
-         this.potionDamage = ItemStack.loadItemStackFromNBT(var1.getCompoundTag("Potion"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      if(nbttagcompound.hasKey("Potion")) {
+         this.potionDamage = ItemStack.loadItemStackFromNBT(nbttagcompound.getCompoundTag("Potion"));
       } else {
-         this.setPotionDamage(var1.getInteger("potionValue"));
+         this.setPotionDamage(nbttagcompound.getInteger("potionValue"));
       }
 
       if(this.potionDamage == null) {
@@ -121,10 +144,10 @@
 
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
       if(this.potionDamage != null) {
-         var1.setCompoundTag("Potion", this.potionDamage.writeToNBT(new NBTTagCompound()));
+         nbttagcompound.setCompoundTag("Potion", this.potionDamage.writeToNBT(new NBTTagCompound()));
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/EntitySheep.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySheep.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntitySheep.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySheep.java
--- mcp-mcdev/net/minecraft/src/EntitySheep.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySheep.java	2012-11-29 20:44:11.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Random;
 import net.minecraft.src.Block;
 import net.minecraft.src.ContainerSheep;
@@ -17,11 +18,17 @@
 import net.minecraft.src.EntityAnimal;
 import net.minecraft.src.EntityItem;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.InventoryCraftResult;
 import net.minecraft.src.InventoryCrafting;
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.Sheep;
+import org.bukkit.event.entity.SheepRegrowWoolEvent;
+import org.bukkit.event.player.PlayerShearEntityEvent;
 
 public class EntitySheep extends EntityAnimal {
 
@@ -31,23 +38,24 @@
    private EntityAIEatGrass aiEatGrass = new EntityAIEatGrass(this);
 
 
-   public EntitySheep(World var1) {
-      super(var1);
+   public EntitySheep(World world) {
+      super(world);
       this.texture = "/mob/sheep.png";
       this.setSize(0.9F, 1.3F);
-      float var2 = 0.23F;
+      float f = 0.23F;
       this.getNavigator().setAvoidsWater(true);
       this.tasks.addTask(0, new EntityAISwimming(this));
       this.tasks.addTask(1, new EntityAIPanic(this, 0.38F));
-      this.tasks.addTask(2, new EntityAIMate(this, var2));
+      this.tasks.addTask(2, new EntityAIMate(this, f));
       this.tasks.addTask(3, new EntityAITempt(this, 0.25F, Item.wheat.shiftedIndex, false));
       this.tasks.addTask(4, new EntityAIFollowParent(this, 0.25F));
       this.tasks.addTask(5, this.aiEatGrass);
-      this.tasks.addTask(6, new EntityAIWander(this, var2));
+      this.tasks.addTask(6, new EntityAIWander(this, f));
       this.tasks.addTask(7, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
       this.tasks.addTask(8, new EntityAILookIdle(this));
       this.field_90016_e.setInventorySlotContents(0, new ItemStack(Item.dyePowder, 1, 0));
       this.field_90016_e.setInventorySlotContents(1, new ItemStack(Item.dyePowder, 1, 0));
+      this.field_90016_e.resultInventory = new InventoryCraftResult();
    }
 
    protected boolean isAIEnabled() {
@@ -76,49 +84,57 @@
       this.dataWatcher.addObject(16, new Byte((byte)0));
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
       if(!this.getSheared()) {
-         this.entityDropItem(new ItemStack(Block.cloth.blockID, 1, this.getFleeceColor()), 0.0F);
+         loot.add(new org.bukkit.inventory.ItemStack(org.bukkit.Material.WOOL, 1, (short)0, Byte.valueOf((byte)this.getFleeceColor())));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
    protected int getDropItemId() {
       return Block.cloth.blockID;
    }
 
-   public boolean interact(EntityPlayer var1) {
-      ItemStack var2 = var1.inventory.getCurrentItem();
-      if(var2 != null && var2.itemID == Item.shears.shiftedIndex && !this.getSheared() && !this.isChild()) {
+   public boolean interact(EntityPlayer entityhuman) {
+      ItemStack itemstack = entityhuman.inventory.getCurrentItem();
+      if(itemstack != null && itemstack.itemID == Item.shears.shiftedIndex && !this.getSheared() && !this.isChild()) {
          if(!this.worldObj.isRemote) {
+            PlayerShearEntityEvent event = new PlayerShearEntityEvent((Player)entityhuman.getBukkitEntity(), this.getBukkitEntity());
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            if(event.isCancelled()) {
+               return false;
+            }
+
             this.setSheared(true);
-            int var3 = 1 + this.rand.nextInt(3);
+            int i = 1 + this.rand.nextInt(3);
 
-            for(int var4 = 0; var4 < var3; ++var4) {
-               EntityItem var5 = this.entityDropItem(new ItemStack(Block.cloth.blockID, 1, this.getFleeceColor()), 1.0F);
-               var5.motionY += (double)(this.rand.nextFloat() * 0.05F);
-               var5.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-               var5.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+            for(int j = 0; j < i; ++j) {
+               EntityItem entityitem = this.entityDropItem(new ItemStack(Block.cloth.blockID, 1, this.getFleeceColor()), 1.0F);
+               entityitem.motionY += (double)(this.rand.nextFloat() * 0.05F);
+               entityitem.motionX += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+               entityitem.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
             }
          }
 
-         var2.damageItem(1, var1);
+         itemstack.damageItem(1, entityhuman);
          this.func_85030_a("mob.sheep.shear", 1.0F, 1.0F);
       }
 
-      return super.interact(var1);
+      return super.interact(entityhuman);
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setBoolean("Sheared", this.getSheared());
-      var1.setByte("Color", (byte)this.getFleeceColor());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setBoolean("Sheared", this.getSheared());
+      nbttagcompound.setByte("Color", (byte)this.getFleeceColor());
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.setSheared(var1.getBoolean("Sheared"));
-      this.setFleeceColor(var1.getByte("Color"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.setSheared(nbttagcompound.getBoolean("Sheared"));
+      this.setFleeceColor(nbttagcompound.getByte("Color"));
    }
 
    protected String getLivingSound() {
@@ -133,7 +149,7 @@
       return "mob.sheep.say";
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.sheep.step", 0.15F, 1.0F);
    }
 
@@ -141,47 +157,52 @@
       return this.dataWatcher.getWatchableObjectByte(16) & 15;
    }
 
-   public void setFleeceColor(int var1) {
-      byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-      this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 & 240 | var1 & 15)));
+   public void setFleeceColor(int i) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 & 240 | i & 15)));
    }
 
    public boolean getSheared() {
       return (this.dataWatcher.getWatchableObjectByte(16) & 16) != 0;
    }
 
-   public void setSheared(boolean var1) {
-      byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-      if(var1) {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 | 16)));
+   public void setSheared(boolean flag) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      if(flag) {
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 | 16)));
       } else {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 & -17)));
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 & -17)));
       }
 
    }
 
-   public static int getRandomFleeceColor(Random var0) {
-      int var1 = var0.nextInt(100);
-      return var1 < 5?15:(var1 < 10?7:(var1 < 15?8:(var1 < 18?12:(var0.nextInt(500) == 0?6:0))));
+   public static int getRandomFleeceColor(Random random) {
+      int i = random.nextInt(100);
+      return i < 5?15:(i < 10?7:(i < 15?8:(i < 18?12:(random.nextInt(500) == 0?6:0))));
    }
 
-   public EntitySheep func_90015_b(EntityAgeable var1) {
-      EntitySheep var2 = (EntitySheep)var1;
-      EntitySheep var3 = new EntitySheep(this.worldObj);
-      int var4 = this.func_90014_a(this, var2);
-      var3.setFleeceColor(15 - var4);
-      return var3;
+   public EntitySheep func_90015_b(EntityAgeable entityageable) {
+      EntitySheep entitysheep = (EntitySheep)entityageable;
+      EntitySheep entitysheep1 = new EntitySheep(this.worldObj);
+      int i = this.func_90014_a(this, entitysheep);
+      entitysheep1.setFleeceColor(15 - i);
+      return entitysheep1;
    }
 
    public void eatGrassBonus() {
-      this.setSheared(false);
+      SheepRegrowWoolEvent event = new SheepRegrowWoolEvent((Sheep)this.getBukkitEntity());
+      this.worldObj.getServer().getPluginManager().callEvent(event);
+      if(!event.isCancelled()) {
+         this.setSheared(false);
+      }
+
       if(this.isChild()) {
-         int var1 = this.getGrowingAge() + 1200;
-         if(var1 > 0) {
-            var1 = 0;
+         int i = this.getGrowingAge() + 1200;
+         if(i > 0) {
+            i = 0;
          }
 
-         this.setGrowingAge(var1);
+         this.setGrowingAge(i);
       }
 
    }
@@ -190,29 +211,28 @@
       this.setFleeceColor(getRandomFleeceColor(this.worldObj.rand));
    }
 
-   private int func_90014_a(EntityAnimal var1, EntityAnimal var2) {
-      int var3 = this.func_90013_b(var1);
-      int var4 = this.func_90013_b(var2);
-      this.field_90016_e.getStackInSlot(0).setItemDamage(var3);
-      this.field_90016_e.getStackInSlot(1).setItemDamage(var4);
-      ItemStack var5 = CraftingManager.getInstance().findMatchingRecipe(this.field_90016_e, ((EntitySheep)var1).worldObj);
-      int var6;
-      if(var5 != null && var5.getItem().shiftedIndex == Item.dyePowder.shiftedIndex) {
-         var6 = var5.getItemDamage();
+   private int func_90014_a(EntityAnimal entityanimal, EntityAnimal entityanimal1) {
+      int i = this.func_90013_b(entityanimal);
+      int j = this.func_90013_b(entityanimal1);
+      this.field_90016_e.getStackInSlot(0).setItemDamage(i);
+      this.field_90016_e.getStackInSlot(1).setItemDamage(j);
+      ItemStack itemstack = CraftingManager.getInstance().findMatchingRecipe(this.field_90016_e, ((EntitySheep)entityanimal).worldObj);
+      int k;
+      if(itemstack != null && itemstack.getItem().shiftedIndex == Item.dyePowder.shiftedIndex) {
+         k = itemstack.getItemDamage();
       } else {
-         var6 = this.worldObj.rand.nextBoolean()?var3:var4;
+         k = this.worldObj.rand.nextBoolean()?i:j;
       }
 
-      return var6;
+      return k;
    }
 
-   private int func_90013_b(EntityAnimal var1) {
-      return 15 - ((EntitySheep)var1).getFleeceColor();
+   private int func_90013_b(EntityAnimal entityanimal) {
+      return 15 - ((EntitySheep)entityanimal).getFleeceColor();
    }
 
-   // $FF: synthetic method
-   public EntityAgeable func_90011_a(EntityAgeable var1) {
-      return this.func_90015_b(var1);
+   public EntityAgeable func_90011_a(EntityAgeable entityageable) {
+      return this.func_90015_b(entityageable);
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/EntitySilverfish.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySilverfish.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntitySilverfish.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySilverfish.java
--- mcp-mcdev/net/minecraft/src/EntitySilverfish.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySilverfish.java	2012-11-29 20:44:10.000000000 -0800
@@ -11,14 +11,15 @@
 import net.minecraft.src.Facing;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntitySilverfish extends EntityMob {
 
    private int allySummonCooldown;
 
 
-   public EntitySilverfish(World var1) {
-      super(var1);
+   public EntitySilverfish(World world) {
+      super(world);
       this.texture = "/mob/silverfish.png";
       this.setSize(0.3F, 0.7F);
       this.moveSpeed = 0.6F;
@@ -33,8 +34,8 @@
    }
 
    protected Entity findPlayerToAttack() {
-      double var1 = 8.0D;
-      return this.worldObj.getClosestVulnerablePlayerToEntity(this, var1);
+      double d0 = 8.0D;
+      return this.worldObj.getClosestVulnerablePlayerToEntity(this, d0);
    }
 
    protected String getLivingSound() {
@@ -49,27 +50,27 @@
       return "mob.silverfish.kill";
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
-         if(this.allySummonCooldown <= 0 && (var1 instanceof EntityDamageSource || var1 == DamageSource.magic)) {
+         if(this.allySummonCooldown <= 0 && (damagesource instanceof EntityDamageSource || damagesource == DamageSource.magic)) {
             this.allySummonCooldown = 20;
          }
 
-         return super.attackEntityFrom(var1, var2);
+         return super.attackEntityFrom(damagesource, i);
       }
    }
 
-   protected void attackEntity(Entity var1, float var2) {
-      if(this.attackTime <= 0 && var2 < 1.2F && var1.boundingBox.maxY > this.boundingBox.minY && var1.boundingBox.minY < this.boundingBox.maxY) {
+   protected void attackEntity(Entity entity, float f) {
+      if(this.attackTime <= 0 && f < 1.2F && entity.boundingBox.maxY > this.boundingBox.minY && entity.boundingBox.minY < this.boundingBox.maxY) {
          this.attackTime = 20;
-         var1.attackEntityFrom(DamageSource.causeMobDamage(this), this.getAttackStrength(var1));
+         entity.attackEntityFrom(DamageSource.causeMobDamage(this), this.getAttackStrength(entity));
       }
 
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.silverfish.step", 0.15F, 1.0F);
    }
 
@@ -85,28 +86,28 @@
    protected void updateEntityActionState() {
       super.updateEntityActionState();
       if(!this.worldObj.isRemote) {
-         int var1;
-         int var2;
-         int var3;
-         int var5;
+         int i;
+         int j;
+         int k;
+         int l;
          if(this.allySummonCooldown > 0) {
             --this.allySummonCooldown;
             if(this.allySummonCooldown == 0) {
-               var1 = MathHelper.floor_double(this.posX);
-               var2 = MathHelper.floor_double(this.posY);
-               var3 = MathHelper.floor_double(this.posZ);
-               boolean var4 = false;
-
-               for(var5 = 0; !var4 && var5 <= 5 && var5 >= -5; var5 = var5 <= 0?1 - var5:0 - var5) {
-                  for(int var6 = 0; !var4 && var6 <= 10 && var6 >= -10; var6 = var6 <= 0?1 - var6:0 - var6) {
-                     for(int var7 = 0; !var4 && var7 <= 10 && var7 >= -10; var7 = var7 <= 0?1 - var7:0 - var7) {
-                        int var8 = this.worldObj.getBlockId(var1 + var6, var2 + var5, var3 + var7);
-                        if(var8 == Block.silverfish.blockID) {
-                           this.worldObj.playAuxSFX(2001, var1 + var6, var2 + var5, var3 + var7, Block.silverfish.blockID + (this.worldObj.getBlockMetadata(var1 + var6, var2 + var5, var3 + var7) << 12));
-                           this.worldObj.setBlockWithNotify(var1 + var6, var2 + var5, var3 + var7, 0);
-                           Block.silverfish.onBlockDestroyedByPlayer(this.worldObj, var1 + var6, var2 + var5, var3 + var7, 0);
+               i = MathHelper.floor_double(this.posX);
+               j = MathHelper.floor_double(this.posY);
+               k = MathHelper.floor_double(this.posZ);
+               boolean l1 = false;
+
+               for(l = 0; !l1 && l <= 5 && l >= -5; l = l <= 0?1 - l:0 - l) {
+                  for(int i1 = 0; !l1 && i1 <= 10 && i1 >= -10; i1 = i1 <= 0?1 - i1:0 - i1) {
+                     for(int j1 = 0; !l1 && j1 <= 10 && j1 >= -10; j1 = j1 <= 0?1 - j1:0 - j1) {
+                        int k1 = this.worldObj.getBlockId(i + i1, j + l, k + j1);
+                        if(k1 == Block.silverfish.blockID && !CraftEventFactory.callEntityChangeBlockEvent(this, i + i1, j + l, k + j1, 0).isCancelled()) {
+                           this.worldObj.playAuxSFX(2001, i + i1, j + l, k + j1, Block.silverfish.blockID + (this.worldObj.getBlockMetadata(i + i1, j + l, k + j1) << 12));
+                           this.worldObj.setBlockWithNotify(i + i1, j + l, k + j1, 0);
+                           Block.silverfish.onBlockDestroyedByPlayer(this.worldObj, i + i1, j + l, k + j1, 0);
                            if(this.rand.nextBoolean()) {
-                              var4 = true;
+                              l1 = true;
                               break;
                            }
                         }
@@ -117,13 +118,17 @@
          }
 
          if(this.entityToAttack == null && !this.hasPath()) {
-            var1 = MathHelper.floor_double(this.posX);
-            var2 = MathHelper.floor_double(this.posY + 0.5D);
-            var3 = MathHelper.floor_double(this.posZ);
+            i = MathHelper.floor_double(this.posX);
+            j = MathHelper.floor_double(this.posY + 0.5D);
+            k = MathHelper.floor_double(this.posZ);
             int var9 = this.rand.nextInt(6);
-            var5 = this.worldObj.getBlockId(var1 + Facing.offsetsXForSide[var9], var2 + Facing.offsetsYForSide[var9], var3 + Facing.offsetsZForSide[var9]);
-            if(BlockSilverfish.getPosingIdByMetadata(var5)) {
-               this.worldObj.setBlockAndMetadataWithNotify(var1 + Facing.offsetsXForSide[var9], var2 + Facing.offsetsYForSide[var9], var3 + Facing.offsetsZForSide[var9], Block.silverfish.blockID, BlockSilverfish.getMetadataForBlockType(var5));
+            l = this.worldObj.getBlockId(i + Facing.offsetsXForSide[var9], j + Facing.offsetsYForSide[var9], k + Facing.offsetsZForSide[var9]);
+            if(BlockSilverfish.getPosingIdByMetadata(l)) {
+               if(CraftEventFactory.callEntityChangeBlockEvent(this, i + Facing.offsetsXForSide[var9], j + Facing.offsetsYForSide[var9], k + Facing.offsetsZForSide[var9], Block.silverfish.blockID).isCancelled()) {
+                  return;
+               }
+
+               this.worldObj.setBlockAndMetadataWithNotify(i + Facing.offsetsXForSide[var9], j + Facing.offsetsYForSide[var9], k + Facing.offsetsZForSide[var9], Block.silverfish.blockID, BlockSilverfish.getMetadataForBlockType(l));
                this.spawnExplosionParticle();
                this.setDead();
             } else {
@@ -132,12 +137,12 @@
          } else if(this.entityToAttack != null && !this.hasPath()) {
             this.entityToAttack = null;
          }
-
       }
+
    }
 
-   public float getBlockPathWeight(int var1, int var2, int var3) {
-      return this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.stone.blockID?10.0F:super.getBlockPathWeight(var1, var2, var3);
+   public float getBlockPathWeight(int i, int j, int k) {
+      return this.worldObj.getBlockId(i, j - 1, k) == Block.stone.blockID?10.0F:super.getBlockPathWeight(i, j, k);
    }
 
    protected boolean isValidLightLevel() {
@@ -146,14 +151,14 @@
 
    public boolean getCanSpawnHere() {
       if(super.getCanSpawnHere()) {
-         EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 5.0D);
-         return var1 == null;
+         EntityPlayer entityhuman = this.worldObj.getClosestPlayerToEntity(this, 5.0D);
+         return entityhuman == null;
       } else {
          return false;
       }
    }
 
-   public int getAttackStrength(Entity var1) {
+   public int getAttackStrength(Entity entity) {
       return 1;
    }
 
Binary files mcp-mcdev/net/minecraft/src/EntitySkeleton.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySkeleton.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntitySkeleton.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySkeleton.java
--- mcp-mcdev/net/minecraft/src/EntitySkeleton.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySkeleton.java	2012-11-29 20:44:10.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Calendar;
 import net.minecraft.src.AchievementList;
 import net.minecraft.src.Block;
@@ -31,6 +32,9 @@
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldProviderHell;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.entity.EntityCombustEvent;
 
 public class EntitySkeleton extends EntityMob implements IRangedAttackMob {
 
@@ -38,8 +42,8 @@
    private EntityAIAttackOnCollide field_85038_e = new EntityAIAttackOnCollide(this, EntityPlayer.class, 0.31F, false);
 
 
-   public EntitySkeleton(World var1) {
-      super(var1);
+   public EntitySkeleton(World world) {
+      super(world);
       this.texture = "/mob/skeleton.png";
       this.moveSpeed = 0.25F;
       this.tasks.addTask(1, new EntityAISwimming(this));
@@ -50,7 +54,7 @@
       this.tasks.addTask(6, new EntityAILookIdle(this));
       this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false));
       this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPlayer.class, 16.0F, 0, true));
-      if(var1 != null && !var1.isRemote) {
+      if(world != null && !world.isRemote) {
          this.func_85036_m();
       }
 
@@ -81,14 +85,14 @@
       return "mob.skeleton.death";
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.skeleton.step", 0.15F, 1.0F);
    }
 
-   public boolean attackEntityAsMob(Entity var1) {
-      if(super.attackEntityAsMob(var1)) {
-         if(this.getSkeletonType() == 1 && var1 instanceof EntityLiving) {
-            ((EntityLiving)var1).addPotionEffect(new PotionEffect(Potion.wither.id, 200));
+   public boolean attackEntityAsMob(Entity entity) {
+      if(super.attackEntityAsMob(entity)) {
+         if(this.getSkeletonType() == 1 && entity instanceof EntityLiving) {
+            ((EntityLiving)entity).addPotionEffect(new PotionEffect(Potion.wither.id, 200));
          }
 
          return true;
@@ -97,17 +101,17 @@
       }
    }
 
-   public int getAttackStrength(Entity var1) {
+   public int getAttackStrength(Entity entity) {
       if(this.getSkeletonType() == 1) {
-         ItemStack var2 = this.getHeldItem();
-         int var3 = 4;
-         if(var2 != null) {
-            var3 += var2.getDamageVsEntity(this);
+         ItemStack itemstack = this.getHeldItem();
+         int i = 4;
+         if(itemstack != null) {
+            i += itemstack.getDamageVsEntity(this);
          }
 
-         return var3;
+         return i;
       } else {
-         return super.getAttackStrength(var1);
+         return super.getAttackStrength(entity);
       }
    }
 
@@ -117,24 +121,28 @@
 
    public void onLivingUpdate() {
       if(this.worldObj.isDaytime() && !this.worldObj.isRemote) {
-         float var1 = this.getBrightness(1.0F);
-         if(var1 > 0.5F && this.rand.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
-            boolean var2 = true;
-            ItemStack var3 = this.getEquipmentInSlot(4);
-            if(var3 != null) {
-               if(var3.isItemStackDamageable()) {
-                  var3.setItemDamage(var3.getItemDamageForDisplay() + this.rand.nextInt(2));
-                  if(var3.getItemDamageForDisplay() >= var3.getMaxDamage()) {
-                     this.renderBrokenItemStack(var3);
+         float f = this.getBrightness(1.0F);
+         if(f > 0.5F && this.rand.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
+            boolean flag = true;
+            ItemStack itemstack = this.getEquipmentInSlot(4);
+            if(itemstack != null) {
+               if(itemstack.isItemStackDamageable()) {
+                  itemstack.setItemDamage(itemstack.getItemDamageForDisplay() + this.rand.nextInt(2));
+                  if(itemstack.getItemDamageForDisplay() >= itemstack.getMaxDamage()) {
+                     this.renderBrokenItemStack(itemstack);
                      this.setCurrentItemOrArmor(4, (ItemStack)null);
                   }
                }
 
-               var2 = false;
+               flag = false;
             }
 
-            if(var2) {
-               this.setFire(8);
+            if(flag) {
+               EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
+               this.worldObj.getServer().getPluginManager().callEvent(event);
+               if(!event.isCancelled()) {
+                  this.setFire(event.getDuration());
+               }
             }
          }
       }
@@ -142,14 +150,14 @@
       super.onLivingUpdate();
    }
 
-   public void onDeath(DamageSource var1) {
-      super.onDeath(var1);
-      if(var1.getSourceOfDamage() instanceof EntityArrow && var1.getEntity() instanceof EntityPlayer) {
-         EntityPlayer var2 = (EntityPlayer)var1.getEntity();
-         double var3 = var2.posX - this.posX;
-         double var5 = var2.posZ - this.posZ;
-         if(var3 * var3 + var5 * var5 >= 2500.0D) {
-            var2.triggerAchievement(AchievementList.snipeSkeleton);
+   public void onDeath(DamageSource damagesource) {
+      super.onDeath(damagesource);
+      if(damagesource.getSourceOfDamage() instanceof EntityArrow && damagesource.getEntity() instanceof EntityPlayer) {
+         EntityPlayer entityhuman = (EntityPlayer)damagesource.getEntity();
+         double d0 = entityhuman.posX - this.posX;
+         double d1 = entityhuman.posZ - this.posZ;
+         if(d0 * d0 + d1 * d1 >= 2500.0D) {
+            entityhuman.triggerAchievement(AchievementList.snipeSkeleton);
          }
       }
 
@@ -159,40 +167,45 @@
       return Item.arrow.shiftedIndex;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3;
-      int var4;
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int count;
       if(this.getSkeletonType() == 1) {
-         var3 = this.rand.nextInt(3 + var2) - 1;
-
-         for(var4 = 0; var4 < var3; ++var4) {
-            this.dropItem(Item.coal.shiftedIndex, 1);
+         count = this.rand.nextInt(3 + i) - 1;
+         if(count > 0) {
+            loot.add(new org.bukkit.inventory.ItemStack(org.bukkit.Material.COAL, count));
          }
       } else {
-         var3 = this.rand.nextInt(3 + var2);
-
-         for(var4 = 0; var4 < var3; ++var4) {
-            this.dropItem(Item.arrow.shiftedIndex, 1);
+         count = this.rand.nextInt(3 + i);
+         if(count > 0) {
+            loot.add(new org.bukkit.inventory.ItemStack(org.bukkit.Material.ARROW, count));
          }
       }
 
-      var3 = this.rand.nextInt(3 + var2);
+      count = this.rand.nextInt(3 + i);
+      if(count > 0) {
+         loot.add(new org.bukkit.inventory.ItemStack(org.bukkit.Material.BONE, count));
+      }
 
-      for(var4 = 0; var4 < var3; ++var4) {
-         this.dropItem(Item.bone.shiftedIndex, 1);
+      if(this.recentlyHit > 0) {
+         int k = this.rand.nextInt(200) - i;
+         if(k < 5) {
+            ItemStack itemstack = this.l(k <= 0?1:0);
+            if(itemstack != null) {
+               loot.add(new CraftItemStack(itemstack));
+            }
+         }
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
-   protected void dropRareDrop(int var1) {
-      if(this.getSkeletonType() == 1) {
-         this.entityDropItem(new ItemStack(Item.skull.shiftedIndex, 1, 1), 0.0F);
-      }
-
+   protected ItemStack l(int i) {
+      return this.getSkeletonType() == 1?new ItemStack(Item.skull.shiftedIndex, 1, 1):null;
    }
 
    protected void func_82164_bB() {
-      super.func_82164_bB();
+      super.getHeldItem();
       this.setCurrentItemOrArmor(0, new ItemStack(Item.bow));
    }
 
@@ -213,8 +226,8 @@
 
       this.canPickUpLoot = true;
       if(this.getEquipmentInSlot(4) == null) {
-         Calendar var1 = this.worldObj.getCurrentDate();
-         if(var1.get(2) + 1 == 10 && var1.get(5) == 31 && this.rand.nextFloat() < 0.25F) {
+         Calendar calendar = this.worldObj.getCurrentDate();
+         if(calendar.get(2) + 1 == 10 && calendar.get(5) == 31 && this.rand.nextFloat() < 0.25F) {
             this.setCurrentItemOrArmor(4, new ItemStack(this.rand.nextFloat() < 0.1F?Block.pumpkinLantern:Block.pumpkin));
             this.equipmentDropChances[4] = 0.0F;
          }
@@ -225,8 +238,8 @@
    public void func_85036_m() {
       this.tasks.func_85156_a(this.field_85038_e);
       this.tasks.func_85156_a(this.field_85037_d);
-      ItemStack var1 = this.getHeldItem();
-      if(var1 != null && var1.itemID == Item.bow.shiftedIndex) {
+      ItemStack itemstack = this.getHeldItem();
+      if(itemstack != null && itemstack.itemID == Item.bow.shiftedIndex) {
          this.tasks.addTask(4, this.field_85037_d);
       } else {
          this.tasks.addTask(4, this.field_85038_e);
@@ -234,34 +247,34 @@
 
    }
 
-   public void attackEntityWithRangedAttack(EntityLiving var1) {
-      EntityArrow var2 = new EntityArrow(this.worldObj, this, var1, 1.6F, 12.0F);
-      int var3 = EnchantmentHelper.getEnchantmentLevel(Enchantment.power.effectId, this.getHeldItem());
-      int var4 = EnchantmentHelper.getEnchantmentLevel(Enchantment.punch.effectId, this.getHeldItem());
-      if(var3 > 0) {
-         var2.setDamage(var2.getDamage() + (double)var3 * 0.5D + 0.5D);
+   public void attackEntityWithRangedAttack(EntityLiving entityliving) {
+      EntityArrow entityarrow = new EntityArrow(this.worldObj, this, entityliving, 1.6F, 12.0F);
+      int i = EnchantmentHelper.getEnchantmentLevel(Enchantment.power.effectId, this.getHeldItem());
+      int j = EnchantmentHelper.getEnchantmentLevel(Enchantment.punch.effectId, this.getHeldItem());
+      if(i > 0) {
+         entityarrow.setDamage(entityarrow.getDamage() + (double)i * 0.5D + 0.5D);
       }
 
-      if(var4 > 0) {
-         var2.setKnockbackStrength(var4);
+      if(j > 0) {
+         entityarrow.setKnockbackStrength(j);
       }
 
       if(EnchantmentHelper.getEnchantmentLevel(Enchantment.flame.effectId, this.getHeldItem()) > 0 || this.getSkeletonType() == 1) {
-         var2.setFire(100);
+         entityarrow.setFire(100);
       }
 
       this.func_85030_a("random.bow", 1.0F, 1.0F / (this.getRNG().nextFloat() * 0.4F + 0.8F));
-      this.worldObj.spawnEntityInWorld(var2);
+      this.worldObj.spawnEntityInWorld(entityarrow);
    }
 
    public int getSkeletonType() {
       return this.dataWatcher.getWatchableObjectByte(13);
    }
 
-   public void setSkeletonType(int var1) {
-      this.dataWatcher.updateObject(13, Byte.valueOf((byte)var1));
-      this.isImmuneToFire = var1 == 1;
-      if(var1 == 1) {
+   public void setSkeletonType(int i) {
+      this.dataWatcher.updateObject(13, Byte.valueOf((byte)i));
+      this.isImmuneToFire = i == 1;
+      if(i == 1) {
          this.setSize(0.72F, 2.16F);
       } else {
          this.setSize(0.6F, 1.8F);
@@ -269,24 +282,24 @@
 
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      if(var1.hasKey("SkeletonType")) {
-         byte var2 = var1.getByte("SkeletonType");
-         this.setSkeletonType(var2);
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      if(nbttagcompound.hasKey("SkeletonType")) {
+         byte b0 = nbttagcompound.getByte("SkeletonType");
+         this.setSkeletonType(b0);
       }
 
       this.func_85036_m();
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setByte("SkeletonType", (byte)this.getSkeletonType());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setByte("SkeletonType", (byte)this.getSkeletonType());
    }
 
-   public void setCurrentItemOrArmor(int var1, ItemStack var2) {
-      super.setCurrentItemOrArmor(var1, var2);
-      if(!this.worldObj.isRemote && var1 == 0) {
+   public void setCurrentItemOrArmor(int i, ItemStack itemstack) {
+      super.setCurrentItemOrArmor(i, itemstack);
+      if(!this.worldObj.isRemote && i == 0) {
          this.func_85036_m();
       }
 
Binary files mcp-mcdev/net/minecraft/src/EntitySlime.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySlime.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntitySlime.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySlime.java
--- mcp-mcdev/net/minecraft/src/EntitySlime.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySlime.java	2012-11-29 20:44:10.000000000 -0800
@@ -11,6 +11,9 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldType;
+import org.bukkit.entity.Slime;
+import org.bukkit.event.entity.SlimeSplitEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public class EntitySlime extends EntityLiving implements IMob {
 
@@ -20,13 +23,13 @@
    private int slimeJumpDelay = 0;
 
 
-   public EntitySlime(World var1) {
-      super(var1);
+   public EntitySlime(World world) {
+      super(world);
       this.texture = "/mob/slime.png";
-      int var2 = 1 << this.rand.nextInt(3);
+      int i = 1 << this.rand.nextInt(3);
       this.yOffset = 0.0F;
       this.slimeJumpDelay = this.rand.nextInt(20) + 10;
-      this.setSlimeSize(var2);
+      this.setSlimeSize(i);
    }
 
    protected void entityInit() {
@@ -34,31 +37,31 @@
       this.dataWatcher.addObject(16, new Byte((byte)1));
    }
 
-   protected void setSlimeSize(int var1) {
-      this.dataWatcher.updateObject(16, new Byte((byte)var1));
-      this.setSize(0.6F * (float)var1, 0.6F * (float)var1);
+   public void setSlimeSize(int i) {
+      this.dataWatcher.updateObject(16, new Byte((byte)i));
+      this.setSize(0.6F * (float)i, 0.6F * (float)i);
       this.setPosition(this.posX, this.posY, this.posZ);
       this.setEntityHealth(this.getMaxHealth());
-      this.experienceValue = var1;
+      this.experienceValue = i;
    }
 
    public int getMaxHealth() {
-      int var1 = this.getSlimeSize();
-      return var1 * var1;
+      int i = this.getSlimeSize();
+      return i * i;
    }
 
    public int getSlimeSize() {
       return this.dataWatcher.getWatchableObjectByte(16);
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setInteger("Size", this.getSlimeSize() - 1);
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setInteger("Size", this.getSlimeSize() - 1);
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.setSlimeSize(var1.getInteger("Size") + 1);
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.setSlimeSize(nbttagcompound.getInteger("Size") + 1);
    }
 
    protected String getSlimeParticle() {
@@ -76,18 +79,18 @@
 
       this.field_70811_b += (this.field_70813_a - this.field_70811_b) * 0.5F;
       this.field_70812_c = this.field_70811_b;
-      boolean var1 = this.onGround;
+      boolean flag = this.onGround;
       super.onUpdate();
-      int var2;
-      if(this.onGround && !var1) {
-         var2 = this.getSlimeSize();
-
-         for(int var3 = 0; var3 < var2 * 8; ++var3) {
-            float var4 = this.rand.nextFloat() * 3.1415927F * 2.0F;
-            float var5 = this.rand.nextFloat() * 0.5F + 0.5F;
-            float var6 = MathHelper.sin(var4) * (float)var2 * 0.5F * var5;
-            float var7 = MathHelper.cos(var4) * (float)var2 * 0.5F * var5;
-            this.worldObj.spawnParticle(this.getSlimeParticle(), this.posX + (double)var6, this.boundingBox.minY, this.posZ + (double)var7, 0.0D, 0.0D, 0.0D);
+      int i;
+      if(this.onGround && !flag) {
+         i = this.getSlimeSize();
+
+         for(int j = 0; j < i * 8; ++j) {
+            float f = this.rand.nextFloat() * 3.1415927F * 2.0F;
+            float f1 = this.rand.nextFloat() * 0.5F + 0.5F;
+            float f2 = MathHelper.sin(f) * (float)i * 0.5F * f1;
+            float f3 = MathHelper.cos(f) * (float)i * 0.5F * f1;
+            this.worldObj.spawnParticle(this.getSlimeParticle(), this.posX + (double)f2, this.boundingBox.minY, this.posZ + (double)f3, 0.0D, 0.0D, 0.0D);
          }
 
          if(this.makesSoundOnLand()) {
@@ -95,28 +98,28 @@
          }
 
          this.field_70813_a = -0.5F;
-      } else if(!this.onGround && var1) {
+      } else if(!this.onGround && flag) {
          this.field_70813_a = 1.0F;
       }
 
       this.func_70808_l();
       if(this.worldObj.isRemote) {
-         var2 = this.getSlimeSize();
-         this.setSize(0.6F * (float)var2, 0.6F * (float)var2);
+         i = this.getSlimeSize();
+         this.setSize(0.6F * (float)i, 0.6F * (float)i);
       }
 
    }
 
    protected void updateEntityActionState() {
       this.despawnEntity();
-      EntityPlayer var1 = this.worldObj.getClosestVulnerablePlayerToEntity(this, 16.0D);
-      if(var1 != null) {
-         this.faceEntity(var1, 10.0F, 20.0F);
+      EntityPlayer entityhuman = this.worldObj.getClosestVulnerablePlayerToEntity(this, 16.0D);
+      if(entityhuman != null) {
+         this.faceEntity(entityhuman, 10.0F, 20.0F);
       }
 
       if(this.onGround && this.slimeJumpDelay-- <= 0) {
          this.slimeJumpDelay = this.getJumpDelay();
-         if(var1 != null) {
+         if(entityhuman != null) {
             this.slimeJumpDelay /= 3;
          }
 
@@ -149,27 +152,35 @@
    }
 
    public void setDead() {
-      int var1 = this.getSlimeSize();
-      if(!this.worldObj.isRemote && var1 > 1 && this.getHealth() <= 0) {
-         int var2 = 2 + this.rand.nextInt(3);
-
-         for(int var3 = 0; var3 < var2; ++var3) {
-            float var4 = ((float)(var3 % 2) - 0.5F) * (float)var1 / 4.0F;
-            float var5 = ((float)(var3 / 2) - 0.5F) * (float)var1 / 4.0F;
-            EntitySlime var6 = this.createInstance();
-            var6.setSlimeSize(var1 / 2);
-            var6.setLocationAndAngles(this.posX + (double)var4, this.posY + 0.5D, this.posZ + (double)var5, this.rand.nextFloat() * 360.0F, 0.0F);
-            this.worldObj.spawnEntityInWorld(var6);
+      int i = this.getSlimeSize();
+      if(!this.worldObj.isRemote && i > 1 && this.getHealth() <= 0) {
+         int j = 2 + this.rand.nextInt(3);
+         SlimeSplitEvent event = new SlimeSplitEvent((Slime)this.getBukkitEntity(), j);
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(event.isCancelled() || event.getCount() <= 0) {
+            super.setDead();
+            return;
+         }
+
+         j = event.getCount();
+
+         for(int k = 0; k < j; ++k) {
+            float f = ((float)(k % 2) - 0.5F) * (float)i / 4.0F;
+            float f1 = ((float)(k / 2) - 0.5F) * (float)i / 4.0F;
+            EntitySlime entityslime = this.createInstance();
+            entityslime.setSlimeSize(i / 2);
+            entityslime.setLocationAndAngles(this.posX + (double)f, this.posY + 0.5D, this.posZ + (double)f1, this.rand.nextFloat() * 360.0F, 0.0F);
+            this.worldObj.addEntity(entityslime, SpawnReason.SLIME_SPLIT);
          }
       }
 
       super.setDead();
    }
 
-   public void onCollideWithPlayer(EntityPlayer var1) {
+   public void onCollideWithPlayer(EntityPlayer entityhuman) {
       if(this.canDamagePlayer()) {
-         int var2 = this.getSlimeSize();
-         if(this.canEntityBeSeen(var1) && this.getDistanceSqToEntity(var1) < 0.6D * (double)var2 * 0.6D * (double)var2 && var1.attackEntityFrom(DamageSource.causeMobDamage(this), this.getAttackStrength())) {
+         int i = this.getSlimeSize();
+         if(this.canEntityBeSeen(entityhuman) && this.getDistanceSqToEntity(entityhuman) < 0.6D * (double)i * 0.6D * (double)i && entityhuman.attackEntityFrom(DamageSource.causeMobDamage(this), this.getAttackStrength())) {
             this.func_85030_a("mob.attack", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
          }
       }
@@ -197,7 +208,7 @@
    }
 
    public boolean getCanSpawnHere() {
-      Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ));
+      Chunk chunk = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ));
       if(this.worldObj.getWorldInfo().getTerrainType() == WorldType.FLAT && this.rand.nextInt(4) != 1) {
          return false;
       } else {
@@ -206,7 +217,7 @@
                return super.getCanSpawnHere();
             }
 
-            if(this.rand.nextInt(10) == 0 && var1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 40.0D) {
+            if(this.rand.nextInt(10) == 0 && chunk.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 40.0D) {
                return super.getCanSpawnHere();
             }
          }
Binary files mcp-mcdev/net/minecraft/src/EntitySmallFireball.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySmallFireball.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntitySmallFireball.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySmallFireball.java
--- mcp-mcdev/net/minecraft/src/EntitySmallFireball.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySmallFireball.java	2012-11-29 20:44:10.000000000 -0800
@@ -6,56 +6,70 @@
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.World;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.Projectile;
+import org.bukkit.event.block.BlockIgniteEvent;
+import org.bukkit.event.block.BlockIgniteEvent.IgniteCause;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
 
 public class EntitySmallFireball extends EntityFireball {
 
-   public EntitySmallFireball(World var1) {
-      super(var1);
+   public EntitySmallFireball(World world) {
+      super(world);
       this.setSize(0.3125F, 0.3125F);
    }
 
-   public EntitySmallFireball(World var1, EntityLiving var2, double var3, double var5, double var7) {
-      super(var1, var2, var3, var5, var7);
+   public EntitySmallFireball(World world, EntityLiving entityliving, double d0, double d1, double d2) {
+      super(world, entityliving, d0, d1, d2);
       this.setSize(0.3125F, 0.3125F);
    }
 
-   public EntitySmallFireball(World var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-      super(var1, var2, var4, var6, var8, var10, var12);
+   public EntitySmallFireball(World world, double d0, double d1, double d2, double d3, double d4, double d5) {
+      super(world, d0, d1, d2, d3, d4, d5);
       this.setSize(0.3125F, 0.3125F);
    }
 
-   protected void onImpact(MovingObjectPosition var1) {
+   protected void onImpact(MovingObjectPosition movingobjectposition) {
       if(!this.worldObj.isRemote) {
-         if(var1.entityHit != null) {
-            if(!var1.entityHit.isImmuneToFire() && var1.entityHit.attackEntityFrom(DamageSource.causeFireballDamage(this, this.shootingEntity), 5)) {
-               var1.entityHit.setFire(5);
+         if(movingobjectposition.entityHit != null) {
+            if(!movingobjectposition.entityHit.isImmuneToFire() && movingobjectposition.entityHit.attackEntityFrom(DamageSource.causeFireballDamage(this, this.shootingEntity), 5)) {
+               EntityCombustByEntityEvent i = new EntityCombustByEntityEvent((Projectile)this.getBukkitEntity(), movingobjectposition.entityHit.getBukkitEntity(), 5);
+               movingobjectposition.entityHit.worldObj.getServer().getPluginManager().callEvent(i);
+               if(!i.isCancelled()) {
+                  movingobjectposition.entityHit.setFire(i.getDuration());
+               }
             }
          } else {
-            int var2 = var1.blockX;
-            int var3 = var1.blockY;
-            int var4 = var1.blockZ;
-            switch(var1.sideHit) {
+            int var7 = movingobjectposition.blockX;
+            int j = movingobjectposition.blockY;
+            int k = movingobjectposition.blockZ;
+            switch(movingobjectposition.sideHit) {
             case 0:
-               --var3;
+               --j;
                break;
             case 1:
-               ++var3;
+               ++j;
                break;
             case 2:
-               --var4;
+               --k;
                break;
             case 3:
-               ++var4;
+               ++k;
                break;
             case 4:
-               --var2;
+               --var7;
                break;
             case 5:
-               ++var2;
+               ++var7;
             }
 
-            if(this.worldObj.isAirBlock(var2, var3, var4)) {
-               this.worldObj.setBlockWithNotify(var2, var3, var4, Block.fire.blockID);
+            if(this.worldObj.isAirBlock(var7, j, k)) {
+               org.bukkit.block.Block block = this.worldObj.getWorld().getBlockAt(var7, j, k);
+               BlockIgniteEvent event = new BlockIgniteEvent(block, IgniteCause.FIREBALL, (Player)null);
+               this.worldObj.getServer().getPluginManager().callEvent(event);
+               if(!event.isCancelled()) {
+                  this.worldObj.setBlockWithNotify(var7, j, k, Block.fire.blockID);
+               }
             }
          }
 
@@ -68,7 +82,7 @@
       return false;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       return false;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntitySnowman.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySnowman.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntitySnowman.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySnowman.java
--- mcp-mcdev/net/minecraft/src/EntitySnowman.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySnowman.java	2012-11-29 20:44:09.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.Block;
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.EntityAIArrowAttack;
@@ -16,11 +17,16 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.EntityBlockFormEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
 
 public class EntitySnowman extends EntityGolem implements IRangedAttackMob {
 
-   public EntitySnowman(World var1) {
-      super(var1);
+   public EntitySnowman(World world) {
+      super(world);
       this.texture = "/mob/snowman.png";
       this.setSize(0.4F, 1.8F);
       this.getNavigator().setAvoidsWater(true);
@@ -42,21 +48,37 @@
    public void onLivingUpdate() {
       super.onLivingUpdate();
       if(this.isWet()) {
-         this.attackEntityFrom(DamageSource.drown, 1);
+         EntityDamageEvent i = new EntityDamageEvent(this.getBukkitEntity(), DamageCause.DROWNING, 1);
+         this.worldObj.getServer().getPluginManager().callEvent(i);
+         if(!i.isCancelled()) {
+            i.getEntity().setLastDamageCause(i);
+            this.attackEntityFrom(DamageSource.drown, i.getDamage());
+         }
       }
 
-      int var1 = MathHelper.floor_double(this.posX);
-      int var2 = MathHelper.floor_double(this.posZ);
-      if(this.worldObj.getBiomeGenForCoords(var1, var2).getFloatTemperature() > 1.0F) {
-         this.attackEntityFrom(DamageSource.onFire, 1);
+      int var7 = MathHelper.floor_double(this.posX);
+      int j = MathHelper.floor_double(this.posZ);
+      if(this.worldObj.getBiomeGenForCoords(var7, j).getFloatTemperature() > 1.0F) {
+         EntityDamageEvent k = new EntityDamageEvent(this.getBukkitEntity(), DamageCause.MELTING, 1);
+         this.worldObj.getServer().getPluginManager().callEvent(k);
+         if(!k.isCancelled()) {
+            k.getEntity().setLastDamageCause(k);
+            this.attackEntityFrom(DamageSource.onFire, k.getDamage());
+         }
       }
 
-      for(var1 = 0; var1 < 4; ++var1) {
-         var2 = MathHelper.floor_double(this.posX + (double)((float)(var1 % 2 * 2 - 1) * 0.25F));
-         int var3 = MathHelper.floor_double(this.posY);
-         int var4 = MathHelper.floor_double(this.posZ + (double)((float)(var1 / 2 % 2 * 2 - 1) * 0.25F));
-         if(this.worldObj.getBlockId(var2, var3, var4) == 0 && this.worldObj.getBiomeGenForCoords(var2, var4).getFloatTemperature() < 0.8F && Block.snow.canPlaceBlockAt(this.worldObj, var2, var3, var4)) {
-            this.worldObj.setBlockWithNotify(var2, var3, var4, Block.snow.blockID);
+      for(var7 = 0; var7 < 4; ++var7) {
+         j = MathHelper.floor_double(this.posX + (double)((float)(var7 % 2 * 2 - 1) * 0.25F));
+         int var8 = MathHelper.floor_double(this.posY);
+         int l = MathHelper.floor_double(this.posZ + (double)((float)(var7 / 2 % 2 * 2 - 1) * 0.25F));
+         if(this.worldObj.getBlockId(j, var8, l) == 0 && this.worldObj.getBiomeGenForCoords(j, l).getFloatTemperature() < 0.8F && Block.snow.canPlaceBlockAt(this.worldObj, j, var8, l)) {
+            BlockState blockState = this.worldObj.getWorld().getBlockAt(j, var8, l).getState();
+            blockState.setTypeId(Block.snow.blockID);
+            EntityBlockFormEvent event = new EntityBlockFormEvent(this.getBukkitEntity(), blockState.getBlock(), blockState);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+            if(!event.isCancelled()) {
+               blockState.update(true);
+            }
          }
       }
 
@@ -66,23 +88,24 @@
       return Item.snowball.shiftedIndex;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.rand.nextInt(16);
-
-      for(int var4 = 0; var4 < var3; ++var4) {
-         this.dropItem(Item.snowball.shiftedIndex, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.rand.nextInt(16);
+      if(j > 0) {
+         loot.add(new org.bukkit.inventory.ItemStack(Item.snowball.shiftedIndex, j));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
-   public void attackEntityWithRangedAttack(EntityLiving var1) {
-      EntitySnowball var2 = new EntitySnowball(this.worldObj, this);
-      double var3 = var1.posX - this.posX;
-      double var5 = var1.posY + (double)var1.getEyeHeight() - 1.100000023841858D - var2.posY;
-      double var7 = var1.posZ - this.posZ;
-      float var9 = MathHelper.sqrt_double(var3 * var3 + var7 * var7) * 0.2F;
-      var2.setThrowableHeading(var3, var5 + (double)var9, var7, 1.6F, 12.0F);
+   public void attackEntityWithRangedAttack(EntityLiving entityliving) {
+      EntitySnowball entitysnowball = new EntitySnowball(this.worldObj, this);
+      double d0 = entityliving.posX - this.posX;
+      double d1 = entityliving.posY + (double)entityliving.getEyeHeight() - 1.100000023841858D - entitysnowball.posY;
+      double d2 = entityliving.posZ - this.posZ;
+      float f = MathHelper.sqrt_double(d0 * d0 + d2 * d2) * 0.2F;
+      entitysnowball.setThrowableHeading(d0, d1 + (double)f, d2, 1.6F, 12.0F);
       this.func_85030_a("random.bow", 1.0F, 1.0F / (this.getRNG().nextFloat() * 0.4F + 0.8F));
-      this.worldObj.spawnEntityInWorld(var2);
+      this.worldObj.spawnEntityInWorld(entitysnowball);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntitySpider.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySpider.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntitySpider.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySpider.java
--- mcp-mcdev/net/minecraft/src/EntitySpider.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySpider.java	2012-11-29 20:44:09.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.Entity;
 import net.minecraft.src.EntityMob;
 import net.minecraft.src.EntitySkeleton;
@@ -9,11 +10,15 @@
 import net.minecraft.src.Potion;
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 
 public class EntitySpider extends EntityMob {
 
-   public EntitySpider(World var1) {
-      super(var1);
+   public EntitySpider(World world) {
+      super(world);
       this.texture = "/mob/spider.png";
       this.setSize(1.4F, 0.9F);
       this.moveSpeed = 0.8F;
@@ -41,10 +46,10 @@
    }
 
    protected Entity findPlayerToAttack() {
-      float var1 = this.getBrightness(1.0F);
-      if(var1 < 0.5F) {
-         double var2 = 16.0D;
-         return this.worldObj.getClosestVulnerablePlayerToEntity(this, var2);
+      float f = this.getBrightness(1.0F);
+      if(f < 0.5F) {
+         double d0 = 16.0D;
+         return this.worldObj.getClosestVulnerablePlayerToEntity(this, d0);
       } else {
          return null;
       }
@@ -62,41 +67,59 @@
       return "mob.spider.death";
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.spider.step", 0.15F, 1.0F);
    }
 
-   protected void attackEntity(Entity var1, float var2) {
-      float var3 = this.getBrightness(1.0F);
-      if(var3 > 0.5F && this.rand.nextInt(100) == 0) {
-         this.entityToAttack = null;
-      } else {
-         if(var2 > 2.0F && var2 < 6.0F && this.rand.nextInt(10) == 0) {
-            if(this.onGround) {
-               double var4 = var1.posX - this.posX;
-               double var6 = var1.posZ - this.posZ;
-               float var8 = MathHelper.sqrt_double(var4 * var4 + var6 * var6);
-               this.motionX = var4 / (double)var8 * 0.5D * 0.800000011920929D + this.motionX * 0.20000000298023224D;
-               this.motionZ = var6 / (double)var8 * 0.5D * 0.800000011920929D + this.motionZ * 0.20000000298023224D;
-               this.motionY = 0.4000000059604645D;
+   protected void attackEntity(Entity entity, float f) {
+      float f1 = this.getBrightness(1.0F);
+      if(f1 > 0.5F && this.rand.nextInt(100) == 0) {
+         EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), (org.bukkit.entity.Entity)null, TargetReason.FORGOT_TARGET);
+         this.worldObj.getServer().getPluginManager().callEvent(event);
+         if(!event.isCancelled()) {
+            if(event.getTarget() == null) {
+               this.entityToAttack = null;
+            } else {
+               this.entityToAttack = ((CraftEntity)event.getTarget()).getHandle();
             }
-         } else {
-            super.attackEntity(var1, var2);
-         }
 
+            return;
+         }
+      } else if(f > 2.0F && f < 6.0F && this.rand.nextInt(10) == 0) {
+         if(this.onGround) {
+            double d0 = entity.posX - this.posX;
+            double d1 = entity.posZ - this.posZ;
+            float f2 = MathHelper.sqrt_double(d0 * d0 + d1 * d1);
+            this.motionX = d0 / (double)f2 * 0.5D * 0.800000011920929D + this.motionX * 0.20000000298023224D;
+            this.motionZ = d1 / (double)f2 * 0.5D * 0.800000011920929D + this.motionZ * 0.20000000298023224D;
+            this.motionY = 0.4000000059604645D;
+         }
+      } else {
+         super.attackEntity(entity, f);
       }
+
    }
 
    protected int getDropItemId() {
       return Item.silk.shiftedIndex;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      super.dropFewItems(var1, var2);
-      if(var1 && (this.rand.nextInt(3) == 0 || this.rand.nextInt(1 + var2) > 0)) {
-         this.dropItem(Item.spiderEye.shiftedIndex, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int k = this.rand.nextInt(3);
+      if(i > 0) {
+         k += this.rand.nextInt(i + 1);
+      }
+
+      if(k > 0) {
+         loot.add(new org.bukkit.inventory.ItemStack(Item.silk.shiftedIndex, k));
+      }
+
+      if(flag && (this.rand.nextInt(3) == 0 || this.rand.nextInt(1 + i) > 0)) {
+         loot.add(new org.bukkit.inventory.ItemStack(Item.spiderEye.shiftedIndex, 1));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
    public boolean isOnLadder() {
@@ -109,32 +132,32 @@
       return EnumCreatureAttribute.ARTHROPOD;
    }
 
-   public boolean isPotionApplicable(PotionEffect var1) {
-      return var1.getPotionID() == Potion.poison.id?false:super.isPotionApplicable(var1);
+   public boolean isPotionApplicable(PotionEffect mobeffect) {
+      return mobeffect.getPotionID() == Potion.poison.id?false:super.isPotionApplicable(mobeffect);
    }
 
    public boolean isBesideClimbableBlock() {
       return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
    }
 
-   public void setBesideClimbableBlock(boolean var1) {
-      byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-      if(var1) {
-         var2 = (byte)(var2 | 1);
+   public void setBesideClimbableBlock(boolean flag) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      if(flag) {
+         b0 = (byte)(b0 | 1);
       } else {
-         var2 &= -2;
+         b0 &= -2;
       }
 
-      this.dataWatcher.updateObject(16, Byte.valueOf(var2));
+      this.dataWatcher.updateObject(16, Byte.valueOf(b0));
    }
 
    public void initCreature() {
       if(this.worldObj.rand.nextInt(100) == 0) {
-         EntitySkeleton var1 = new EntitySkeleton(this.worldObj);
-         var1.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
-         var1.initCreature();
-         this.worldObj.spawnEntityInWorld(var1);
-         var1.mountEntity(this);
+         EntitySkeleton entityskeleton = new EntitySkeleton(this.worldObj);
+         entityskeleton.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
+         entityskeleton.initCreature();
+         this.worldObj.spawnEntityInWorld(entityskeleton);
+         entityskeleton.mountEntity(this);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/EntitySquid.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySquid.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntitySquid.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySquid.java
--- mcp-mcdev/net/minecraft/src/EntitySquid.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntitySquid.java	2012-11-29 20:44:09.000000000 -0800
@@ -1,11 +1,12 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import net.minecraft.src.EntityWaterMob;
-import net.minecraft.src.Item;
-import net.minecraft.src.ItemStack;
 import net.minecraft.src.Material;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.TrigMath;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntitySquid extends EntityWaterMob {
 
@@ -25,8 +26,8 @@
    private float randomMotionVecZ = 0.0F;
 
 
-   public EntitySquid(World var1) {
-      super(var1);
+   public EntitySquid(World world) {
+      super(world);
       this.texture = "/mob/squid.png";
       this.setSize(0.95F, 0.95F);
       this.field_70864_bA = 1.0F / (this.rand.nextFloat() + 1.0F) * 0.2F;
@@ -56,13 +57,14 @@
       return 0;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.rand.nextInt(3 + var2) + 1;
-
-      for(int var4 = 0; var4 < var3; ++var4) {
-         this.entityDropItem(new ItemStack(Item.dyePowder, 1, 0), 0.0F);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int count = this.rand.nextInt(3 + i) + 1;
+      if(count > 0) {
+         loot.add(new org.bukkit.inventory.ItemStack(org.bukkit.Material.INK_SACK, count));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
    public boolean isInWater() {
@@ -84,11 +86,11 @@
       }
 
       if(this.isInWater()) {
-         float var1;
+         float f;
          if(this.field_70867_h < 3.1415927F) {
-            var1 = this.field_70867_h / 3.1415927F;
-            this.tentacleAngle = MathHelper.sin(var1 * var1 * 3.1415927F) * 3.1415927F * 0.25F;
-            if((double)var1 > 0.75D) {
+            f = this.field_70867_h / 3.1415927F;
+            this.tentacleAngle = MathHelper.sin(f * f * 3.1415927F) * 3.1415927F * 0.25F;
+            if((double)f > 0.75D) {
                this.randomMotionSpeed = 1.0F;
                this.field_70871_bB = 1.0F;
             } else {
@@ -106,11 +108,11 @@
             this.motionZ = (double)(this.randomMotionVecZ * this.randomMotionSpeed);
          }
 
-         var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-         this.renderYawOffset += (-((float)Math.atan2(this.motionX, this.motionZ)) * 180.0F / 3.1415927F - this.renderYawOffset) * 0.1F;
+         f = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+         this.renderYawOffset += (-((float)TrigMath.atan2(this.motionX, this.motionZ)) * 180.0F / 3.1415927F - this.renderYawOffset) * 0.1F;
          this.rotationYaw = this.renderYawOffset;
          this.field_70859_f += 3.1415927F * this.field_70871_bB * 1.5F;
-         this.field_70861_d += (-((float)Math.atan2((double)var1, this.motionY)) * 180.0F / 3.1415927F - this.field_70861_d) * 0.1F;
+         this.field_70861_d += (-((float)TrigMath.atan2((double)f, this.motionY)) * 180.0F / 3.1415927F - this.field_70861_d) * 0.1F;
       } else {
          this.tentacleAngle = MathHelper.abs(MathHelper.sin(this.field_70867_h)) * 3.1415927F * 0.25F;
          if(!this.worldObj.isRemote) {
@@ -125,7 +127,7 @@
 
    }
 
-   public void moveEntityWithHeading(float var1, float var2) {
+   public void moveEntityWithHeading(float f, float f1) {
       this.moveEntity(this.motionX, this.motionY, this.motionZ);
    }
 
@@ -134,10 +136,10 @@
       if(this.entityAge > 100) {
          this.randomMotionVecX = this.randomMotionVecY = this.randomMotionVecZ = 0.0F;
       } else if(this.rand.nextInt(50) == 0 || !this.inWater || this.randomMotionVecX == 0.0F && this.randomMotionVecY == 0.0F && this.randomMotionVecZ == 0.0F) {
-         float var1 = this.rand.nextFloat() * 3.1415927F * 2.0F;
-         this.randomMotionVecX = MathHelper.cos(var1) * 0.2F;
+         float f = this.rand.nextFloat() * 3.1415927F * 2.0F;
+         this.randomMotionVecX = MathHelper.cos(f) * 0.2F;
          this.randomMotionVecY = -0.1F + this.rand.nextFloat() * 0.2F;
-         this.randomMotionVecZ = MathHelper.sin(var1) * 0.2F;
+         this.randomMotionVecZ = MathHelper.sin(f) * 0.2F;
       }
 
       this.despawnEntity();
Binary files mcp-mcdev/net/minecraft/src/EntityTNTPrimed.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityTNTPrimed.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityTNTPrimed.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityTNTPrimed.java
--- mcp-mcdev/net/minecraft/src/EntityTNTPrimed.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityTNTPrimed.java	2012-11-29 20:44:09.000000000 -0800
@@ -3,31 +3,39 @@
 import net.minecraft.src.Entity;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.entity.Explosive;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
 
 public class EntityTNTPrimed extends Entity {
 
    public int fuse;
+   public float yield;
+   public boolean isIncendiary;
 
 
-   public EntityTNTPrimed(World var1) {
-      super(var1);
+   public EntityTNTPrimed(World world) {
+      super(world);
+      this.yield = 4.0F;
+      this.isIncendiary = false;
       this.fuse = 0;
       this.preventEntitySpawning = true;
       this.setSize(0.98F, 0.98F);
       this.yOffset = this.height / 2.0F;
    }
 
-   public EntityTNTPrimed(World var1, double var2, double var4, double var6) {
-      this(var1);
-      this.setPosition(var2, var4, var6);
-      float var8 = (float)(Math.random() * 3.1415927410125732D * 2.0D);
-      this.motionX = (double)(-((float)Math.sin((double)var8)) * 0.02F);
+   public EntityTNTPrimed(World world, double d0, double d1, double d2) {
+      this(world);
+      this.setPosition(d0, d1, d2);
+      float f = (float)(Math.random() * 3.1415927410125732D * 2.0D);
+      this.motionX = (double)(-((float)Math.sin((double)f)) * 0.02F);
       this.motionY = 0.20000000298023224D;
-      this.motionZ = (double)(-((float)Math.cos((double)var8)) * 0.02F);
+      this.motionZ = (double)(-((float)Math.cos((double)f)) * 0.02F);
       this.fuse = 80;
-      this.prevPosX = var2;
-      this.prevPosY = var4;
-      this.prevPosZ = var6;
+      this.prevPosX = d0;
+      this.prevPosY = d1;
+      this.prevPosZ = d2;
    }
 
    protected void entityInit() {}
@@ -56,10 +64,11 @@
       }
 
       if(this.fuse-- <= 0) {
-         this.setDead();
          if(!this.worldObj.isRemote) {
             this.explode();
          }
+
+         this.setDead();
       } else {
          this.worldObj.spawnParticle("smoke", this.posX, this.posY + 0.5D, this.posZ, 0.0D, 0.0D, 0.0D);
       }
@@ -67,15 +76,20 @@
    }
 
    private void explode() {
-      float var1 = 4.0F;
-      this.worldObj.createExplosion((Entity)null, this.posX, this.posY, this.posZ, var1, true);
+      CraftServer server = this.worldObj.getServer();
+      ExplosionPrimeEvent event = new ExplosionPrimeEvent((Explosive)CraftEntity.getEntity(server, this));
+      server.getPluginManager().callEvent(event);
+      if(!event.isCancelled()) {
+         this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, event.getRadius(), event.getFire(), true);
+      }
+
    }
 
-   protected void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setByte("Fuse", (byte)this.fuse);
+   protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setByte("Fuse", (byte)this.fuse);
    }
 
-   protected void readEntityFromNBT(NBTTagCompound var1) {
-      this.fuse = var1.getByte("Fuse");
+   protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.fuse = nbttagcompound.getByte("Fuse");
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityThrowable.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityThrowable.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityThrowable.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityThrowable.java
--- mcp-mcdev/net/minecraft/src/EntityThrowable.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityThrowable.java	2012-11-29 20:44:09.000000000 -0800
@@ -13,6 +13,9 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Projectile;
+import org.bukkit.event.entity.ProjectileHitEvent;
 
 public abstract class EntityThrowable extends Entity implements IProjectile {
 
@@ -22,41 +25,41 @@
    private int inTile = 0;
    protected boolean inGround = false;
    public int throwableShake = 0;
-   private EntityLiving thrower;
-   private String field_85053_h = null;
+   public EntityLiving thrower;
+   public String field_85053_h = null;
    private int ticksInGround;
    private int ticksInAir = 0;
 
 
-   public EntityThrowable(World var1) {
-      super(var1);
+   public EntityThrowable(World world) {
+      super(world);
       this.setSize(0.25F, 0.25F);
    }
 
    protected void entityInit() {}
 
-   public EntityThrowable(World var1, EntityLiving var2) {
-      super(var1);
-      this.thrower = var2;
+   public EntityThrowable(World world, EntityLiving entityliving) {
+      super(world);
+      this.thrower = entityliving;
       this.setSize(0.25F, 0.25F);
-      this.setLocationAndAngles(var2.posX, var2.posY + (double)var2.getEyeHeight(), var2.posZ, var2.rotationYaw, var2.rotationPitch);
+      this.setLocationAndAngles(entityliving.posX, entityliving.posY + (double)entityliving.getEyeHeight(), entityliving.posZ, entityliving.rotationYaw, entityliving.rotationPitch);
       this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * 0.16F);
       this.posY -= 0.10000000149011612D;
       this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * 0.16F);
       this.setPosition(this.posX, this.posY, this.posZ);
       this.yOffset = 0.0F;
-      float var3 = 0.4F;
-      this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * var3);
-      this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * var3);
-      this.motionY = (double)(-MathHelper.sin((this.rotationPitch + this.func_70183_g()) / 180.0F * 3.1415927F) * var3);
+      float f = 0.4F;
+      this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * f);
+      this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * 3.1415927F) * MathHelper.cos(this.rotationPitch / 180.0F * 3.1415927F) * f);
+      this.motionY = (double)(-MathHelper.sin((this.rotationPitch + this.func_70183_g()) / 180.0F * 3.1415927F) * f);
       this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, this.func_70182_d(), 1.0F);
    }
 
-   public EntityThrowable(World var1, double var2, double var4, double var6) {
-      super(var1);
+   public EntityThrowable(World world, double d0, double d1, double d2) {
+      super(world);
       this.ticksInGround = 0;
       this.setSize(0.25F, 0.25F);
-      this.setPosition(var2, var4, var6);
+      this.setPosition(d0, d1, d2);
       this.yOffset = 0.0F;
    }
 
@@ -68,23 +71,23 @@
       return 0.0F;
    }
 
-   public void setThrowableHeading(double var1, double var3, double var5, float var7, float var8) {
-      float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-      var1 /= (double)var9;
-      var3 /= (double)var9;
-      var5 /= (double)var9;
-      var1 += this.rand.nextGaussian() * 0.007499999832361937D * (double)var8;
-      var3 += this.rand.nextGaussian() * 0.007499999832361937D * (double)var8;
-      var5 += this.rand.nextGaussian() * 0.007499999832361937D * (double)var8;
-      var1 *= (double)var7;
-      var3 *= (double)var7;
-      var5 *= (double)var7;
-      this.motionX = var1;
-      this.motionY = var3;
-      this.motionZ = var5;
-      float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-      this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / 3.1415927410125732D);
-      this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / 3.1415927410125732D);
+   public void setThrowableHeading(double d0, double d1, double d2, float f, float f1) {
+      float f2 = MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2);
+      d0 /= (double)f2;
+      d1 /= (double)f2;
+      d2 /= (double)f2;
+      d0 += this.rand.nextGaussian() * 0.007499999832361937D * (double)f1;
+      d1 += this.rand.nextGaussian() * 0.007499999832361937D * (double)f1;
+      d2 += this.rand.nextGaussian() * 0.007499999832361937D * (double)f1;
+      d0 *= (double)f;
+      d1 *= (double)f;
+      d2 *= (double)f;
+      this.motionX = d0;
+      this.motionY = d1;
+      this.motionZ = d2;
+      float f3 = MathHelper.sqrt_double(d0 * d0 + d2 * d2);
+      this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(d0, d2) * 180.0D / 3.1415927410125732D);
+      this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(d1, (double)f3) * 180.0D / 3.1415927410125732D);
       this.ticksInGround = 0;
    }
 
@@ -98,8 +101,8 @@
       }
 
       if(this.inGround) {
-         int var1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-         if(var1 == this.inTile) {
+         int vec3d = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
+         if(vec3d == this.inTile) {
             ++this.ticksInGround;
             if(this.ticksInGround == 1200) {
                this.setDead();
@@ -119,56 +122,60 @@
       }
 
       Vec3 var18 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
-      Vec3 var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-      MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var18, var2);
+      Vec3 vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+      MovingObjectPosition movingobjectposition = this.worldObj.rayTraceBlocks(var18, vec3d1);
       var18 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
-      var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-      if(var3 != null) {
-         var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
+      vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
+      if(movingobjectposition != null) {
+         vec3d1 = this.worldObj.getWorldVec3Pool().getVecFromPool(movingobjectposition.hitVec.xCoord, movingobjectposition.hitVec.yCoord, movingobjectposition.hitVec.zCoord);
       }
 
       if(!this.worldObj.isRemote) {
-         Entity var4 = null;
-         List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-         double var6 = 0.0D;
-         EntityLiving var8 = this.func_85052_h();
-
-         for(int var9 = 0; var9 < var5.size(); ++var9) {
-            Entity var10 = (Entity)var5.get(var9);
-            if(var10.canBeCollidedWith() && (var10 != var8 || this.ticksInAir >= 5)) {
-               float var11 = 0.3F;
-               AxisAlignedBB var12 = var10.boundingBox.expand((double)var11, (double)var11, (double)var11);
-               MovingObjectPosition var13 = var12.calculateIntercept(var18, var2);
-               if(var13 != null) {
-                  double var14 = var18.distanceTo(var13.hitVec);
-                  if(var14 < var6 || var6 == 0.0D) {
-                     var4 = var10;
-                     var6 = var14;
+         Entity f1 = null;
+         List f2 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
+         double d0 = 0.0D;
+         EntityLiving f4 = this.func_85052_h();
+
+         for(int j = 0; j < f2.size(); ++j) {
+            Entity entity1 = (Entity)f2.get(j);
+            if(entity1.canBeCollidedWith() && (entity1 != f4 || this.ticksInAir >= 5)) {
+               float f = 0.3F;
+               AxisAlignedBB axisalignedbb = entity1.boundingBox.expand((double)f, (double)f, (double)f);
+               MovingObjectPosition movingobjectposition1 = axisalignedbb.calculateIntercept(var18, vec3d1);
+               if(movingobjectposition1 != null) {
+                  double d1 = var18.squareDistanceTo(movingobjectposition1.hitVec);
+                  if(d1 < d0 || d0 == 0.0D) {
+                     f1 = entity1;
+                     d0 = d1;
                   }
                }
             }
          }
 
-         if(var4 != null) {
-            var3 = new MovingObjectPosition(var4);
+         if(f1 != null) {
+            movingobjectposition = new MovingObjectPosition(f1);
          }
       }
 
-      if(var3 != null) {
-         if(var3.typeOfHit == EnumMovingObjectType.TILE && this.worldObj.getBlockId(var3.blockX, var3.blockY, var3.blockZ) == Block.portal.blockID) {
+      if(movingobjectposition != null) {
+         if(movingobjectposition.typeOfHit == EnumMovingObjectType.TILE && this.worldObj.getBlockId(movingobjectposition.blockX, movingobjectposition.blockY, movingobjectposition.blockZ) == Block.portal.blockID) {
             this.setInPortal();
          } else {
-            this.onImpact(var3);
+            this.onImpact(movingobjectposition);
+            if(this.isDead) {
+               ProjectileHitEvent var19 = new ProjectileHitEvent((Projectile)this.getBukkitEntity());
+               Bukkit.getPluginManager().callEvent(var19);
+            }
          }
       }
 
       this.posX += this.motionX;
       this.posY += this.motionY;
       this.posZ += this.motionZ;
-      float var19 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+      float var21 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
       this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / 3.1415927410125732D);
 
-      for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var19) * 180.0D / 3.1415927410125732D); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+      for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var21) * 180.0D / 3.1415927410125732D); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
          ;
       }
 
@@ -187,11 +194,11 @@
       this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
       this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
       float var20 = 0.99F;
-      float var16 = this.getGravityVelocity();
+      float f3 = this.getGravityVelocity();
       if(this.isInWater()) {
-         for(int var17 = 0; var17 < 4; ++var17) {
-            float var21 = 0.25F;
-            this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var21, this.posY - this.motionY * (double)var21, this.posZ - this.motionZ * (double)var21, this.motionX, this.motionY, this.motionZ);
+         for(int k = 0; k < 4; ++k) {
+            float var22 = 0.25F;
+            this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var22, this.posY - this.motionY * (double)var22, this.posZ - this.motionZ * (double)var22, this.motionX, this.motionY, this.motionZ);
          }
 
          var20 = 0.8F;
@@ -200,7 +207,7 @@
       this.motionX *= (double)var20;
       this.motionY *= (double)var20;
       this.motionZ *= (double)var20;
-      this.motionY -= (double)var16;
+      this.motionY -= (double)f3;
       this.setPosition(this.posX, this.posY, this.posZ);
    }
 
@@ -210,28 +217,28 @@
 
    protected abstract void onImpact(MovingObjectPosition var1);
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setShort("xTile", (short)this.xTile);
-      var1.setShort("yTile", (short)this.yTile);
-      var1.setShort("zTile", (short)this.zTile);
-      var1.setByte("inTile", (byte)this.inTile);
-      var1.setByte("shake", (byte)this.throwableShake);
-      var1.setByte("inGround", (byte)(this.inGround?1:0));
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setShort("xTile", (short)this.xTile);
+      nbttagcompound.setShort("yTile", (short)this.yTile);
+      nbttagcompound.setShort("zTile", (short)this.zTile);
+      nbttagcompound.setByte("inTile", (byte)this.inTile);
+      nbttagcompound.setByte("shake", (byte)this.throwableShake);
+      nbttagcompound.setByte("inGround", (byte)(this.inGround?1:0));
       if((this.field_85053_h == null || this.field_85053_h.length() == 0) && this.thrower != null && this.thrower instanceof EntityPlayer) {
          this.field_85053_h = this.thrower.getEntityName();
       }
 
-      var1.setString("ownerName", this.field_85053_h == null?"":this.field_85053_h);
+      nbttagcompound.setString("ownerName", this.field_85053_h == null?"":this.field_85053_h);
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      this.xTile = var1.getShort("xTile");
-      this.yTile = var1.getShort("yTile");
-      this.zTile = var1.getShort("zTile");
-      this.inTile = var1.getByte("inTile") & 255;
-      this.throwableShake = var1.getByte("shake") & 255;
-      this.inGround = var1.getByte("inGround") == 1;
-      this.field_85053_h = var1.getString("ownerName");
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.xTile = nbttagcompound.getShort("xTile");
+      this.yTile = nbttagcompound.getShort("yTile");
+      this.zTile = nbttagcompound.getShort("zTile");
+      this.inTile = nbttagcompound.getByte("inTile") & 255;
+      this.throwableShake = nbttagcompound.getByte("shake") & 255;
+      this.inGround = nbttagcompound.getByte("inGround") == 1;
+      this.field_85053_h = nbttagcompound.getString("ownerName");
       if(this.field_85053_h != null && this.field_85053_h.length() == 0) {
          this.field_85053_h = null;
       }
Binary files mcp-mcdev/net/minecraft/src/EntityTracker.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityTracker.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityTracker.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityTracker.java
--- mcp-mcdev/net/minecraft/src/EntityTracker.java	2012-11-29 21:14:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityTracker.java	2012-11-29 20:44:09.000000000 -0800
@@ -40,176 +40,175 @@
 
    private final WorldServer theWorld;
    private Set trackedEntitySet = new HashSet();
-   private IntHashMap trackedEntityHashTable = new IntHashMap();
+   public IntHashMap trackedEntityHashTable = new IntHashMap();
    private int maxTrackingDistanceThreshold;
 
 
-   public EntityTracker(WorldServer var1) {
-      this.theWorld = var1;
-      this.maxTrackingDistanceThreshold = var1.getMinecraftServer().getConfigurationManager().getEntityViewDistance();
+   public EntityTracker(WorldServer worldserver) {
+      this.theWorld = worldserver;
+      this.maxTrackingDistanceThreshold = worldserver.getMinecraftServer().getConfigurationManager().getEntityViewDistance();
    }
 
-   public void trackEntity(Entity var1) {
-      if(var1 instanceof EntityPlayerMP) {
-         this.trackEntity(var1, 512, 2);
-         EntityPlayerMP var2 = (EntityPlayerMP)var1;
-         Iterator var3 = this.trackedEntitySet.iterator();
-
-         while(var3.hasNext()) {
-            EntityTrackerEntry var4 = (EntityTrackerEntry)var3.next();
-            if(var4.trackedEntity != var2) {
-               var4.updatePlayerEntity(var2);
+   public synchronized void trackEntity(Entity entity) {
+      if(entity instanceof EntityPlayerMP) {
+         this.trackEntity(entity, 512, 2);
+         EntityPlayerMP entityplayer = (EntityPlayerMP)entity;
+         Iterator iterator = this.trackedEntitySet.iterator();
+
+         while(iterator.hasNext()) {
+            EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)iterator.next();
+            if(entitytrackerentry.trackedEntity != entityplayer) {
+               entitytrackerentry.updatePlayerEntity(entityplayer);
             }
          }
-      } else if(var1 instanceof EntityFishHook) {
-         this.trackEntity(var1, 64, 5, true);
-      } else if(var1 instanceof EntityArrow) {
-         this.trackEntity(var1, 64, 20, false);
-      } else if(var1 instanceof EntitySmallFireball) {
-         this.trackEntity(var1, 64, 10, false);
-      } else if(var1 instanceof EntityFireball) {
-         this.trackEntity(var1, 64, 10, false);
-      } else if(var1 instanceof EntitySnowball) {
-         this.trackEntity(var1, 64, 10, true);
-      } else if(var1 instanceof EntityEnderPearl) {
-         this.trackEntity(var1, 64, 10, true);
-      } else if(var1 instanceof EntityEnderEye) {
-         this.trackEntity(var1, 64, 4, true);
-      } else if(var1 instanceof EntityEgg) {
-         this.trackEntity(var1, 64, 10, true);
-      } else if(var1 instanceof EntityPotion) {
-         this.trackEntity(var1, 64, 10, true);
-      } else if(var1 instanceof EntityExpBottle) {
-         this.trackEntity(var1, 64, 10, true);
-      } else if(var1 instanceof EntityItem) {
-         this.trackEntity(var1, 64, 20, true);
-      } else if(var1 instanceof EntityMinecart) {
-         this.trackEntity(var1, 80, 3, true);
-      } else if(var1 instanceof EntityBoat) {
-         this.trackEntity(var1, 80, 3, true);
-      } else if(var1 instanceof EntitySquid) {
-         this.trackEntity(var1, 64, 3, true);
-      } else if(var1 instanceof EntityWither) {
-         this.trackEntity(var1, 80, 3, false);
-      } else if(var1 instanceof EntityBat) {
-         this.trackEntity(var1, 80, 3, false);
-      } else if(var1 instanceof IAnimals) {
-         this.trackEntity(var1, 80, 3, true);
-      } else if(var1 instanceof EntityDragon) {
-         this.trackEntity(var1, 160, 3, true);
-      } else if(var1 instanceof EntityTNTPrimed) {
-         this.trackEntity(var1, 160, 10, true);
-      } else if(var1 instanceof EntityFallingSand) {
-         this.trackEntity(var1, 160, 20, true);
-      } else if(var1 instanceof EntityPainting) {
-         this.trackEntity(var1, 160, Integer.MAX_VALUE, false);
-      } else if(var1 instanceof EntityXPOrb) {
-         this.trackEntity(var1, 160, 20, true);
-      } else if(var1 instanceof EntityEnderCrystal) {
-         this.trackEntity(var1, 256, Integer.MAX_VALUE, false);
-      } else if(var1 instanceof EntityItemFrame) {
-         this.trackEntity(var1, 160, Integer.MAX_VALUE, false);
-      }
-
-   }
-
-   public void trackEntity(Entity var1, int var2, int var3) {
-      this.trackEntity(var1, var2, var3, false);
-   }
-
-   public void trackEntity(Entity var1, int var2, int var3, boolean var4) {
-      if(var2 > this.maxTrackingDistanceThreshold) {
-         var2 = this.maxTrackingDistanceThreshold;
-      }
-
-      if(this.trackedEntityHashTable.containsItem(var1.entityId)) {
-         throw new IllegalStateException("Entity is already tracked!");
-      } else {
-         EntityTrackerEntry var5 = new EntityTrackerEntry(var1, var2, var3, var4);
-         this.trackedEntitySet.add(var5);
-         this.trackedEntityHashTable.addKey(var1.entityId, var5);
-         var5.updatePlayerEntities(this.theWorld.playerEntities);
-      }
-   }
-
-   public void untrackEntity(Entity var1) {
-      if(var1 instanceof EntityPlayerMP) {
-         EntityPlayerMP var2 = (EntityPlayerMP)var1;
-         Iterator var3 = this.trackedEntitySet.iterator();
-
-         while(var3.hasNext()) {
-            EntityTrackerEntry var4 = (EntityTrackerEntry)var3.next();
-            var4.removeFromTrackedPlayers(var2);
+      } else if(entity instanceof EntityFishHook) {
+         this.trackEntity(entity, 64, 5, true);
+      } else if(entity instanceof EntityArrow) {
+         this.trackEntity(entity, 64, 20, false);
+      } else if(entity instanceof EntitySmallFireball) {
+         this.trackEntity(entity, 64, 10, false);
+      } else if(entity instanceof EntityFireball) {
+         this.trackEntity(entity, 64, 10, false);
+      } else if(entity instanceof EntitySnowball) {
+         this.trackEntity(entity, 64, 10, true);
+      } else if(entity instanceof EntityEnderPearl) {
+         this.trackEntity(entity, 64, 10, true);
+      } else if(entity instanceof EntityEnderEye) {
+         this.trackEntity(entity, 64, 4, true);
+      } else if(entity instanceof EntityEgg) {
+         this.trackEntity(entity, 64, 10, true);
+      } else if(entity instanceof EntityPotion) {
+         this.trackEntity(entity, 64, 10, true);
+      } else if(entity instanceof EntityExpBottle) {
+         this.trackEntity(entity, 64, 10, true);
+      } else if(entity instanceof EntityItem) {
+         this.trackEntity(entity, 64, 20, true);
+      } else if(entity instanceof EntityMinecart) {
+         this.trackEntity(entity, 80, 3, true);
+      } else if(entity instanceof EntityBoat) {
+         this.trackEntity(entity, 80, 3, true);
+      } else if(entity instanceof EntitySquid) {
+         this.trackEntity(entity, 64, 3, true);
+      } else if(entity instanceof EntityWither) {
+         this.trackEntity(entity, 80, 3, false);
+      } else if(entity instanceof EntityBat) {
+         this.trackEntity(entity, 80, 3, false);
+      } else if(entity instanceof IAnimals) {
+         this.trackEntity(entity, 80, 3, true);
+      } else if(entity instanceof EntityDragon) {
+         this.trackEntity(entity, 160, 3, true);
+      } else if(entity instanceof EntityTNTPrimed) {
+         this.trackEntity(entity, 160, 10, true);
+      } else if(entity instanceof EntityFallingSand) {
+         this.trackEntity(entity, 160, 20, true);
+      } else if(entity instanceof EntityPainting) {
+         this.trackEntity(entity, 160, Integer.MAX_VALUE, false);
+      } else if(entity instanceof EntityXPOrb) {
+         this.trackEntity(entity, 160, 20, true);
+      } else if(entity instanceof EntityEnderCrystal) {
+         this.trackEntity(entity, 256, Integer.MAX_VALUE, false);
+      } else if(entity instanceof EntityItemFrame) {
+         this.trackEntity(entity, 160, Integer.MAX_VALUE, false);
+      }
+
+   }
+
+   public void trackEntity(Entity entity, int i, int j) {
+      this.trackEntity(entity, i, j, false);
+   }
+
+   public synchronized void trackEntity(Entity entity, int i, int j, boolean flag) {
+      if(i > this.maxTrackingDistanceThreshold) {
+         i = this.maxTrackingDistanceThreshold;
+      }
+
+      if(!this.trackedEntityHashTable.containsItem(entity.entityId)) {
+         EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(entity, i, j, flag);
+         this.trackedEntitySet.add(entitytrackerentry);
+         this.trackedEntityHashTable.addKey(entity.entityId, entitytrackerentry);
+         entitytrackerentry.updatePlayerEntities(this.theWorld.playerEntities);
+      }
+
+   }
+
+   public synchronized void untrackEntity(Entity entity) {
+      if(entity instanceof EntityPlayerMP) {
+         EntityPlayerMP entitytrackerentry1 = (EntityPlayerMP)entity;
+         Iterator iterator = this.trackedEntitySet.iterator();
+
+         while(iterator.hasNext()) {
+            EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)iterator.next();
+            entitytrackerentry.removeFromTrackedPlayers(entitytrackerentry1);
          }
       }
 
-      EntityTrackerEntry var5 = (EntityTrackerEntry)this.trackedEntityHashTable.removeObject(var1.entityId);
-      if(var5 != null) {
-         this.trackedEntitySet.remove(var5);
-         var5.sendDestroyEntityPacketToTrackedPlayers();
+      EntityTrackerEntry entitytrackerentry11 = (EntityTrackerEntry)this.trackedEntityHashTable.removeObject(entity.entityId);
+      if(entitytrackerentry11 != null) {
+         this.trackedEntitySet.remove(entitytrackerentry11);
+         entitytrackerentry11.sendDestroyEntityPacketToTrackedPlayers();
       }
 
    }
 
-   public void updateTrackedEntities() {
-      ArrayList var1 = new ArrayList();
-      Iterator var2 = this.trackedEntitySet.iterator();
+   public synchronized void updateTrackedEntities() {
+      ArrayList arraylist = new ArrayList();
+      Iterator iterator = this.trackedEntitySet.iterator();
 
-      while(var2.hasNext()) {
-         EntityTrackerEntry var3 = (EntityTrackerEntry)var2.next();
-         var3.updatePlayerList(this.theWorld.playerEntities);
-         if(var3.playerEntitiesUpdated && var3.trackedEntity instanceof EntityPlayerMP) {
-            var1.add((EntityPlayerMP)var3.trackedEntity);
+      while(iterator.hasNext()) {
+         EntityTrackerEntry i = (EntityTrackerEntry)iterator.next();
+         i.updatePlayerList(this.theWorld.playerEntities);
+         if(i.playerEntitiesUpdated && i.trackedEntity instanceof EntityPlayerMP) {
+            arraylist.add((EntityPlayerMP)i.trackedEntity);
          }
       }
 
-      for(int var6 = 0; var6 < var1.size(); ++var6) {
-         EntityPlayerMP var7 = (EntityPlayerMP)var1.get(var6);
-         Iterator var4 = this.trackedEntitySet.iterator();
-
-         while(var4.hasNext()) {
-            EntityTrackerEntry var5 = (EntityTrackerEntry)var4.next();
-            if(var5.trackedEntity != var7) {
-               var5.updatePlayerEntity(var7);
+      for(int var7 = 0; var7 < arraylist.size(); ++var7) {
+         EntityPlayerMP entityplayer = (EntityPlayerMP)arraylist.get(var7);
+         Iterator iterator1 = this.trackedEntitySet.iterator();
+
+         while(iterator1.hasNext()) {
+            EntityTrackerEntry entitytrackerentry1 = (EntityTrackerEntry)iterator1.next();
+            if(entitytrackerentry1.trackedEntity != entityplayer) {
+               entitytrackerentry1.updatePlayerEntity(entityplayer);
             }
          }
       }
 
    }
 
-   public void sendPacketToTrackedPlayers(Entity var1, Packet var2) {
-      EntityTrackerEntry var3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityId);
-      if(var3 != null) {
-         var3.sendPacketToTrackedPlayers(var2);
+   public synchronized void sendPacketToTrackedPlayers(Entity entity, Packet packet) {
+      EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(entity.entityId);
+      if(entitytrackerentry != null) {
+         entitytrackerentry.sendPacketToTrackedPlayers(packet);
       }
 
    }
 
-   public void sendPacketToTrackedPlayersAndTrackedEntity(Entity var1, Packet var2) {
-      EntityTrackerEntry var3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityId);
-      if(var3 != null) {
-         var3.sendPacketToTrackedPlayersAndTrackedEntity(var2);
+   public synchronized void sendPacketToTrackedPlayersAndTrackedEntity(Entity entity, Packet packet) {
+      EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(entity.entityId);
+      if(entitytrackerentry != null) {
+         entitytrackerentry.sendPacketToTrackedPlayersAndTrackedEntity(packet);
       }
 
    }
 
-   public void removeTrackedPlayerSymmetric(EntityPlayerMP var1) {
-      Iterator var2 = this.trackedEntitySet.iterator();
+   public synchronized void removeTrackedPlayerSymmetric(EntityPlayerMP entityplayer) {
+      Iterator iterator = this.trackedEntitySet.iterator();
 
-      while(var2.hasNext()) {
-         EntityTrackerEntry var3 = (EntityTrackerEntry)var2.next();
-         var3.removeTrackedPlayerSymmetric(var1);
+      while(iterator.hasNext()) {
+         EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)iterator.next();
+         entitytrackerentry.removeTrackedPlayerSymmetric(entityplayer);
       }
 
    }
 
-   public void func_85172_a(EntityPlayerMP var1, Chunk var2) {
-      Iterator var3 = this.trackedEntitySet.iterator();
+   public void func_85172_a(EntityPlayerMP entityplayer, Chunk chunk) {
+      Iterator iterator = this.trackedEntitySet.iterator();
 
-      while(var3.hasNext()) {
-         EntityTrackerEntry var4 = (EntityTrackerEntry)var3.next();
-         if(var4.trackedEntity != var1 && var4.trackedEntity.chunkCoordX == var2.xPosition && var4.trackedEntity.chunkCoordZ == var2.zPosition) {
-            var4.updatePlayerEntity(var1);
+      while(iterator.hasNext()) {
+         EntityTrackerEntry entitytrackerentry = (EntityTrackerEntry)iterator.next();
+         if(entitytrackerentry.trackedEntity != entityplayer && entitytrackerentry.trackedEntity.chunkCoordX == chunk.xPosition && entitytrackerentry.trackedEntity.chunkCoordZ == chunk.zPosition) {
+            entitytrackerentry.updatePlayerEntity(entityplayer);
          }
       }
 
Binary files mcp-mcdev/net/minecraft/src/EntityTrackerEntry.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityTrackerEntry.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityTrackerEntry.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityTrackerEntry.java
--- mcp-mcdev/net/minecraft/src/EntityTrackerEntry.java	2012-11-29 21:14:54.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityTrackerEntry.java	2012-11-29 20:44:09.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -55,6 +56,10 @@
 import net.minecraft.src.Packet41EntityEffect;
 import net.minecraft.src.Packet5PlayerInventory;
 import net.minecraft.src.PotionEffect;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerVelocityEvent;
+import org.bukkit.util.Vector;
 
 public class EntityTrackerEntry {
 
@@ -83,28 +88,28 @@
    public Set trackedPlayers = new HashSet();
 
 
-   public EntityTrackerEntry(Entity var1, int var2, int var3, boolean var4) {
-      this.trackedEntity = var1;
-      this.trackingDistanceThreshold = var2;
-      this.updateFrequency = var3;
-      this.sendVelocityUpdates = var4;
-      this.encodedPosX = MathHelper.floor_double(var1.posX * 32.0D);
-      this.encodedPosY = MathHelper.floor_double(var1.posY * 32.0D);
-      this.encodedPosZ = MathHelper.floor_double(var1.posZ * 32.0D);
-      this.encodedRotationYaw = MathHelper.floor_float(var1.rotationYaw * 256.0F / 360.0F);
-      this.encodedRotationPitch = MathHelper.floor_float(var1.rotationPitch * 256.0F / 360.0F);
-      this.lastHeadMotion = MathHelper.floor_float(var1.setRotationYawHead() * 256.0F / 360.0F);
+   public EntityTrackerEntry(Entity entity, int i, int j, boolean flag) {
+      this.trackedEntity = entity;
+      this.trackingDistanceThreshold = i;
+      this.updateFrequency = j;
+      this.sendVelocityUpdates = flag;
+      this.encodedPosX = MathHelper.floor_double(entity.posX * 32.0D);
+      this.encodedPosY = MathHelper.floor_double(entity.posY * 32.0D);
+      this.encodedPosZ = MathHelper.floor_double(entity.posZ * 32.0D);
+      this.encodedRotationYaw = MathHelper.floor_float(entity.rotationYaw * 256.0F / 360.0F);
+      this.encodedRotationPitch = MathHelper.floor_float(entity.rotationPitch * 256.0F / 360.0F);
+      this.lastHeadMotion = MathHelper.floor_float(entity.setRotationYawHead() * 256.0F / 360.0F);
    }
 
-   public boolean equals(Object var1) {
-      return var1 instanceof EntityTrackerEntry?((EntityTrackerEntry)var1).trackedEntity.entityId == this.trackedEntity.entityId:false;
+   public boolean equals(Object object) {
+      return object instanceof EntityTrackerEntry?((EntityTrackerEntry)object).trackedEntity.entityId == this.trackedEntity.entityId:false;
    }
 
    public int hashCode() {
       return this.trackedEntity.entityId;
    }
 
-   public void updatePlayerList(List var1) {
+   public void updatePlayerList(List list) {
       this.playerEntitiesUpdated = false;
       if(!this.firstUpdateDone || this.trackedEntity.getDistanceSq(this.lastTrackedEntityPosX, this.lastTrackedEntityPosY, this.lastTrackedEntityPosZ) > 16.0D) {
          this.lastTrackedEntityPosX = this.trackedEntity.posX;
@@ -112,7 +117,7 @@
          this.lastTrackedEntityPosZ = this.trackedEntity.posZ;
          this.firstUpdateDone = true;
          this.playerEntitiesUpdated = true;
-         this.updatePlayerEntities(var1);
+         this.updatePlayerEntities(list);
       }
 
       if(this.field_85178_v != this.trackedEntity.ridingEntity) {
@@ -122,64 +127,79 @@
 
       if(this.trackedEntity instanceof EntityItemFrame && this.updateCounter % 10 == 0) {
          EntityItemFrame var24 = (EntityItemFrame)this.trackedEntity;
-         ItemStack var25 = var24.getDisplayedItem();
-         if(var25 != null && var25.getItem() instanceof ItemMap) {
-            MapData var27 = Item.map.getMapData(var25, this.trackedEntity.worldObj);
-            Iterator var30 = var1.iterator();
-
-            while(var30.hasNext()) {
-               EntityPlayer var31 = (EntityPlayer)var30.next();
-               EntityPlayerMP var32 = (EntityPlayerMP)var31;
-               var27.updateVisiblePlayers(var32, var25);
-               if(var32.playerNetServerHandler.getNumChunkDataPackets() <= 5) {
-                  Packet var33 = Item.map.getUpdatePacket(var25, this.trackedEntity.worldObj, var32);
-                  if(var33 != null) {
-                     var32.playerNetServerHandler.sendPacket(var33);
+         ItemStack var26 = var24.getDisplayedItem();
+         if(var26 != null && var26.getItem() instanceof ItemMap) {
+            MapData var29 = Item.map.getMapData(var26, this.trackedEntity.worldObj);
+            Iterator var34 = list.iterator();
+
+            while(var34.hasNext()) {
+               EntityPlayer var35 = (EntityPlayer)var34.next();
+               EntityPlayerMP var36 = (EntityPlayerMP)var35;
+               var29.updateVisiblePlayers(var36, var26);
+               if(var36.playerNetServerHandler.getNumChunkDataPackets() <= 5) {
+                  Packet var37 = Item.map.getUpdatePacket(var26, this.trackedEntity.worldObj, var36);
+                  if(var37 != null) {
+                     var36.playerNetServerHandler.sendPacket(var37);
                   }
                }
             }
          }
 
-         DataWatcher var29 = this.trackedEntity.getDataWatcher();
-         if(var29.hasObjectChanged()) {
-            this.sendPacketToTrackedPlayersAndTrackedEntity(new Packet40EntityMetadata(this.trackedEntity.entityId, var29, false));
+         DataWatcher var32 = this.trackedEntity.getDataWatcher();
+         if(var32.hasObjectChanged()) {
+            this.sendPacketToTrackedPlayersAndTrackedEntity(new Packet40EntityMetadata(this.trackedEntity.entityId, var32, false));
          }
       } else if(this.updateCounter++ % this.updateFrequency == 0 || this.trackedEntity.isAirBorne) {
-         int var2;
-         int var3;
+         int cancelled;
+         int player;
          if(this.trackedEntity.ridingEntity == null) {
             ++this.ticksSinceLastForcedTeleport;
-            var2 = this.trackedEntity.myEntitySize.multiplyBy32AndRound(this.trackedEntity.posX);
-            var3 = MathHelper.floor_double(this.trackedEntity.posY * 32.0D);
-            int var4 = this.trackedEntity.myEntitySize.multiplyBy32AndRound(this.trackedEntity.posZ);
-            int var5 = MathHelper.floor_float(this.trackedEntity.rotationYaw * 256.0F / 360.0F);
-            int var6 = MathHelper.floor_float(this.trackedEntity.rotationPitch * 256.0F / 360.0F);
-            int var7 = var2 - this.encodedPosX;
-            int var8 = var3 - this.encodedPosY;
-            int var9 = var4 - this.encodedPosZ;
-            Object var10 = null;
-            boolean var11 = Math.abs(var7) >= 4 || Math.abs(var8) >= 4 || Math.abs(var9) >= 4 || this.updateCounter % 60 == 0;
-            boolean var12 = Math.abs(var5 - this.encodedRotationYaw) >= 4 || Math.abs(var6 - this.encodedRotationPitch) >= 4;
-            if(var7 >= -128 && var7 < 128 && var8 >= -128 && var8 < 128 && var9 >= -128 && var9 < 128 && this.ticksSinceLastForcedTeleport <= 400 && !this.ridingEntity) {
-               if(var11 && var12) {
-                  var10 = new Packet33RelEntityMoveLook(this.trackedEntity.entityId, (byte)var7, (byte)var8, (byte)var9, (byte)var5, (byte)var6);
-               } else if(var11) {
-                  var10 = new Packet31RelEntityMove(this.trackedEntity.entityId, (byte)var7, (byte)var8, (byte)var9);
-               } else if(var12) {
-                  var10 = new Packet32EntityLook(this.trackedEntity.entityId, (byte)var5, (byte)var6);
+            cancelled = this.trackedEntity.myEntitySize.multiplyBy32AndRound(this.trackedEntity.posX);
+            player = MathHelper.floor_double(this.trackedEntity.posY * 32.0D);
+            int velocity = this.trackedEntity.myEntitySize.multiplyBy32AndRound(this.trackedEntity.posZ);
+            int event = MathHelper.floor_float(this.trackedEntity.rotationYaw * 256.0F / 360.0F);
+            int i1 = MathHelper.floor_float(this.trackedEntity.rotationPitch * 256.0F / 360.0F);
+            int j1 = cancelled - this.encodedPosX;
+            int k1 = player - this.encodedPosY;
+            int l1 = velocity - this.encodedPosZ;
+            Object object = null;
+            boolean flag = Math.abs(j1) >= 4 || Math.abs(k1) >= 4 || Math.abs(l1) >= 4 || this.updateCounter % 60 == 0;
+            boolean flag1 = Math.abs(event - this.encodedRotationYaw) >= 4 || Math.abs(i1 - this.encodedRotationPitch) >= 4;
+            if(flag) {
+               this.encodedPosX = cancelled;
+               this.encodedPosY = player;
+               this.encodedPosZ = velocity;
+            }
+
+            if(flag1) {
+               this.encodedRotationYaw = event;
+               this.encodedRotationPitch = i1;
+            }
+
+            if(j1 >= -128 && j1 < 128 && k1 >= -128 && k1 < 128 && l1 >= -128 && l1 < 128 && this.ticksSinceLastForcedTeleport <= 400 && !this.ridingEntity) {
+               if(flag && flag1) {
+                  object = new Packet33RelEntityMoveLook(this.trackedEntity.entityId, (byte)j1, (byte)k1, (byte)l1, (byte)event, (byte)i1);
+               } else if(flag) {
+                  object = new Packet31RelEntityMove(this.trackedEntity.entityId, (byte)j1, (byte)k1, (byte)l1);
+               } else if(flag1) {
+                  object = new Packet32EntityLook(this.trackedEntity.entityId, (byte)event, (byte)i1);
                }
             } else {
                this.ticksSinceLastForcedTeleport = 0;
-               var10 = new Packet34EntityTeleport(this.trackedEntity.entityId, var2, var3, var4, (byte)var5, (byte)var6);
+               if(this.trackedEntity instanceof EntityPlayerMP) {
+                  this.updatePlayerEntities(new ArrayList(this.trackedPlayers));
+               }
+
+               object = new Packet34EntityTeleport(this.trackedEntity.entityId, cancelled, player, velocity, (byte)event, (byte)i1);
             }
 
             if(this.sendVelocityUpdates) {
-               double var13 = this.trackedEntity.motionX - this.lastTrackedEntityMotionX;
-               double var15 = this.trackedEntity.motionY - this.lastTrackedEntityMotionY;
-               double var17 = this.trackedEntity.motionZ - this.lastTrackedEntityMotionZ;
-               double var19 = 0.02D;
-               double var21 = var13 * var13 + var15 * var15 + var17 * var17;
-               if(var21 > var19 * var19 || var21 > 0.0D && this.trackedEntity.motionX == 0.0D && this.trackedEntity.motionY == 0.0D && this.trackedEntity.motionZ == 0.0D) {
+               double d0 = this.trackedEntity.motionX - this.lastTrackedEntityMotionX;
+               double d1 = this.trackedEntity.motionY - this.lastTrackedEntityMotionY;
+               double d2 = this.trackedEntity.motionZ - this.lastTrackedEntityMotionZ;
+               double d3 = 0.02D;
+               double d4 = d0 * d0 + d1 * d1 + d2 * d2;
+               if(d4 > d3 * d3 || d4 > 0.0D && this.trackedEntity.motionX == 0.0D && this.trackedEntity.motionY == 0.0D && this.trackedEntity.motionZ == 0.0D) {
                   this.lastTrackedEntityMotionX = this.trackedEntity.motionX;
                   this.lastTrackedEntityMotionY = this.trackedEntity.motionY;
                   this.lastTrackedEntityMotionZ = this.trackedEntity.motionZ;
@@ -187,195 +207,209 @@
                }
             }
 
-            if(var10 != null) {
-               this.sendPacketToTrackedPlayers((Packet)var10);
+            if(object != null) {
+               this.sendPacketToTrackedPlayers((Packet)object);
             }
 
-            DataWatcher var23 = this.trackedEntity.getDataWatcher();
-            if(var23.hasObjectChanged()) {
-               this.sendPacketToTrackedPlayersAndTrackedEntity(new Packet40EntityMetadata(this.trackedEntity.entityId, var23, false));
-            }
-
-            if(var11) {
-               this.encodedPosX = var2;
-               this.encodedPosY = var3;
-               this.encodedPosZ = var4;
-            }
-
-            if(var12) {
-               this.encodedRotationYaw = var5;
-               this.encodedRotationPitch = var6;
+            DataWatcher datawatcher1 = this.trackedEntity.getDataWatcher();
+            if(datawatcher1.hasObjectChanged()) {
+               this.sendPacketToTrackedPlayersAndTrackedEntity(new Packet40EntityMetadata(this.trackedEntity.entityId, datawatcher1, false));
             }
 
             this.ridingEntity = false;
          } else {
-            var2 = MathHelper.floor_float(this.trackedEntity.rotationYaw * 256.0F / 360.0F);
-            var3 = MathHelper.floor_float(this.trackedEntity.rotationPitch * 256.0F / 360.0F);
-            boolean var26 = Math.abs(var2 - this.encodedRotationYaw) >= 4 || Math.abs(var3 - this.encodedRotationPitch) >= 4;
-            if(var26) {
-               this.sendPacketToTrackedPlayers(new Packet32EntityLook(this.trackedEntity.entityId, (byte)var2, (byte)var3));
-               this.encodedRotationYaw = var2;
-               this.encodedRotationPitch = var3;
+            cancelled = MathHelper.floor_float(this.trackedEntity.rotationYaw * 256.0F / 360.0F);
+            player = MathHelper.floor_float(this.trackedEntity.rotationPitch * 256.0F / 360.0F);
+            boolean var28 = Math.abs(cancelled - this.encodedRotationYaw) >= 4 || Math.abs(player - this.encodedRotationPitch) >= 4;
+            if(var28) {
+               this.sendPacketToTrackedPlayers(new Packet32EntityLook(this.trackedEntity.entityId, (byte)cancelled, (byte)player));
+               this.encodedRotationYaw = cancelled;
+               this.encodedRotationPitch = player;
             }
 
             this.encodedPosX = this.trackedEntity.myEntitySize.multiplyBy32AndRound(this.trackedEntity.posX);
             this.encodedPosY = MathHelper.floor_double(this.trackedEntity.posY * 32.0D);
             this.encodedPosZ = this.trackedEntity.myEntitySize.multiplyBy32AndRound(this.trackedEntity.posZ);
-            DataWatcher var28 = this.trackedEntity.getDataWatcher();
-            if(var28.hasObjectChanged()) {
-               this.sendPacketToTrackedPlayersAndTrackedEntity(new Packet40EntityMetadata(this.trackedEntity.entityId, var28, false));
+            DataWatcher var31 = this.trackedEntity.getDataWatcher();
+            if(var31.hasObjectChanged()) {
+               this.sendPacketToTrackedPlayersAndTrackedEntity(new Packet40EntityMetadata(this.trackedEntity.entityId, var31, false));
             }
 
             this.ridingEntity = true;
          }
 
-         var2 = MathHelper.floor_float(this.trackedEntity.setRotationYawHead() * 256.0F / 360.0F);
-         if(Math.abs(var2 - this.lastHeadMotion) >= 4) {
-            this.sendPacketToTrackedPlayers(new Packet35EntityHeadRotation(this.trackedEntity.entityId, (byte)var2));
-            this.lastHeadMotion = var2;
+         cancelled = MathHelper.floor_float(this.trackedEntity.setRotationYawHead() * 256.0F / 360.0F);
+         if(Math.abs(cancelled - this.lastHeadMotion) >= 4) {
+            this.sendPacketToTrackedPlayers(new Packet35EntityHeadRotation(this.trackedEntity.entityId, (byte)cancelled));
+            this.lastHeadMotion = cancelled;
          }
 
          this.trackedEntity.isAirBorne = false;
       }
 
       if(this.trackedEntity.velocityChanged) {
-         this.sendPacketToTrackedPlayersAndTrackedEntity(new Packet28EntityVelocity(this.trackedEntity));
+         boolean var25 = false;
+         if(this.trackedEntity instanceof EntityPlayerMP) {
+            Player var27 = (Player)this.trackedEntity.getBukkitEntity();
+            Vector var30 = var27.getVelocity();
+            PlayerVelocityEvent var33 = new PlayerVelocityEvent(var27, var30);
+            this.trackedEntity.worldObj.getServer().getPluginManager().callEvent(var33);
+            if(var33.isCancelled()) {
+               var25 = true;
+            } else if(!var30.equals(var33.getVelocity())) {
+               var27.setVelocity(var30);
+            }
+         }
+
+         if(!var25) {
+            this.sendPacketToTrackedPlayersAndTrackedEntity(new Packet28EntityVelocity(this.trackedEntity));
+         }
+
          this.trackedEntity.velocityChanged = false;
       }
 
    }
 
-   public void sendPacketToTrackedPlayers(Packet var1) {
-      Iterator var2 = this.trackedPlayers.iterator();
+   public void sendPacketToTrackedPlayers(Packet packet) {
+      Iterator iterator = this.trackedPlayers.iterator();
 
-      while(var2.hasNext()) {
-         EntityPlayerMP var3 = (EntityPlayerMP)var2.next();
-         var3.playerNetServerHandler.sendPacket(var1);
+      while(iterator.hasNext()) {
+         EntityPlayerMP entityplayer = (EntityPlayerMP)iterator.next();
+         entityplayer.playerNetServerHandler.sendPacket(packet);
       }
 
    }
 
-   public void sendPacketToTrackedPlayersAndTrackedEntity(Packet var1) {
-      this.sendPacketToTrackedPlayers(var1);
+   public void sendPacketToTrackedPlayersAndTrackedEntity(Packet packet) {
+      this.sendPacketToTrackedPlayers(packet);
       if(this.trackedEntity instanceof EntityPlayerMP) {
-         ((EntityPlayerMP)this.trackedEntity).playerNetServerHandler.sendPacket(var1);
+         ((EntityPlayerMP)this.trackedEntity).playerNetServerHandler.sendPacket(packet);
       }
 
    }
 
    public void sendDestroyEntityPacketToTrackedPlayers() {
-      Iterator var1 = this.trackedPlayers.iterator();
+      Iterator iterator = this.trackedPlayers.iterator();
 
-      while(var1.hasNext()) {
-         EntityPlayerMP var2 = (EntityPlayerMP)var1.next();
-         var2.destroyedItemsNetCache.add(Integer.valueOf(this.trackedEntity.entityId));
+      while(iterator.hasNext()) {
+         EntityPlayerMP entityplayer = (EntityPlayerMP)iterator.next();
+         entityplayer.destroyedItemsNetCache.add(Integer.valueOf(this.trackedEntity.entityId));
       }
 
    }
 
-   public void removeFromTrackedPlayers(EntityPlayerMP var1) {
-      if(this.trackedPlayers.contains(var1)) {
-         var1.destroyedItemsNetCache.add(Integer.valueOf(this.trackedEntity.entityId));
-         this.trackedPlayers.remove(var1);
+   public void removeFromTrackedPlayers(EntityPlayerMP entityplayer) {
+      if(this.trackedPlayers.contains(entityplayer)) {
+         entityplayer.destroyedItemsNetCache.add(Integer.valueOf(this.trackedEntity.entityId));
+         this.trackedPlayers.remove(entityplayer);
       }
 
    }
 
-   public void updatePlayerEntity(EntityPlayerMP var1) {
-      if(var1 != this.trackedEntity) {
-         double var2 = var1.posX - (double)(this.encodedPosX / 32);
-         double var4 = var1.posZ - (double)(this.encodedPosZ / 32);
-         if(var2 >= (double)(-this.trackingDistanceThreshold) && var2 <= (double)this.trackingDistanceThreshold && var4 >= (double)(-this.trackingDistanceThreshold) && var4 <= (double)this.trackingDistanceThreshold) {
-            if(!this.trackedPlayers.contains(var1) && this.isPlayerWatchingThisChunk(var1)) {
-               this.trackedPlayers.add(var1);
-               Packet var6 = this.getSpawnPacket();
-               var1.playerNetServerHandler.sendPacket(var6);
+   public void updatePlayerEntity(EntityPlayerMP entityplayer) {
+      if(entityplayer != this.trackedEntity) {
+         double d0 = entityplayer.posX - (double)(this.encodedPosX / 32);
+         double d1 = entityplayer.posZ - (double)(this.encodedPosZ / 32);
+         if(d0 >= (double)(-this.trackingDistanceThreshold) && d0 <= (double)this.trackingDistanceThreshold && d1 >= (double)(-this.trackingDistanceThreshold) && d1 <= (double)this.trackingDistanceThreshold) {
+            if(!this.trackedPlayers.contains(entityplayer) && this.isPlayerWatchingThisChunk(entityplayer)) {
+               if(this.trackedEntity instanceof EntityPlayerMP) {
+                  CraftPlayer packet = ((EntityPlayerMP)this.trackedEntity).getBukkitEntity();
+                  if(!entityplayer.getBukkitEntity().canSee(packet)) {
+                     return;
+                  }
+               }
+
+               entityplayer.destroyedItemsNetCache.remove(Integer.valueOf(this.trackedEntity.entityId));
+               this.trackedPlayers.add(entityplayer);
+               Packet var10 = this.getSpawnPacket();
+               entityplayer.playerNetServerHandler.sendPacket(var10);
                if(this.trackedEntity instanceof EntityItemFrame) {
-                  var1.playerNetServerHandler.sendPacket(new Packet40EntityMetadata(this.trackedEntity.entityId, this.trackedEntity.getDataWatcher(), true));
+                  entityplayer.playerNetServerHandler.sendPacket(new Packet40EntityMetadata(this.trackedEntity.entityId, this.trackedEntity.getDataWatcher(), true));
                }
 
                this.lastTrackedEntityMotionX = this.trackedEntity.motionX;
                this.lastTrackedEntityMotionY = this.trackedEntity.motionY;
                this.lastTrackedEntityMotionZ = this.trackedEntity.motionZ;
-               if(this.sendVelocityUpdates && !(var6 instanceof Packet24MobSpawn)) {
-                  var1.playerNetServerHandler.sendPacket(new Packet28EntityVelocity(this.trackedEntity.entityId, this.trackedEntity.motionX, this.trackedEntity.motionY, this.trackedEntity.motionZ));
+               if(this.sendVelocityUpdates && !(var10 instanceof Packet24MobSpawn)) {
+                  entityplayer.playerNetServerHandler.sendPacket(new Packet28EntityVelocity(this.trackedEntity.entityId, this.trackedEntity.motionX, this.trackedEntity.motionY, this.trackedEntity.motionZ));
                }
 
                if(this.trackedEntity.ridingEntity != null) {
-                  var1.playerNetServerHandler.sendPacket(new Packet39AttachEntity(this.trackedEntity, this.trackedEntity.ridingEntity));
+                  entityplayer.playerNetServerHandler.sendPacket(new Packet39AttachEntity(this.trackedEntity, this.trackedEntity.ridingEntity));
                }
 
                if(this.trackedEntity instanceof EntityLiving) {
-                  for(int var7 = 0; var7 < 5; ++var7) {
-                     ItemStack var8 = ((EntityLiving)this.trackedEntity).getEquipmentInSlot(var7);
-                     if(var8 != null) {
-                        var1.playerNetServerHandler.sendPacket(new Packet5PlayerInventory(this.trackedEntity.entityId, var7, var8));
+                  for(int entityliving = 0; entityliving < 5; ++entityliving) {
+                     ItemStack iterator = ((EntityLiving)this.trackedEntity).getEquipmentInSlot(entityliving);
+                     if(iterator != null) {
+                        entityplayer.playerNetServerHandler.sendPacket(new Packet5PlayerInventory(this.trackedEntity.entityId, entityliving, iterator));
                      }
                   }
                }
 
                if(this.trackedEntity instanceof EntityPlayer) {
-                  EntityPlayer var11 = (EntityPlayer)this.trackedEntity;
-                  if(var11.isPlayerSleeping()) {
-                     var1.playerNetServerHandler.sendPacket(new Packet17Sleep(this.trackedEntity, 0, MathHelper.floor_double(this.trackedEntity.posX), MathHelper.floor_double(this.trackedEntity.posY), MathHelper.floor_double(this.trackedEntity.posZ)));
+                  EntityPlayer var12 = (EntityPlayer)this.trackedEntity;
+                  if(var12.isPlayerSleeping()) {
+                     entityplayer.playerNetServerHandler.sendPacket(new Packet17Sleep(this.trackedEntity, 0, MathHelper.floor_double(this.trackedEntity.posX), MathHelper.floor_double(this.trackedEntity.posY), MathHelper.floor_double(this.trackedEntity.posZ)));
                   }
                }
 
+               this.lastHeadMotion = MathHelper.floor_float(this.trackedEntity.setRotationYawHead() * 256.0F / 360.0F);
+               this.sendPacketToTrackedPlayers(new Packet35EntityHeadRotation(this.trackedEntity.entityId, (byte)this.lastHeadMotion));
                if(this.trackedEntity instanceof EntityLiving) {
-                  EntityLiving var10 = (EntityLiving)this.trackedEntity;
-                  Iterator var12 = var10.getActivePotionEffects().iterator();
+                  EntityLiving var11 = (EntityLiving)this.trackedEntity;
+                  Iterator var13 = var11.getActivePotionEffects().iterator();
 
-                  while(var12.hasNext()) {
-                     PotionEffect var9 = (PotionEffect)var12.next();
-                     var1.playerNetServerHandler.sendPacket(new Packet41EntityEffect(this.trackedEntity.entityId, var9));
+                  while(var13.hasNext()) {
+                     PotionEffect mobeffect = (PotionEffect)var13.next();
+                     entityplayer.playerNetServerHandler.sendPacket(new Packet41EntityEffect(this.trackedEntity.entityId, mobeffect));
                   }
                }
             }
-         } else if(this.trackedPlayers.contains(var1)) {
-            this.trackedPlayers.remove(var1);
-            var1.destroyedItemsNetCache.add(Integer.valueOf(this.trackedEntity.entityId));
+         } else if(this.trackedPlayers.contains(entityplayer)) {
+            this.trackedPlayers.remove(entityplayer);
+            entityplayer.destroyedItemsNetCache.add(Integer.valueOf(this.trackedEntity.entityId));
          }
-
       }
+
    }
 
-   private boolean isPlayerWatchingThisChunk(EntityPlayerMP var1) {
-      return var1.getServerForPlayer().getPlayerManager().isPlayerWatchingChunk(var1, this.trackedEntity.chunkCoordX, this.trackedEntity.chunkCoordZ);
+   private boolean isPlayerWatchingThisChunk(EntityPlayerMP entityplayer) {
+      return entityplayer.getServerForPlayer().getPlayerManager().isPlayerWatchingChunk(entityplayer, this.trackedEntity.chunkCoordX, this.trackedEntity.chunkCoordZ);
    }
 
-   public void updatePlayerEntities(List var1) {
-      for(int var2 = 0; var2 < var1.size(); ++var2) {
-         this.updatePlayerEntity((EntityPlayerMP)var1.get(var2));
+   public void updatePlayerEntities(List list) {
+      for(int i = 0; i < list.size(); ++i) {
+         this.updatePlayerEntity((EntityPlayerMP)list.get(i));
       }
 
    }
 
    private Packet getSpawnPacket() {
       if(this.trackedEntity.isDead) {
-         System.out.println("Fetching addPacket for removed entity");
-      }
-
-      if(this.trackedEntity instanceof EntityItem) {
-         EntityItem var9 = (EntityItem)this.trackedEntity;
-         Packet21PickupSpawn var10 = new Packet21PickupSpawn(var9);
-         var9.posX = (double)var10.xPosition / 32.0D;
-         var9.posY = (double)var10.yPosition / 32.0D;
-         var9.posZ = (double)var10.zPosition / 32.0D;
-         return var10;
+         return null;
+      } else if(this.trackedEntity instanceof EntityItem) {
+         EntityItem packet23vehiclespawn4 = (EntityItem)this.trackedEntity;
+         Packet21PickupSpawn entityitemframe3 = new Packet21PickupSpawn(packet23vehiclespawn4);
+         packet23vehiclespawn4.posX = (double)entityitemframe3.xPosition / 32.0D;
+         packet23vehiclespawn4.posY = (double)entityitemframe3.yPosition / 32.0D;
+         packet23vehiclespawn4.posZ = (double)entityitemframe3.zPosition / 32.0D;
+         return entityitemframe3;
       } else if(this.trackedEntity instanceof EntityPlayerMP) {
          return new Packet20NamedEntitySpawn((EntityPlayer)this.trackedEntity);
       } else {
+         EntityMinecart packet23vehiclespawn;
          if(this.trackedEntity instanceof EntityMinecart) {
-            EntityMinecart var1 = (EntityMinecart)this.trackedEntity;
-            if(var1.minecartType == 0) {
+            packet23vehiclespawn = (EntityMinecart)this.trackedEntity;
+            if(packet23vehiclespawn.minecartType == 0) {
                return new Packet23VehicleSpawn(this.trackedEntity, 10);
             }
 
-            if(var1.minecartType == 1) {
+            if(packet23vehiclespawn.minecartType == 1) {
                return new Packet23VehicleSpawn(this.trackedEntity, 11);
             }
 
-            if(var1.minecartType == 2) {
+            if(packet23vehiclespawn.minecartType == 2) {
                return new Packet23VehicleSpawn(this.trackedEntity, 12);
             }
          }
@@ -384,11 +418,11 @@
             return new Packet23VehicleSpawn(this.trackedEntity, 1);
          } else if(!(this.trackedEntity instanceof IAnimals) && !(this.trackedEntity instanceof EntityDragon)) {
             if(this.trackedEntity instanceof EntityFishHook) {
-               EntityPlayer var8 = ((EntityFishHook)this.trackedEntity).angler;
-               return new Packet23VehicleSpawn(this.trackedEntity, 90, var8 != null?var8.entityId:this.trackedEntity.entityId);
+               EntityPlayer packet23vehiclespawn3 = ((EntityFishHook)this.trackedEntity).angler;
+               return new Packet23VehicleSpawn(this.trackedEntity, 90, packet23vehiclespawn3 != null?packet23vehiclespawn3.entityId:this.trackedEntity.entityId);
             } else if(this.trackedEntity instanceof EntityArrow) {
-               Entity var7 = ((EntityArrow)this.trackedEntity).shootingEntity;
-               return new Packet23VehicleSpawn(this.trackedEntity, 60, var7 != null?var7.entityId:this.trackedEntity.entityId);
+               Entity packet23vehiclespawn2 = ((EntityArrow)this.trackedEntity).shootingEntity;
+               return new Packet23VehicleSpawn(this.trackedEntity, 60, packet23vehiclespawn2 != null?packet23vehiclespawn2.entityId:this.trackedEntity.entityId);
             } else if(this.trackedEntity instanceof EntitySnowball) {
                return new Packet23VehicleSpawn(this.trackedEntity, 61);
             } else if(this.trackedEntity instanceof EntityPotion) {
@@ -400,27 +434,27 @@
             } else if(this.trackedEntity instanceof EntityEnderEye) {
                return new Packet23VehicleSpawn(this.trackedEntity, 72);
             } else {
-               Packet23VehicleSpawn var2;
+               Packet23VehicleSpawn packet23vehiclespawn1;
                if(this.trackedEntity instanceof EntityFireball) {
-                  EntityFireball var6 = (EntityFireball)this.trackedEntity;
-                  var2 = null;
-                  byte var3 = 63;
+                  EntityFireball entityitemframe2 = (EntityFireball)this.trackedEntity;
+                  packet23vehiclespawn = null;
+                  byte b0 = 63;
                   if(this.trackedEntity instanceof EntitySmallFireball) {
-                     var3 = 64;
+                     b0 = 64;
                   } else if(this.trackedEntity instanceof EntityWitherSkull) {
-                     var3 = 66;
+                     b0 = 66;
                   }
 
-                  if(var6.shootingEntity != null) {
-                     var2 = new Packet23VehicleSpawn(this.trackedEntity, var3, ((EntityFireball)this.trackedEntity).shootingEntity.entityId);
+                  if(entityitemframe2.shootingEntity != null) {
+                     packet23vehiclespawn1 = new Packet23VehicleSpawn(this.trackedEntity, b0, ((EntityFireball)this.trackedEntity).shootingEntity.entityId);
                   } else {
-                     var2 = new Packet23VehicleSpawn(this.trackedEntity, var3, 0);
+                     packet23vehiclespawn1 = new Packet23VehicleSpawn(this.trackedEntity, b0, 0);
                   }
 
-                  var2.speedX = (int)(var6.accelerationX * 8000.0D);
-                  var2.speedY = (int)(var6.accelerationY * 8000.0D);
-                  var2.speedZ = (int)(var6.accelerationZ * 8000.0D);
-                  return var2;
+                  packet23vehiclespawn1.speedX = (int)(entityitemframe2.accelerationX * 8000.0D);
+                  packet23vehiclespawn1.speedY = (int)(entityitemframe2.accelerationY * 8000.0D);
+                  packet23vehiclespawn1.speedZ = (int)(entityitemframe2.accelerationZ * 8000.0D);
+                  return packet23vehiclespawn1;
                } else if(this.trackedEntity instanceof EntityEgg) {
                   return new Packet23VehicleSpawn(this.trackedEntity, 62);
                } else if(this.trackedEntity instanceof EntityTNTPrimed) {
@@ -428,17 +462,17 @@
                } else if(this.trackedEntity instanceof EntityEnderCrystal) {
                   return new Packet23VehicleSpawn(this.trackedEntity, 51);
                } else if(this.trackedEntity instanceof EntityFallingSand) {
-                  EntityFallingSand var5 = (EntityFallingSand)this.trackedEntity;
-                  return new Packet23VehicleSpawn(this.trackedEntity, 70, var5.blockID | var5.metadata << 16);
+                  EntityFallingSand entityitemframe1 = (EntityFallingSand)this.trackedEntity;
+                  return new Packet23VehicleSpawn(this.trackedEntity, 70, entityitemframe1.blockID | entityitemframe1.metadata << 16);
                } else if(this.trackedEntity instanceof EntityPainting) {
                   return new Packet25EntityPainting((EntityPainting)this.trackedEntity);
                } else if(this.trackedEntity instanceof EntityItemFrame) {
-                  EntityItemFrame var4 = (EntityItemFrame)this.trackedEntity;
-                  var2 = new Packet23VehicleSpawn(this.trackedEntity, 71, var4.hangingDirection);
-                  var2.xPosition = MathHelper.floor_float((float)(var4.xPosition * 32));
-                  var2.yPosition = MathHelper.floor_float((float)(var4.yPosition * 32));
-                  var2.zPosition = MathHelper.floor_float((float)(var4.zPosition * 32));
-                  return var2;
+                  EntityItemFrame entityitemframe = (EntityItemFrame)this.trackedEntity;
+                  packet23vehiclespawn1 = new Packet23VehicleSpawn(this.trackedEntity, 71, entityitemframe.hangingDirection);
+                  packet23vehiclespawn1.xPosition = MathHelper.floor_float((float)(entityitemframe.xPosition * 32));
+                  packet23vehiclespawn1.yPosition = MathHelper.floor_float((float)(entityitemframe.yPosition * 32));
+                  packet23vehiclespawn1.zPosition = MathHelper.floor_float((float)(entityitemframe.zPosition * 32));
+                  return packet23vehiclespawn1;
                } else if(this.trackedEntity instanceof EntityXPOrb) {
                   return new Packet26EntityExpOrb((EntityXPOrb)this.trackedEntity);
                } else {
@@ -452,10 +486,10 @@
       }
    }
 
-   public void removeTrackedPlayerSymmetric(EntityPlayerMP var1) {
-      if(this.trackedPlayers.contains(var1)) {
-         this.trackedPlayers.remove(var1);
-         var1.destroyedItemsNetCache.add(Integer.valueOf(this.trackedEntity.entityId));
+   public void removeTrackedPlayerSymmetric(EntityPlayerMP entityplayer) {
+      if(this.trackedPlayers.contains(entityplayer)) {
+         this.trackedPlayers.remove(entityplayer);
+         entityplayer.destroyedItemsNetCache.add(Integer.valueOf(this.trackedEntity.entityId));
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/EntityWitch.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWitch.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityWitch.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWitch.java
--- mcp-mcdev/net/minecraft/src/EntityWitch.java	2012-11-29 21:14:54.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWitch.java	2012-11-29 20:44:07.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.src.DamageSource;
@@ -21,6 +22,7 @@
 import net.minecraft.src.Potion;
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntityWitch extends EntityMob implements IRangedAttackMob {
 
@@ -28,8 +30,8 @@
    private int witchAttackTimer = 0;
 
 
-   public EntityWitch(World var1) {
-      super(var1);
+   public EntityWitch(World world) {
+      super(world);
       this.texture = "/mob/villager/witch.png";
       this.moveSpeed = 0.25F;
       this.tasks.addTask(1, new EntityAISwimming(this));
@@ -58,8 +60,8 @@
       return "mob.witch.death";
    }
 
-   public void setAggressive(boolean var1) {
-      this.getDataWatcher().updateObject(21, Byte.valueOf((byte)(var1?1:0)));
+   public void setAggressive(boolean flag) {
+      this.getDataWatcher().updateObject(21, Byte.valueOf((byte)(flag?1:0)));
    }
 
    public boolean getAggressive() {
@@ -79,16 +81,16 @@
          if(this.getAggressive()) {
             if(this.witchAttackTimer-- <= 0) {
                this.setAggressive(false);
-               ItemStack var1 = this.getHeldItem();
+               ItemStack short1 = this.getHeldItem();
                this.setCurrentItemOrArmor(0, (ItemStack)null);
-               if(var1 != null && var1.itemID == Item.potion.shiftedIndex) {
-                  List var2 = Item.potion.getEffects(var1);
-                  if(var2 != null) {
-                     Iterator var3 = var2.iterator();
-
-                     while(var3.hasNext()) {
-                        PotionEffect var4 = (PotionEffect)var3.next();
-                        this.addPotionEffect(new PotionEffect(var4));
+               if(short1 != null && short1.itemID == Item.potion.shiftedIndex) {
+                  List list = Item.potion.getEffects(short1);
+                  if(list != null) {
+                     Iterator iterator = list.iterator();
+
+                     while(iterator.hasNext()) {
+                        PotionEffect mobeffect = (PotionEffect)iterator.next();
+                        this.addPotionEffect(new PotionEffect(mobeffect));
                      }
                   }
                }
@@ -120,64 +122,65 @@
       super.onLivingUpdate();
    }
 
-   protected int applyPotionDamageCalculations(DamageSource var1, int var2) {
-      var2 = super.applyPotionDamageCalculations(var1, var2);
-      if(var1.getEntity() == this) {
-         var2 = 0;
+   protected int applyPotionDamageCalculations(DamageSource damagesource, int i) {
+      i = super.applyPotionDamageCalculations(damagesource, i);
+      if(damagesource.getEntity() == this) {
+         i = 0;
       }
 
-      if(var1.isMagicDamage()) {
-         var2 = (int)((double)var2 * 0.15D);
+      if(damagesource.isMagicDamage()) {
+         i = (int)((double)i * 0.15D);
       }
 
-      return var2;
+      return i;
    }
 
    public float getSpeedModifier() {
-      float var1 = super.getSpeedModifier();
+      float f = super.getSpeedModifier();
       if(this.getAggressive()) {
-         var1 *= 0.75F;
+         f *= 0.75F;
       }
 
-      return var1;
+      return f;
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      int var3 = this.rand.nextInt(3) + 1;
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      int j = this.rand.nextInt(3) + 1;
 
-      for(int var4 = 0; var4 < var3; ++var4) {
-         int var5 = this.rand.nextInt(3);
-         int var6 = witchDrops[this.rand.nextInt(witchDrops.length)];
-         if(var2 > 0) {
-            var5 += this.rand.nextInt(var2 + 1);
+      for(int k = 0; k < j; ++k) {
+         int l = this.rand.nextInt(3);
+         int i1 = witchDrops[this.rand.nextInt(witchDrops.length)];
+         if(i > 0) {
+            l += this.rand.nextInt(i + 1);
          }
 
-         for(int var7 = 0; var7 < var5; ++var7) {
-            this.dropItem(var6, 1);
-         }
+         loot.add(new org.bukkit.inventory.ItemStack(i1, l));
       }
 
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
-   public void attackEntityWithRangedAttack(EntityLiving var1) {
+   public void attackEntityWithRangedAttack(EntityLiving entityliving) {
       if(!this.getAggressive()) {
-         EntityPotion var2 = new EntityPotion(this.worldObj, this, 32732);
-         var2.rotationPitch -= -20.0F;
-         double var3 = var1.posX + var1.motionX - this.posX;
-         double var5 = var1.posY + (double)var1.getEyeHeight() - 1.100000023841858D - this.posY;
-         double var7 = var1.posZ + var1.motionZ - this.posZ;
-         float var9 = MathHelper.sqrt_double(var3 * var3 + var7 * var7);
-         if(var9 >= 8.0F && !var1.isPotionActive(Potion.moveSlowdown)) {
-            var2.setPotionDamage(32698);
-         } else if(var1.getHealth() >= 8 && !var1.isPotionActive(Potion.poison)) {
-            var2.setPotionDamage(32660);
-         } else if(var9 <= 3.0F && !var1.isPotionActive(Potion.weakness) && this.rand.nextFloat() < 0.25F) {
-            var2.setPotionDamage(32696);
+         EntityPotion entitypotion = new EntityPotion(this.worldObj, this, 32732);
+         entitypotion.rotationPitch -= -20.0F;
+         double d0 = entityliving.posX + entityliving.motionX - this.posX;
+         double d1 = entityliving.posY + (double)entityliving.getEyeHeight() - 1.100000023841858D - this.posY;
+         double d2 = entityliving.posZ + entityliving.motionZ - this.posZ;
+         float f = MathHelper.sqrt_double(d0 * d0 + d2 * d2);
+         if(f >= 8.0F && !entityliving.isPotionActive(Potion.moveSlowdown)) {
+            entitypotion.setPotionDamage(32698);
+         } else if(entityliving.getHealth() >= 8 && !entityliving.isPotionActive(Potion.poison)) {
+            entitypotion.setPotionDamage(32660);
+         } else if(f <= 3.0F && !entityliving.isPotionActive(Potion.weakness) && this.rand.nextFloat() < 0.25F) {
+            entitypotion.setPotionDamage(32696);
          }
 
-         var2.setThrowableHeading(var3, var5 + (double)(var9 * 0.2F), var7, 0.75F, 8.0F);
-         this.worldObj.spawnEntityInWorld(var2);
+         entitypotion.setThrowableHeading(d0, d1 + (double)(f * 0.2F), d2, 0.75F, 8.0F);
+         this.worldObj.spawnEntityInWorld(entitypotion);
       }
+
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/EntityWither.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWither.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityWither.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWither.java
--- mcp-mcdev/net/minecraft/src/EntityWither.java	2012-11-29 21:14:53.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWither.java	2012-11-29 20:44:07.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.src.Block;
 import net.minecraft.src.DamageSource;
@@ -25,6 +26,9 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
 
 public class EntityWither extends EntityMob implements IRangedAttackMob {
 
@@ -38,8 +42,8 @@
    private static final IEntitySelector attackEntitySelector = new EntityWitherAttackFilter();
 
 
-   public EntityWither(World var1) {
-      super(var1);
+   public EntityWither(World world) {
+      super(world);
       this.setEntityHealth(this.getMaxHealth());
       this.texture = "/mob/wither.png";
       this.setSize(0.9F, 4.0F);
@@ -65,14 +69,14 @@
       this.dataWatcher.addObject(20, new Integer(0));
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setInteger("Invul", this.func_82212_n());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setInteger("Invul", this.func_82212_n());
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.func_82215_s(var1.getInteger("Invul"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.func_82215_s(nbttagcompound.getInteger("Invul"));
       this.dataWatcher.updateObject(16, Integer.valueOf(this.health));
    }
 
@@ -94,13 +98,13 @@
       }
 
       this.motionY *= 0.6000000238418579D;
-      double var4;
-      double var6;
-      double var8;
+      double d0;
+      double d1;
+      double d2;
       if(!this.worldObj.isRemote && this.getWatchedTargetId(0) > 0) {
-         Entity var1 = this.worldObj.getEntityByID(this.getWatchedTargetId(0));
-         if(var1 != null) {
-            if(this.posY < var1.posY || !this.isArmored() && this.posY < var1.posY + 5.0D) {
+         Entity i = this.worldObj.getEntityByID(this.getWatchedTargetId(0));
+         if(i != null) {
+            if(this.posY < i.posY || !this.isArmored() && this.posY < i.posY + 5.0D) {
                if(this.motionY < 0.0D) {
                   this.motionY = 0.0D;
                }
@@ -108,13 +112,13 @@
                this.motionY += (0.5D - this.motionY) * 0.6000000238418579D;
             }
 
-            double var2 = var1.posX - this.posX;
-            var4 = var1.posZ - this.posZ;
-            var6 = var2 * var2 + var4 * var4;
-            if(var6 > 9.0D) {
-               var8 = (double)MathHelper.sqrt_double(var6);
-               this.motionX += (var2 / var8 * 0.5D - this.motionX) * 0.6000000238418579D;
-               this.motionZ += (var4 / var8 * 0.5D - this.motionZ) * 0.6000000238418579D;
+            double d3 = i.posX - this.posX;
+            d0 = i.posZ - this.posZ;
+            d1 = d3 * d3 + d0 * d0;
+            if(d1 > 9.0D) {
+               d2 = (double)MathHelper.sqrt_double(d1);
+               this.motionX += (d3 / d2 * 0.5D - this.motionX) * 0.6000000238418579D;
+               this.motionZ += (d0 / d2 * 0.5D - this.motionZ) * 0.6000000238418579D;
             }
          }
       }
@@ -125,51 +129,54 @@
 
       super.onLivingUpdate();
 
-      int var28;
-      for(var28 = 0; var28 < 2; ++var28) {
-         this.field_82218_g[var28] = this.field_82221_e[var28];
-         this.field_82217_f[var28] = this.field_82220_d[var28];
-      }
-
-      int var10;
-      for(var28 = 0; var28 < 2; ++var28) {
-         var10 = this.getWatchedTargetId(var28 + 1);
-         Entity var11 = null;
-         if(var10 > 0) {
-            var11 = this.worldObj.getEntityByID(var10);
-         }
-
-         if(var11 != null) {
-            var4 = this.func_82214_u(var28 + 1);
-            var6 = this.func_82208_v(var28 + 1);
-            var8 = this.func_82213_w(var28 + 1);
-            double var12 = var11.posX - var4;
-            double var14 = var11.posY + (double)var11.getEyeHeight() - var6;
-            double var16 = var11.posZ - var8;
-            double var18 = (double)MathHelper.sqrt_double(var12 * var12 + var16 * var16);
-            float var20 = (float)(Math.atan2(var16, var12) * 180.0D / 3.1415927410125732D) - 90.0F;
-            float var21 = (float)(-(Math.atan2(var14, var18) * 180.0D / 3.1415927410125732D));
-            this.field_82220_d[var28] = this.func_82204_b(this.field_82220_d[var28], var21, 40.0F);
-            this.field_82221_e[var28] = this.func_82204_b(this.field_82221_e[var28], var20, 10.0F);
+      int var22;
+      for(var22 = 0; var22 < 2; ++var22) {
+         this.field_82218_g[var22] = this.field_82221_e[var22];
+         this.field_82217_f[var22] = this.field_82220_d[var22];
+      }
+
+      int j;
+      double d8;
+      double d9;
+      double d10;
+      for(var22 = 0; var22 < 2; ++var22) {
+         j = this.getWatchedTargetId(var22 + 1);
+         Entity flag = null;
+         if(j > 0) {
+            flag = this.worldObj.getEntityByID(j);
+         }
+
+         if(flag != null) {
+            d0 = this.func_82214_u(var22 + 1);
+            d1 = this.func_82208_v(var22 + 1);
+            d2 = this.func_82213_w(var22 + 1);
+            d8 = flag.posX - d0;
+            d9 = flag.posY + (double)flag.getEyeHeight() - d1;
+            d10 = flag.posZ - d2;
+            double d7 = (double)MathHelper.sqrt_double(d8 * d8 + d10 * d10);
+            float f = (float)(Math.atan2(d10, d8) * 180.0D / 3.1415927410125732D) - 90.0F;
+            float f1 = (float)(-(Math.atan2(d9, d7) * 180.0D / 3.1415927410125732D));
+            this.field_82220_d[var22] = this.func_82204_b(this.field_82220_d[var22], f1, 40.0F);
+            this.field_82221_e[var22] = this.func_82204_b(this.field_82221_e[var22], f, 10.0F);
          } else {
-            this.field_82221_e[var28] = this.func_82204_b(this.field_82221_e[var28], this.renderYawOffset, 10.0F);
+            this.field_82221_e[var22] = this.func_82204_b(this.field_82221_e[var22], this.renderYawOffset, 10.0F);
          }
       }
 
-      boolean var29 = this.isArmored();
+      boolean var23 = this.isArmored();
 
-      for(var10 = 0; var10 < 3; ++var10) {
-         double var22 = this.func_82214_u(var10);
-         double var24 = this.func_82208_v(var10);
-         double var26 = this.func_82213_w(var10);
-         this.worldObj.spawnParticle("smoke", var22 + this.rand.nextGaussian() * 0.30000001192092896D, var24 + this.rand.nextGaussian() * 0.30000001192092896D, var26 + this.rand.nextGaussian() * 0.30000001192092896D, 0.0D, 0.0D, 0.0D);
-         if(var29 && this.worldObj.rand.nextInt(4) == 0) {
-            this.worldObj.spawnParticle("mobSpell", var22 + this.rand.nextGaussian() * 0.30000001192092896D, var24 + this.rand.nextGaussian() * 0.30000001192092896D, var26 + this.rand.nextGaussian() * 0.30000001192092896D, 0.699999988079071D, 0.699999988079071D, 0.5D);
+      for(j = 0; j < 3; ++j) {
+         d8 = this.func_82214_u(j);
+         d9 = this.func_82208_v(j);
+         d10 = this.func_82213_w(j);
+         this.worldObj.spawnParticle("smoke", d8 + this.rand.nextGaussian() * 0.30000001192092896D, d9 + this.rand.nextGaussian() * 0.30000001192092896D, d10 + this.rand.nextGaussian() * 0.30000001192092896D, 0.0D, 0.0D, 0.0D);
+         if(var23 && this.worldObj.rand.nextInt(4) == 0) {
+            this.worldObj.spawnParticle("mobSpell", d8 + this.rand.nextGaussian() * 0.30000001192092896D, d9 + this.rand.nextGaussian() * 0.30000001192092896D, d10 + this.rand.nextGaussian() * 0.30000001192092896D, 0.699999988079071D, 0.699999988079071D, 0.5D);
          }
       }
 
       if(this.func_82212_n() > 0) {
-         for(var10 = 0; var10 < 3; ++var10) {
+         for(j = 0; j < 3; ++j) {
             this.worldObj.spawnParticle("mobSpell", this.posX + this.rand.nextGaussian() * 1.0D, this.posY + (double)(this.rand.nextFloat() * 3.3F), this.posZ + this.rand.nextGaussian() * 1.0D, 0.699999988079071D, 0.699999988079071D, 0.8999999761581421D);
          }
       }
@@ -177,68 +184,74 @@
    }
 
    protected void updateAITasks() {
-      int var1;
+      int i;
       if(this.func_82212_n() > 0) {
-         var1 = this.func_82212_n() - 1;
-         if(var1 <= 0) {
-            this.worldObj.newExplosion(this, this.posX, this.posY + (double)this.getEyeHeight(), this.posZ, 7.0F, false, this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+         i = this.func_82212_n() - 1;
+         if(i <= 0) {
+            ExplosionPrimeEvent j = new ExplosionPrimeEvent(this.getBukkitEntity(), 7.0F, false);
+            this.worldObj.getServer().getPluginManager().callEvent(j);
+            if(!j.isCancelled()) {
+               this.worldObj.newExplosion(this, this.posX, this.posY + (double)this.getEyeHeight(), this.posZ, j.getRadius(), j.getFire(), this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+            }
+
             this.worldObj.func_82739_e(1013, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
          }
 
-         this.func_82215_s(var1);
+         this.func_82215_s(i);
          if(this.ticksExisted % 10 == 0) {
-            this.heal(10);
+            this.heal(10, RegainReason.WITHER_SPAWN);
          }
-
       } else {
          super.updateAITasks();
 
+         int j1;
          int var19;
-         for(var1 = 1; var1 < 3; ++var1) {
-            if(this.ticksExisted >= this.field_82223_h[var1 - 1]) {
-               this.field_82223_h[var1 - 1] = this.ticksExisted + 10 + this.rand.nextInt(10);
+         for(i = 1; i < 3; ++i) {
+            if(this.ticksExisted >= this.field_82223_h[i - 1]) {
+               this.field_82223_h[i - 1] = this.ticksExisted + 10 + this.rand.nextInt(10);
+               int flag;
                if(this.worldObj.difficultySetting >= 2) {
-                  int var10001 = var1 - 1;
-                  int var10003 = this.field_82224_i[var1 - 1];
-                  this.field_82224_i[var10001] = this.field_82224_i[var1 - 1] + 1;
-                  if(var10003 > 15) {
-                     float var2 = 10.0F;
-                     float var3 = 5.0F;
-                     double var4 = MathHelper.getRandomDoubleInRange(this.rand, this.posX - (double)var2, this.posX + (double)var2);
-                     double var6 = MathHelper.getRandomDoubleInRange(this.rand, this.posY - (double)var3, this.posY + (double)var3);
-                     double var8 = MathHelper.getRandomDoubleInRange(this.rand, this.posZ - (double)var2, this.posZ + (double)var2);
-                     this.func_82209_a(var1 + 1, var4, var6, var8, true);
-                     this.field_82224_i[var1 - 1] = 0;
+                  j1 = i - 1;
+                  flag = this.field_82224_i[i - 1];
+                  this.field_82224_i[j1] = this.field_82224_i[i - 1] + 1;
+                  if(flag > 15) {
+                     float k1 = 10.0F;
+                     float l1 = 5.0F;
+                     double d0 = MathHelper.getRandomDoubleInRange(this.rand, this.posX - (double)k1, this.posX + (double)k1);
+                     double d1 = MathHelper.getRandomDoubleInRange(this.rand, this.posY - (double)l1, this.posY + (double)l1);
+                     double d2 = MathHelper.getRandomDoubleInRange(this.rand, this.posZ - (double)k1, this.posZ + (double)k1);
+                     this.func_82209_a(i + 1, d0, d1, d2, true);
+                     this.field_82224_i[i - 1] = 0;
                   }
                }
 
-               var19 = this.getWatchedTargetId(var1);
+               var19 = this.getWatchedTargetId(i);
                if(var19 > 0) {
-                  Entity var21 = this.worldObj.getEntityByID(var19);
-                  if(var21 != null && var21.isEntityAlive() && this.getDistanceSqToEntity(var21) <= 900.0D && this.canEntityBeSeen(var21)) {
-                     this.func_82216_a(var1 + 1, (EntityLiving)var21);
-                     this.field_82223_h[var1 - 1] = this.ticksExisted + 40 + this.rand.nextInt(20);
-                     this.field_82224_i[var1 - 1] = 0;
+                  Entity var20 = this.worldObj.getEntityByID(var19);
+                  if(var20 != null && var20.isEntityAlive() && this.getDistanceSqToEntity(var20) <= 900.0D && this.canEntityBeSeen(var20)) {
+                     this.func_82216_a(i + 1, (EntityLiving)var20);
+                     this.field_82223_h[i - 1] = this.ticksExisted + 40 + this.rand.nextInt(20);
+                     this.field_82224_i[i - 1] = 0;
                   } else {
-                     this.func_82211_c(var1, 0);
+                     this.func_82211_c(i, 0);
                   }
                } else {
-                  List var20 = this.worldObj.selectEntitiesWithinAABB(EntityLiving.class, this.boundingBox.expand(20.0D, 8.0D, 20.0D), attackEntitySelector);
+                  List var21 = this.worldObj.selectEntitiesWithinAABB(EntityLiving.class, this.boundingBox.expand(20.0D, 8.0D, 20.0D), attackEntitySelector);
 
-                  for(int var10 = 0; var10 < 10 && !var20.isEmpty(); ++var10) {
-                     EntityLiving var11 = (EntityLiving)var20.get(this.rand.nextInt(var20.size()));
-                     if(var11 != this && var11.isEntityAlive() && this.canEntityBeSeen(var11)) {
-                        if(var11 instanceof EntityPlayer) {
-                           if(!((EntityPlayer)var11).capabilities.disableDamage) {
-                              this.func_82211_c(var1, var11.entityId);
+                  for(flag = 0; flag < 10 && !var21.isEmpty(); ++flag) {
+                     EntityLiving var22 = (EntityLiving)var21.get(this.rand.nextInt(var21.size()));
+                     if(var22 != this && var22.isEntityAlive() && this.canEntityBeSeen(var22)) {
+                        if(var22 instanceof EntityPlayer) {
+                           if(!((EntityPlayer)var22).capabilities.disableDamage) {
+                              this.func_82211_c(i, var22.entityId);
                            }
                         } else {
-                           this.func_82211_c(var1, var11.entityId);
+                           this.func_82211_c(i, var22.entityId);
                         }
                         break;
                      }
 
-                     var20.remove(var11);
+                     var21.remove(var22);
                   }
                }
             }
@@ -253,30 +266,32 @@
          if(this.field_82222_j > 0) {
             --this.field_82222_j;
             if(this.field_82222_j == 0 && this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing")) {
-               var1 = MathHelper.floor_double(this.posY);
+               i = MathHelper.floor_double(this.posY);
                var19 = MathHelper.floor_double(this.posX);
-               int var22 = MathHelper.floor_double(this.posZ);
-               boolean var24 = false;
+               j1 = MathHelper.floor_double(this.posZ);
+               boolean var23 = false;
 
-               for(int var23 = -1; var23 <= 1; ++var23) {
-                  for(int var12 = -1; var12 <= 1; ++var12) {
-                     for(int var13 = 0; var13 <= 3; ++var13) {
-                        int var14 = var19 + var23;
-                        int var15 = var1 + var13;
-                        int var16 = var22 + var12;
-                        int var17 = this.worldObj.getBlockId(var14, var15, var16);
-                        if(var17 > 0 && var17 != Block.bedrock.blockID && var17 != Block.endPortal.blockID && var17 != Block.endPortalFrame.blockID) {
-                           int var18 = this.worldObj.getBlockMetadata(var14, var15, var16);
-                           this.worldObj.playAuxSFX(2001, var14, var15, var16, var17 + (var18 << 12));
-                           Block.blocksList[var17].dropBlockAsItem(this.worldObj, var14, var15, var16, var18, 0);
-                           this.worldObj.setBlockWithNotify(var14, var15, var16, 0);
-                           var24 = true;
+               for(int var24 = -1; var24 <= 1; ++var24) {
+                  for(int var25 = -1; var25 <= 1; ++var25) {
+                     for(int i2 = 0; i2 <= 3; ++i2) {
+                        int j2 = var19 + var24;
+                        int k2 = i + i2;
+                        int l2 = j1 + var25;
+                        int i3 = this.worldObj.getBlockId(j2, k2, l2);
+                        if(i3 > 0 && i3 != Block.bedrock.blockID && i3 != Block.endPortal.blockID && i3 != Block.endPortalFrame.blockID) {
+                           int j3 = this.worldObj.getBlockMetadata(j2, k2, l2);
+                           if(!CraftEventFactory.callEntityChangeBlockEvent(this, j2, k2, l2, 0).isCancelled()) {
+                              this.worldObj.playAuxSFX(2001, j2, k2, l2, i3 + (j3 << 12));
+                              Block.blocksList[i3].dropBlockAsItem(this.worldObj, j2, k2, l2, j3, 0);
+                              this.worldObj.setBlockWithNotify(j2, k2, l2, 0);
+                              var23 = true;
+                           }
                         }
                      }
                   }
                }
 
-               if(var24) {
+               if(var23) {
                   this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1012, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
                }
             }
@@ -285,8 +300,8 @@
          if(this.ticksExisted % 20 == 0) {
             this.heal(1);
          }
-
       }
+
    }
 
    public void func_82206_m() {
@@ -300,105 +315,107 @@
       return 4;
    }
 
-   private double func_82214_u(int var1) {
-      if(var1 <= 0) {
+   private double func_82214_u(int i) {
+      if(i <= 0) {
          return this.posX;
       } else {
-         float var2 = (this.renderYawOffset + (float)(180 * (var1 - 1))) / 180.0F * 3.1415927F;
-         float var3 = MathHelper.cos(var2);
-         return this.posX + (double)var3 * 1.3D;
+         float f = (this.renderYawOffset + (float)(180 * (i - 1))) / 180.0F * 3.1415927F;
+         float f1 = MathHelper.cos(f);
+         return this.posX + (double)f1 * 1.3D;
       }
    }
 
-   private double func_82208_v(int var1) {
-      return var1 <= 0?this.posY + 3.0D:this.posY + 2.2D;
+   private double func_82208_v(int i) {
+      return i <= 0?this.posY + 3.0D:this.posY + 2.2D;
    }
 
-   private double func_82213_w(int var1) {
-      if(var1 <= 0) {
+   private double func_82213_w(int i) {
+      if(i <= 0) {
          return this.posZ;
       } else {
-         float var2 = (this.renderYawOffset + (float)(180 * (var1 - 1))) / 180.0F * 3.1415927F;
-         float var3 = MathHelper.sin(var2);
-         return this.posZ + (double)var3 * 1.3D;
+         float f = (this.renderYawOffset + (float)(180 * (i - 1))) / 180.0F * 3.1415927F;
+         float f1 = MathHelper.sin(f);
+         return this.posZ + (double)f1 * 1.3D;
       }
    }
 
-   private float func_82204_b(float var1, float var2, float var3) {
-      float var4 = MathHelper.wrapAngleTo180_float(var2 - var1);
-      if(var4 > var3) {
-         var4 = var3;
+   private float func_82204_b(float f, float f1, float f2) {
+      float f3 = MathHelper.wrapAngleTo180_float(f1 - f);
+      if(f3 > f2) {
+         f3 = f2;
       }
 
-      if(var4 < -var3) {
-         var4 = -var3;
+      if(f3 < -f2) {
+         f3 = -f2;
       }
 
-      return var1 + var4;
+      return f + f3;
    }
 
-   private void func_82216_a(int var1, EntityLiving var2) {
-      this.func_82209_a(var1, var2.posX, var2.posY + (double)var2.getEyeHeight() * 0.5D, var2.posZ, var1 == 0 && this.rand.nextFloat() < 0.0010F);
+   private void func_82216_a(int i, EntityLiving entityliving) {
+      this.func_82209_a(i, entityliving.posX, entityliving.posY + (double)entityliving.getEyeHeight() * 0.5D, entityliving.posZ, i == 0 && this.rand.nextFloat() < 0.0010F);
    }
 
-   private void func_82209_a(int var1, double var2, double var4, double var6, boolean var8) {
+   private void func_82209_a(int i, double d0, double d1, double d2, boolean flag) {
       this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1014, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
-      double var9 = this.func_82214_u(var1);
-      double var11 = this.func_82208_v(var1);
-      double var13 = this.func_82213_w(var1);
-      double var15 = var2 - var9;
-      double var17 = var4 - var11;
-      double var19 = var6 - var13;
-      EntityWitherSkull var21 = new EntityWitherSkull(this.worldObj, this, var15, var17, var19);
-      if(var8) {
-         var21.setInvulnerable(true);
+      double d3 = this.func_82214_u(i);
+      double d4 = this.func_82208_v(i);
+      double d5 = this.func_82213_w(i);
+      double d6 = d0 - d3;
+      double d7 = d1 - d4;
+      double d8 = d2 - d5;
+      EntityWitherSkull entitywitherskull = new EntityWitherSkull(this.worldObj, this, d6, d7, d8);
+      if(flag) {
+         entitywitherskull.setInvulnerable(true);
       }
 
-      var21.posY = var11;
-      var21.posX = var9;
-      var21.posZ = var13;
-      this.worldObj.spawnEntityInWorld(var21);
+      entitywitherskull.posY = d4;
+      entitywitherskull.posX = d3;
+      entitywitherskull.posZ = d5;
+      this.worldObj.spawnEntityInWorld(entitywitherskull);
    }
 
-   public void attackEntityWithRangedAttack(EntityLiving var1) {
-      this.func_82216_a(0, var1);
+   public void attackEntityWithRangedAttack(EntityLiving entityliving) {
+      this.func_82216_a(0, entityliving);
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
-      } else if(var1 == DamageSource.drown) {
+      } else if(damagesource == DamageSource.drown) {
          return false;
       } else if(this.func_82212_n() > 0) {
          return false;
       } else {
-         Entity var3;
+         Entity entity;
          if(this.isArmored()) {
-            var3 = var1.getSourceOfDamage();
-            if(var3 instanceof EntityArrow) {
+            entity = damagesource.getSourceOfDamage();
+            if(entity instanceof EntityArrow) {
                return false;
             }
          }
 
-         var3 = var1.getEntity();
-         if(var3 != null && !(var3 instanceof EntityPlayer) && var3 instanceof EntityLiving && ((EntityLiving)var3).getCreatureAttribute() == this.getCreatureAttribute()) {
+         entity = damagesource.getEntity();
+         if(entity != null && !(entity instanceof EntityPlayer) && entity instanceof EntityLiving && ((EntityLiving)entity).getCreatureAttribute() == this.getCreatureAttribute()) {
             return false;
          } else {
             if(this.field_82222_j <= 0) {
                this.field_82222_j = 20;
             }
 
-            for(int var4 = 0; var4 < this.field_82224_i.length; ++var4) {
-               this.field_82224_i[var4] += 3;
+            for(int j = 0; j < this.field_82224_i.length; ++j) {
+               this.field_82224_i[j] += 3;
             }
 
-            return super.attackEntityFrom(var1, var2);
+            return super.attackEntityFrom(damagesource, i);
          }
       }
    }
 
-   protected void dropFewItems(boolean var1, int var2) {
-      this.dropItem(Item.netherStar.shiftedIndex, 1);
+   protected void dropFewItems(boolean flag, int i) {
+      ArrayList loot = new ArrayList();
+      loot.add(new org.bukkit.inventory.ItemStack(Item.netherStar.shiftedIndex, 1));
+      CraftEventFactory.callEntityDeathEvent(this, loot);
    }
 
    protected void despawnEntity() {
@@ -413,9 +430,9 @@
       return this.dataWatcher.getWatchableObjectInt(16);
    }
 
-   protected void fall(float var1) {}
+   protected void fall(float f) {}
 
-   public void addPotionEffect(PotionEffect var1) {}
+   public void addPotionEffect(PotionEffect mobeffect) {}
 
    protected boolean isAIEnabled() {
       return true;
@@ -429,16 +446,16 @@
       return this.dataWatcher.getWatchableObjectInt(20);
    }
 
-   public void func_82215_s(int var1) {
-      this.dataWatcher.updateObject(20, Integer.valueOf(var1));
+   public void func_82215_s(int i) {
+      this.dataWatcher.updateObject(20, Integer.valueOf(i));
    }
 
-   public int getWatchedTargetId(int var1) {
-      return this.dataWatcher.getWatchableObjectInt(17 + var1);
+   public int getWatchedTargetId(int i) {
+      return this.dataWatcher.getWatchableObjectInt(17 + i);
    }
 
-   public void func_82211_c(int var1, int var2) {
-      this.dataWatcher.updateObject(17 + var1, Integer.valueOf(var2));
+   public void func_82211_c(int i, int j) {
+      this.dataWatcher.updateObject(17 + i, Integer.valueOf(j));
    }
 
    public boolean isArmored() {
Binary files mcp-mcdev/net/minecraft/src/EntityWitherSkull.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWitherSkull.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityWitherSkull.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWitherSkull.java
--- mcp-mcdev/net/minecraft/src/EntityWitherSkull.java	2012-11-29 21:14:53.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWitherSkull.java	2012-11-29 20:44:06.000000000 -0800
@@ -9,16 +9,18 @@
 import net.minecraft.src.Potion;
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.World;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
 
 public class EntityWitherSkull extends EntityFireball {
 
-   public EntityWitherSkull(World var1) {
-      super(var1);
+   public EntityWitherSkull(World world) {
+      super(world);
       this.setSize(0.3125F, 0.3125F);
    }
 
-   public EntityWitherSkull(World var1, EntityLiving var2, double var3, double var5, double var7) {
-      super(var1, var2, var3, var5, var7);
+   public EntityWitherSkull(World world, EntityLiving entityliving, double d0, double d1, double d2) {
+      super(world, entityliving, d0, d1, d2);
       this.setSize(0.3125F, 0.3125F);
    }
 
@@ -30,43 +32,48 @@
       return false;
    }
 
-   public float func_82146_a(Explosion var1, Block var2, int var3, int var4, int var5) {
-      float var6 = super.func_82146_a(var1, var2, var3, var4, var5);
-      if(this.isInvulnerable() && var2 != Block.bedrock && var2 != Block.endPortal && var2 != Block.endPortalFrame) {
-         var6 = Math.min(0.8F, var6);
+   public float func_82146_a(Explosion explosion, Block block, int i, int j, int k) {
+      float f = super.func_82146_a(explosion, block, i, j, k);
+      if(this.isInvulnerable() && block != Block.bedrock && block != Block.endPortal && block != Block.endPortalFrame) {
+         f = Math.min(0.8F, f);
       }
 
-      return var6;
+      return f;
    }
 
-   protected void onImpact(MovingObjectPosition var1) {
+   protected void onImpact(MovingObjectPosition movingobjectposition) {
       if(!this.worldObj.isRemote) {
-         if(var1.entityHit != null) {
+         if(movingobjectposition.entityHit != null) {
             if(this.shootingEntity != null) {
-               if(var1.entityHit.attackEntityFrom(DamageSource.causeMobDamage(this.shootingEntity), 8) && !var1.entityHit.isEntityAlive()) {
-                  this.shootingEntity.heal(5);
+               if(movingobjectposition.entityHit.attackEntityFrom(DamageSource.causeMobDamage(this.shootingEntity), 8) && !movingobjectposition.entityHit.isEntityAlive()) {
+                  this.shootingEntity.heal(5, RegainReason.WITHER);
                }
             } else {
-               var1.entityHit.attackEntityFrom(DamageSource.magic, 5);
+               movingobjectposition.entityHit.attackEntityFrom(DamageSource.magic, 5);
             }
 
-            if(var1.entityHit instanceof EntityLiving) {
-               byte var2 = 0;
+            if(movingobjectposition.entityHit instanceof EntityLiving) {
+               byte event = 0;
                if(this.worldObj.difficultySetting > 1) {
                   if(this.worldObj.difficultySetting == 2) {
-                     var2 = 10;
+                     event = 10;
                   } else if(this.worldObj.difficultySetting == 3) {
-                     var2 = 40;
+                     event = 40;
                   }
                }
 
-               if(var2 > 0) {
-                  ((EntityLiving)var1.entityHit).addPotionEffect(new PotionEffect(Potion.wither.id, 20 * var2, 1));
+               if(event > 0) {
+                  ((EntityLiving)movingobjectposition.entityHit).addPotionEffect(new PotionEffect(Potion.wither.id, 20 * event, 1));
                }
             }
          }
 
-         this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, 1.0F, false, this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+         ExplosionPrimeEvent event1 = new ExplosionPrimeEvent(this.getBukkitEntity(), 1.0F, false);
+         this.worldObj.getServer().getPluginManager().callEvent(event1);
+         if(!event1.isCancelled()) {
+            this.worldObj.newExplosion(this, this.posX, this.posY, this.posZ, event1.getRadius(), event1.getFire(), this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"));
+         }
+
          this.setDead();
       }
 
@@ -76,7 +83,7 @@
       return false;
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       return false;
    }
 
@@ -88,7 +95,7 @@
       return this.dataWatcher.getWatchableObjectByte(10) == 1;
    }
 
-   public void setInvulnerable(boolean var1) {
-      this.dataWatcher.updateObject(10, Byte.valueOf((byte)(var1?1:0)));
+   public void setInvulnerable(boolean flag) {
+      this.dataWatcher.updateObject(10, Byte.valueOf((byte)(flag?1:0)));
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityWolf.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWolf.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityWolf.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWolf.java
--- mcp-mcdev/net/minecraft/src/EntityWolf.java	2012-11-29 21:14:53.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityWolf.java	2012-11-29 20:44:06.000000000 -0800
@@ -30,6 +30,7 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.PathEntity;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public class EntityWolf extends EntityTameable {
 
@@ -41,8 +42,8 @@
    private float prevTimeWolfIsShaking;
 
 
-   public EntityWolf(World var1) {
-      super(var1);
+   public EntityWolf(World world) {
+      super(world);
       this.texture = "/mob/wolf.png";
       this.setSize(0.6F, 0.8F);
       this.moveSpeed = 0.3F;
@@ -67,9 +68,9 @@
       return true;
    }
 
-   public void setAttackTarget(EntityLiving var1) {
-      super.setAttackTarget(var1);
-      if(var1 instanceof EntityPlayer) {
+   public void setAttackTarget(EntityLiving entityliving) {
+      super.setAttackTarget(entityliving);
+      if(entityliving instanceof EntityPlayer) {
          this.setAngry(true);
       }
 
@@ -90,21 +91,21 @@
       this.dataWatcher.addObject(20, new Byte((byte)BlockCloth.getBlockFromDye(1)));
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.wolf.step", 0.15F, 1.0F);
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
-      var1.setBoolean("Angry", this.isAngry());
-      var1.setByte("CollarColor", (byte)this.getCollarColor());
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
+      nbttagcompound.setBoolean("Angry", this.isAngry());
+      nbttagcompound.setByte("CollarColor", (byte)this.getCollarColor());
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      this.setAngry(var1.getBoolean("Angry"));
-      if(var1.hasKey("CollarColor")) {
-         this.setCollarColor(var1.getByte("CollarColor"));
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      this.setAngry(nbttagcompound.getBoolean("Angry"));
+      if(nbttagcompound.hasKey("CollarColor")) {
+         this.setCollarColor(nbttagcompound.getByte("CollarColor"));
       }
 
    }
@@ -177,13 +178,13 @@
          }
 
          if(this.timeWolfIsShaking > 0.4F) {
-            float var1 = (float)this.boundingBox.minY;
-            int var2 = (int)(MathHelper.sin((this.timeWolfIsShaking - 0.4F) * 3.1415927F) * 7.0F);
+            float f = (float)this.boundingBox.minY;
+            int i = (int)(MathHelper.sin((this.timeWolfIsShaking - 0.4F) * 3.1415927F) * 7.0F);
 
-            for(int var3 = 0; var3 < var2; ++var3) {
-               float var4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
-               float var5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
-               this.worldObj.spawnParticle("splash", this.posX + (double)var4, (double)(var1 + 0.8F), this.posZ + (double)var5, this.motionX, this.motionY, this.motionZ);
+            for(int j = 0; j < i; ++j) {
+               float f1 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
+               float f2 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
+               this.worldObj.spawnParticle("splash", this.posX + (double)f1, (double)(f + 0.8F), this.posZ + (double)f2, this.motionX, this.motionY, this.motionZ);
             }
          }
       }
@@ -198,49 +199,49 @@
       return this.isSitting()?20:super.getVerticalFaceSpeed();
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
-         Entity var3 = var1.getEntity();
+         Entity entity = damagesource.getEntity();
          this.aiSit.setSitting(false);
-         if(var3 != null && !(var3 instanceof EntityPlayer) && !(var3 instanceof EntityArrow)) {
-            var2 = (var2 + 1) / 2;
+         if(entity != null && !(entity instanceof EntityPlayer) && !(entity instanceof EntityArrow)) {
+            i = (i + 1) / 2;
          }
 
-         return super.attackEntityFrom(var1, var2);
+         return super.attackEntityFrom(damagesource, i);
       }
    }
 
-   public boolean attackEntityAsMob(Entity var1) {
-      int var2 = this.isTamed()?4:2;
-      return var1.attackEntityFrom(DamageSource.causeMobDamage(this), var2);
+   public boolean attackEntityAsMob(Entity entity) {
+      int i = this.isTamed()?4:2;
+      return entity.attackEntityFrom(DamageSource.causeMobDamage(this), i);
    }
 
-   public boolean interact(EntityPlayer var1) {
-      ItemStack var2 = var1.inventory.getCurrentItem();
+   public boolean interact(EntityPlayer entityhuman) {
+      ItemStack itemstack = entityhuman.inventory.getCurrentItem();
       if(this.isTamed()) {
-         if(var2 != null) {
-            if(Item.itemsList[var2.itemID] instanceof ItemFood) {
-               ItemFood var3 = (ItemFood)Item.itemsList[var2.itemID];
-               if(var3.isWolfsFavoriteMeat() && this.dataWatcher.getWatchableObjectInt(18) < 20) {
-                  if(!var1.capabilities.isCreativeMode) {
-                     --var2.stackSize;
+         if(itemstack != null) {
+            if(Item.itemsList[itemstack.itemID] instanceof ItemFood) {
+               ItemFood i = (ItemFood)Item.itemsList[itemstack.itemID];
+               if(i.isWolfsFavoriteMeat() && this.dataWatcher.getWatchableObjectInt(18) < 20) {
+                  if(!entityhuman.capabilities.isCreativeMode) {
+                     --itemstack.stackSize;
                   }
 
-                  this.heal(var3.getHealAmount());
-                  if(var2.stackSize <= 0) {
-                     var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+                  this.heal(i.getHealAmount());
+                  if(itemstack.stackSize <= 0) {
+                     entityhuman.inventory.setInventorySlotContents(entityhuman.inventory.currentItem, (ItemStack)null);
                   }
 
                   return true;
                }
-            } else if(var2.itemID == Item.dyePowder.shiftedIndex) {
-               int var4 = BlockCloth.getBlockFromDye(var2.getItemDamage());
+            } else if(itemstack.itemID == Item.dyePowder.shiftedIndex) {
+               int var4 = BlockCloth.getBlockFromDye(itemstack.getItemDamage());
                if(var4 != this.getCollarColor()) {
                   this.setCollarColor(var4);
-                  if(!var1.capabilities.isCreativeMode && --var2.stackSize <= 0) {
-                     var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+                  if(!entityhuman.capabilities.isCreativeMode && --itemstack.stackSize <= 0) {
+                     entityhuman.inventory.setInventorySlotContents(entityhuman.inventory.currentItem, (ItemStack)null);
                   }
 
                   return true;
@@ -248,28 +249,28 @@
             }
          }
 
-         if(var1.username.equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(var2)) {
+         if(entityhuman.username.equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(itemstack)) {
             this.aiSit.setSitting(!this.isSitting());
             this.isJumping = false;
             this.setPathToEntity((PathEntity)null);
          }
-      } else if(var2 != null && var2.itemID == Item.bone.shiftedIndex && !this.isAngry()) {
-         if(!var1.capabilities.isCreativeMode) {
-            --var2.stackSize;
+      } else if(itemstack != null && itemstack.itemID == Item.bone.shiftedIndex && !this.isAngry()) {
+         if(!entityhuman.capabilities.isCreativeMode) {
+            --itemstack.stackSize;
          }
 
-         if(var2.stackSize <= 0) {
-            var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+         if(itemstack.stackSize <= 0) {
+            entityhuman.inventory.setInventorySlotContents(entityhuman.inventory.currentItem, (ItemStack)null);
          }
 
          if(!this.worldObj.isRemote) {
-            if(this.rand.nextInt(3) == 0) {
+            if(this.rand.nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, entityhuman).isCancelled()) {
                this.setTamed(true);
                this.setPathToEntity((PathEntity)null);
                this.setAttackTarget((EntityLiving)null);
                this.aiSit.setSitting(true);
                this.setEntityHealth(20);
-               this.setOwner(var1.username);
+               this.setOwner(entityhuman.username);
                this.playTameEffect(true);
                this.worldObj.setEntityState(this, (byte)7);
             } else {
@@ -281,11 +282,11 @@
          return true;
       }
 
-      return super.interact(var1);
+      return super.interact(entityhuman);
    }
 
-   public boolean isBreedingItem(ItemStack var1) {
-      return var1 == null?false:(!(Item.itemsList[var1.itemID] instanceof ItemFood)?false:((ItemFood)Item.itemsList[var1.itemID]).isWolfsFavoriteMeat());
+   public boolean isBreedingItem(ItemStack itemstack) {
+      return itemstack == null?false:(!(Item.itemsList[itemstack.itemID] instanceof ItemFood)?false:((ItemFood)Item.itemsList[itemstack.itemID]).isWolfsFavoriteMeat());
    }
 
    public int getMaxSpawnedInChunk() {
@@ -296,12 +297,12 @@
       return (this.dataWatcher.getWatchableObjectByte(16) & 2) != 0;
    }
 
-   public void setAngry(boolean var1) {
-      byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-      if(var1) {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 | 2)));
+   public void setAngry(boolean flag) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(16);
+      if(flag) {
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 | 2)));
       } else {
-         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 & -3)));
+         this.dataWatcher.updateObject(16, Byte.valueOf((byte)(b0 & -3)));
       }
 
    }
@@ -310,24 +311,24 @@
       return this.dataWatcher.getWatchableObjectByte(20) & 15;
    }
 
-   public void setCollarColor(int var1) {
-      this.dataWatcher.updateObject(20, Byte.valueOf((byte)(var1 & 15)));
+   public void setCollarColor(int i) {
+      this.dataWatcher.updateObject(20, Byte.valueOf((byte)(i & 15)));
    }
 
-   public EntityWolf spawnBabyAnimal(EntityAgeable var1) {
-      EntityWolf var2 = new EntityWolf(this.worldObj);
-      String var3 = this.getOwnerName();
-      if(var3 != null && var3.trim().length() > 0) {
-         var2.setOwner(var3);
-         var2.setTamed(true);
+   public EntityWolf spawnBabyAnimal(EntityAgeable entityageable) {
+      EntityWolf entitywolf = new EntityWolf(this.worldObj);
+      String s = this.getOwnerName();
+      if(s != null && s.trim().length() > 0) {
+         entitywolf.setOwner(s);
+         entitywolf.setTamed(true);
       }
 
-      return var2;
+      return entitywolf;
    }
 
-   public void func_70918_i(boolean var1) {
-      byte var2 = this.dataWatcher.getWatchableObjectByte(19);
-      if(var1) {
+   public void func_70918_i(boolean flag) {
+      byte b0 = this.dataWatcher.getWatchableObjectByte(19);
+      if(flag) {
          this.dataWatcher.updateObject(19, Byte.valueOf((byte)1));
       } else {
          this.dataWatcher.updateObject(19, Byte.valueOf((byte)0));
@@ -335,16 +336,16 @@
 
    }
 
-   public boolean canMateWith(EntityAnimal var1) {
-      if(var1 == this) {
+   public boolean canMateWith(EntityAnimal entityanimal) {
+      if(entityanimal == this) {
          return false;
       } else if(!this.isTamed()) {
          return false;
-      } else if(!(var1 instanceof EntityWolf)) {
+      } else if(!(entityanimal instanceof EntityWolf)) {
          return false;
       } else {
-         EntityWolf var2 = (EntityWolf)var1;
-         return !var2.isTamed()?false:(var2.isSitting()?false:this.isInLove() && var2.isInLove());
+         EntityWolf entitywolf = (EntityWolf)entityanimal;
+         return !entitywolf.isTamed()?false:(entitywolf.isSitting()?false:this.isInLove() && entitywolf.isInLove());
       }
    }
 
@@ -352,8 +353,7 @@
       return this.dataWatcher.getWatchableObjectByte(19) == 1;
    }
 
-   // $FF: synthetic method
-   public EntityAgeable func_90011_a(EntityAgeable var1) {
-      return this.spawnBabyAnimal(var1);
+   public EntityAgeable func_90011_a(EntityAgeable entityageable) {
+      return this.spawnBabyAnimal(entityageable);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/EntityXPOrb.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityXPOrb.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityXPOrb.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityXPOrb.java
--- mcp-mcdev/net/minecraft/src/EntityXPOrb.java	2012-11-29 21:14:53.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityXPOrb.java	2012-11-29 20:44:05.000000000 -0800
@@ -8,6 +8,10 @@
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 
 public class EntityXPOrb extends Entity {
 
@@ -15,29 +19,29 @@
    public int xpOrbAge = 0;
    public int field_70532_c;
    private int xpOrbHealth = 5;
-   private int xpValue;
+   public int xpValue;
    private EntityPlayer closestPlayer;
    private int field_80002_g;
 
 
-   public EntityXPOrb(World var1, double var2, double var4, double var6, int var8) {
-      super(var1);
+   public EntityXPOrb(World world, double d0, double d1, double d2, int i) {
+      super(world);
       this.setSize(0.5F, 0.5F);
       this.yOffset = this.height / 2.0F;
-      this.setPosition(var2, var4, var6);
+      this.setPosition(d0, d1, d2);
       this.rotationYaw = (float)(Math.random() * 360.0D);
       this.motionX = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F);
       this.motionY = (double)((float)(Math.random() * 0.2D) * 2.0F);
       this.motionZ = (double)((float)(Math.random() * 0.20000000298023224D - 0.10000000149011612D) * 2.0F);
-      this.xpValue = var8;
+      this.xpValue = i;
    }
 
    protected boolean canTriggerWalking() {
       return false;
    }
 
-   public EntityXPOrb(World var1) {
-      super(var1);
+   public EntityXPOrb(World world) {
+      super(world);
       this.setSize(0.25F, 0.25F);
       this.yOffset = this.height / 2.0F;
    }
@@ -62,42 +66,46 @@
       }
 
       this.pushOutOfBlocks(this.posX, (this.boundingBox.minY + this.boundingBox.maxY) / 2.0D, this.posZ);
-      double var1 = 8.0D;
+      double d0 = 8.0D;
       if(this.field_80002_g < this.xpColor - 20 + this.entityId % 100) {
-         if(this.closestPlayer == null || this.closestPlayer.getDistanceSqToEntity(this) > var1 * var1) {
-            this.closestPlayer = this.worldObj.getClosestPlayerToEntity(this, var1);
+         if(this.closestPlayer == null || this.closestPlayer.getDistanceSqToEntity(this) > d0 * d0) {
+            this.closestPlayer = this.worldObj.getClosestPlayerToEntity(this, d0);
          }
 
          this.field_80002_g = this.xpColor;
       }
 
       if(this.closestPlayer != null) {
-         double var3 = (this.closestPlayer.posX - this.posX) / var1;
-         double var5 = (this.closestPlayer.posY + (double)this.closestPlayer.getEyeHeight() - this.posY) / var1;
-         double var7 = (this.closestPlayer.posZ - this.posZ) / var1;
-         double var9 = Math.sqrt(var3 * var3 + var5 * var5 + var7 * var7);
-         double var11 = 1.0D - var9;
-         if(var11 > 0.0D) {
-            var11 *= var11;
-            this.motionX += var3 / var9 * var11 * 0.1D;
-            this.motionY += var5 / var9 * var11 * 0.1D;
-            this.motionZ += var7 / var9 * var11 * 0.1D;
+         EntityTargetEvent f = CraftEventFactory.callEntityTargetEvent(this, this.closestPlayer, TargetReason.CLOSEST_PLAYER);
+         Entity i = f.getTarget() == null?null:((CraftEntity)f.getTarget()).getHandle();
+         if(!f.isCancelled() && i != null) {
+            double d1 = (i.posX - this.posX) / d0;
+            double d2 = (i.posY + (double)i.getEyeHeight() - this.posY) / d0;
+            double d3 = (i.posZ - this.posZ) / d0;
+            double d4 = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3);
+            double d5 = 1.0D - d4;
+            if(d5 > 0.0D) {
+               d5 *= d5;
+               this.motionX += d1 / d4 * d5 * 0.1D;
+               this.motionY += d2 / d4 * d5 * 0.1D;
+               this.motionZ += d3 / d4 * d5 * 0.1D;
+            }
          }
       }
 
       this.moveEntity(this.motionX, this.motionY, this.motionZ);
-      float var13 = 0.98F;
+      float var15 = 0.98F;
       if(this.onGround) {
-         var13 = 0.58800006F;
-         int var14 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-         if(var14 > 0) {
-            var13 = Block.blocksList[var14].slipperiness * 0.98F;
+         var15 = 0.58800006F;
+         int var16 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
+         if(var16 > 0) {
+            var15 = Block.blocksList[var16].slipperiness * 0.98F;
          }
       }
 
-      this.motionX *= (double)var13;
+      this.motionX *= (double)var15;
       this.motionY *= 0.9800000190734863D;
-      this.motionZ *= (double)var13;
+      this.motionZ *= (double)var15;
       if(this.onGround) {
          this.motionY *= -0.8999999761581421D;
       }
@@ -114,16 +122,16 @@
       return this.worldObj.handleMaterialAcceleration(this.boundingBox, Material.water, this);
    }
 
-   protected void dealFireDamage(int var1) {
-      this.attackEntityFrom(DamageSource.inFire, var1);
+   protected void dealFireDamage(int i) {
+      this.attackEntityFrom(DamageSource.inFire, i);
    }
 
-   public boolean attackEntityFrom(DamageSource var1, int var2) {
+   public boolean attackEntityFrom(DamageSource damagesource, int i) {
       if(this.func_85032_ar()) {
          return false;
       } else {
          this.setBeenAttacked();
-         this.xpOrbHealth -= var2;
+         this.xpOrbHealth -= i;
          if(this.xpOrbHealth <= 0) {
             this.setDead();
          }
@@ -132,37 +140,35 @@
       }
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      var1.setShort("Health", (short)((byte)this.xpOrbHealth));
-      var1.setShort("Age", (short)this.xpOrbAge);
-      var1.setShort("Value", (short)this.xpValue);
-   }
-
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      this.xpOrbHealth = var1.getShort("Health") & 255;
-      this.xpOrbAge = var1.getShort("Age");
-      this.xpValue = var1.getShort("Value");
-   }
-
-   public void onCollideWithPlayer(EntityPlayer var1) {
-      if(!this.worldObj.isRemote) {
-         if(this.field_70532_c == 0 && var1.xpCooldown == 0) {
-            var1.xpCooldown = 2;
-            this.func_85030_a("random.orb", 0.1F, 0.5F * ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.8F));
-            var1.onItemPickup(this, 1);
-            var1.addExperience(this.xpValue);
-            this.setDead();
-         }
-
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setShort("Health", (short)((byte)this.xpOrbHealth));
+      nbttagcompound.setShort("Age", (short)this.xpOrbAge);
+      nbttagcompound.setShort("Value", (short)this.xpValue);
+   }
+
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      this.xpOrbHealth = nbttagcompound.getShort("Health") & 255;
+      this.xpOrbAge = nbttagcompound.getShort("Age");
+      this.xpValue = nbttagcompound.getShort("Value");
+   }
+
+   public void onCollideWithPlayer(EntityPlayer entityhuman) {
+      if(!this.worldObj.isRemote && this.field_70532_c == 0 && entityhuman.xpCooldown == 0) {
+         entityhuman.xpCooldown = 2;
+         this.func_85030_a("random.orb", 0.1F, 0.5F * ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.8F));
+         entityhuman.onItemPickup(this, 1);
+         entityhuman.addExperience(CraftEventFactory.callPlayerExpChangeEvent(entityhuman, this.xpValue).getAmount());
+         this.setDead();
       }
+
    }
 
    public int getXpValue() {
       return this.xpValue;
    }
 
-   public static int getXPSplit(int var0) {
-      return var0 >= 2477?2477:(var0 >= 1237?1237:(var0 >= 617?617:(var0 >= 307?307:(var0 >= 149?149:(var0 >= 73?73:(var0 >= 37?37:(var0 >= 17?17:(var0 >= 7?7:(var0 >= 3?3:1)))))))));
+   public static int getXPSplit(int i) {
+      return i > 162670129?i - 100000:(i > 81335063?81335063:(i > 40667527?40667527:(i > 20333759?20333759:(i > 10166857?10166857:(i > 5083423?5083423:(i > 2541701?2541701:(i > 1270849?1270849:(i > 635413?635413:(i > 317701?317701:(i > 158849?158849:(i > 79423?79423:(i > '\u9b1d'?'\u9b1d':(i > 19853?19853:(i > 9923?9923:(i > 4957?4957:(i >= 2477?2477:(i >= 1237?1237:(i >= 617?617:(i >= 307?307:(i >= 149?149:(i >= 73?73:(i >= 37?37:(i >= 17?17:(i >= 7?7:(i >= 3?3:1)))))))))))))))))))))))));
    }
 
    public boolean canAttackWithItem() {
Binary files mcp-mcdev/net/minecraft/src/EntityZombie.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityZombie.class differ
diff -ur mcp-mcdev/net/minecraft/src/EntityZombie.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityZombie.java
--- mcp-mcdev/net/minecraft/src/EntityZombie.java	2012-11-29 21:14:53.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/EntityZombie.java	2012-11-29 20:44:05.000000000 -0800
@@ -25,14 +25,15 @@
 import net.minecraft.src.Potion;
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.World;
+import org.bukkit.event.entity.EntityCombustEvent;
 
 public class EntityZombie extends EntityMob {
 
    private int conversionTime = 0;
 
 
-   public EntityZombie(World var1) {
-      super(var1);
+   public EntityZombie(World world) {
+      super(world);
       this.texture = "/mob/zombie.png";
       this.moveSpeed = 0.23F;
       this.getNavigator().setBreakDoors(true);
@@ -66,12 +67,12 @@
    }
 
    public int getTotalArmorValue() {
-      int var1 = super.getTotalArmorValue() + 2;
-      if(var1 > 20) {
-         var1 = 20;
+      int i = super.getTotalArmorValue() + 2;
+      if(i > 20) {
+         i = 20;
       }
 
-      return var1;
+      return i;
    }
 
    protected boolean isAIEnabled() {
@@ -82,38 +83,42 @@
       return this.getDataWatcher().getWatchableObjectByte(12) == 1;
    }
 
-   public void setChild(boolean var1) {
-      this.getDataWatcher().updateObject(12, Byte.valueOf((byte)1));
+   public void setChild(boolean flag) {
+      this.getDataWatcher().updateObject(12, Byte.valueOf((byte)(flag?1:0)));
    }
 
    public boolean isVillager() {
       return this.getDataWatcher().getWatchableObjectByte(13) == 1;
    }
 
-   public void setVillager(boolean var1) {
-      this.getDataWatcher().updateObject(13, Byte.valueOf((byte)(var1?1:0)));
+   public void setVillager(boolean flag) {
+      this.getDataWatcher().updateObject(13, Byte.valueOf((byte)(flag?1:0)));
    }
 
    public void onLivingUpdate() {
       if(this.worldObj.isDaytime() && !this.worldObj.isRemote && !this.isChild()) {
-         float var1 = this.getBrightness(1.0F);
-         if(var1 > 0.5F && this.rand.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
-            boolean var2 = true;
-            ItemStack var3 = this.getEquipmentInSlot(4);
-            if(var3 != null) {
-               if(var3.isItemStackDamageable()) {
-                  var3.setItemDamage(var3.getItemDamageForDisplay() + this.rand.nextInt(2));
-                  if(var3.getItemDamageForDisplay() >= var3.getMaxDamage()) {
-                     this.renderBrokenItemStack(var3);
+         float f = this.getBrightness(1.0F);
+         if(f > 0.5F && this.rand.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
+            boolean flag = true;
+            ItemStack itemstack = this.getEquipmentInSlot(4);
+            if(itemstack != null) {
+               if(itemstack.isItemStackDamageable()) {
+                  itemstack.setItemDamage(itemstack.getItemDamageForDisplay() + this.rand.nextInt(2));
+                  if(itemstack.getItemDamageForDisplay() >= itemstack.getMaxDamage()) {
+                     this.renderBrokenItemStack(itemstack);
                      this.setCurrentItemOrArmor(4, (ItemStack)null);
                   }
                }
 
-               var2 = false;
+               flag = false;
             }
 
-            if(var2) {
-               this.setFire(8);
+            if(flag) {
+               EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
+               this.worldObj.getServer().getPluginManager().callEvent(event);
+               if(!event.isCancelled()) {
+                  this.setFire(event.getDuration());
+               }
             }
          }
       }
@@ -123,8 +128,8 @@
 
    public void onUpdate() {
       if(!this.worldObj.isRemote && this.func_82230_o()) {
-         int var1 = this.getConversionTimeBoost();
-         this.conversionTime -= var1;
+         int i = this.getConversionTimeBoost();
+         this.conversionTime -= i;
          if(this.conversionTime <= 0) {
             this.convertToVillager();
          }
@@ -133,14 +138,14 @@
       super.onUpdate();
    }
 
-   public int getAttackStrength(Entity var1) {
-      ItemStack var2 = this.getHeldItem();
-      int var3 = 4;
-      if(var2 != null) {
-         var3 += var2.getDamageVsEntity(this);
+   public int getAttackStrength(Entity entity) {
+      ItemStack itemstack = this.getHeldItem();
+      int i = 4;
+      if(itemstack != null) {
+         i += itemstack.getDamageVsEntity(this);
       }
 
-      return var3;
+      return i;
    }
 
    protected String getLivingSound() {
@@ -155,7 +160,7 @@
       return "mob.zombie.death";
    }
 
-   protected void playStepSound(int var1, int var2, int var3, int var4) {
+   protected void playStepSound(int i, int j, int k, int l) {
       this.func_85030_a("mob.zombie.step", 0.15F, 1.0F);
    }
 
@@ -167,25 +172,24 @@
       return EnumCreatureAttribute.UNDEAD;
    }
 
-   protected void dropRareDrop(int var1) {
+   protected ItemStack l(int i) {
       switch(this.rand.nextInt(3)) {
       case 0:
-         this.dropItem(Item.ingotIron.shiftedIndex, 1);
-         break;
+         return new ItemStack(Item.ingotIron.shiftedIndex, 1, 0);
       case 1:
-         this.dropItem(Item.carrot.shiftedIndex, 1);
-         break;
+         return new ItemStack(Item.carrot.shiftedIndex, 1, 0);
       case 2:
-         this.dropItem(Item.potato.shiftedIndex, 1);
+         return new ItemStack(Item.potato.shiftedIndex, 1, 0);
+      default:
+         return null;
       }
-
    }
 
    protected void func_82164_bB() {
       super.func_82164_bB();
       if(this.rand.nextFloat() < (this.worldObj.difficultySetting == 3?0.05F:0.01F)) {
-         int var1 = this.rand.nextInt(3);
-         if(var1 == 0) {
+         int i = this.rand.nextInt(3);
+         if(i == 0) {
             this.setCurrentItemOrArmor(0, new ItemStack(Item.swordSteel));
          } else {
             this.setCurrentItemOrArmor(0, new ItemStack(Item.shovelSteel));
@@ -194,52 +198,52 @@
 
    }
 
-   public void writeEntityToNBT(NBTTagCompound var1) {
-      super.writeEntityToNBT(var1);
+   public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+      super.writeEntityToNBT(nbttagcompound);
       if(this.isChild()) {
-         var1.setBoolean("IsBaby", true);
+         nbttagcompound.setBoolean("IsBaby", true);
       }
 
       if(this.isVillager()) {
-         var1.setBoolean("IsVillager", true);
+         nbttagcompound.setBoolean("IsVillager", true);
       }
 
-      var1.setInteger("ConversionTime", this.func_82230_o()?this.conversionTime:-1);
+      nbttagcompound.setInteger("ConversionTime", this.func_82230_o()?this.conversionTime:-1);
    }
 
-   public void readEntityFromNBT(NBTTagCompound var1) {
-      super.readEntityFromNBT(var1);
-      if(var1.getBoolean("IsBaby")) {
+   public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+      super.readEntityFromNBT(nbttagcompound);
+      if(nbttagcompound.getBoolean("IsBaby")) {
          this.setChild(true);
       }
 
-      if(var1.getBoolean("IsVillager")) {
+      if(nbttagcompound.getBoolean("IsVillager")) {
          this.setVillager(true);
       }
 
-      if(var1.hasKey("ConversionTime") && var1.getInteger("ConversionTime") > -1) {
-         this.startConversion(var1.getInteger("ConversionTime"));
+      if(nbttagcompound.hasKey("ConversionTime") && nbttagcompound.getInteger("ConversionTime") > -1) {
+         this.startConversion(nbttagcompound.getInteger("ConversionTime"));
       }
 
    }
 
-   public void onKillEntity(EntityLiving var1) {
-      super.onKillEntity(var1);
-      if(this.worldObj.difficultySetting >= 2 && var1 instanceof EntityVillager) {
+   public void onKillEntity(EntityLiving entityliving) {
+      super.onKillEntity(entityliving);
+      if(this.worldObj.difficultySetting >= 2 && entityliving instanceof EntityVillager) {
          if(this.worldObj.difficultySetting == 2 && this.rand.nextBoolean()) {
             return;
          }
 
-         EntityZombie var2 = new EntityZombie(this.worldObj);
-         var2.func_82149_j(var1);
-         this.worldObj.setEntityDead(var1);
-         var2.initCreature();
-         var2.setVillager(true);
-         if(var1.isChild()) {
-            var2.setChild(true);
+         EntityZombie entityzombie = new EntityZombie(this.worldObj);
+         entityzombie.func_82149_j(entityliving);
+         this.worldObj.setEntityDead(entityliving);
+         entityzombie.initCreature();
+         entityzombie.setVillager(true);
+         if(entityliving.isChild()) {
+            entityzombie.setChild(true);
          }
 
-         this.worldObj.spawnEntityInWorld(var2);
+         this.worldObj.spawnEntityInWorld(entityzombie);
          this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1016, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
       }
 
@@ -254,8 +258,8 @@
       this.func_82164_bB();
       this.func_82162_bC();
       if(this.getEquipmentInSlot(4) == null) {
-         Calendar var1 = this.worldObj.getCurrentDate();
-         if(var1.get(2) + 1 == 10 && var1.get(5) == 31 && this.rand.nextFloat() < 0.25F) {
+         Calendar calendar = this.worldObj.getCurrentDate();
+         if(calendar.get(2) + 1 == 10 && calendar.get(5) == 31 && this.rand.nextFloat() < 0.25F) {
             this.setCurrentItemOrArmor(4, new ItemStack(this.rand.nextFloat() < 0.1F?Block.pumpkinLantern:Block.pumpkin));
             this.equipmentDropChances[4] = 0.0F;
          }
@@ -263,15 +267,15 @@
 
    }
 
-   public boolean interact(EntityPlayer var1) {
-      ItemStack var2 = var1.getCurrentEquippedItem();
-      if(var2 != null && var2.getItem() == Item.appleGold && var2.getItemDamage() == 0 && this.isVillager() && this.isPotionActive(Potion.weakness)) {
-         if(!var1.capabilities.isCreativeMode) {
-            --var2.stackSize;
+   public boolean interact(EntityPlayer entityhuman) {
+      ItemStack itemstack = entityhuman.getCurrentEquippedItem();
+      if(itemstack != null && itemstack.getItem() == Item.appleGold && itemstack.getItemDamage() == 0 && this.isVillager() && this.isPotionActive(Potion.weakness)) {
+         if(!entityhuman.capabilities.isCreativeMode) {
+            --itemstack.stackSize;
          }
 
-         if(var2.stackSize <= 0) {
-            var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+         if(itemstack.stackSize <= 0) {
+            entityhuman.inventory.setInventorySlotContents(entityhuman.inventory.currentItem, (ItemStack)null);
          }
 
          if(!this.worldObj.isRemote) {
@@ -284,11 +288,11 @@
       }
    }
 
-   protected void startConversion(int var1) {
-      this.conversionTime = var1;
+   protected void startConversion(int i) {
+      this.conversionTime = i;
       this.getDataWatcher().updateObject(14, Byte.valueOf((byte)1));
       this.removePotionEffect(Potion.weakness.id);
-      this.addPotionEffect(new PotionEffect(Potion.damageBoost.id, var1, Math.min(this.worldObj.difficultySetting - 1, 0)));
+      this.addPotionEffect(new PotionEffect(Potion.damageBoost.id, i, Math.min(this.worldObj.difficultySetting - 1, 0)));
       this.worldObj.setEntityState(this, (byte)16);
    }
 
@@ -297,41 +301,41 @@
    }
 
    protected void convertToVillager() {
-      EntityVillager var1 = new EntityVillager(this.worldObj);
-      var1.func_82149_j(this);
-      var1.initCreature();
-      var1.func_82187_q();
+      EntityVillager entityvillager = new EntityVillager(this.worldObj);
+      entityvillager.func_82149_j(this);
+      entityvillager.initCreature();
+      entityvillager.func_82187_q();
       if(this.isChild()) {
-         var1.setGrowingAge(-24000);
+         entityvillager.setGrowingAge(-24000);
       }
 
       this.worldObj.setEntityDead(this);
-      this.worldObj.spawnEntityInWorld(var1);
-      var1.addPotionEffect(new PotionEffect(Potion.confusion.id, 200, 0));
+      this.worldObj.spawnEntityInWorld(entityvillager);
+      entityvillager.addPotionEffect(new PotionEffect(Potion.confusion.id, 200, 0));
       this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1017, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
    }
 
    protected int getConversionTimeBoost() {
-      int var1 = 1;
+      int i = 1;
       if(this.rand.nextFloat() < 0.01F) {
-         int var2 = 0;
+         int j = 0;
 
-         for(int var3 = (int)this.posX - 4; var3 < (int)this.posX + 4 && var2 < 14; ++var3) {
-            for(int var4 = (int)this.posY - 4; var4 < (int)this.posY + 4 && var2 < 14; ++var4) {
-               for(int var5 = (int)this.posZ - 4; var5 < (int)this.posZ + 4 && var2 < 14; ++var5) {
-                  int var6 = this.worldObj.getBlockId(var3, var4, var5);
-                  if(var6 == Block.fenceIron.blockID || var6 == Block.bed.blockID) {
+         for(int k = (int)this.posX - 4; k < (int)this.posX + 4 && j < 14; ++k) {
+            for(int l = (int)this.posY - 4; l < (int)this.posY + 4 && j < 14; ++l) {
+               for(int i1 = (int)this.posZ - 4; i1 < (int)this.posZ + 4 && j < 14; ++i1) {
+                  int j1 = this.worldObj.getBlockId(k, l, i1);
+                  if(j1 == Block.fenceIron.blockID || j1 == Block.bed.blockID) {
                      if(this.rand.nextFloat() < 0.3F) {
-                        ++var1;
+                        ++i;
                      }
 
-                     ++var2;
+                     ++j;
                   }
                }
             }
          }
       }
 
-      return var1;
+      return i;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/Explosion.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Explosion.class differ
diff -ur mcp-mcdev/net/minecraft/src/Explosion.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Explosion.java
--- mcp-mcdev/net/minecraft/src/Explosion.java	2012-11-29 21:14:52.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Explosion.java	2012-11-29 20:44:05.000000000 -0800
@@ -16,6 +16,14 @@
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.entity.TNTPrimed;
+import org.bukkit.event.entity.EntityDamageByBlockEvent;
+import org.bukkit.event.entity.EntityDamageByEntityEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
 
 public class Explosion {
 
@@ -31,107 +39,142 @@
    public float explosionSize;
    public List affectedBlockPositions = new ArrayList();
    private Map field_77288_k = new HashMap();
+   public boolean wasCanceled = false;
 
 
-   public Explosion(World var1, Entity var2, double var3, double var5, double var7, float var9) {
-      this.worldObj = var1;
-      this.exploder = var2;
-      this.explosionSize = var9;
-      this.explosionX = var3;
-      this.explosionY = var5;
-      this.explosionZ = var7;
+   public Explosion(World world, Entity entity, double d0, double d1, double d2, float f) {
+      this.worldObj = world;
+      this.exploder = entity;
+      this.explosionSize = (float)Math.max((double)f, 0.0D);
+      this.explosionX = d0;
+      this.explosionY = d1;
+      this.explosionZ = d2;
    }
 
    public void doExplosionA() {
-      float var1 = this.explosionSize;
-      HashSet var2 = new HashSet();
-
-      int var3;
-      int var4;
-      int var5;
-      double var15;
-      double var17;
-      double var19;
-      for(var3 = 0; var3 < this.field_77289_h; ++var3) {
-         for(var4 = 0; var4 < this.field_77289_h; ++var4) {
-            for(var5 = 0; var5 < this.field_77289_h; ++var5) {
-               if(var3 == 0 || var3 == this.field_77289_h - 1 || var4 == 0 || var4 == this.field_77289_h - 1 || var5 == 0 || var5 == this.field_77289_h - 1) {
-                  double var6 = (double)((float)var3 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
-                  double var8 = (double)((float)var4 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
-                  double var10 = (double)((float)var5 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
-                  double var12 = Math.sqrt(var6 * var6 + var8 * var8 + var10 * var10);
-                  var6 /= var12;
-                  var8 /= var12;
-                  var10 /= var12;
-                  float var14 = this.explosionSize * (0.7F + this.worldObj.rand.nextFloat() * 0.6F);
-                  var15 = this.explosionX;
-                  var17 = this.explosionY;
-                  var19 = this.explosionZ;
-
-                  for(float var21 = 0.3F; var14 > 0.0F; var14 -= var21 * 0.75F) {
-                     int var22 = MathHelper.floor_double(var15);
-                     int var23 = MathHelper.floor_double(var17);
-                     int var24 = MathHelper.floor_double(var19);
-                     int var25 = this.worldObj.getBlockId(var22, var23, var24);
-                     if(var25 > 0) {
-                        Block var26 = Block.blocksList[var25];
-                        float var27 = this.exploder != null?this.exploder.func_82146_a(this, var26, var22, var23, var24):var26.getExplosionResistance(this.exploder);
-                        var14 -= (var27 + 0.3F) * var21;
-                     }
-
-                     if(var14 > 0.0F) {
-                        var2.add(new ChunkPosition(var22, var23, var24));
+      if(this.explosionSize >= 0.1F) {
+         float f = this.explosionSize;
+         HashSet hashset = new HashSet();
+
+         int i;
+         int j;
+         int k;
+         double d0;
+         double d1;
+         double d2;
+         for(i = 0; i < this.field_77289_h; ++i) {
+            for(j = 0; j < this.field_77289_h; ++j) {
+               for(k = 0; k < this.field_77289_h; ++k) {
+                  if(i == 0 || i == this.field_77289_h - 1 || j == 0 || j == this.field_77289_h - 1 || k == 0 || k == this.field_77289_h - 1) {
+                     double d3 = (double)((float)i / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
+                     double d4 = (double)((float)j / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
+                     double d5 = (double)((float)k / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
+                     double d6 = Math.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
+                     d3 /= d6;
+                     d4 /= d6;
+                     d5 /= d6;
+                     float f1 = this.explosionSize * (0.7F + this.worldObj.rand.nextFloat() * 0.6F);
+                     d0 = this.explosionX;
+                     d1 = this.explosionY;
+                     d2 = this.explosionZ;
+
+                     for(float f2 = 0.3F; f1 > 0.0F; f1 -= f2 * 0.75F) {
+                        int l = MathHelper.floor_double(d0);
+                        int i1 = MathHelper.floor_double(d1);
+                        int j1 = MathHelper.floor_double(d2);
+                        int k1 = this.worldObj.getBlockId(l, i1, j1);
+                        if(k1 > 0) {
+                           Block block = Block.blocksList[k1];
+                           float damagee = this.exploder != null?this.exploder.func_82146_a(this, block, l, i1, j1):block.getExplosionResistance(this.exploder);
+                           f1 -= (damagee + 0.3F) * f2;
+                        }
+
+                        if(f1 > 0.0F && i1 < 256 && i1 >= 0) {
+                           hashset.add(new ChunkPosition(l, i1, j1));
+                        }
+
+                        d0 += d3 * (double)f2;
+                        d1 += d4 * (double)f2;
+                        d2 += d5 * (double)f2;
                      }
-
-                     var15 += var6 * (double)var21;
-                     var17 += var8 * (double)var21;
-                     var19 += var10 * (double)var21;
                   }
                }
             }
          }
-      }
 
-      this.affectedBlockPositions.addAll(var2);
-      this.explosionSize *= 2.0F;
-      var3 = MathHelper.floor_double(this.explosionX - (double)this.explosionSize - 1.0D);
-      var4 = MathHelper.floor_double(this.explosionX + (double)this.explosionSize + 1.0D);
-      var5 = MathHelper.floor_double(this.explosionY - (double)this.explosionSize - 1.0D);
-      int var28 = MathHelper.floor_double(this.explosionY + (double)this.explosionSize + 1.0D);
-      int var29 = MathHelper.floor_double(this.explosionZ - (double)this.explosionSize - 1.0D);
-      int var30 = MathHelper.floor_double(this.explosionZ + (double)this.explosionSize + 1.0D);
-      List var31 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this.exploder, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)var3, (double)var5, (double)var29, (double)var4, (double)var28, (double)var30));
-      Vec3 var32 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.explosionX, this.explosionY, this.explosionZ);
-
-      for(int var33 = 0; var33 < var31.size(); ++var33) {
-         Entity var34 = (Entity)var31.get(var33);
-         double var35 = var34.getDistance(this.explosionX, this.explosionY, this.explosionZ) / (double)this.explosionSize;
-         if(var35 <= 1.0D) {
-            var15 = var34.posX - this.explosionX;
-            var17 = var34.posY + (double)var34.getEyeHeight() - this.explosionY;
-            var19 = var34.posZ - this.explosionZ;
-            double var37 = (double)MathHelper.sqrt_double(var15 * var15 + var17 * var17 + var19 * var19);
-            if(var37 != 0.0D) {
-               var15 /= var37;
-               var17 /= var37;
-               var19 /= var37;
-               double var39 = (double)this.worldObj.getBlockDensity(var32, var34.boundingBox);
-               double var41 = (1.0D - var35) * var39;
-               var34.attackEntityFrom(DamageSource.explosion, (int)((var41 * var41 + var41) / 2.0D * 8.0D * (double)this.explosionSize + 1.0D));
-               var34.motionX += var15 * var41;
-               var34.motionY += var17 * var41;
-               var34.motionZ += var19 * var41;
-               if(var34 instanceof EntityPlayer) {
-                  this.field_77288_k.put((EntityPlayer)var34, this.worldObj.getWorldVec3Pool().getVecFromPool(var15 * var41, var17 * var41, var19 * var41));
+         this.affectedBlockPositions.addAll(hashset);
+         this.explosionSize *= 2.0F;
+         i = MathHelper.floor_double(this.explosionX - (double)this.explosionSize - 1.0D);
+         j = MathHelper.floor_double(this.explosionX + (double)this.explosionSize + 1.0D);
+         k = MathHelper.floor_double(this.explosionY - (double)this.explosionSize - 1.0D);
+         int l1 = MathHelper.floor_double(this.explosionY + (double)this.explosionSize + 1.0D);
+         int i2 = MathHelper.floor_double(this.explosionZ - (double)this.explosionSize - 1.0D);
+         int j2 = MathHelper.floor_double(this.explosionZ + (double)this.explosionSize + 1.0D);
+         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this.exploder, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)i, (double)k, (double)i2, (double)j, (double)l1, (double)j2));
+         Vec3 vec3d = this.worldObj.getWorldVec3Pool().getVecFromPool(this.explosionX, this.explosionY, this.explosionZ);
+
+         for(int k2 = 0; k2 < list.size(); ++k2) {
+            Entity entity = (Entity)list.get(k2);
+            double d7 = entity.getDistance(this.explosionX, this.explosionY, this.explosionZ) / (double)this.explosionSize;
+            if(d7 <= 1.0D) {
+               d0 = entity.posX - this.explosionX;
+               d1 = entity.posY + (double)entity.getEyeHeight() - this.explosionY;
+               d2 = entity.posZ - this.explosionZ;
+               double d8 = (double)MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2);
+               if(d8 != 0.0D) {
+                  d0 /= d8;
+                  d1 /= d8;
+                  d2 /= d8;
+                  double d9 = (double)this.worldObj.getBlockDensity(vec3d, entity.boundingBox);
+                  double d10 = (1.0D - d7) * d9;
+                  org.bukkit.entity.Entity var48 = entity == null?null:entity.getBukkitEntity();
+                  int damageDone = (int)((d10 * d10 + d10) / 2.0D * 8.0D * (double)this.explosionSize + 1.0D);
+                  if(var48 != null) {
+                     if(this.exploder == null) {
+                        EntityDamageByBlockEvent damager = new EntityDamageByBlockEvent((org.bukkit.block.Block)null, var48, DamageCause.BLOCK_EXPLOSION, damageDone);
+                        Bukkit.getPluginManager().callEvent(damager);
+                        if(!damager.isCancelled()) {
+                           var48.setLastDamageCause(damager);
+                           entity.attackEntityFrom(DamageSource.explosion, damager.getDamage());
+                           entity.motionX += d0 * d10;
+                           entity.motionY += d1 * d10;
+                           entity.motionZ += d2 * d10;
+                           if(entity instanceof EntityPlayer) {
+                              this.field_77288_k.put((EntityPlayer)entity, this.worldObj.getWorldVec3Pool().getVecFromPool(d0 * d10, d1 * d10, d2 * d10));
+                           }
+                        }
+                     } else {
+                        org.bukkit.entity.Entity var47 = this.exploder.getBukkitEntity();
+                        DamageCause damageCause;
+                        if(var47 instanceof TNTPrimed) {
+                           damageCause = DamageCause.BLOCK_EXPLOSION;
+                        } else {
+                           damageCause = DamageCause.ENTITY_EXPLOSION;
+                        }
+
+                        EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(var47, var48, damageCause, damageDone);
+                        Bukkit.getPluginManager().callEvent(event);
+                        if(!event.isCancelled()) {
+                           entity.getBukkitEntity().setLastDamageCause(event);
+                           entity.attackEntityFrom(DamageSource.explosion, event.getDamage());
+                           entity.motionX += d0 * d10;
+                           entity.motionY += d1 * d10;
+                           entity.motionZ += d2 * d10;
+                           if(entity instanceof EntityPlayer) {
+                              this.field_77288_k.put((EntityPlayer)entity, this.worldObj.getWorldVec3Pool().getVecFromPool(d0 * d10, d1 * d10, d2 * d10));
+                           }
+                        }
+                     }
+                  }
                }
             }
          }
-      }
 
-      this.explosionSize = var1;
+         this.explosionSize = f;
+      }
    }
 
-   public void doExplosionB(boolean var1) {
+   public void doExplosionB(boolean flag) {
       this.worldObj.playSoundEffect(this.explosionX, this.explosionY, this.explosionZ, "random.explode", 4.0F, (1.0F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
       if(this.explosionSize >= 2.0F && this.isSmoking) {
          this.worldObj.spawnParticle("hugeexplosion", this.explosionX, this.explosionY, this.explosionZ, 1.0D, 0.0D, 0.0D);
@@ -139,68 +182,98 @@
          this.worldObj.spawnParticle("largeexplode", this.explosionX, this.explosionY, this.explosionZ, 1.0D, 0.0D, 0.0D);
       }
 
-      Iterator var2;
-      ChunkPosition var3;
-      int var4;
-      int var5;
-      int var6;
-      int var7;
+      Iterator iterator;
+      ChunkPosition chunkposition;
+      int i;
+      int j;
+      int k;
+      int l;
       if(this.isSmoking) {
-         var2 = this.affectedBlockPositions.iterator();
+         CraftWorld i1 = this.worldObj.getWorld();
+         org.bukkit.entity.Entity explode = this.exploder == null?null:this.exploder.getBukkitEntity();
+         Location location = new Location(i1, this.explosionX, this.explosionY, this.explosionZ);
+         ArrayList blockList = new ArrayList();
+
+         org.bukkit.block.Block block1;
+         for(int event = this.affectedBlockPositions.size() - 1; event >= 0; --event) {
+            ChunkPosition block = (ChunkPosition)this.affectedBlockPositions.get(event);
+            block1 = i1.getBlockAt(block.x, block.y, block.z);
+            if(block1.getType() != org.bukkit.Material.AIR) {
+               blockList.add(block1);
+            }
+         }
+
+         EntityExplodeEvent var33 = new EntityExplodeEvent(explode, location, blockList, 0.3F);
+         this.worldObj.getServer().getPluginManager().callEvent(var33);
+         this.affectedBlockPositions.clear();
+         Iterator var34 = var33.blockList().iterator();
+
+         while(var34.hasNext()) {
+            block1 = (org.bukkit.block.Block)var34.next();
+            ChunkPosition coords = new ChunkPosition(block1.getX(), block1.getY(), block1.getZ());
+            this.affectedBlockPositions.add(coords);
+         }
+
+         if(var33.isCancelled()) {
+            this.wasCanceled = true;
+            return;
+         }
+
+         iterator = this.affectedBlockPositions.iterator();
+
+         while(iterator.hasNext()) {
+            chunkposition = (ChunkPosition)iterator.next();
+            i = chunkposition.x;
+            j = chunkposition.y;
+            k = chunkposition.z;
+            l = this.worldObj.getBlockId(i, j, k);
+            if(flag) {
+               double d0 = (double)((float)i + this.worldObj.rand.nextFloat());
+               double d1 = (double)((float)j + this.worldObj.rand.nextFloat());
+               double d2 = (double)((float)k + this.worldObj.rand.nextFloat());
+               double d3 = d0 - this.explosionX;
+               double d4 = d1 - this.explosionY;
+               double d5 = d2 - this.explosionZ;
+               double d6 = (double)MathHelper.sqrt_double(d3 * d3 + d4 * d4 + d5 * d5);
+               d3 /= d6;
+               d4 /= d6;
+               d5 /= d6;
+               double d7 = 0.5D / (d6 / (double)this.explosionSize + 0.1D);
+               d7 *= (double)(this.worldObj.rand.nextFloat() * this.worldObj.rand.nextFloat() + 0.3F);
+               d3 *= d7;
+               d4 *= d7;
+               d5 *= d7;
+               this.worldObj.spawnParticle("explode", (d0 + this.explosionX * 1.0D) / 2.0D, (d1 + this.explosionY * 1.0D) / 2.0D, (d2 + this.explosionZ * 1.0D) / 2.0D, d3, d4, d5);
+               this.worldObj.spawnParticle("smoke", d0, d1, d2, d3, d4, d5);
+            }
 
-         while(var2.hasNext()) {
-            var3 = (ChunkPosition)var2.next();
-            var4 = var3.x;
-            var5 = var3.y;
-            var6 = var3.z;
-            var7 = this.worldObj.getBlockId(var4, var5, var6);
-            if(var1) {
-               double var8 = (double)((float)var4 + this.worldObj.rand.nextFloat());
-               double var10 = (double)((float)var5 + this.worldObj.rand.nextFloat());
-               double var12 = (double)((float)var6 + this.worldObj.rand.nextFloat());
-               double var14 = var8 - this.explosionX;
-               double var16 = var10 - this.explosionY;
-               double var18 = var12 - this.explosionZ;
-               double var20 = (double)MathHelper.sqrt_double(var14 * var14 + var16 * var16 + var18 * var18);
-               var14 /= var20;
-               var16 /= var20;
-               var18 /= var20;
-               double var22 = 0.5D / (var20 / (double)this.explosionSize + 0.1D);
-               var22 *= (double)(this.worldObj.rand.nextFloat() * this.worldObj.rand.nextFloat() + 0.3F);
-               var14 *= var22;
-               var16 *= var22;
-               var18 *= var22;
-               this.worldObj.spawnParticle("explode", (var8 + this.explosionX * 1.0D) / 2.0D, (var10 + this.explosionY * 1.0D) / 2.0D, (var12 + this.explosionZ * 1.0D) / 2.0D, var14, var16, var18);
-               this.worldObj.spawnParticle("smoke", var8, var10, var12, var14, var16, var18);
-            }
-
-            if(var7 > 0) {
-               Block var24 = Block.blocksList[var7];
-               if(var24.func_85103_a(this)) {
-                  var24.dropBlockAsItemWithChance(this.worldObj, var4, var5, var6, this.worldObj.getBlockMetadata(var4, var5, var6), 0.3F, 0);
+            if(l > 0 && l != Block.fire.blockID) {
+               Block var35 = Block.blocksList[l];
+               if(var35.func_85103_a(this)) {
+                  var35.dropBlockAsItemWithChance(this.worldObj, i, j, k, this.worldObj.getBlockMetadata(i, j, k), var33.getYield(), 0);
                }
 
-               if(this.worldObj.setBlockAndMetadataWithUpdate(var4, var5, var6, 0, 0, this.worldObj.isRemote)) {
-                  this.worldObj.notifyBlocksOfNeighborChange(var4, var5, var6, 0);
+               if(this.worldObj.setBlockAndMetadataWithUpdate(i, j, k, 0, 0, this.worldObj.isRemote)) {
+                  this.worldObj.notifyBlocksOfNeighborChange(i, j, k, 0);
                }
 
-               var24.onBlockDestroyedByExplosion(this.worldObj, var4, var5, var6);
+               var35.onBlockDestroyedByExplosion(this.worldObj, i, j, k);
             }
          }
       }
 
       if(this.isFlaming) {
-         var2 = this.affectedBlockPositions.iterator();
+         iterator = this.affectedBlockPositions.iterator();
 
-         while(var2.hasNext()) {
-            var3 = (ChunkPosition)var2.next();
-            var4 = var3.x;
-            var5 = var3.y;
-            var6 = var3.z;
-            var7 = this.worldObj.getBlockId(var4, var5, var6);
-            int var25 = this.worldObj.getBlockId(var4, var5 - 1, var6);
-            if(var7 == 0 && Block.opaqueCubeLookup[var25] && this.explosionRNG.nextInt(3) == 0) {
-               this.worldObj.setBlockWithNotify(var4, var5, var6, Block.fire.blockID);
+         while(iterator.hasNext()) {
+            chunkposition = (ChunkPosition)iterator.next();
+            i = chunkposition.x;
+            j = chunkposition.y;
+            k = chunkposition.z;
+            l = this.worldObj.getBlockId(i, j, k);
+            int var32 = this.worldObj.getBlockId(i, j - 1, k);
+            if(l == 0 && Block.opaqueCubeLookup[var32] && this.explosionRNG.nextInt(3) == 0) {
+               this.worldObj.setBlockWithNotify(i, j, k, Block.fire.blockID);
             }
          }
       }
Binary files mcp-mcdev/net/minecraft/src/ExtendedBlockStorage.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ExtendedBlockStorage.class differ
diff -ur mcp-mcdev/net/minecraft/src/ExtendedBlockStorage.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ExtendedBlockStorage.java
--- mcp-mcdev/net/minecraft/src/ExtendedBlockStorage.java	2012-11-29 21:14:52.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ExtendedBlockStorage.java	2012-11-29 20:44:05.000000000 -0800
@@ -15,60 +15,73 @@
    private NibbleArray skylightArray;
 
 
-   public ExtendedBlockStorage(int var1) {
-      this.yBase = var1;
+   public ExtendedBlockStorage(int i) {
+      this.yBase = i;
       this.blockLSBArray = new byte[4096];
       this.blockMetadataArray = new NibbleArray(this.blockLSBArray.length, 4);
       this.skylightArray = new NibbleArray(this.blockLSBArray.length, 4);
       this.blocklightArray = new NibbleArray(this.blockLSBArray.length, 4);
    }
 
-   public int getExtBlockID(int var1, int var2, int var3) {
-      int var4 = this.blockLSBArray[var2 << 8 | var3 << 4 | var1] & 255;
-      return this.blockMSBArray != null?this.blockMSBArray.get(var1, var2, var3) << 8 | var4:var4;
+   public ExtendedBlockStorage(int y, byte[] blkIds, byte[] extBlkIds) {
+      this.yBase = y;
+      this.blockLSBArray = blkIds;
+      if(extBlkIds != null) {
+         this.blockMSBArray = new NibbleArray(extBlkIds, 4);
+      }
+
+      this.blockMetadataArray = new NibbleArray(this.blockLSBArray.length, 4);
+      this.blocklightArray = new NibbleArray(this.blockLSBArray.length, 4);
+      this.skylightArray = new NibbleArray(this.blockLSBArray.length, 4);
+      this.removeInvalidBlocks();
+   }
+
+   public int getExtBlockID(int i, int j, int k) {
+      int l = this.blockLSBArray[j << 8 | k << 4 | i] & 255;
+      return this.blockMSBArray != null?this.blockMSBArray.get(i, j, k) << 8 | l:l;
    }
 
-   public void setExtBlockID(int var1, int var2, int var3, int var4) {
-      int var5 = this.blockLSBArray[var2 << 8 | var3 << 4 | var1] & 255;
+   public void setExtBlockID(int i, int j, int k, int l) {
+      int i1 = this.blockLSBArray[j << 8 | k << 4 | i] & 255;
       if(this.blockMSBArray != null) {
-         var5 |= this.blockMSBArray.get(var1, var2, var3) << 8;
+         i1 |= this.blockMSBArray.get(i, j, k) << 8;
       }
 
-      if(var5 == 0 && var4 != 0) {
+      if(i1 == 0 && l != 0) {
          ++this.blockRefCount;
-         if(Block.blocksList[var4] != null && Block.blocksList[var4].getTickRandomly()) {
+         if(Block.blocksList[l] != null && Block.blocksList[l].getTickRandomly()) {
             ++this.tickRefCount;
          }
-      } else if(var5 != 0 && var4 == 0) {
+      } else if(i1 != 0 && l == 0) {
          --this.blockRefCount;
-         if(Block.blocksList[var5] != null && Block.blocksList[var5].getTickRandomly()) {
+         if(Block.blocksList[i1] != null && Block.blocksList[i1].getTickRandomly()) {
             --this.tickRefCount;
          }
-      } else if(Block.blocksList[var5] != null && Block.blocksList[var5].getTickRandomly() && (Block.blocksList[var4] == null || !Block.blocksList[var4].getTickRandomly())) {
+      } else if(Block.blocksList[i1] != null && Block.blocksList[i1].getTickRandomly() && (Block.blocksList[l] == null || !Block.blocksList[l].getTickRandomly())) {
          --this.tickRefCount;
-      } else if((Block.blocksList[var5] == null || !Block.blocksList[var5].getTickRandomly()) && Block.blocksList[var4] != null && Block.blocksList[var4].getTickRandomly()) {
+      } else if((Block.blocksList[i1] == null || !Block.blocksList[i1].getTickRandomly()) && Block.blocksList[l] != null && Block.blocksList[l].getTickRandomly()) {
          ++this.tickRefCount;
       }
 
-      this.blockLSBArray[var2 << 8 | var3 << 4 | var1] = (byte)(var4 & 255);
-      if(var4 > 255) {
+      this.blockLSBArray[j << 8 | k << 4 | i] = (byte)(l & 255);
+      if(l > 255) {
          if(this.blockMSBArray == null) {
             this.blockMSBArray = new NibbleArray(this.blockLSBArray.length, 4);
          }
 
-         this.blockMSBArray.set(var1, var2, var3, (var4 & 3840) >> 8);
+         this.blockMSBArray.set(i, j, k, (l & 3840) >> 8);
       } else if(this.blockMSBArray != null) {
-         this.blockMSBArray.set(var1, var2, var3, 0);
+         this.blockMSBArray.set(i, j, k, 0);
       }
 
    }
 
-   public int getExtBlockMetadata(int var1, int var2, int var3) {
-      return this.blockMetadataArray.get(var1, var2, var3);
+   public int getExtBlockMetadata(int i, int j, int k) {
+      return this.blockMetadataArray.get(i, j, k);
    }
 
-   public void setExtBlockMetadata(int var1, int var2, int var3, int var4) {
-      this.blockMetadataArray.set(var1, var2, var3, var4);
+   public void setExtBlockMetadata(int i, int j, int k, int l) {
+      this.blockMetadataArray.set(i, j, k, l);
    }
 
    public boolean isEmpty() {
@@ -83,39 +96,99 @@
       return this.yBase;
    }
 
-   public void setExtSkylightValue(int var1, int var2, int var3, int var4) {
-      this.skylightArray.set(var1, var2, var3, var4);
+   public void setExtSkylightValue(int i, int j, int k, int l) {
+      this.skylightArray.set(i, j, k, l);
    }
 
-   public int getExtSkylightValue(int var1, int var2, int var3) {
-      return this.skylightArray.get(var1, var2, var3);
+   public int getExtSkylightValue(int i, int j, int k) {
+      return this.skylightArray.get(i, j, k);
    }
 
-   public void setExtBlocklightValue(int var1, int var2, int var3, int var4) {
-      this.blocklightArray.set(var1, var2, var3, var4);
+   public void setExtBlocklightValue(int i, int j, int k, int l) {
+      this.blocklightArray.set(i, j, k, l);
    }
 
-   public int getExtBlocklightValue(int var1, int var2, int var3) {
-      return this.blocklightArray.get(var1, var2, var3);
+   public int getExtBlocklightValue(int i, int j, int k) {
+      return this.blocklightArray.get(i, j, k);
    }
 
    public void removeInvalidBlocks() {
+      byte[] blkIds = this.blockLSBArray;
+      int cntNonEmpty = 0;
+      int cntTicking = 0;
+      int off;
+      if(this.blockMSBArray == null) {
+         for(int ext = 0; ext < blkIds.length; ++ext) {
+            off = blkIds[ext] & 255;
+            if(off > 0) {
+               if(Block.blocksList[off] == null) {
+                  blkIds[ext] = 0;
+               } else {
+                  ++cntNonEmpty;
+                  if(Block.blocksList[off].getTickRandomly()) {
+                     ++cntTicking;
+                  }
+               }
+            }
+         }
+      } else {
+         byte[] var9 = this.blockMSBArray.data;
+         off = 0;
+
+         for(int off2 = 0; off < blkIds.length; ++off2) {
+            byte extid = var9[off2];
+            int l = blkIds[off] & 255 | (extid & 15) << 8;
+            if(l > 0) {
+               if(Block.blocksList[l] == null) {
+                  blkIds[off] = 0;
+                  var9[off2] = (byte)(var9[off2] & 240);
+               } else {
+                  ++cntNonEmpty;
+                  if(Block.blocksList[l].getTickRandomly()) {
+                     ++cntTicking;
+                  }
+               }
+            }
+
+            ++off;
+            l = blkIds[off] & 255 | (extid & 240) << 4;
+            if(l > 0) {
+               if(Block.blocksList[l] == null) {
+                  blkIds[off] = 0;
+                  var9[off2] = (byte)(var9[off2] & 15);
+               } else {
+                  ++cntNonEmpty;
+                  if(Block.blocksList[l].getTickRandomly()) {
+                     ++cntTicking;
+                  }
+               }
+            }
+
+            ++off;
+         }
+      }
+
+      this.blockRefCount = cntNonEmpty;
+      this.tickRefCount = cntTicking;
+   }
+
+   public void old_recalcBlockCounts() {
       this.blockRefCount = 0;
       this.tickRefCount = 0;
 
-      for(int var1 = 0; var1 < 16; ++var1) {
-         for(int var2 = 0; var2 < 16; ++var2) {
-            for(int var3 = 0; var3 < 16; ++var3) {
-               int var4 = this.getExtBlockID(var1, var2, var3);
-               if(var4 > 0) {
-                  if(Block.blocksList[var4] == null) {
-                     this.blockLSBArray[var2 << 8 | var3 << 4 | var1] = 0;
+      for(int i = 0; i < 16; ++i) {
+         for(int j = 0; j < 16; ++j) {
+            for(int k = 0; k < 16; ++k) {
+               int l = this.getExtBlockID(i, j, k);
+               if(l > 0) {
+                  if(Block.blocksList[l] == null) {
+                     this.blockLSBArray[j << 8 | k << 4 | i] = 0;
                      if(this.blockMSBArray != null) {
-                        this.blockMSBArray.set(var1, var2, var3, 0);
+                        this.blockMSBArray.set(i, j, k, 0);
                      }
                   } else {
                      ++this.blockRefCount;
-                     if(Block.blocksList[var4].getTickRandomly()) {
+                     if(Block.blocksList[l].getTickRandomly()) {
                         ++this.tickRefCount;
                      }
                   }
@@ -146,23 +219,34 @@
       return this.skylightArray;
    }
 
-   public void setBlockLSBArray(byte[] var1) {
-      this.blockLSBArray = var1;
+   public void setBlockLSBArray(byte[] abyte) {
+      this.blockLSBArray = abyte;
    }
 
-   public void setBlockMSBArray(NibbleArray var1) {
-      this.blockMSBArray = var1;
+   public void setBlockMSBArray(NibbleArray nibblearray) {
+      boolean empty = true;
+
+      for(int i = 0; i < nibblearray.data.length; ++i) {
+         if(nibblearray.data[i] != 0) {
+            empty = false;
+            break;
+         }
+      }
+
+      if(!empty) {
+         this.blockMSBArray = nibblearray;
+      }
    }
 
-   public void setBlockMetadataArray(NibbleArray var1) {
-      this.blockMetadataArray = var1;
+   public void setBlockMetadataArray(NibbleArray nibblearray) {
+      this.blockMetadataArray = nibblearray;
    }
 
-   public void setBlocklightArray(NibbleArray var1) {
-      this.blocklightArray = var1;
+   public void setBlocklightArray(NibbleArray nibblearray) {
+      this.blocklightArray = nibblearray;
    }
 
-   public void setSkylightArray(NibbleArray var1) {
-      this.skylightArray = var1;
+   public void setSkylightArray(NibbleArray nibblearray) {
+      this.skylightArray = nibblearray;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/FoodStats.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/FoodStats.class differ
diff -ur mcp-mcdev/net/minecraft/src/FoodStats.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/FoodStats.java
--- mcp-mcdev/net/minecraft/src/FoodStats.java	2012-11-29 21:14:52.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/FoodStats.java	2012-11-29 20:44:04.000000000 -0800
@@ -2,50 +2,67 @@
 
 import net.minecraft.src.DamageSource;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.ItemFood;
 import net.minecraft.src.NBTTagCompound;
+import net.minecraft.src.Packet8UpdateHealth;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.FoodLevelChangeEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
 
 public class FoodStats {
 
-   private int foodLevel = 20;
-   private float foodSaturationLevel = 5.0F;
-   private float foodExhaustionLevel;
-   private int foodTimer = 0;
+   public int foodLevel = 20;
+   public float foodSaturationLevel = 5.0F;
+   public float foodExhaustionLevel;
+   public int foodTimer = 0;
    private int prevFoodLevel = 20;
 
 
-   public void addStats(int var1, float var2) {
-      this.foodLevel = Math.min(var1 + this.foodLevel, 20);
-      this.foodSaturationLevel = Math.min(this.foodSaturationLevel + (float)var1 * var2 * 2.0F, (float)this.foodLevel);
+   public void addStats(int i, float f) {
+      this.foodLevel = Math.min(i + this.foodLevel, 20);
+      this.foodSaturationLevel = Math.min(this.foodSaturationLevel + (float)i * f * 2.0F, (float)this.foodLevel);
    }
 
-   public void addStats(ItemFood var1) {
-      this.addStats(var1.getHealAmount(), var1.getSaturationModifier());
+   public void addStats(ItemFood itemfood) {
+      this.addStats(itemfood.getHealAmount(), itemfood.getSaturationModifier());
    }
 
-   public void onUpdate(EntityPlayer var1) {
-      int var2 = var1.worldObj.difficultySetting;
+   public void onUpdate(EntityPlayer entityhuman) {
+      int i = entityhuman.worldObj.difficultySetting;
       this.prevFoodLevel = this.foodLevel;
       if(this.foodExhaustionLevel > 4.0F) {
          this.foodExhaustionLevel -= 4.0F;
          if(this.foodSaturationLevel > 0.0F) {
             this.foodSaturationLevel = Math.max(this.foodSaturationLevel - 1.0F, 0.0F);
-         } else if(var2 > 0) {
-            this.foodLevel = Math.max(this.foodLevel - 1, 0);
+         } else if(i > 0) {
+            FoodLevelChangeEvent event = CraftEventFactory.callFoodLevelChangeEvent(entityhuman, Math.max(this.foodLevel - 1, 0));
+            if(!event.isCancelled()) {
+               this.foodLevel = event.getFoodLevel();
+            }
+
+            ((EntityPlayerMP)entityhuman).playerNetServerHandler.sendPacket(new Packet8UpdateHealth(entityhuman.getHealth(), this.foodLevel, this.foodSaturationLevel));
          }
       }
 
-      if(this.foodLevel >= 18 && var1.shouldHeal()) {
+      if(this.foodLevel >= 18 && entityhuman.shouldHeal()) {
          ++this.foodTimer;
          if(this.foodTimer >= 80) {
-            var1.heal(1);
+            entityhuman.heal(1, RegainReason.SATIATED);
             this.foodTimer = 0;
          }
       } else if(this.foodLevel <= 0) {
          ++this.foodTimer;
          if(this.foodTimer >= 80) {
-            if(var1.getHealth() > 10 || var2 >= 3 || var1.getHealth() > 1 && var2 >= 2) {
-               var1.attackEntityFrom(DamageSource.starve, 1);
+            if(entityhuman.getHealth() > 10 || i >= 3 || entityhuman.getHealth() > 1 && i >= 2) {
+               EntityDamageEvent var4 = new EntityDamageEvent(entityhuman.getBukkitEntity(), DamageCause.STARVATION, 1);
+               entityhuman.worldObj.getServer().getPluginManager().callEvent(var4);
+               if(!var4.isCancelled()) {
+                  var4.getEntity().setLastDamageCause(var4);
+                  entityhuman.attackEntityFrom(DamageSource.starve, var4.getDamage());
+               }
             }
 
             this.foodTimer = 0;
@@ -56,21 +73,21 @@
 
    }
 
-   public void readNBT(NBTTagCompound var1) {
-      if(var1.hasKey("foodLevel")) {
-         this.foodLevel = var1.getInteger("foodLevel");
-         this.foodTimer = var1.getInteger("foodTickTimer");
-         this.foodSaturationLevel = var1.getFloat("foodSaturationLevel");
-         this.foodExhaustionLevel = var1.getFloat("foodExhaustionLevel");
+   public void readNBT(NBTTagCompound nbttagcompound) {
+      if(nbttagcompound.hasKey("foodLevel")) {
+         this.foodLevel = nbttagcompound.getInteger("foodLevel");
+         this.foodTimer = nbttagcompound.getInteger("foodTickTimer");
+         this.foodSaturationLevel = nbttagcompound.getFloat("foodSaturationLevel");
+         this.foodExhaustionLevel = nbttagcompound.getFloat("foodExhaustionLevel");
       }
 
    }
 
-   public void writeNBT(NBTTagCompound var1) {
-      var1.setInteger("foodLevel", this.foodLevel);
-      var1.setInteger("foodTickTimer", this.foodTimer);
-      var1.setFloat("foodSaturationLevel", this.foodSaturationLevel);
-      var1.setFloat("foodExhaustionLevel", this.foodExhaustionLevel);
+   public void writeNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setInteger("foodLevel", this.foodLevel);
+      nbttagcompound.setInteger("foodTickTimer", this.foodTimer);
+      nbttagcompound.setFloat("foodSaturationLevel", this.foodSaturationLevel);
+      nbttagcompound.setFloat("foodExhaustionLevel", this.foodExhaustionLevel);
    }
 
    public int getFoodLevel() {
@@ -81,8 +98,8 @@
       return this.foodLevel < 20;
    }
 
-   public void addExhaustion(float var1) {
-      this.foodExhaustionLevel = Math.min(this.foodExhaustionLevel + var1, 40.0F);
+   public void addExhaustion(float f) {
+      this.foodExhaustionLevel = Math.min(this.foodExhaustionLevel + f, 40.0F);
    }
 
    public float getSaturationLevel() {
Binary files mcp-mcdev/net/minecraft/src/FurnaceRecipes.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/FurnaceRecipes.class differ
diff -ur mcp-mcdev/net/minecraft/src/FurnaceRecipes.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/FurnaceRecipes.java
--- mcp-mcdev/net/minecraft/src/FurnaceRecipes.java	2012-11-29 21:14:52.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/FurnaceRecipes.java	2012-11-29 20:44:04.000000000 -0800
@@ -9,7 +9,7 @@
 public class FurnaceRecipes {
 
    private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
-   private Map smeltingList = new HashMap();
+   public Map smeltingList = new HashMap();
    private Map experienceList = new HashMap();
 
 
@@ -17,7 +17,7 @@
       return smeltingBase;
    }
 
-   private FurnaceRecipes() {
+   public FurnaceRecipes() {
       this.addSmelting(Block.oreIron.blockID, new ItemStack(Item.ingotIron), 0.7F);
       this.addSmelting(Block.oreGold.blockID, new ItemStack(Item.ingotGold), 1.0F);
       this.addSmelting(Block.oreDiamond.blockID, new ItemStack(Item.diamond), 1.0F);
@@ -37,21 +37,21 @@
       this.addSmelting(Block.oreLapis.blockID, new ItemStack(Item.dyePowder, 1, 4), 0.2F);
    }
 
-   public void addSmelting(int var1, ItemStack var2, float var3) {
-      this.smeltingList.put(Integer.valueOf(var1), var2);
-      this.experienceList.put(Integer.valueOf(var2.itemID), Float.valueOf(var3));
+   public void addSmelting(int i, ItemStack itemstack, float f) {
+      this.smeltingList.put(Integer.valueOf(i), itemstack);
+      this.experienceList.put(Integer.valueOf(itemstack.itemID), Float.valueOf(f));
    }
 
-   public ItemStack getSmeltingResult(int var1) {
-      return (ItemStack)this.smeltingList.get(Integer.valueOf(var1));
+   public ItemStack getSmeltingResult(int i) {
+      return (ItemStack)this.smeltingList.get(Integer.valueOf(i));
    }
 
    public Map getSmeltingList() {
       return this.smeltingList;
    }
 
-   public float getExperience(int var1) {
-      return this.experienceList.containsKey(Integer.valueOf(var1))?((Float)this.experienceList.get(Integer.valueOf(var1))).floatValue():0.0F;
+   public float getExperience(int i) {
+      return this.experienceList.containsKey(Integer.valueOf(i))?((Float)this.experienceList.get(Integer.valueOf(i))).floatValue():0.0F;
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/IInventory.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/IInventory.class differ
diff -ur mcp-mcdev/net/minecraft/src/IInventory.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/IInventory.java
--- mcp-mcdev/net/minecraft/src/IInventory.java	2012-11-29 21:14:51.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/IInventory.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,10 +1,16 @@
 package net.minecraft.src;
 
+import java.util.List;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.ItemStack;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.inventory.InventoryHolder;
 
 public interface IInventory {
 
+   int MAX_STACK = 64;
+
+
    int getSizeInventory();
 
    ItemStack getStackInSlot(int var1);
@@ -26,4 +32,16 @@
    void openChest();
 
    void closeChest();
+
+   ItemStack[] getContents();
+
+   void onOpen(CraftHumanEntity var1);
+
+   void onClose(CraftHumanEntity var1);
+
+   List getViewers();
+
+   InventoryHolder getOwner();
+
+   void setMaxStackSize(int var1);
 }
Binary files mcp-mcdev/net/minecraft/src/IRecipe.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/IRecipe.class differ
diff -ur mcp-mcdev/net/minecraft/src/IRecipe.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/IRecipe.java
--- mcp-mcdev/net/minecraft/src/IRecipe.java	2012-11-29 21:14:50.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/IRecipe.java	2012-11-29 20:44:02.000000000 -0800
@@ -3,6 +3,7 @@
 import net.minecraft.src.InventoryCrafting;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.inventory.Recipe;
 
 public interface IRecipe {
 
@@ -13,4 +14,6 @@
    int getRecipeSize();
 
    ItemStack getRecipeOutput();
+
+   Recipe toBukkitRecipe();
 }
Binary files mcp-mcdev/net/minecraft/src/ISaveHandler.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ISaveHandler.class differ
diff -ur mcp-mcdev/net/minecraft/src/ISaveHandler.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ISaveHandler.java
--- mcp-mcdev/net/minecraft/src/ISaveHandler.java	2012-11-29 21:14:50.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ISaveHandler.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,8 +1,10 @@
 package net.minecraft.src;
 
 import java.io.File;
+import java.util.UUID;
 import net.minecraft.src.IChunkLoader;
 import net.minecraft.src.IPlayerFileData;
+import net.minecraft.src.MinecraftException;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.WorldInfo;
 import net.minecraft.src.WorldProvider;
@@ -11,7 +13,7 @@
 
    WorldInfo loadWorldInfo();
 
-   void checkSessionLock();
+   void checkSessionLock() throws MinecraftException;
 
    IChunkLoader getChunkLoader(WorldProvider var1);
 
@@ -26,4 +28,6 @@
    File getMapFileFromName(String var1);
 
    String getSaveDirectoryName();
+
+   UUID getUUID();
 }
Binary files mcp-mcdev/net/minecraft/src/IntHashMap.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/IntHashMap.class differ
diff -ur mcp-mcdev/net/minecraft/src/IntHashMap.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/IntHashMap.java
--- mcp-mcdev/net/minecraft/src/IntHashMap.java	2012-11-29 21:14:51.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/IntHashMap.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,7 +1,5 @@
 package net.minecraft.src;
 
-import java.util.HashSet;
-import java.util.Set;
 import net.minecraft.src.IntHashMapEntry;
 
 public class IntHashMap {
@@ -11,152 +9,151 @@
    private int threshold = 12;
    private final float growFactor = 0.75F;
    private transient volatile int versionStamp;
-   private Set keySet = new HashSet();
 
 
-   private static int computeHash(int var0) {
-      var0 ^= var0 >>> 20 ^ var0 >>> 12;
-      return var0 ^ var0 >>> 7 ^ var0 >>> 4;
+   private static int computeHash(int i) {
+      i ^= i >>> 20 ^ i >>> 12;
+      return i ^ i >>> 7 ^ i >>> 4;
    }
 
-   private static int getSlotIndex(int var0, int var1) {
-      return var0 & var1 - 1;
+   private static int getSlotIndex(int i, int j) {
+      return i & j - 1;
    }
 
-   public Object lookup(int var1) {
-      int var2 = computeHash(var1);
+   public Object lookup(int i) {
+      int j = computeHash(i);
 
-      for(IntHashMapEntry var3 = this.slots[getSlotIndex(var2, this.slots.length)]; var3 != null; var3 = var3.nextEntry) {
-         if(var3.hashEntry == var1) {
-            return var3.valueEntry;
+      for(IntHashMapEntry inthashmapentry = this.slots[getSlotIndex(j, this.slots.length)]; inthashmapentry != null; inthashmapentry = inthashmapentry.nextEntry) {
+         if(inthashmapentry.hashEntry == i) {
+            return inthashmapentry.valueEntry;
          }
       }
 
       return null;
    }
 
-   public boolean containsItem(int var1) {
-      return this.lookupEntry(var1) != null;
+   public boolean containsItem(int i) {
+      return this.lookupEntry(i) != null;
    }
 
-   final IntHashMapEntry lookupEntry(int var1) {
-      int var2 = computeHash(var1);
+   final IntHashMapEntry lookupEntry(int i) {
+      int j = computeHash(i);
 
-      for(IntHashMapEntry var3 = this.slots[getSlotIndex(var2, this.slots.length)]; var3 != null; var3 = var3.nextEntry) {
-         if(var3.hashEntry == var1) {
-            return var3;
+      for(IntHashMapEntry inthashmapentry = this.slots[getSlotIndex(j, this.slots.length)]; inthashmapentry != null; inthashmapentry = inthashmapentry.nextEntry) {
+         if(inthashmapentry.hashEntry == i) {
+            return inthashmapentry;
          }
       }
 
       return null;
    }
 
-   public void addKey(int var1, Object var2) {
-      this.keySet.add(Integer.valueOf(var1));
-      int var3 = computeHash(var1);
-      int var4 = getSlotIndex(var3, this.slots.length);
-
-      for(IntHashMapEntry var5 = this.slots[var4]; var5 != null; var5 = var5.nextEntry) {
-         if(var5.hashEntry == var1) {
-            var5.valueEntry = var2;
+   public void addKey(int i, Object object) {
+      int j = computeHash(i);
+      int k = getSlotIndex(j, this.slots.length);
+
+      for(IntHashMapEntry inthashmapentry = this.slots[k]; inthashmapentry != null; inthashmapentry = inthashmapentry.nextEntry) {
+         if(inthashmapentry.hashEntry == i) {
+            inthashmapentry.valueEntry = object;
             return;
          }
       }
 
       ++this.versionStamp;
-      this.insert(var3, var1, var2, var4);
+      this.insert(j, i, object, k);
    }
 
-   private void grow(int var1) {
-      IntHashMapEntry[] var2 = this.slots;
-      int var3 = var2.length;
-      if(var3 == 1073741824) {
+   private void grow(int i) {
+      IntHashMapEntry[] ainthashmapentry = this.slots;
+      int j = ainthashmapentry.length;
+      if(j == 1073741824) {
          this.threshold = Integer.MAX_VALUE;
       } else {
-         IntHashMapEntry[] var4 = new IntHashMapEntry[var1];
-         this.copyTo(var4);
-         this.slots = var4;
-         this.threshold = (int)((float)var1 * this.growFactor);
+         IntHashMapEntry[] ainthashmapentry1 = new IntHashMapEntry[i];
+         this.copyTo(ainthashmapentry1);
+         this.slots = ainthashmapentry1;
+         float var10001 = (float)i;
+         this.getClass();
+         this.threshold = (int)(var10001 * 0.75F);
       }
+
    }
 
-   private void copyTo(IntHashMapEntry[] var1) {
-      IntHashMapEntry[] var2 = this.slots;
-      int var3 = var1.length;
+   private void copyTo(IntHashMapEntry[] ainthashmapentry) {
+      IntHashMapEntry[] ainthashmapentry1 = this.slots;
+      int i = ainthashmapentry.length;
 
-      for(int var4 = 0; var4 < var2.length; ++var4) {
-         IntHashMapEntry var5 = var2[var4];
-         if(var5 != null) {
-            var2[var4] = null;
+      for(int j = 0; j < ainthashmapentry1.length; ++j) {
+         IntHashMapEntry inthashmapentry = ainthashmapentry1[j];
+         if(inthashmapentry != null) {
+            ainthashmapentry1[j] = null;
 
-            IntHashMapEntry var6;
+            IntHashMapEntry inthashmapentry1;
             do {
-               var6 = var5.nextEntry;
-               int var7 = getSlotIndex(var5.slotHash, var3);
-               var5.nextEntry = var1[var7];
-               var1[var7] = var5;
-               var5 = var6;
-            } while(var6 != null);
+               inthashmapentry1 = inthashmapentry.nextEntry;
+               int k = getSlotIndex(inthashmapentry.slotHash, i);
+               inthashmapentry.nextEntry = ainthashmapentry[k];
+               ainthashmapentry[k] = inthashmapentry;
+               inthashmapentry = inthashmapentry1;
+            } while(inthashmapentry1 != null);
          }
       }
 
    }
 
-   public Object removeObject(int var1) {
-      this.keySet.remove(Integer.valueOf(var1));
-      IntHashMapEntry var2 = this.removeEntry(var1);
-      return var2 == null?null:var2.valueEntry;
-   }
-
-   final IntHashMapEntry removeEntry(int var1) {
-      int var2 = computeHash(var1);
-      int var3 = getSlotIndex(var2, this.slots.length);
-      IntHashMapEntry var4 = this.slots[var3];
-
-      IntHashMapEntry var5;
-      IntHashMapEntry var6;
-      for(var5 = var4; var5 != null; var5 = var6) {
-         var6 = var5.nextEntry;
-         if(var5.hashEntry == var1) {
+   public Object removeObject(int i) {
+      IntHashMapEntry inthashmapentry = this.removeEntry(i);
+      return inthashmapentry == null?null:inthashmapentry.valueEntry;
+   }
+
+   final IntHashMapEntry removeEntry(int i) {
+      int j = computeHash(i);
+      int k = getSlotIndex(j, this.slots.length);
+      IntHashMapEntry inthashmapentry = this.slots[k];
+
+      IntHashMapEntry inthashmapentry1;
+      IntHashMapEntry inthashmapentry2;
+      for(inthashmapentry1 = inthashmapentry; inthashmapentry1 != null; inthashmapentry1 = inthashmapentry2) {
+         inthashmapentry2 = inthashmapentry1.nextEntry;
+         if(inthashmapentry1.hashEntry == i) {
             ++this.versionStamp;
             --this.count;
-            if(var4 == var5) {
-               this.slots[var3] = var6;
+            if(inthashmapentry == inthashmapentry1) {
+               this.slots[k] = inthashmapentry2;
             } else {
-               var4.nextEntry = var6;
+               inthashmapentry.nextEntry = inthashmapentry2;
             }
 
-            return var5;
+            return inthashmapentry1;
          }
 
-         var4 = var5;
+         inthashmapentry = inthashmapentry1;
       }
 
-      return var5;
+      return inthashmapentry1;
    }
 
    public void clearMap() {
       ++this.versionStamp;
-      IntHashMapEntry[] var1 = this.slots;
+      IntHashMapEntry[] ainthashmapentry = this.slots;
 
-      for(int var2 = 0; var2 < var1.length; ++var2) {
-         var1[var2] = null;
+      for(int i = 0; i < ainthashmapentry.length; ++i) {
+         ainthashmapentry[i] = null;
       }
 
       this.count = 0;
    }
 
-   private void insert(int var1, int var2, Object var3, int var4) {
-      IntHashMapEntry var5 = this.slots[var4];
-      this.slots[var4] = new IntHashMapEntry(var1, var2, var3, var5);
+   private void insert(int i, int j, Object object, int k) {
+      IntHashMapEntry inthashmapentry = this.slots[k];
+      this.slots[k] = new IntHashMapEntry(i, j, object, inthashmapentry);
       if(this.count++ >= this.threshold) {
          this.grow(2 * this.slots.length);
       }
 
    }
 
-   // $FF: synthetic method
-   static int getHash(int var0) {
-      return computeHash(var0);
+   static int getHash(int i) {
+      return computeHash(i);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/InventoryBasic.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryBasic.class differ
diff -ur mcp-mcdev/net/minecraft/src/InventoryBasic.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryBasic.java
--- mcp-mcdev/net/minecraft/src/InventoryBasic.java	2012-11-29 21:14:51.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryBasic.java	2012-11-29 20:44:02.000000000 -0800
@@ -6,60 +6,60 @@
 import net.minecraft.src.IInventory;
 import net.minecraft.src.ItemStack;
 
-public class InventoryBasic implements IInventory {
+public abstract class InventoryBasic implements IInventory {
 
    private String inventoryTitle;
    private int slotsCount;
-   private ItemStack[] inventoryContents;
+   protected ItemStack[] inventoryContents;
    private List field_70480_d;
 
 
-   public InventoryBasic(String var1, int var2) {
-      this.inventoryTitle = var1;
-      this.slotsCount = var2;
-      this.inventoryContents = new ItemStack[var2];
-   }
-
-   public ItemStack getStackInSlot(int var1) {
-      return this.inventoryContents[var1];
-   }
-
-   public ItemStack decrStackSize(int var1, int var2) {
-      if(this.inventoryContents[var1] != null) {
-         ItemStack var3;
-         if(this.inventoryContents[var1].stackSize <= var2) {
-            var3 = this.inventoryContents[var1];
-            this.inventoryContents[var1] = null;
+   public InventoryBasic(String s, int i) {
+      this.inventoryTitle = s;
+      this.slotsCount = i;
+      this.inventoryContents = new ItemStack[i];
+   }
+
+   public ItemStack getStackInSlot(int i) {
+      return this.inventoryContents[i];
+   }
+
+   public ItemStack decrStackSize(int i, int j) {
+      if(this.inventoryContents[i] != null) {
+         ItemStack itemstack;
+         if(this.inventoryContents[i].stackSize <= j) {
+            itemstack = this.inventoryContents[i];
+            this.inventoryContents[i] = null;
             this.onInventoryChanged();
-            return var3;
+            return itemstack;
          } else {
-            var3 = this.inventoryContents[var1].splitStack(var2);
-            if(this.inventoryContents[var1].stackSize == 0) {
-               this.inventoryContents[var1] = null;
+            itemstack = this.inventoryContents[i].splitStack(j);
+            if(this.inventoryContents[i].stackSize == 0) {
+               this.inventoryContents[i] = null;
             }
 
             this.onInventoryChanged();
-            return var3;
+            return itemstack;
          }
       } else {
          return null;
       }
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      if(this.inventoryContents[var1] != null) {
-         ItemStack var2 = this.inventoryContents[var1];
-         this.inventoryContents[var1] = null;
-         return var2;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      if(this.inventoryContents[i] != null) {
+         ItemStack itemstack = this.inventoryContents[i];
+         this.inventoryContents[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      this.inventoryContents[var1] = var2;
-      if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-         var2.stackSize = this.getInventoryStackLimit();
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      this.inventoryContents[i] = itemstack;
+      if(itemstack != null && itemstack.stackSize > this.getInventoryStackLimit()) {
+         itemstack.stackSize = this.getInventoryStackLimit();
       }
 
       this.onInventoryChanged();
@@ -79,14 +79,14 @@
 
    public void onInventoryChanged() {
       if(this.field_70480_d != null) {
-         for(int var1 = 0; var1 < this.field_70480_d.size(); ++var1) {
-            ((IInvBasic)this.field_70480_d.get(var1)).onInventoryChanged(this);
+         for(int i = 0; i < this.field_70480_d.size(); ++i) {
+            ((IInvBasic)this.field_70480_d.get(i)).onInventoryChanged(this);
          }
       }
 
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
       return true;
    }
 
Binary files mcp-mcdev/net/minecraft/src/InventoryCraftResult.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryCraftResult.class differ
diff -ur mcp-mcdev/net/minecraft/src/InventoryCraftResult.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryCraftResult.java
--- mcp-mcdev/net/minecraft/src/InventoryCraftResult.java	2012-11-29 21:14:51.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryCraftResult.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,19 +1,44 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IInventory;
 import net.minecraft.src.ItemStack;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.inventory.InventoryHolder;
 
 public class InventoryCraftResult implements IInventory {
 
    private ItemStack[] stackResult = new ItemStack[1];
+   private int maxStack = 64;
 
 
+   public ItemStack[] getContents() {
+      return this.stackResult;
+   }
+
+   public InventoryHolder getOwner() {
+      return null;
+   }
+
+   public void onOpen(CraftHumanEntity who) {}
+
+   public void onClose(CraftHumanEntity who) {}
+
+   public List getViewers() {
+      return new ArrayList();
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
    public int getSizeInventory() {
       return 1;
    }
 
-   public ItemStack getStackInSlot(int var1) {
+   public ItemStack getStackInSlot(int i) {
       return this.stackResult[0];
    }
 
@@ -21,37 +46,37 @@
       return "Result";
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
+   public ItemStack decrStackSize(int i, int j) {
       if(this.stackResult[0] != null) {
-         ItemStack var3 = this.stackResult[0];
+         ItemStack itemstack = this.stackResult[0];
          this.stackResult[0] = null;
-         return var3;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
+   public ItemStack getStackInSlotOnClosing(int i) {
       if(this.stackResult[0] != null) {
-         ItemStack var2 = this.stackResult[0];
+         ItemStack itemstack = this.stackResult[0];
          this.stackResult[0] = null;
-         return var2;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      this.stackResult[0] = var2;
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      this.stackResult[0] = itemstack;
    }
 
    public int getInventoryStackLimit() {
-      return 64;
+      return this.maxStack;
    }
 
    public void onInventoryChanged() {}
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
       return true;
    }
 
Binary files mcp-mcdev/net/minecraft/src/InventoryCrafting.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryCrafting.class differ
diff -ur mcp-mcdev/net/minecraft/src/InventoryCrafting.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryCrafting.java
--- mcp-mcdev/net/minecraft/src/InventoryCrafting.java	2012-11-29 21:14:51.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryCrafting.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,36 +1,83 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.src.Container;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IInventory;
+import net.minecraft.src.IRecipe;
 import net.minecraft.src.ItemStack;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.InventoryHolder;
 
 public class InventoryCrafting implements IInventory {
 
    private ItemStack[] stackList;
    private int inventoryWidth;
    private Container eventHandler;
+   public List transaction;
+   public IRecipe currentRecipe;
+   public IInventory resultInventory;
+   private EntityPlayer owner;
+   private int maxStack;
 
 
-   public InventoryCrafting(Container var1, int var2, int var3) {
-      int var4 = var2 * var3;
-      this.stackList = new ItemStack[var4];
-      this.eventHandler = var1;
-      this.inventoryWidth = var2;
+   public ItemStack[] getContents() {
+      return this.stackList;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public InventoryType getInvType() {
+      return this.stackList.length == 4?InventoryType.CRAFTING:InventoryType.WORKBENCH;
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public InventoryHolder getOwner() {
+      return this.owner.getBukkitEntity();
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+      this.resultInventory.setMaxStackSize(size);
+   }
+
+   public InventoryCrafting(Container container, int i, int j, EntityPlayer player) {
+      this(container, i, j);
+      this.owner = player;
+   }
+
+   public InventoryCrafting(Container container, int i, int j) {
+      this.transaction = new ArrayList();
+      this.maxStack = 64;
+      int k = i * j;
+      this.stackList = new ItemStack[k];
+      this.eventHandler = container;
+      this.inventoryWidth = i;
    }
 
    public int getSizeInventory() {
       return this.stackList.length;
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      return var1 >= this.getSizeInventory()?null:this.stackList[var1];
+   public ItemStack getStackInSlot(int i) {
+      return i >= this.getSizeInventory()?null:this.stackList[i];
    }
 
-   public ItemStack getStackInRowAndColumn(int var1, int var2) {
-      if(var1 >= 0 && var1 < this.inventoryWidth) {
-         int var3 = var1 + var2 * this.inventoryWidth;
-         return this.getStackInSlot(var3);
+   public ItemStack getStackInRowAndColumn(int i, int j) {
+      if(i >= 0 && i < this.inventoryWidth) {
+         int k = i + j * this.inventoryWidth;
+         return this.getStackInSlot(k);
       } else {
          return null;
       }
@@ -40,50 +87,50 @@
       return "container.crafting";
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      if(this.stackList[var1] != null) {
-         ItemStack var2 = this.stackList[var1];
-         this.stackList[var1] = null;
-         return var2;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      if(this.stackList[i] != null) {
+         ItemStack itemstack = this.stackList[i];
+         this.stackList[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      if(this.stackList[var1] != null) {
-         ItemStack var3;
-         if(this.stackList[var1].stackSize <= var2) {
-            var3 = this.stackList[var1];
-            this.stackList[var1] = null;
+   public ItemStack decrStackSize(int i, int j) {
+      if(this.stackList[i] != null) {
+         ItemStack itemstack;
+         if(this.stackList[i].stackSize <= j) {
+            itemstack = this.stackList[i];
+            this.stackList[i] = null;
             this.eventHandler.onCraftMatrixChanged(this);
-            return var3;
+            return itemstack;
          } else {
-            var3 = this.stackList[var1].splitStack(var2);
-            if(this.stackList[var1].stackSize == 0) {
-               this.stackList[var1] = null;
+            itemstack = this.stackList[i].splitStack(j);
+            if(this.stackList[i].stackSize == 0) {
+               this.stackList[i] = null;
             }
 
             this.eventHandler.onCraftMatrixChanged(this);
-            return var3;
+            return itemstack;
          }
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      this.stackList[var1] = var2;
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      this.stackList[i] = itemstack;
       this.eventHandler.onCraftMatrixChanged(this);
    }
 
    public int getInventoryStackLimit() {
-      return 64;
+      return this.maxStack;
    }
 
    public void onInventoryChanged() {}
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
       return true;
    }
 
Binary files mcp-mcdev/net/minecraft/src/InventoryEnderChest.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryEnderChest.class differ
diff -ur mcp-mcdev/net/minecraft/src/InventoryEnderChest.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryEnderChest.java
--- mcp-mcdev/net/minecraft/src/InventoryEnderChest.java	2012-11-29 21:14:51.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryEnderChest.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,59 +1,95 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.InventoryBasic;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.NBTTagList;
 import net.minecraft.src.TileEntityEnderChest;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.InventoryHolder;
 
 public class InventoryEnderChest extends InventoryBasic {
 
    private TileEntityEnderChest associatedChest;
+   public List transaction = new ArrayList();
+   public Player player;
+   private int maxStack = 64;
 
 
+   public ItemStack[] getContents() {
+      return this.inventoryContents;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public InventoryHolder getOwner() {
+      return this.player;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
+   public int getMaxStackSize() {
+      return this.maxStack;
+   }
+
    public InventoryEnderChest() {
       super("container.enderchest", 27);
    }
 
-   public void setAssociatedChest(TileEntityEnderChest var1) {
-      this.associatedChest = var1;
+   public void setAssociatedChest(TileEntityEnderChest tileentityenderchest) {
+      this.associatedChest = tileentityenderchest;
    }
 
-   public void loadInventoryFromNBT(NBTTagList var1) {
-      int var2;
-      for(var2 = 0; var2 < this.getSizeInventory(); ++var2) {
-         this.setInventorySlotContents(var2, (ItemStack)null);
+   public void loadInventoryFromNBT(NBTTagList nbttaglist) {
+      int i;
+      for(i = 0; i < this.getSizeInventory(); ++i) {
+         this.setInventorySlotContents(i, (ItemStack)null);
       }
 
-      for(var2 = 0; var2 < var1.tagCount(); ++var2) {
-         NBTTagCompound var3 = (NBTTagCompound)var1.tagAt(var2);
-         int var4 = var3.getByte("Slot") & 255;
-         if(var4 >= 0 && var4 < this.getSizeInventory()) {
-            this.setInventorySlotContents(var4, ItemStack.loadItemStackFromNBT(var3));
+      for(i = 0; i < nbttaglist.tagCount(); ++i) {
+         NBTTagCompound nbttagcompound = (NBTTagCompound)nbttaglist.tagAt(i);
+         int j = nbttagcompound.getByte("Slot") & 255;
+         if(j >= 0 && j < this.getSizeInventory()) {
+            this.setInventorySlotContents(j, ItemStack.loadItemStackFromNBT(nbttagcompound));
          }
       }
 
    }
 
    public NBTTagList saveInventoryToNBT() {
-      NBTTagList var1 = new NBTTagList("EnderItems");
+      NBTTagList nbttaglist = new NBTTagList("EnderItems");
 
-      for(int var2 = 0; var2 < this.getSizeInventory(); ++var2) {
-         ItemStack var3 = this.getStackInSlot(var2);
-         if(var3 != null) {
-            NBTTagCompound var4 = new NBTTagCompound();
-            var4.setByte("Slot", (byte)var2);
-            var3.writeToNBT(var4);
-            var1.appendTag(var4);
+      for(int i = 0; i < this.getSizeInventory(); ++i) {
+         ItemStack itemstack = this.getStackInSlot(i);
+         if(itemstack != null) {
+            NBTTagCompound nbttagcompound = new NBTTagCompound();
+            nbttagcompound.setByte("Slot", (byte)i);
+            itemstack.writeToNBT(nbttagcompound);
+            nbttaglist.appendTag(nbttagcompound);
          }
       }
 
-      return var1;
+      return nbttaglist;
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.associatedChest != null && !this.associatedChest.isUseableByPlayer(var1)?false:super.isUseableByPlayer(var1);
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.associatedChest != null && !this.associatedChest.isUseableByPlayer(entityhuman)?false:super.isUseableByPlayer(entityhuman);
    }
 
    public void openChest() {
Binary files mcp-mcdev/net/minecraft/src/InventoryLargeChest.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryLargeChest.class differ
diff -ur mcp-mcdev/net/minecraft/src/InventoryLargeChest.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryLargeChest.java
--- mcp-mcdev/net/minecraft/src/InventoryLargeChest.java	2012-11-29 21:14:50.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryLargeChest.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,65 +1,105 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IInventory;
 import net.minecraft.src.ItemStack;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.inventory.InventoryHolder;
 
 public class InventoryLargeChest implements IInventory {
 
    private String name;
-   private IInventory upperChest;
-   private IInventory lowerChest;
+   public IInventory upperChest;
+   public IInventory lowerChest;
+   public List transaction = new ArrayList();
 
 
-   public InventoryLargeChest(String var1, IInventory var2, IInventory var3) {
-      this.name = var1;
-      if(var2 == null) {
-         var2 = var3;
+   public ItemStack[] getContents() {
+      ItemStack[] result = new ItemStack[this.getSizeInventory()];
+
+      for(int i = 0; i < result.length; ++i) {
+         result[i] = this.getStackInSlot(i);
+      }
+
+      return result;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.upperChest.onOpen(who);
+      this.lowerChest.onOpen(who);
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.upperChest.onClose(who);
+      this.lowerChest.onClose(who);
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public InventoryHolder getOwner() {
+      return null;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.upperChest.setMaxStackSize(size);
+      this.lowerChest.setMaxStackSize(size);
+   }
+
+   public InventoryLargeChest(String s, IInventory iinventory, IInventory iinventory1) {
+      this.name = s;
+      if(iinventory == null) {
+         iinventory = iinventory1;
       }
 
-      if(var3 == null) {
-         var3 = var2;
+      if(iinventory1 == null) {
+         iinventory1 = iinventory;
       }
 
-      this.upperChest = var2;
-      this.lowerChest = var3;
+      this.upperChest = iinventory;
+      this.lowerChest = iinventory1;
    }
 
    public int getSizeInventory() {
       return this.upperChest.getSizeInventory() + this.lowerChest.getSizeInventory();
    }
 
-   public boolean func_90010_a(IInventory var1) {
-      return this.upperChest == var1 || this.lowerChest == var1;
+   public boolean func_90010_a(IInventory iinventory) {
+      return this.upperChest == iinventory || this.lowerChest == iinventory;
    }
 
    public String getInvName() {
       return this.name;
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      return var1 >= this.upperChest.getSizeInventory()?this.lowerChest.getStackInSlot(var1 - this.upperChest.getSizeInventory()):this.upperChest.getStackInSlot(var1);
+   public ItemStack getStackInSlot(int i) {
+      return i >= this.upperChest.getSizeInventory()?this.lowerChest.getStackInSlot(i - this.upperChest.getSizeInventory()):this.upperChest.getStackInSlot(i);
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      return var1 >= this.upperChest.getSizeInventory()?this.lowerChest.decrStackSize(var1 - this.upperChest.getSizeInventory(), var2):this.upperChest.decrStackSize(var1, var2);
+   public ItemStack decrStackSize(int i, int j) {
+      return i >= this.upperChest.getSizeInventory()?this.lowerChest.decrStackSize(i - this.upperChest.getSizeInventory(), j):this.upperChest.decrStackSize(i, j);
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      return var1 >= this.upperChest.getSizeInventory()?this.lowerChest.getStackInSlotOnClosing(var1 - this.upperChest.getSizeInventory()):this.upperChest.getStackInSlotOnClosing(var1);
+   public ItemStack getStackInSlotOnClosing(int i) {
+      return i >= this.upperChest.getSizeInventory()?this.lowerChest.getStackInSlotOnClosing(i - this.upperChest.getSizeInventory()):this.upperChest.getStackInSlotOnClosing(i);
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      if(var1 >= this.upperChest.getSizeInventory()) {
-         this.lowerChest.setInventorySlotContents(var1 - this.upperChest.getSizeInventory(), var2);
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      if(i >= this.upperChest.getSizeInventory()) {
+         this.lowerChest.setInventorySlotContents(i - this.upperChest.getSizeInventory(), itemstack);
       } else {
-         this.upperChest.setInventorySlotContents(var1, var2);
+         this.upperChest.setInventorySlotContents(i, itemstack);
       }
 
    }
 
    public int getInventoryStackLimit() {
-      return this.upperChest.getInventoryStackLimit();
+      return Math.min(this.upperChest.getInventoryStackLimit(), this.lowerChest.getInventoryStackLimit());
    }
 
    public void onInventoryChanged() {
@@ -67,8 +107,8 @@
       this.lowerChest.onInventoryChanged();
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.upperChest.isUseableByPlayer(var1) && this.lowerChest.isUseableByPlayer(var1);
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.upperChest.isUseableByPlayer(entityhuman) && this.lowerChest.isUseableByPlayer(entityhuman);
    }
 
    public void openChest() {
Binary files mcp-mcdev/net/minecraft/src/InventoryMerchant.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryMerchant.class differ
diff -ur mcp-mcdev/net/minecraft/src/InventoryMerchant.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryMerchant.java
--- mcp-mcdev/net/minecraft/src/InventoryMerchant.java	2012-11-29 21:14:50.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryMerchant.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,11 +1,15 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IInventory;
 import net.minecraft.src.IMerchant;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.MerchantRecipe;
 import net.minecraft.src.MerchantRecipeList;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.inventory.InventoryHolder;
 
 public class InventoryMerchant implements IInventory {
 
@@ -14,74 +18,100 @@
    private final EntityPlayer thePlayer;
    private MerchantRecipe currentRecipe;
    private int currentRecipeIndex;
+   public List transaction = new ArrayList();
+   private int maxStack = 64;
 
 
-   public InventoryMerchant(EntityPlayer var1, IMerchant var2) {
-      this.thePlayer = var1;
-      this.theMerchant = var2;
+   public ItemStack[] getContents() {
+      return this.theInventory;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public void setMaxStackSize(int i) {
+      this.maxStack = i;
+   }
+
+   public InventoryHolder getOwner() {
+      return this.thePlayer.getBukkitEntity();
+   }
+
+   public InventoryMerchant(EntityPlayer entityhuman, IMerchant imerchant) {
+      this.thePlayer = entityhuman;
+      this.theMerchant = imerchant;
    }
 
    public int getSizeInventory() {
       return this.theInventory.length;
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      return this.theInventory[var1];
+   public ItemStack getStackInSlot(int i) {
+      return this.theInventory[i];
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      if(this.theInventory[var1] != null) {
-         ItemStack var3;
-         if(var1 == 2) {
-            var3 = this.theInventory[var1];
-            this.theInventory[var1] = null;
-            return var3;
-         } else if(this.theInventory[var1].stackSize <= var2) {
-            var3 = this.theInventory[var1];
-            this.theInventory[var1] = null;
-            if(this.inventoryResetNeededOnSlotChange(var1)) {
+   public ItemStack decrStackSize(int i, int j) {
+      if(this.theInventory[i] != null) {
+         ItemStack itemstack;
+         if(i == 2) {
+            itemstack = this.theInventory[i];
+            this.theInventory[i] = null;
+            return itemstack;
+         } else if(this.theInventory[i].stackSize <= j) {
+            itemstack = this.theInventory[i];
+            this.theInventory[i] = null;
+            if(this.inventoryResetNeededOnSlotChange(i)) {
                this.resetRecipeAndSlots();
             }
 
-            return var3;
+            return itemstack;
          } else {
-            var3 = this.theInventory[var1].splitStack(var2);
-            if(this.theInventory[var1].stackSize == 0) {
-               this.theInventory[var1] = null;
+            itemstack = this.theInventory[i].splitStack(j);
+            if(this.theInventory[i].stackSize == 0) {
+               this.theInventory[i] = null;
             }
 
-            if(this.inventoryResetNeededOnSlotChange(var1)) {
+            if(this.inventoryResetNeededOnSlotChange(i)) {
                this.resetRecipeAndSlots();
             }
 
-            return var3;
+            return itemstack;
          }
       } else {
          return null;
       }
    }
 
-   private boolean inventoryResetNeededOnSlotChange(int var1) {
-      return var1 == 0 || var1 == 1;
+   private boolean inventoryResetNeededOnSlotChange(int i) {
+      return i == 0 || i == 1;
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      if(this.theInventory[var1] != null) {
-         ItemStack var2 = this.theInventory[var1];
-         this.theInventory[var1] = null;
-         return var2;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      if(this.theInventory[i] != null) {
+         ItemStack itemstack = this.theInventory[i];
+         this.theInventory[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      this.theInventory[var1] = var2;
-      if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-         var2.stackSize = this.getInventoryStackLimit();
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      this.theInventory[i] = itemstack;
+      if(itemstack != null && itemstack.stackSize > this.getInventoryStackLimit()) {
+         itemstack.stackSize = this.getInventoryStackLimit();
       }
 
-      if(this.inventoryResetNeededOnSlotChange(var1)) {
+      if(this.inventoryResetNeededOnSlotChange(i)) {
          this.resetRecipeAndSlots();
       }
 
@@ -92,11 +122,11 @@
    }
 
    public int getInventoryStackLimit() {
-      return 64;
+      return this.maxStack;
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.theMerchant.getCustomer() == var1;
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.theMerchant.getCustomer() == entityhuman;
    }
 
    public void openChest() {}
@@ -109,27 +139,27 @@
 
    public void resetRecipeAndSlots() {
       this.currentRecipe = null;
-      ItemStack var1 = this.theInventory[0];
-      ItemStack var2 = this.theInventory[1];
-      if(var1 == null) {
-         var1 = var2;
-         var2 = null;
+      ItemStack itemstack = this.theInventory[0];
+      ItemStack itemstack1 = this.theInventory[1];
+      if(itemstack == null) {
+         itemstack = itemstack1;
+         itemstack1 = null;
       }
 
-      if(var1 == null) {
+      if(itemstack == null) {
          this.setInventorySlotContents(2, (ItemStack)null);
       } else {
-         MerchantRecipeList var3 = this.theMerchant.getRecipes(this.thePlayer);
-         if(var3 != null) {
-            MerchantRecipe var4 = var3.canRecipeBeUsed(var1, var2, this.currentRecipeIndex);
-            if(var4 != null && !var4.func_82784_g()) {
-               this.currentRecipe = var4;
-               this.setInventorySlotContents(2, var4.getItemToSell().copy());
-            } else if(var2 != null) {
-               var4 = var3.canRecipeBeUsed(var2, var1, this.currentRecipeIndex);
-               if(var4 != null && !var4.func_82784_g()) {
-                  this.currentRecipe = var4;
-                  this.setInventorySlotContents(2, var4.getItemToSell().copy());
+         MerchantRecipeList merchantrecipelist = this.theMerchant.getRecipes(this.thePlayer);
+         if(merchantrecipelist != null) {
+            MerchantRecipe merchantrecipe = merchantrecipelist.canRecipeBeUsed(itemstack, itemstack1, this.currentRecipeIndex);
+            if(merchantrecipe != null && !merchantrecipe.func_82784_g()) {
+               this.currentRecipe = merchantrecipe;
+               this.setInventorySlotContents(2, merchantrecipe.getItemToSell().copy());
+            } else if(itemstack1 != null) {
+               merchantrecipe = merchantrecipelist.canRecipeBeUsed(itemstack1, itemstack, this.currentRecipeIndex);
+               if(merchantrecipe != null && !merchantrecipe.func_82784_g()) {
+                  this.currentRecipe = merchantrecipe;
+                  this.setInventorySlotContents(2, merchantrecipe.getItemToSell().copy());
                } else {
                   this.setInventorySlotContents(2, (ItemStack)null);
                }
@@ -145,8 +175,8 @@
       return this.currentRecipe;
    }
 
-   public void setCurrentRecipeIndex(int var1) {
-      this.currentRecipeIndex = var1;
+   public void setCurrentRecipeIndex(int i) {
+      this.currentRecipeIndex = i;
       this.resetRecipeAndSlots();
    }
 }
Binary files mcp-mcdev/net/minecraft/src/InventoryPlayer.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryPlayer.class differ
diff -ur mcp-mcdev/net/minecraft/src/InventoryPlayer.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryPlayer.java
--- mcp-mcdev/net/minecraft/src/InventoryPlayer.java	2012-11-29 21:14:50.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryPlayer.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.src.Block;
 import net.minecraft.src.Entity;
 import net.minecraft.src.EntityPlayer;
@@ -8,6 +10,8 @@
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.NBTTagList;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.inventory.InventoryHolder;
 
 public class InventoryPlayer implements IInventory {
 
@@ -17,10 +21,40 @@
    public EntityPlayer player;
    private ItemStack itemStack;
    public boolean inventoryChanged = false;
+   public List transaction = new ArrayList();
+   private int maxStack = 64;
 
 
-   public InventoryPlayer(EntityPlayer var1) {
-      this.player = var1;
+   public ItemStack[] getContents() {
+      return this.mainInventory;
+   }
+
+   public ItemStack[] getArmorContents() {
+      return this.armorInventory;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public InventoryHolder getOwner() {
+      return this.player.getBukkitEntity();
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
+   public InventoryPlayer(EntityPlayer entityhuman) {
+      this.player = entityhuman;
    }
 
    public ItemStack getCurrentItem() {
@@ -31,269 +65,289 @@
       return 9;
    }
 
-   private int getInventorySlotContainItem(int var1) {
-      for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
-         if(this.mainInventory[var2] != null && this.mainInventory[var2].itemID == var1) {
-            return var2;
+   private int getInventorySlotContainItem(int i) {
+      for(int j = 0; j < this.mainInventory.length; ++j) {
+         if(this.mainInventory[j] != null && this.mainInventory[j].itemID == i) {
+            return j;
          }
       }
 
       return -1;
    }
 
-   private int storeItemStack(ItemStack var1) {
-      for(int var2 = 0; var2 < this.mainInventory.length; ++var2) {
-         if(this.mainInventory[var2] != null && this.mainInventory[var2].itemID == var1.itemID && this.mainInventory[var2].isStackable() && this.mainInventory[var2].stackSize < this.mainInventory[var2].getMaxStackSize() && this.mainInventory[var2].stackSize < this.getInventoryStackLimit() && (!this.mainInventory[var2].getHasSubtypes() || this.mainInventory[var2].getItemDamage() == var1.getItemDamage()) && ItemStack.areItemStackTagsEqual(this.mainInventory[var2], var1)) {
-            return var2;
+   private int storeItemStack(ItemStack itemstack) {
+      for(int i = 0; i < this.mainInventory.length; ++i) {
+         if(this.mainInventory[i] != null && this.mainInventory[i].itemID == itemstack.itemID && this.mainInventory[i].isStackable() && this.mainInventory[i].stackSize < this.mainInventory[i].getMaxStackSize() && this.mainInventory[i].stackSize < this.getInventoryStackLimit() && (!this.mainInventory[i].getHasSubtypes() || this.mainInventory[i].getItemDamage() == itemstack.getItemDamage()) && ItemStack.areItemStackTagsEqual(this.mainInventory[i], itemstack)) {
+            return i;
          }
       }
 
       return -1;
    }
 
+   public int canHold(ItemStack itemstack) {
+      int remains = itemstack.stackSize;
+
+      for(int i = 0; i < this.mainInventory.length; ++i) {
+         if(this.mainInventory[i] == null) {
+            return itemstack.stackSize;
+         }
+
+         if(this.mainInventory[i] != null && this.mainInventory[i].itemID == itemstack.itemID && this.mainInventory[i].isStackable() && this.mainInventory[i].stackSize < this.mainInventory[i].getMaxStackSize() && this.mainInventory[i].stackSize < this.getInventoryStackLimit() && (!this.mainInventory[i].getHasSubtypes() || this.mainInventory[i].getItemDamage() == itemstack.getItemDamage())) {
+            remains -= (this.mainInventory[i].getMaxStackSize() < this.getInventoryStackLimit()?this.mainInventory[i].getMaxStackSize():this.getInventoryStackLimit()) - this.mainInventory[i].stackSize;
+         }
+
+         if(remains <= 0) {
+            return itemstack.stackSize;
+         }
+      }
+
+      return itemstack.stackSize - remains;
+   }
+
    public int getFirstEmptyStack() {
-      for(int var1 = 0; var1 < this.mainInventory.length; ++var1) {
-         if(this.mainInventory[var1] == null) {
-            return var1;
+      for(int i = 0; i < this.mainInventory.length; ++i) {
+         if(this.mainInventory[i] == null) {
+            return i;
          }
       }
 
       return -1;
    }
 
-   public int clearInventory(int var1, int var2) {
-      int var3 = 0;
+   public int clearInventory(int i, int j) {
+      int k = 0;
 
-      int var4;
-      ItemStack var5;
-      for(var4 = 0; var4 < this.mainInventory.length; ++var4) {
-         var5 = this.mainInventory[var4];
-         if(var5 != null && (var1 <= -1 || var5.itemID == var1) && (var2 <= -1 || var5.getItemDamage() == var2)) {
-            var3 += var5.stackSize;
-            this.mainInventory[var4] = null;
+      int l;
+      ItemStack itemstack;
+      for(l = 0; l < this.mainInventory.length; ++l) {
+         itemstack = this.mainInventory[l];
+         if(itemstack != null && (i <= -1 || itemstack.itemID == i) && (j <= -1 || itemstack.getItemDamage() == j)) {
+            k += itemstack.stackSize;
+            this.mainInventory[l] = null;
          }
       }
 
-      for(var4 = 0; var4 < this.armorInventory.length; ++var4) {
-         var5 = this.armorInventory[var4];
-         if(var5 != null && (var1 <= -1 || var5.itemID == var1) && (var2 <= -1 || var5.getItemDamage() == var2)) {
-            var3 += var5.stackSize;
-            this.armorInventory[var4] = null;
+      for(l = 0; l < this.armorInventory.length; ++l) {
+         itemstack = this.armorInventory[l];
+         if(itemstack != null && (i <= -1 || itemstack.itemID == i) && (j <= -1 || itemstack.getItemDamage() == j)) {
+            k += itemstack.stackSize;
+            this.armorInventory[l] = null;
          }
       }
 
-      return var3;
+      return k;
    }
 
-   private int storePartialItemStack(ItemStack var1) {
-      int var2 = var1.itemID;
-      int var3 = var1.stackSize;
-      int var4;
-      if(var1.getMaxStackSize() == 1) {
-         var4 = this.getFirstEmptyStack();
-         if(var4 < 0) {
-            return var3;
+   private int storePartialItemStack(ItemStack itemstack) {
+      int i = itemstack.itemID;
+      int j = itemstack.stackSize;
+      int k;
+      if(itemstack.getMaxStackSize() == 1) {
+         k = this.getFirstEmptyStack();
+         if(k < 0) {
+            return j;
          } else {
-            if(this.mainInventory[var4] == null) {
-               this.mainInventory[var4] = ItemStack.copyItemStack(var1);
+            if(this.mainInventory[k] == null) {
+               this.mainInventory[k] = ItemStack.copyItemStack(itemstack);
             }
 
             return 0;
          }
       } else {
-         var4 = this.storeItemStack(var1);
-         if(var4 < 0) {
-            var4 = this.getFirstEmptyStack();
+         k = this.storeItemStack(itemstack);
+         if(k < 0) {
+            k = this.getFirstEmptyStack();
          }
 
-         if(var4 < 0) {
-            return var3;
+         if(k < 0) {
+            return j;
          } else {
-            if(this.mainInventory[var4] == null) {
-               this.mainInventory[var4] = new ItemStack(var2, 0, var1.getItemDamage());
-               if(var1.hasTagCompound()) {
-                  this.mainInventory[var4].setTagCompound((NBTTagCompound)var1.getTagCompound().copy());
+            if(this.mainInventory[k] == null) {
+               this.mainInventory[k] = new ItemStack(i, 0, itemstack.getItemDamage());
+               if(itemstack.hasTagCompound()) {
+                  this.mainInventory[k].setTagCompound((NBTTagCompound)itemstack.getTagCompound().copy());
                }
             }
 
-            int var5 = var3;
-            if(var3 > this.mainInventory[var4].getMaxStackSize() - this.mainInventory[var4].stackSize) {
-               var5 = this.mainInventory[var4].getMaxStackSize() - this.mainInventory[var4].stackSize;
+            int l = j;
+            if(j > this.mainInventory[k].getMaxStackSize() - this.mainInventory[k].stackSize) {
+               l = this.mainInventory[k].getMaxStackSize() - this.mainInventory[k].stackSize;
             }
 
-            if(var5 > this.getInventoryStackLimit() - this.mainInventory[var4].stackSize) {
-               var5 = this.getInventoryStackLimit() - this.mainInventory[var4].stackSize;
+            if(l > this.getInventoryStackLimit() - this.mainInventory[k].stackSize) {
+               l = this.getInventoryStackLimit() - this.mainInventory[k].stackSize;
             }
 
-            if(var5 == 0) {
-               return var3;
+            if(l == 0) {
+               return j;
             } else {
-               var3 -= var5;
-               this.mainInventory[var4].stackSize += var5;
-               this.mainInventory[var4].animationsToGo = 5;
-               return var3;
+               j -= l;
+               this.mainInventory[k].stackSize += l;
+               this.mainInventory[k].animationsToGo = 5;
+               return j;
             }
          }
       }
    }
 
    public void decrementAnimations() {
-      for(int var1 = 0; var1 < this.mainInventory.length; ++var1) {
-         if(this.mainInventory[var1] != null) {
-            this.mainInventory[var1].updateAnimation(this.player.worldObj, this.player, var1, this.currentItem == var1);
+      for(int i = 0; i < this.mainInventory.length; ++i) {
+         if(this.mainInventory[i] != null) {
+            this.mainInventory[i].updateAnimation(this.player.worldObj, this.player, i, this.currentItem == i);
          }
       }
 
    }
 
-   public boolean consumeInventoryItem(int var1) {
-      int var2 = this.getInventorySlotContainItem(var1);
-      if(var2 < 0) {
+   public boolean consumeInventoryItem(int i) {
+      int j = this.getInventorySlotContainItem(i);
+      if(j < 0) {
          return false;
       } else {
-         if(--this.mainInventory[var2].stackSize <= 0) {
-            this.mainInventory[var2] = null;
+         if(--this.mainInventory[j].stackSize <= 0) {
+            this.mainInventory[j] = null;
          }
 
          return true;
       }
    }
 
-   public boolean hasItem(int var1) {
-      int var2 = this.getInventorySlotContainItem(var1);
-      return var2 >= 0;
+   public boolean hasItem(int i) {
+      int j = this.getInventorySlotContainItem(i);
+      return j >= 0;
    }
 
-   public boolean addItemStackToInventory(ItemStack var1) {
-      int var2;
-      if(var1.isItemDamaged()) {
-         var2 = this.getFirstEmptyStack();
-         if(var2 >= 0) {
-            this.mainInventory[var2] = ItemStack.copyItemStack(var1);
-            this.mainInventory[var2].animationsToGo = 5;
-            var1.stackSize = 0;
+   public boolean addItemStackToInventory(ItemStack itemstack) {
+      int i;
+      if(itemstack.isItemDamaged()) {
+         i = this.getFirstEmptyStack();
+         if(i >= 0) {
+            this.mainInventory[i] = ItemStack.copyItemStack(itemstack);
+            this.mainInventory[i].animationsToGo = 5;
+            itemstack.stackSize = 0;
             return true;
          } else if(this.player.capabilities.isCreativeMode) {
-            var1.stackSize = 0;
+            itemstack.stackSize = 0;
             return true;
          } else {
             return false;
          }
       } else {
          do {
-            var2 = var1.stackSize;
-            var1.stackSize = this.storePartialItemStack(var1);
-         } while(var1.stackSize > 0 && var1.stackSize < var2);
+            i = itemstack.stackSize;
+            itemstack.stackSize = this.storePartialItemStack(itemstack);
+         } while(itemstack.stackSize > 0 && itemstack.stackSize < i);
 
-         if(var1.stackSize == var2 && this.player.capabilities.isCreativeMode) {
-            var1.stackSize = 0;
+         if(itemstack.stackSize == i && this.player.capabilities.isCreativeMode) {
+            itemstack.stackSize = 0;
             return true;
          } else {
-            return var1.stackSize < var2;
+            return itemstack.stackSize < i;
          }
       }
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      ItemStack[] var3 = this.mainInventory;
-      if(var1 >= this.mainInventory.length) {
-         var3 = this.armorInventory;
-         var1 -= this.mainInventory.length;
+   public ItemStack decrStackSize(int i, int j) {
+      ItemStack[] aitemstack = this.mainInventory;
+      if(i >= this.mainInventory.length) {
+         aitemstack = this.armorInventory;
+         i -= this.mainInventory.length;
       }
 
-      if(var3[var1] != null) {
-         ItemStack var4;
-         if(var3[var1].stackSize <= var2) {
-            var4 = var3[var1];
-            var3[var1] = null;
-            return var4;
+      if(aitemstack[i] != null) {
+         ItemStack itemstack;
+         if(aitemstack[i].stackSize <= j) {
+            itemstack = aitemstack[i];
+            aitemstack[i] = null;
+            return itemstack;
          } else {
-            var4 = var3[var1].splitStack(var2);
-            if(var3[var1].stackSize == 0) {
-               var3[var1] = null;
+            itemstack = aitemstack[i].splitStack(j);
+            if(aitemstack[i].stackSize == 0) {
+               aitemstack[i] = null;
             }
 
-            return var4;
+            return itemstack;
          }
       } else {
          return null;
       }
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      ItemStack[] var2 = this.mainInventory;
-      if(var1 >= this.mainInventory.length) {
-         var2 = this.armorInventory;
-         var1 -= this.mainInventory.length;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      ItemStack[] aitemstack = this.mainInventory;
+      if(i >= this.mainInventory.length) {
+         aitemstack = this.armorInventory;
+         i -= this.mainInventory.length;
       }
 
-      if(var2[var1] != null) {
-         ItemStack var3 = var2[var1];
-         var2[var1] = null;
-         return var3;
+      if(aitemstack[i] != null) {
+         ItemStack itemstack = aitemstack[i];
+         aitemstack[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      ItemStack[] var3 = this.mainInventory;
-      if(var1 >= var3.length) {
-         var1 -= var3.length;
-         var3 = this.armorInventory;
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      ItemStack[] aitemstack = this.mainInventory;
+      if(i >= aitemstack.length) {
+         i -= aitemstack.length;
+         aitemstack = this.armorInventory;
       }
 
-      var3[var1] = var2;
+      aitemstack[i] = itemstack;
    }
 
-   public float getStrVsBlock(Block var1) {
-      float var2 = 1.0F;
+   public float getStrVsBlock(Block block) {
+      float f = 1.0F;
       if(this.mainInventory[this.currentItem] != null) {
-         var2 *= this.mainInventory[this.currentItem].getStrVsBlock(var1);
+         f *= this.mainInventory[this.currentItem].getStrVsBlock(block);
       }
 
-      return var2;
+      return f;
    }
 
-   public NBTTagList writeToNBT(NBTTagList var1) {
-      int var2;
-      NBTTagCompound var3;
-      for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
-         if(this.mainInventory[var2] != null) {
-            var3 = new NBTTagCompound();
-            var3.setByte("Slot", (byte)var2);
-            this.mainInventory[var2].writeToNBT(var3);
-            var1.appendTag(var3);
+   public NBTTagList writeToNBT(NBTTagList nbttaglist) {
+      int i;
+      NBTTagCompound nbttagcompound;
+      for(i = 0; i < this.mainInventory.length; ++i) {
+         if(this.mainInventory[i] != null) {
+            nbttagcompound = new NBTTagCompound();
+            nbttagcompound.setByte("Slot", (byte)i);
+            this.mainInventory[i].writeToNBT(nbttagcompound);
+            nbttaglist.appendTag(nbttagcompound);
          }
       }
 
-      for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
-         if(this.armorInventory[var2] != null) {
-            var3 = new NBTTagCompound();
-            var3.setByte("Slot", (byte)(var2 + 100));
-            this.armorInventory[var2].writeToNBT(var3);
-            var1.appendTag(var3);
+      for(i = 0; i < this.armorInventory.length; ++i) {
+         if(this.armorInventory[i] != null) {
+            nbttagcompound = new NBTTagCompound();
+            nbttagcompound.setByte("Slot", (byte)(i + 100));
+            this.armorInventory[i].writeToNBT(nbttagcompound);
+            nbttaglist.appendTag(nbttagcompound);
          }
       }
 
-      return var1;
+      return nbttaglist;
    }
 
-   public void readFromNBT(NBTTagList var1) {
+   public void readFromNBT(NBTTagList nbttaglist) {
       this.mainInventory = new ItemStack[36];
       this.armorInventory = new ItemStack[4];
 
-      for(int var2 = 0; var2 < var1.tagCount(); ++var2) {
-         NBTTagCompound var3 = (NBTTagCompound)var1.tagAt(var2);
-         int var4 = var3.getByte("Slot") & 255;
-         ItemStack var5 = ItemStack.loadItemStackFromNBT(var3);
-         if(var5 != null) {
-            if(var4 >= 0 && var4 < this.mainInventory.length) {
-               this.mainInventory[var4] = var5;
+      for(int i = 0; i < nbttaglist.tagCount(); ++i) {
+         NBTTagCompound nbttagcompound = (NBTTagCompound)nbttaglist.tagAt(i);
+         int j = nbttagcompound.getByte("Slot") & 255;
+         ItemStack itemstack = ItemStack.loadItemStackFromNBT(nbttagcompound);
+         if(itemstack != null) {
+            if(j >= 0 && j < this.mainInventory.length) {
+               this.mainInventory[j] = itemstack;
             }
 
-            if(var4 >= 100 && var4 < this.armorInventory.length + 100) {
-               this.armorInventory[var4 - 100] = var5;
+            if(j >= 100 && j < this.armorInventory.length + 100) {
+               this.armorInventory[j - 100] = itemstack;
             }
          }
       }
@@ -304,14 +358,14 @@
       return this.mainInventory.length + 4;
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      ItemStack[] var2 = this.mainInventory;
-      if(var1 >= var2.length) {
-         var1 -= var2.length;
-         var2 = this.armorInventory;
+   public ItemStack getStackInSlot(int i) {
+      ItemStack[] aitemstack = this.mainInventory;
+      if(i >= aitemstack.length) {
+         i -= aitemstack.length;
+         aitemstack = this.armorInventory;
       }
 
-      return var2[var1];
+      return aitemstack[i];
    }
 
    public String getInvName() {
@@ -319,51 +373,51 @@
    }
 
    public int getInventoryStackLimit() {
-      return 64;
+      return this.maxStack;
    }
 
-   public int getDamageVsEntity(Entity var1) {
-      ItemStack var2 = this.getStackInSlot(this.currentItem);
-      return var2 != null?var2.getDamageVsEntity(var1):1;
+   public int getDamageVsEntity(Entity entity) {
+      ItemStack itemstack = this.getStackInSlot(this.currentItem);
+      return itemstack != null?itemstack.getDamageVsEntity(entity):1;
    }
 
-   public boolean canHarvestBlock(Block var1) {
-      if(var1.blockMaterial.isToolNotRequired()) {
+   public boolean canHarvestBlock(Block block) {
+      if(block.blockMaterial.isToolNotRequired()) {
          return true;
       } else {
-         ItemStack var2 = this.getStackInSlot(this.currentItem);
-         return var2 != null?var2.canHarvestBlock(var1):false;
+         ItemStack itemstack = this.getStackInSlot(this.currentItem);
+         return itemstack != null?itemstack.canHarvestBlock(block):false;
       }
    }
 
-   public ItemStack armorItemInSlot(int var1) {
-      return this.armorInventory[var1];
+   public ItemStack armorItemInSlot(int i) {
+      return this.armorInventory[i];
    }
 
    public int getTotalArmorValue() {
-      int var1 = 0;
+      int i = 0;
 
-      for(int var2 = 0; var2 < this.armorInventory.length; ++var2) {
-         if(this.armorInventory[var2] != null && this.armorInventory[var2].getItem() instanceof ItemArmor) {
-            int var3 = ((ItemArmor)this.armorInventory[var2].getItem()).damageReduceAmount;
-            var1 += var3;
+      for(int j = 0; j < this.armorInventory.length; ++j) {
+         if(this.armorInventory[j] != null && this.armorInventory[j].getItem() instanceof ItemArmor) {
+            int k = ((ItemArmor)this.armorInventory[j].getItem()).damageReduceAmount;
+            i += k;
          }
       }
 
-      return var1;
+      return i;
    }
 
-   public void damageArmor(int var1) {
-      var1 /= 4;
-      if(var1 < 1) {
-         var1 = 1;
+   public void damageArmor(int i) {
+      i /= 4;
+      if(i < 1) {
+         i = 1;
       }
 
-      for(int var2 = 0; var2 < this.armorInventory.length; ++var2) {
-         if(this.armorInventory[var2] != null && this.armorInventory[var2].getItem() instanceof ItemArmor) {
-            this.armorInventory[var2].damageItem(var1, this.player);
-            if(this.armorInventory[var2].stackSize == 0) {
-               this.armorInventory[var2] = null;
+      for(int j = 0; j < this.armorInventory.length; ++j) {
+         if(this.armorInventory[j] != null && this.armorInventory[j].getItem() instanceof ItemArmor) {
+            this.armorInventory[j].damageItem(i, this.player);
+            if(this.armorInventory[j].stackSize == 0) {
+               this.armorInventory[j] = null;
             }
          }
       }
@@ -371,18 +425,18 @@
    }
 
    public void dropAllItems() {
-      int var1;
-      for(var1 = 0; var1 < this.mainInventory.length; ++var1) {
-         if(this.mainInventory[var1] != null) {
-            this.player.dropPlayerItemWithRandomChoice(this.mainInventory[var1], true);
-            this.mainInventory[var1] = null;
+      int i;
+      for(i = 0; i < this.mainInventory.length; ++i) {
+         if(this.mainInventory[i] != null) {
+            this.player.dropPlayerItemWithRandomChoice(this.mainInventory[i], true);
+            this.mainInventory[i] = null;
          }
       }
 
-      for(var1 = 0; var1 < this.armorInventory.length; ++var1) {
-         if(this.armorInventory[var1] != null) {
-            this.player.dropPlayerItemWithRandomChoice(this.armorInventory[var1], true);
-            this.armorInventory[var1] = null;
+      for(i = 0; i < this.armorInventory.length; ++i) {
+         if(this.armorInventory[i] != null) {
+            this.player.dropPlayerItemWithRandomChoice(this.armorInventory[i], true);
+            this.armorInventory[i] = null;
          }
       }
 
@@ -392,28 +446,32 @@
       this.inventoryChanged = true;
    }
 
-   public void setItemStack(ItemStack var1) {
-      this.itemStack = var1;
+   public void setItemStack(ItemStack itemstack) {
+      this.itemStack = itemstack;
    }
 
    public ItemStack getItemStack() {
+      if(this.itemStack != null && this.itemStack.stackSize == 0) {
+         this.setItemStack((ItemStack)null);
+      }
+
       return this.itemStack;
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.player.isDead?false:var1.getDistanceSqToEntity(this.player) <= 64.0D;
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.player.isDead?false:entityhuman.getDistanceSqToEntity(this.player) <= 64.0D;
    }
 
-   public boolean hasItemStack(ItemStack var1) {
-      int var2;
-      for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
-         if(this.armorInventory[var2] != null && this.armorInventory[var2].isItemEqual(var1)) {
+   public boolean hasItemStack(ItemStack itemstack) {
+      int i;
+      for(i = 0; i < this.armorInventory.length; ++i) {
+         if(this.armorInventory[i] != null && this.armorInventory[i].isItemEqual(itemstack)) {
             return true;
          }
       }
 
-      for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
-         if(this.mainInventory[var2] != null && this.mainInventory[var2].isItemEqual(var1)) {
+      for(i = 0; i < this.mainInventory.length; ++i) {
+         if(this.mainInventory[i] != null && this.mainInventory[i].isItemEqual(itemstack)) {
             return true;
          }
       }
@@ -425,14 +483,14 @@
 
    public void closeChest() {}
 
-   public void copyInventory(InventoryPlayer var1) {
-      int var2;
-      for(var2 = 0; var2 < this.mainInventory.length; ++var2) {
-         this.mainInventory[var2] = ItemStack.copyItemStack(var1.mainInventory[var2]);
+   public void copyInventory(InventoryPlayer playerinventory) {
+      int i;
+      for(i = 0; i < this.mainInventory.length; ++i) {
+         this.mainInventory[i] = ItemStack.copyItemStack(playerinventory.mainInventory[i]);
       }
 
-      for(var2 = 0; var2 < this.armorInventory.length; ++var2) {
-         this.armorInventory[var2] = ItemStack.copyItemStack(var1.armorInventory[var2]);
+      for(i = 0; i < this.armorInventory.length; ++i) {
+         this.armorInventory[i] = ItemStack.copyItemStack(playerinventory.armorInventory[i]);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/InventoryRepair.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryRepair.class differ
diff -ur mcp-mcdev/net/minecraft/src/InventoryRepair.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryRepair.java
--- mcp-mcdev/net/minecraft/src/InventoryRepair.java	2012-11-29 21:14:50.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/InventoryRepair.java	2012-11-29 20:44:02.000000000 -0800
@@ -1,17 +1,50 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.src.ContainerRepair;
 import net.minecraft.src.InventoryBasic;
+import net.minecraft.src.ItemStack;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.InventoryHolder;
 
-class InventoryRepair extends InventoryBasic {
+public class InventoryRepair extends InventoryBasic {
 
-   // $FF: synthetic field
    final ContainerRepair theContainer;
+   public List transaction = new ArrayList();
+   public Player player;
+   private int maxStack = 64;
 
 
-   InventoryRepair(ContainerRepair var1, String var2, int var3) {
-      super(var2, var3);
-      this.theContainer = var1;
+   public ItemStack[] getContents() {
+      return this.inventoryContents;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public InventoryHolder getOwner() {
+      return this.player;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
+   InventoryRepair(ContainerRepair containeranvil, String s, int i) {
+      super(s, i);
+      this.theContainer = containeranvil;
+      this.setMaxStackSize(1);
    }
 
    public void onInventoryChanged() {
Binary files mcp-mcdev/net/minecraft/src/ItemBed.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBed.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemBed.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBed.java
--- mcp-mcdev/net/minecraft/src/ItemBed.java	2012-11-29 21:14:49.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBed.java	2012-11-29 20:44:01.000000000 -0800
@@ -8,50 +8,60 @@
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemBed extends Item {
 
-   public ItemBed(int var1) {
-      super(var1);
+   public ItemBed(int i) {
+      super(i);
       this.setCreativeTab(CreativeTabs.tabDecorations);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var3.isRemote) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(world.isRemote) {
          return true;
-      } else if(var7 != 1) {
+      } else if(l != 1) {
          return false;
       } else {
-         ++var5;
-         BlockBed var11 = (BlockBed)Block.bed;
-         int var12 = MathHelper.floor_double((double)(var2.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
-         byte var13 = 0;
-         byte var14 = 0;
-         if(var12 == 0) {
-            var14 = 1;
+         int clickedY = j++;
+         BlockBed blockbed = (BlockBed)Block.bed;
+         int i1 = MathHelper.floor_double((double)(entityhuman.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
+         byte b0 = 0;
+         byte b1 = 0;
+         if(i1 == 0) {
+            b1 = 1;
          }
 
-         if(var12 == 1) {
-            var13 = -1;
+         if(i1 == 1) {
+            b0 = -1;
          }
 
-         if(var12 == 2) {
-            var14 = -1;
+         if(i1 == 2) {
+            b1 = -1;
          }
 
-         if(var12 == 3) {
-            var13 = 1;
+         if(i1 == 3) {
+            b0 = 1;
          }
 
-         if(var2.canPlayerEdit(var4, var5, var6, var7, var1) && var2.canPlayerEdit(var4 + var13, var5, var6 + var14, var7, var1)) {
-            if(var3.isAirBlock(var4, var5, var6) && var3.isAirBlock(var4 + var13, var5, var6 + var14) && var3.doesBlockHaveSolidTopSurface(var4, var5 - 1, var6) && var3.doesBlockHaveSolidTopSurface(var4 + var13, var5 - 1, var6 + var14)) {
-               var3.setBlockAndMetadataWithNotify(var4, var5, var6, var11.blockID, var12);
-               if(var3.getBlockId(var4, var5, var6) == var11.blockID) {
-                  var3.setBlockAndMetadataWithNotify(var4 + var13, var5, var6 + var14, var11.blockID, var12 + 8);
-               }
+         if(entityhuman.canPlayerEdit(i, j, k, l, itemstack) && entityhuman.canPlayerEdit(i + b0, j, k + b1, l, itemstack)) {
+            if(world.isAirBlock(i, j, k) && world.isAirBlock(i + b0, j, k + b1) && world.doesBlockHaveSolidTopSurface(i, j - 1, k) && world.doesBlockHaveSolidTopSurface(i + b0, j - 1, k + b1)) {
+               CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j, k);
+               world.setBlockAndMetadataWithNotify(i, j, k, blockbed.blockID, i1);
+               BlockPlaceEvent event = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, i, clickedY, k);
+               if(!event.isCancelled() && event.canBuild()) {
+                  if(world.getBlockId(i, j, k) == blockbed.blockID) {
+                     world.setBlockAndMetadataWithNotify(i + b0, j, k + b1, blockbed.blockID, i1 + 8);
+                  }
 
-               --var1.stackSize;
-               return true;
+                  --itemstack.stackSize;
+                  return true;
+               } else {
+                  event.getBlockPlaced().setTypeIdAndData(blockState.getTypeId(), blockState.getRawData(), false);
+                  return false;
+               }
             } else {
                return false;
             }
Binary files mcp-mcdev/net/minecraft/src/ItemBlock.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBlock.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemBlock.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBlock.java
--- mcp-mcdev/net/minecraft/src/ItemBlock.java	2012-11-29 21:14:49.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBlock.java	2012-11-29 20:44:01.000000000 -0800
@@ -3,81 +3,111 @@
 import net.minecraft.src.Block;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.Item;
+import net.minecraft.src.ItemSlab;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemBlock extends Item {
 
    private int blockID;
 
 
-   public ItemBlock(int var1) {
-      super(var1);
-      this.blockID = var1 + 256;
-      this.setIconIndex(Block.blocksList[var1 + 256].getBlockTextureFromSide(2));
+   public ItemBlock(int i) {
+      super(i);
+      this.blockID = i + 256;
+      this.setIconIndex(Block.blocksList[i + 256].getBlockTextureFromSide(2));
    }
 
    public int getBlockID() {
       return this.blockID;
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      int var11 = var3.getBlockId(var4, var5, var6);
-      if(var11 == Block.snow.blockID) {
-         var7 = 1;
-      } else if(var11 != Block.vine.blockID && var11 != Block.tallGrass.blockID && var11 != Block.deadBush.blockID) {
-         if(var7 == 0) {
-            --var5;
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      int clickedX = i;
+      int clickedY = j;
+      int clickedZ = k;
+      int i1 = world.getBlockId(i, j, k);
+      if(i1 == Block.snow.blockID) {
+         l = 1;
+      } else if(i1 != Block.vine.blockID && i1 != Block.tallGrass.blockID && i1 != Block.deadBush.blockID) {
+         if(l == 0) {
+            --j;
          }
 
-         if(var7 == 1) {
-            ++var5;
+         if(l == 1) {
+            ++j;
          }
 
-         if(var7 == 2) {
-            --var6;
+         if(l == 2) {
+            --k;
          }
 
-         if(var7 == 3) {
-            ++var6;
+         if(l == 3) {
+            ++k;
          }
 
-         if(var7 == 4) {
-            --var4;
+         if(l == 4) {
+            --i;
          }
 
-         if(var7 == 5) {
-            ++var4;
+         if(l == 5) {
+            ++i;
          }
       }
 
-      if(var1.stackSize == 0) {
+      if(itemstack.stackSize == 0) {
          return false;
-      } else if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+      } else if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
          return false;
-      } else if(var5 == 255 && Block.blocksList[this.blockID].blockMaterial.isSolid()) {
+      } else if(j == 255 && Block.blocksList[this.blockID].blockMaterial.isSolid()) {
          return false;
-      } else if(var3.canPlaceEntityOnSide(this.blockID, var4, var5, var6, false, var7, var2)) {
-         Block var12 = Block.blocksList[this.blockID];
-         int var13 = this.getMetadata(var1.getItemDamage());
-         int var14 = Block.blocksList[this.blockID].func_85104_a(var3, var4, var5, var6, var7, var8, var9, var10, var13);
-         if(var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.blockID, var14)) {
-            if(var3.getBlockId(var4, var5, var6) == this.blockID) {
-               Block.blocksList[this.blockID].onBlockPlacedBy(var3, var4, var5, var6, var2);
-               Block.blocksList[this.blockID].func_85105_g(var3, var4, var5, var6, var14);
+      } else {
+         int id = this.blockID;
+         if(l == -1 && itemstack.getItem() instanceof ItemSlab) {
+            if(this.blockID == Block.stoneSingleSlab.blockID) {
+               id = Block.stoneDoubleSlab.blockID;
+            } else if(this.blockID == Block.woodSingleSlab.blockID) {
+               id = Block.woodDoubleSlab.blockID;
             }
-
-            var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var12.stepSound.getPlaceSound(), (var12.stepSound.getVolume() + 1.0F) / 2.0F, var12.stepSound.getPitch() * 0.8F);
-            --var1.stackSize;
          }
 
-         return true;
-      } else {
-         return false;
+         if(id == this.blockID && !world.canPlaceEntityOnSide(this.blockID, i, j, k, false, l, entityhuman)) {
+            return false;
+         } else {
+            Block block = Block.blocksList[id];
+            int j1 = this.getMetadata(itemstack.getItemDamage());
+            int k1 = Block.blocksList[this.blockID].func_85104_a(world, i, j, k, l, f, f1, f2, j1);
+            CraftBlockState replacedBlockState = CraftBlockState.getBlockState(world, i, j, k);
+            world.editingBlocks = true;
+            world.setBlockAndMetadataWithNotify(i, j, k, id, k1);
+            BlockPlaceEvent event = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, replacedBlockState, clickedX, clickedY, clickedZ);
+            id = world.getBlockId(i, j, k);
+            int data = world.getBlockMetadata(i, j, k);
+            replacedBlockState.update(true);
+            world.editingBlocks = false;
+            if(!event.isCancelled() && event.canBuild()) {
+               if(world.setBlockAndMetadataWithNotify(i, j, k, id, data)) {
+                  if(world.getBlockId(i, j, k) == id && Block.blocksList[id] != null) {
+                     Block.blocksList[id].onBlockPlacedBy(world, i, j, k, entityhuman);
+                     Block.blocksList[this.blockID].func_85105_g(world, i, j, k, data);
+                  }
+
+                  world.playSoundEffect((double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), block.stepSound.getPlaceSound(), (block.stepSound.getVolume() + 1.0F) / 2.0F, block.stepSound.getPitch() * 0.8F);
+                  --itemstack.stackSize;
+               }
+
+               return true;
+            } else {
+               return true;
+            }
+         }
       }
    }
 
-   public String getItemNameIS(ItemStack var1) {
+   public String getItemNameIS(ItemStack itemstack) {
       return Block.blocksList[this.blockID].getBlockName();
    }
 
Binary files mcp-mcdev/net/minecraft/src/ItemBoat.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBoat.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemBoat.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBoat.java
--- mcp-mcdev/net/minecraft/src/ItemBoat.java	2012-11-29 21:14:49.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBoat.java	2012-11-29 20:44:01.000000000 -0800
@@ -14,78 +14,86 @@
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.player.PlayerInteractEvent;
 
 public class ItemBoat extends Item {
 
-   public ItemBoat(int var1) {
-      super(var1);
+   public ItemBoat(int i) {
+      super(i);
       this.maxStackSize = 1;
       this.setCreativeTab(CreativeTabs.tabTransport);
    }
 
-   public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-      float var4 = 1.0F;
-      float var5 = var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var4;
-      float var6 = var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var4;
-      double var7 = var3.prevPosX + (var3.posX - var3.prevPosX) * (double)var4;
-      double var9 = var3.prevPosY + (var3.posY - var3.prevPosY) * (double)var4 + 1.62D - (double)var3.yOffset;
-      double var11 = var3.prevPosZ + (var3.posZ - var3.prevPosZ) * (double)var4;
-      Vec3 var13 = var2.getWorldVec3Pool().getVecFromPool(var7, var9, var11);
-      float var14 = MathHelper.cos(-var6 * 0.017453292F - 3.1415927F);
-      float var15 = MathHelper.sin(-var6 * 0.017453292F - 3.1415927F);
-      float var16 = -MathHelper.cos(-var5 * 0.017453292F);
-      float var17 = MathHelper.sin(-var5 * 0.017453292F);
-      float var18 = var15 * var16;
-      float var20 = var14 * var16;
-      double var21 = 5.0D;
-      Vec3 var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
-      MovingObjectPosition var24 = var2.rayTraceBlocks_do(var13, var23, true);
-      if(var24 == null) {
-         return var1;
+   public ItemStack onItemRightClick(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      float f = 1.0F;
+      float f1 = entityhuman.prevRotationPitch + (entityhuman.rotationPitch - entityhuman.prevRotationPitch) * f;
+      float f2 = entityhuman.prevRotationYaw + (entityhuman.rotationYaw - entityhuman.prevRotationYaw) * f;
+      double d0 = entityhuman.prevPosX + (entityhuman.posX - entityhuman.prevPosX) * (double)f;
+      double d1 = entityhuman.prevPosY + (entityhuman.posY - entityhuman.prevPosY) * (double)f + 1.62D - (double)entityhuman.yOffset;
+      double d2 = entityhuman.prevPosZ + (entityhuman.posZ - entityhuman.prevPosZ) * (double)f;
+      Vec3 vec3d = world.getWorldVec3Pool().getVecFromPool(d0, d1, d2);
+      float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
+      float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
+      float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+      float f6 = MathHelper.sin(-f1 * 0.017453292F);
+      float f7 = f4 * f5;
+      float f8 = f3 * f5;
+      double d3 = 5.0D;
+      Vec3 vec3d1 = vec3d.addVector((double)f7 * d3, (double)f6 * d3, (double)f8 * d3);
+      MovingObjectPosition movingobjectposition = world.rayTraceBlocks_do(vec3d, vec3d1, true);
+      if(movingobjectposition == null) {
+         return itemstack;
       } else {
-         Vec3 var25 = var3.getLook(var4);
-         boolean var26 = false;
-         float var27 = 1.0F;
-         List var28 = var2.getEntitiesWithinAABBExcludingEntity(var3, var3.boundingBox.addCoord(var25.xCoord * var21, var25.yCoord * var21, var25.zCoord * var21).expand((double)var27, (double)var27, (double)var27));
-
-         int var29;
-         for(var29 = 0; var29 < var28.size(); ++var29) {
-            Entity var30 = (Entity)var28.get(var29);
-            if(var30.canBeCollidedWith()) {
-               float var31 = var30.getCollisionBorderSize();
-               AxisAlignedBB var32 = var30.boundingBox.expand((double)var31, (double)var31, (double)var31);
-               if(var32.isVecInside(var13)) {
-                  var26 = true;
+         Vec3 vec3d2 = entityhuman.getLook(f);
+         boolean flag = false;
+         float f9 = 1.0F;
+         List list = world.getEntitiesWithinAABBExcludingEntity(entityhuman, entityhuman.boundingBox.addCoord(vec3d2.xCoord * d3, vec3d2.yCoord * d3, vec3d2.zCoord * d3).expand((double)f9, (double)f9, (double)f9));
+
+         int i;
+         for(i = 0; i < list.size(); ++i) {
+            Entity j = (Entity)list.get(i);
+            if(j.canBeCollidedWith()) {
+               float k = j.getCollisionBorderSize();
+               AxisAlignedBB event = j.boundingBox.expand((double)k, (double)k, (double)k);
+               if(event.isVecInside(vec3d)) {
+                  flag = true;
                }
             }
          }
 
-         if(var26) {
-            return var1;
+         if(flag) {
+            return itemstack;
          } else {
-            if(var24.typeOfHit == EnumMovingObjectType.TILE) {
-               var29 = var24.blockX;
-               int var33 = var24.blockY;
-               int var34 = var24.blockZ;
-               if(var2.getBlockId(var29, var33, var34) == Block.snow.blockID) {
-                  --var33;
+            if(movingobjectposition.typeOfHit == EnumMovingObjectType.TILE) {
+               i = movingobjectposition.blockX;
+               int var35 = movingobjectposition.blockY;
+               int var33 = movingobjectposition.blockZ;
+               PlayerInteractEvent var34 = CraftEventFactory.callPlayerInteractEvent(entityhuman, Action.RIGHT_CLICK_BLOCK, i, var35, var33, movingobjectposition.sideHit, itemstack);
+               if(var34.isCancelled()) {
+                  return itemstack;
                }
 
-               EntityBoat var35 = new EntityBoat(var2, (double)((float)var29 + 0.5F), (double)((float)var33 + 1.0F), (double)((float)var34 + 0.5F));
-               if(!var2.getCollidingBoundingBoxes(var35, var35.boundingBox.expand(-0.1D, -0.1D, -0.1D)).isEmpty()) {
-                  return var1;
+               if(world.getBlockId(i, var35, var33) == Block.snow.blockID) {
+                  --var35;
                }
 
-               if(!var2.isRemote) {
-                  var2.spawnEntityInWorld(var35);
+               EntityBoat entityboat = new EntityBoat(world, (double)((float)i + 0.5F), (double)((float)var35 + 1.0F), (double)((float)var33 + 0.5F));
+               if(!world.getCollidingBoundingBoxes(entityboat, entityboat.boundingBox.expand(-0.1D, -0.1D, -0.1D)).isEmpty()) {
+                  return itemstack;
                }
 
-               if(!var3.capabilities.isCreativeMode) {
-                  --var1.stackSize;
+               if(!world.isRemote) {
+                  world.spawnEntityInWorld(entityboat);
+               }
+
+               if(!entityhuman.capabilities.isCreativeMode) {
+                  --itemstack.stackSize;
                }
             }
 
-            return var1;
+            return itemstack;
          }
       }
    }
Binary files mcp-mcdev/net/minecraft/src/ItemBow.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBow.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemBow.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBow.java
--- mcp-mcdev/net/minecraft/src/ItemBow.java	2012-11-29 21:14:49.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBow.java	2012-11-29 20:44:01.000000000 -0800
@@ -9,82 +9,90 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityShootBowEvent;
 
 public class ItemBow extends Item {
 
-   public ItemBow(int var1) {
-      super(var1);
+   public ItemBow(int i) {
+      super(i);
       this.maxStackSize = 1;
       this.setMaxDamage(384);
       this.setCreativeTab(CreativeTabs.tabCombat);
    }
 
-   public void onPlayerStoppedUsing(ItemStack var1, World var2, EntityPlayer var3, int var4) {
-      boolean var5 = var3.capabilities.isCreativeMode || EnchantmentHelper.getEnchantmentLevel(Enchantment.infinity.effectId, var1) > 0;
-      if(var5 || var3.inventory.hasItem(Item.arrow.shiftedIndex)) {
-         int var6 = this.getMaxItemUseDuration(var1) - var4;
-         float var7 = (float)var6 / 20.0F;
-         var7 = (var7 * var7 + var7 * 2.0F) / 3.0F;
-         if((double)var7 < 0.1D) {
+   public void onPlayerStoppedUsing(ItemStack itemstack, World world, EntityPlayer entityhuman, int i) {
+      boolean flag = entityhuman.capabilities.isCreativeMode || EnchantmentHelper.getEnchantmentLevel(Enchantment.infinity.effectId, itemstack) > 0;
+      if(flag || entityhuman.inventory.hasItem(Item.arrow.shiftedIndex)) {
+         int j = this.getMaxItemUseDuration(itemstack) - i;
+         float f = (float)j / 20.0F;
+         f = (f * f + f * 2.0F) / 3.0F;
+         if((double)f < 0.1D) {
             return;
          }
 
-         if(var7 > 1.0F) {
-            var7 = 1.0F;
+         if(f > 1.0F) {
+            f = 1.0F;
          }
 
-         EntityArrow var8 = new EntityArrow(var2, var3, var7 * 2.0F);
-         if(var7 == 1.0F) {
-            var8.setIsCritical(true);
+         EntityArrow entityarrow = new EntityArrow(world, entityhuman, f * 2.0F);
+         if(f == 1.0F) {
+            entityarrow.setIsCritical(true);
          }
 
-         int var9 = EnchantmentHelper.getEnchantmentLevel(Enchantment.power.effectId, var1);
-         if(var9 > 0) {
-            var8.setDamage(var8.getDamage() + (double)var9 * 0.5D + 0.5D);
+         int k = EnchantmentHelper.getEnchantmentLevel(Enchantment.power.effectId, itemstack);
+         if(k > 0) {
+            entityarrow.setDamage(entityarrow.getDamage() + (double)k * 0.5D + 0.5D);
          }
 
-         int var10 = EnchantmentHelper.getEnchantmentLevel(Enchantment.punch.effectId, var1);
-         if(var10 > 0) {
-            var8.setKnockbackStrength(var10);
+         int l = EnchantmentHelper.getEnchantmentLevel(Enchantment.punch.effectId, itemstack);
+         if(l > 0) {
+            entityarrow.setKnockbackStrength(l);
          }
 
-         if(EnchantmentHelper.getEnchantmentLevel(Enchantment.flame.effectId, var1) > 0) {
-            var8.setFire(100);
+         if(EnchantmentHelper.getEnchantmentLevel(Enchantment.flame.effectId, itemstack) > 0) {
+            entityarrow.setFire(100);
          }
 
-         var1.damageItem(1, var3);
-         var2.playSoundAtEntity(var3, "random.bow", 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 1.2F) + var7 * 0.5F);
-         if(var5) {
-            var8.canBePickedUp = 2;
-         } else {
-            var3.inventory.consumeInventoryItem(Item.arrow.shiftedIndex);
+         EntityShootBowEvent event = CraftEventFactory.callEntityShootBowEvent(entityhuman, itemstack, entityarrow, f);
+         if(event.isCancelled()) {
+            event.getProjectile().remove();
+            return;
          }
 
-         if(!var2.isRemote) {
-            var2.spawnEntityInWorld(var8);
+         if(event.getProjectile() == entityarrow.getBukkitEntity()) {
+            world.spawnEntityInWorld(entityarrow);
+         }
+
+         itemstack.damageItem(1, entityhuman);
+         world.playSoundAtEntity(entityhuman, "random.bow", 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 1.2F) + f * 0.5F);
+         if(flag) {
+            entityarrow.canBePickedUp = 2;
+         } else {
+            entityhuman.inventory.consumeInventoryItem(Item.arrow.shiftedIndex);
          }
       }
 
    }
 
-   public ItemStack onFoodEaten(ItemStack var1, World var2, EntityPlayer var3) {
-      return var1;
+   public ItemStack onFoodEaten(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      return itemstack;
    }
 
-   public int getMaxItemUseDuration(ItemStack var1) {
+   public int getMaxItemUseDuration(ItemStack itemstack) {
       return 72000;
    }
 
-   public EnumAction getItemUseAction(ItemStack var1) {
+   public EnumAction getItemUseAction(ItemStack itemstack) {
       return EnumAction.bow;
    }
 
-   public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-      if(var3.capabilities.isCreativeMode || var3.inventory.hasItem(Item.arrow.shiftedIndex)) {
-         var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+   public ItemStack onItemRightClick(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      if(entityhuman.capabilities.isCreativeMode || entityhuman.inventory.hasItem(Item.arrow.shiftedIndex)) {
+         entityhuman.setItemInUse(itemstack, this.getMaxItemUseDuration(itemstack));
       }
 
-      return var1;
+      return itemstack;
    }
 
    public int getItemEnchantability() {
Binary files mcp-mcdev/net/minecraft/src/ItemBucket.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBucket.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemBucket.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBucket.java
--- mcp-mcdev/net/minecraft/src/ItemBucket.java	2012-11-29 21:14:49.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemBucket.java	2012-11-29 20:44:01.000000000 -0800
@@ -10,134 +10,172 @@
 import net.minecraft.src.Material;
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.World;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.player.PlayerBucketEmptyEvent;
+import org.bukkit.event.player.PlayerBucketFillEvent;
 
 public class ItemBucket extends Item {
 
    private int isFull;
 
 
-   public ItemBucket(int var1, int var2) {
-      super(var1);
+   public ItemBucket(int i, int j) {
+      super(i);
       this.maxStackSize = 1;
-      this.isFull = var2;
+      this.isFull = j;
       this.setCreativeTab(CreativeTabs.tabMisc);
    }
 
-   public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-      float var4 = 1.0F;
-      double var5 = var3.prevPosX + (var3.posX - var3.prevPosX) * (double)var4;
-      double var7 = var3.prevPosY + (var3.posY - var3.prevPosY) * (double)var4 + 1.62D - (double)var3.yOffset;
-      double var9 = var3.prevPosZ + (var3.posZ - var3.prevPosZ) * (double)var4;
-      boolean var11 = this.isFull == 0;
-      MovingObjectPosition var12 = this.getMovingObjectPositionFromPlayer(var2, var3, var11);
-      if(var12 == null) {
-         return var1;
+   public ItemStack onItemRightClick(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      float f = 1.0F;
+      double d0 = entityhuman.prevPosX + (entityhuman.posX - entityhuman.prevPosX) * (double)f;
+      double d1 = entityhuman.prevPosY + (entityhuman.posY - entityhuman.prevPosY) * (double)f + 1.62D - (double)entityhuman.yOffset;
+      double d2 = entityhuman.prevPosZ + (entityhuman.posZ - entityhuman.prevPosZ) * (double)f;
+      boolean flag = this.isFull == 0;
+      MovingObjectPosition movingobjectposition = this.getMovingObjectPositionFromPlayer(world, entityhuman, flag);
+      if(movingobjectposition == null) {
+         return itemstack;
       } else {
-         if(var12.typeOfHit == EnumMovingObjectType.TILE) {
-            int var13 = var12.blockX;
-            int var14 = var12.blockY;
-            int var15 = var12.blockZ;
-            if(!var2.canMineBlock(var3, var13, var14, var15)) {
-               return var1;
+         if(movingobjectposition.typeOfHit == EnumMovingObjectType.TILE) {
+            int loc = movingobjectposition.blockX;
+            int event = movingobjectposition.blockY;
+            int k = movingobjectposition.blockZ;
+            if(!world.canMineBlock(entityhuman, loc, event, k)) {
+               return itemstack;
             }
 
             if(this.isFull == 0) {
-               if(!var3.canPlayerEdit(var13, var14, var15, var12.sideHit, var1)) {
-                  return var1;
+               if(!entityhuman.canPlayerEdit(loc, event, k, movingobjectposition.sideHit, itemstack)) {
+                  return itemstack;
                }
 
-               if(var2.getBlockMaterial(var13, var14, var15) == Material.water && var2.getBlockMetadata(var13, var14, var15) == 0) {
-                  var2.setBlockWithNotify(var13, var14, var15, 0);
-                  if(var3.capabilities.isCreativeMode) {
-                     return var1;
+               ItemStack clickedY;
+               PlayerBucketFillEvent clickedX;
+               if(world.getBlockMaterial(loc, event, k) == Material.water && world.getBlockMetadata(loc, event, k) == 0) {
+                  clickedX = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, loc, event, k, -1, itemstack, Item.bucketWater);
+                  if(clickedX.isCancelled()) {
+                     return itemstack;
                   }
 
-                  if(--var1.stackSize <= 0) {
-                     return new ItemStack(Item.bucketWater);
+                  world.setBlockWithNotify(loc, event, k, 0);
+                  if(entityhuman.capabilities.isCreativeMode) {
+                     return itemstack;
                   }
 
-                  if(!var3.inventory.addItemStackToInventory(new ItemStack(Item.bucketWater))) {
-                     var3.dropPlayerItem(new ItemStack(Item.bucketWater.shiftedIndex, 1, 0));
+                  clickedY = CraftItemStack.createNMSItemStack(clickedX.getItemStack());
+                  if(--itemstack.stackSize <= 0) {
+                     return clickedY;
                   }
 
-                  return var1;
+                  if(!entityhuman.inventory.addItemStackToInventory(clickedY)) {
+                     entityhuman.dropPlayerItem(CraftItemStack.createNMSItemStack(clickedX.getItemStack()));
+                  }
+
+                  return itemstack;
                }
 
-               if(var2.getBlockMaterial(var13, var14, var15) == Material.lava && var2.getBlockMetadata(var13, var14, var15) == 0) {
-                  var2.setBlockWithNotify(var13, var14, var15, 0);
-                  if(var3.capabilities.isCreativeMode) {
-                     return var1;
+               if(world.getBlockMaterial(loc, event, k) == Material.lava && world.getBlockMetadata(loc, event, k) == 0) {
+                  clickedX = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, loc, event, k, -1, itemstack, Item.bucketLava);
+                  if(clickedX.isCancelled()) {
+                     return itemstack;
                   }
 
-                  if(--var1.stackSize <= 0) {
-                     return new ItemStack(Item.bucketLava);
+                  world.setBlockWithNotify(loc, event, k, 0);
+                  if(entityhuman.capabilities.isCreativeMode) {
+                     return itemstack;
                   }
 
-                  if(!var3.inventory.addItemStackToInventory(new ItemStack(Item.bucketLava))) {
-                     var3.dropPlayerItem(new ItemStack(Item.bucketLava.shiftedIndex, 1, 0));
+                  clickedY = CraftItemStack.createNMSItemStack(clickedX.getItemStack());
+                  if(--itemstack.stackSize <= 0) {
+                     return clickedY;
                   }
 
-                  return var1;
+                  if(!entityhuman.inventory.addItemStackToInventory(clickedY)) {
+                     entityhuman.dropPlayerItem(CraftItemStack.createNMSItemStack(clickedX.getItemStack()));
+                  }
+
+                  return itemstack;
                }
             } else {
                if(this.isFull < 0) {
-                  return new ItemStack(Item.bucketEmpty);
+                  PlayerBucketEmptyEvent var24 = CraftEventFactory.callPlayerBucketEmptyEvent(entityhuman, loc, event, k, movingobjectposition.sideHit, itemstack);
+                  if(var24.isCancelled()) {
+                     return itemstack;
+                  }
+
+                  return CraftItemStack.createNMSItemStack(var24.getItemStack());
+               }
+
+               int var21 = loc;
+               int var23 = event;
+               int clickedZ = k;
+               if(movingobjectposition.sideHit == 0) {
+                  --event;
                }
 
-               if(var12.sideHit == 0) {
-                  --var14;
+               if(movingobjectposition.sideHit == 1) {
+                  ++event;
                }
 
-               if(var12.sideHit == 1) {
-                  ++var14;
+               if(movingobjectposition.sideHit == 2) {
+                  --k;
                }
 
-               if(var12.sideHit == 2) {
-                  --var15;
+               if(movingobjectposition.sideHit == 3) {
+                  ++k;
                }
 
-               if(var12.sideHit == 3) {
-                  ++var15;
+               if(movingobjectposition.sideHit == 4) {
+                  --loc;
                }
 
-               if(var12.sideHit == 4) {
-                  --var13;
+               if(movingobjectposition.sideHit == 5) {
+                  ++loc;
                }
 
-               if(var12.sideHit == 5) {
-                  ++var13;
+               if(!entityhuman.canPlayerEdit(loc, event, k, movingobjectposition.sideHit, itemstack)) {
+                  return itemstack;
                }
 
-               if(!var3.canPlayerEdit(var13, var14, var15, var12.sideHit, var1)) {
-                  return var1;
+               PlayerBucketEmptyEvent event1 = CraftEventFactory.callPlayerBucketEmptyEvent(entityhuman, var21, var23, clickedZ, movingobjectposition.sideHit, itemstack);
+               if(event1.isCancelled()) {
+                  return itemstack;
                }
 
-               if(this.tryPlaceContainedLiquid(var2, var5, var7, var9, var13, var14, var15) && !var3.capabilities.isCreativeMode) {
-                  return new ItemStack(Item.bucketEmpty);
+               if(this.tryPlaceContainedLiquid(world, d0, d1, d2, loc, event, k) && !entityhuman.capabilities.isCreativeMode) {
+                  return CraftItemStack.createNMSItemStack(event1.getItemStack());
                }
             }
-         } else if(this.isFull == 0 && var12.entityHit instanceof EntityCow) {
-            return new ItemStack(Item.bucketMilk);
+         } else if(this.isFull == 0 && movingobjectposition.entityHit instanceof EntityCow) {
+            Location var20 = movingobjectposition.entityHit.getBukkitEntity().getLocation();
+            PlayerBucketFillEvent var22 = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, var20.getBlockX(), var20.getBlockY(), var20.getBlockZ(), -1, itemstack, Item.bucketMilk);
+            if(var22.isCancelled()) {
+               return itemstack;
+            }
+
+            return CraftItemStack.createNMSItemStack(var22.getItemStack());
          }
 
-         return var1;
+         return itemstack;
       }
    }
 
-   public boolean tryPlaceContainedLiquid(World var1, double var2, double var4, double var6, int var8, int var9, int var10) {
+   public boolean tryPlaceContainedLiquid(World world, double d0, double d1, double d2, int i, int j, int k) {
       if(this.isFull <= 0) {
          return false;
-      } else if(!var1.isAirBlock(var8, var9, var10) && var1.getBlockMaterial(var8, var9, var10).isSolid()) {
+      } else if(!world.isAirBlock(i, j, k) && world.getBlockMaterial(i, j, k).isSolid()) {
          return false;
       } else {
-         if(var1.provider.isHellWorld && this.isFull == Block.waterMoving.blockID) {
-            var1.playSoundEffect(var2 + 0.5D, var4 + 0.5D, var6 + 0.5D, "random.fizz", 0.5F, 2.6F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.8F);
+         if(world.provider.isHellWorld && this.isFull == Block.waterMoving.blockID) {
+            world.playSoundEffect(d0 + 0.5D, d1 + 0.5D, d2 + 0.5D, "random.fizz", 0.5F, 2.6F + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8F);
 
-            for(int var11 = 0; var11 < 8; ++var11) {
-               var1.spawnParticle("largesmoke", (double)var8 + Math.random(), (double)var9 + Math.random(), (double)var10 + Math.random(), 0.0D, 0.0D, 0.0D);
+            for(int l = 0; l < 8; ++l) {
+               world.spawnParticle("largesmoke", (double)i + Math.random(), (double)j + Math.random(), (double)k + Math.random(), 0.0D, 0.0D, 0.0D);
             }
          } else {
-            var1.setBlockAndMetadataWithNotify(var8, var9, var10, this.isFull, 0);
+            world.setBlockAndMetadataWithNotify(i, j, k, this.isFull, 0);
          }
 
          return true;
Binary files mcp-mcdev/net/minecraft/src/ItemDoor.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemDoor.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemDoor.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemDoor.java
--- mcp-mcdev/net/minecraft/src/ItemDoor.java	2012-11-29 21:14:49.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemDoor.java	2012-11-29 20:44:00.000000000 -0800
@@ -8,39 +8,45 @@
 import net.minecraft.src.Material;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemDoor extends Item {
 
    private Material doorMaterial;
 
 
-   public ItemDoor(int var1, Material var2) {
-      super(var1);
-      this.doorMaterial = var2;
+   public ItemDoor(int i, Material material) {
+      super(i);
+      this.doorMaterial = material;
       this.maxStackSize = 1;
       this.setCreativeTab(CreativeTabs.tabRedstone);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var7 != 1) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(l != 1) {
          return false;
       } else {
-         ++var5;
-         Block var11;
+         ++j;
+         Block block;
          if(this.doorMaterial == Material.wood) {
-            var11 = Block.doorWood;
+            block = Block.doorWood;
          } else {
-            var11 = Block.doorSteel;
+            block = Block.doorSteel;
          }
 
-         if(var2.canPlayerEdit(var4, var5, var6, var7, var1) && var2.canPlayerEdit(var4, var5 + 1, var6, var7, var1)) {
-            if(!var11.canPlaceBlockAt(var3, var4, var5, var6)) {
+         if(entityhuman.canPlayerEdit(i, j, k, l, itemstack) && entityhuman.canPlayerEdit(i, j + 1, k, l, itemstack)) {
+            if(!block.canPlaceBlockAt(world, i, j, k)) {
                return false;
             } else {
-               int var12 = MathHelper.floor_double((double)((var2.rotationYaw + 180.0F) * 4.0F / 360.0F) - 0.5D) & 3;
-               placeDoorBlock(var3, var4, var5, var6, var12, var11);
-               --var1.stackSize;
-               return true;
+               int i1 = MathHelper.floor_double((double)((entityhuman.rotationYaw + 180.0F) * 4.0F / 360.0F) - 0.5D) & 3;
+               if(!place(world, i, j, k, i1, block, entityhuman)) {
+                  return false;
+               } else {
+                  --itemstack.stackSize;
+                  return true;
+               }
             }
          } else {
             return false;
@@ -48,41 +54,55 @@
       }
    }
 
-   public static void placeDoorBlock(World var0, int var1, int var2, int var3, int var4, Block var5) {
-      byte var6 = 0;
-      byte var7 = 0;
-      if(var4 == 0) {
-         var7 = 1;
+   public static void placeDoorBlock(World world, int i, int j, int k, int l, Block block) {
+      place(world, i, j, k, l, block, (EntityPlayer)null);
+   }
+
+   public static boolean place(World world, int i, int j, int k, int l, Block block, EntityPlayer entityhuman) {
+      byte b0 = 0;
+      byte b1 = 0;
+      if(l == 0) {
+         b1 = 1;
+      }
+
+      if(l == 1) {
+         b0 = -1;
       }
 
-      if(var4 == 1) {
-         var6 = -1;
+      if(l == 2) {
+         b1 = -1;
       }
 
-      if(var4 == 2) {
-         var7 = -1;
+      if(l == 3) {
+         b0 = 1;
       }
 
-      if(var4 == 3) {
-         var6 = 1;
+      int i1 = (world.isBlockNormalCube(i - b0, j, k - b1)?1:0) + (world.isBlockNormalCube(i - b0, j + 1, k - b1)?1:0);
+      int j1 = (world.isBlockNormalCube(i + b0, j, k + b1)?1:0) + (world.isBlockNormalCube(i + b0, j + 1, k + b1)?1:0);
+      boolean flag = world.getBlockId(i - b0, j, k - b1) == block.blockID || world.getBlockId(i - b0, j + 1, k - b1) == block.blockID;
+      boolean flag1 = world.getBlockId(i + b0, j, k + b1) == block.blockID || world.getBlockId(i + b0, j + 1, k + b1) == block.blockID;
+      boolean flag2 = false;
+      if(flag && !flag1) {
+         flag2 = true;
+      } else if(j1 > i1) {
+         flag2 = true;
       }
 
-      int var8 = (var0.isBlockNormalCube(var1 - var6, var2, var3 - var7)?1:0) + (var0.isBlockNormalCube(var1 - var6, var2 + 1, var3 - var7)?1:0);
-      int var9 = (var0.isBlockNormalCube(var1 + var6, var2, var3 + var7)?1:0) + (var0.isBlockNormalCube(var1 + var6, var2 + 1, var3 + var7)?1:0);
-      boolean var10 = var0.getBlockId(var1 - var6, var2, var3 - var7) == var5.blockID || var0.getBlockId(var1 - var6, var2 + 1, var3 - var7) == var5.blockID;
-      boolean var11 = var0.getBlockId(var1 + var6, var2, var3 + var7) == var5.blockID || var0.getBlockId(var1 + var6, var2 + 1, var3 + var7) == var5.blockID;
-      boolean var12 = false;
-      if(var10 && !var11) {
-         var12 = true;
-      } else if(var9 > var8) {
-         var12 = true;
+      CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j, k);
+      world.editingBlocks = true;
+      world.setBlockAndMetadataWithNotify(i, j, k, block.blockID, l);
+      if(entityhuman != null) {
+         BlockPlaceEvent event = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, i, j, k);
+         if(event.isCancelled() || !event.canBuild()) {
+            event.getBlockPlaced().setTypeIdAndData(blockState.getTypeId(), blockState.getRawData(), false);
+            return false;
+         }
       }
 
-      var0.editingBlocks = true;
-      var0.setBlockAndMetadataWithNotify(var1, var2, var3, var5.blockID, var4);
-      var0.setBlockAndMetadataWithNotify(var1, var2 + 1, var3, var5.blockID, 8 | (var12?1:0));
-      var0.editingBlocks = false;
-      var0.notifyBlocksOfNeighborChange(var1, var2, var3, var5.blockID);
-      var0.notifyBlocksOfNeighborChange(var1, var2 + 1, var3, var5.blockID);
+      world.setBlockAndMetadataWithNotify(i, j + 1, k, block.blockID, 8 | (flag2?1:0));
+      world.editingBlocks = false;
+      world.notifyBlocksOfNeighborChange(i, j, k, block.blockID);
+      world.notifyBlocksOfNeighborChange(i, j + 1, k, block.blockID);
+      return true;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ItemDye.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemDye.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemDye.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemDye.java
--- mcp-mcdev/net/minecraft/src/ItemDye.java	2012-11-29 21:14:49.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemDye.java	2012-11-29 20:44:00.000000000 -0800
@@ -11,11 +11,16 @@
 import net.minecraft.src.CreativeTabs;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.EntitySheep;
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
+import org.bukkit.DyeColor;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.Sheep;
+import org.bukkit.event.entity.SheepDyeWoolEvent;
 
 public class ItemDye extends Item {
 
@@ -23,109 +28,111 @@
    public static final int[] dyeColors = new int[]{1973019, 11743532, 3887386, 5320730, 2437522, 8073150, 2651799, 2651799, 4408131, 14188952, 4312372, 14602026, 6719955, 12801229, 15435844, 15790320};
 
 
-   public ItemDye(int var1) {
-      super(var1);
+   public ItemDye(int i) {
+      super(i);
       this.setHasSubtypes(true);
       this.setMaxDamage(0);
       this.setCreativeTab(CreativeTabs.tabMaterials);
    }
 
-   public String getItemNameIS(ItemStack var1) {
-      int var2 = MathHelper.clamp_int(var1.getItemDamage(), 0, 15);
-      return super.getItemName() + "." + dyeColorNames[var2];
+   public String getItemNameIS(ItemStack itemstack) {
+      int i = MathHelper.clamp_int(itemstack.getItemDamage(), 0, 15);
+      return super.getItemName() + "." + dyeColorNames[i];
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
          return false;
       } else {
-         int var11;
-         int var12;
-         int var13;
-         if(var1.getItemDamage() == 15) {
-            var11 = var3.getBlockId(var4, var5, var6);
-            if(var11 == Block.sapling.blockID) {
-               if(!var3.isRemote) {
-                  ((BlockSapling)Block.sapling).growTree(var3, var4, var5, var6, var3.rand);
-                  --var1.stackSize;
+         int i1;
+         int j1;
+         int k1;
+         if(itemstack.getItemDamage() == 15) {
+            i1 = world.getBlockId(i, j, k);
+            Player var17;
+            if(i1 == Block.sapling.blockID) {
+               if(!world.isRemote) {
+                  var17 = entityhuman instanceof EntityPlayerMP?(Player)entityhuman.getBukkitEntity():null;
+                  ((BlockSapling)Block.sapling).grow(world, i, j, k, world.rand, true, var17, itemstack);
                }
 
                return true;
             }
 
-            if(var11 == Block.mushroomBrown.blockID || var11 == Block.mushroomRed.blockID) {
-               if(!var3.isRemote && ((BlockMushroom)Block.blocksList[var11]).fertilizeMushroom(var3, var4, var5, var6, var3.rand)) {
-                  --var1.stackSize;
+            if(i1 == Block.mushroomBrown.blockID || i1 == Block.mushroomRed.blockID) {
+               if(!world.isRemote) {
+                  var17 = entityhuman instanceof EntityPlayerMP?(Player)entityhuman.getBukkitEntity():null;
+                  ((BlockMushroom)Block.blocksList[i1]).grow(world, i, j, k, world.rand, true, var17, itemstack);
                }
 
                return true;
             }
 
-            if(var11 == Block.melonStem.blockID || var11 == Block.pumpkinStem.blockID) {
-               if(var3.getBlockMetadata(var4, var5, var6) == 7) {
+            if(i1 == Block.melonStem.blockID || i1 == Block.pumpkinStem.blockID) {
+               if(world.getBlockMetadata(i, j, k) == 7) {
                   return false;
                }
 
-               if(!var3.isRemote) {
-                  ((BlockStem)Block.blocksList[var11]).fertilizeStem(var3, var4, var5, var6);
-                  --var1.stackSize;
+               if(!world.isRemote) {
+                  ((BlockStem)Block.blocksList[i1]).fertilizeStem(world, i, j, k);
+                  --itemstack.stackSize;
                }
 
                return true;
             }
 
-            if(var11 > 0 && Block.blocksList[var11] instanceof BlockCrops) {
-               if(var3.getBlockMetadata(var4, var5, var6) == 7) {
+            if(i1 > 0 && Block.blocksList[i1] instanceof BlockCrops) {
+               if(world.getBlockMetadata(i, j, k) == 7) {
                   return false;
                }
 
-               if(!var3.isRemote) {
-                  ((BlockCrops)Block.blocksList[var11]).fertilize(var3, var4, var5, var6);
-                  --var1.stackSize;
+               if(!world.isRemote) {
+                  ((BlockCrops)Block.blocksList[i1]).fertilize(world, i, j, k);
+                  --itemstack.stackSize;
                }
 
                return true;
             }
 
-            if(var11 == Block.cocoaPlant.blockID) {
-               if(!var3.isRemote) {
-                  var3.setBlockMetadataWithNotify(var4, var5, var6, 8 | BlockDirectional.getDirection(var3.getBlockMetadata(var4, var5, var6)));
-                  --var1.stackSize;
+            if(i1 == Block.cocoaPlant.blockID) {
+               if(!world.isRemote) {
+                  world.setBlockMetadataWithNotify(i, j, k, 8 | BlockDirectional.getDirection(world.getBlockMetadata(i, j, k)));
+                  --itemstack.stackSize;
                }
 
                return true;
             }
 
-            if(var11 == Block.grass.blockID) {
-               if(!var3.isRemote) {
-                  --var1.stackSize;
+            if(i1 == Block.grass.blockID) {
+               if(!world.isRemote) {
+                  --itemstack.stackSize;
 
-                  label133:
-                  for(var12 = 0; var12 < 128; ++var12) {
-                     var13 = var4;
-                     int var14 = var5 + 1;
-                     int var15 = var6;
+                  label140:
+                  for(j1 = 0; j1 < 128; ++j1) {
+                     k1 = i;
+                     int l1 = j + 1;
+                     int i2 = k;
 
-                     for(int var16 = 0; var16 < var12 / 16; ++var16) {
-                        var13 += itemRand.nextInt(3) - 1;
-                        var14 += (itemRand.nextInt(3) - 1) * itemRand.nextInt(3) / 2;
-                        var15 += itemRand.nextInt(3) - 1;
-                        if(var3.getBlockId(var13, var14 - 1, var15) != Block.grass.blockID || var3.isBlockNormalCube(var13, var14, var15)) {
-                           continue label133;
+                     for(int j2 = 0; j2 < j1 / 16; ++j2) {
+                        k1 += itemRand.nextInt(3) - 1;
+                        l1 += (itemRand.nextInt(3) - 1) * itemRand.nextInt(3) / 2;
+                        i2 += itemRand.nextInt(3) - 1;
+                        if(world.getBlockId(k1, l1 - 1, i2) != Block.grass.blockID || world.isBlockNormalCube(k1, l1, i2)) {
+                           continue label140;
                         }
                      }
 
-                     if(var3.getBlockId(var13, var14, var15) == 0) {
+                     if(world.getBlockId(k1, l1, i2) == 0) {
                         if(itemRand.nextInt(10) != 0) {
-                           if(Block.tallGrass.canBlockStay(var3, var13, var14, var15)) {
-                              var3.setBlockAndMetadataWithNotify(var13, var14, var15, Block.tallGrass.blockID, 1);
+                           if(Block.tallGrass.canBlockStay(world, k1, l1, i2)) {
+                              world.setBlockAndMetadataWithNotify(k1, l1, i2, Block.tallGrass.blockID, 1);
                            }
                         } else if(itemRand.nextInt(3) != 0) {
-                           if(Block.plantYellow.canBlockStay(var3, var13, var14, var15)) {
-                              var3.setBlockWithNotify(var13, var14, var15, Block.plantYellow.blockID);
+                           if(Block.plantYellow.canBlockStay(world, k1, l1, i2)) {
+                              world.setBlockWithNotify(k1, l1, i2, Block.plantYellow.blockID);
                            }
-                        } else if(Block.plantRed.canBlockStay(var3, var13, var14, var15)) {
-                           var3.setBlockWithNotify(var13, var14, var15, Block.plantRed.blockID);
+                        } else if(Block.plantRed.canBlockStay(world, k1, l1, i2)) {
+                           world.setBlockWithNotify(k1, l1, i2, Block.plantRed.blockID);
                         }
                      }
                   }
@@ -133,39 +140,39 @@
 
                return true;
             }
-         } else if(var1.getItemDamage() == 3) {
-            var11 = var3.getBlockId(var4, var5, var6);
-            var12 = var3.getBlockMetadata(var4, var5, var6);
-            if(var11 == Block.wood.blockID && BlockLog.limitToValidMetadata(var12) == 3) {
-               if(var7 == 0) {
+         } else if(itemstack.getItemDamage() == 3) {
+            i1 = world.getBlockId(i, j, k);
+            j1 = world.getBlockMetadata(i, j, k);
+            if(i1 == Block.wood.blockID && BlockLog.limitToValidMetadata(j1) == 3) {
+               if(l == 0) {
                   return false;
                }
 
-               if(var7 == 1) {
+               if(l == 1) {
                   return false;
                }
 
-               if(var7 == 2) {
-                  --var6;
+               if(l == 2) {
+                  --k;
                }
 
-               if(var7 == 3) {
-                  ++var6;
+               if(l == 3) {
+                  ++k;
                }
 
-               if(var7 == 4) {
-                  --var4;
+               if(l == 4) {
+                  --i;
                }
 
-               if(var7 == 5) {
-                  ++var4;
+               if(l == 5) {
+                  ++i;
                }
 
-               if(var3.isAirBlock(var4, var5, var6)) {
-                  var13 = Block.blocksList[Block.cocoaPlant.blockID].func_85104_a(var3, var4, var5, var6, var7, var8, var9, var10, 0);
-                  var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.cocoaPlant.blockID, var13);
-                  if(!var2.capabilities.isCreativeMode) {
-                     --var1.stackSize;
+               if(world.isAirBlock(i, j, k)) {
+                  k1 = Block.blocksList[Block.cocoaPlant.blockID].func_85104_a(world, i, j, k, l, f, f1, f2, 0);
+                  world.setBlockAndMetadataWithNotify(i, j, k, Block.cocoaPlant.blockID, k1);
+                  if(!entityhuman.capabilities.isCreativeMode) {
+                     --itemstack.stackSize;
                   }
                }
 
@@ -177,13 +184,21 @@
       }
    }
 
-   public boolean useItemOnEntity(ItemStack var1, EntityLiving var2) {
-      if(var2 instanceof EntitySheep) {
-         EntitySheep var3 = (EntitySheep)var2;
-         int var4 = BlockCloth.getBlockFromDye(var1.getItemDamage());
-         if(!var3.getSheared() && var3.getFleeceColor() != var4) {
-            var3.setFleeceColor(var4);
-            --var1.stackSize;
+   public boolean useItemOnEntity(ItemStack itemstack, EntityLiving entityliving) {
+      if(entityliving instanceof EntitySheep) {
+         EntitySheep entitysheep = (EntitySheep)entityliving;
+         int i = BlockCloth.getBlockFromDye(itemstack.getItemDamage());
+         if(!entitysheep.getSheared() && entitysheep.getFleeceColor() != i) {
+            byte bColor = (byte)i;
+            SheepDyeWoolEvent event = new SheepDyeWoolEvent((Sheep)entitysheep.getBukkitEntity(), DyeColor.getByData(bColor));
+            entitysheep.worldObj.getServer().getPluginManager().callEvent(event);
+            if(event.isCancelled()) {
+               return false;
+            }
+
+            byte var7 = event.getColor().getData();
+            entitysheep.setFleeceColor(var7);
+            --itemstack.stackSize;
          }
 
          return true;
Binary files mcp-mcdev/net/minecraft/src/ItemFireball.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFireball.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemFireball.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFireball.java
--- mcp-mcdev/net/minecraft/src/ItemFireball.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFireball.java	2012-11-29 20:44:00.000000000 -0800
@@ -6,53 +6,68 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockIgniteEvent;
+import org.bukkit.event.block.BlockIgniteEvent.IgniteCause;
 
 public class ItemFireball extends Item {
 
-   public ItemFireball(int var1) {
-      super(var1);
+   public ItemFireball(int i) {
+      super(i);
       this.setCreativeTab(CreativeTabs.tabMisc);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var3.isRemote) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(world.isRemote) {
          return true;
       } else {
-         if(var7 == 0) {
-            --var5;
+         if(l == 0) {
+            --j;
          }
 
-         if(var7 == 1) {
-            ++var5;
+         if(l == 1) {
+            ++j;
          }
 
-         if(var7 == 2) {
-            --var6;
+         if(l == 2) {
+            --k;
          }
 
-         if(var7 == 3) {
-            ++var6;
+         if(l == 3) {
+            ++k;
          }
 
-         if(var7 == 4) {
-            --var4;
+         if(l == 4) {
+            --i;
          }
 
-         if(var7 == 5) {
-            ++var4;
+         if(l == 5) {
+            ++i;
          }
 
-         if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+         if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
             return false;
          } else {
-            int var11 = var3.getBlockId(var4, var5, var6);
-            if(var11 == 0) {
-               var3.playSoundEffect((double)var4 + 0.5D, (double)var5 + 0.5D, (double)var6 + 0.5D, "fire.ignite", 1.0F, itemRand.nextFloat() * 0.4F + 0.8F);
-               var3.setBlockWithNotify(var4, var5, var6, Block.fire.blockID);
+            int i1 = world.getBlockId(i, j, k);
+            if(i1 == 0) {
+               org.bukkit.block.Block blockClicked = world.getWorld().getBlockAt(i, j, k);
+               Player thePlayer = (Player)entityhuman.getBukkitEntity();
+               BlockIgniteEvent eventIgnite = new BlockIgniteEvent(blockClicked, IgniteCause.FIREBALL, thePlayer);
+               world.getServer().getPluginManager().callEvent(eventIgnite);
+               if(eventIgnite.isCancelled()) {
+                  if(!entityhuman.capabilities.isCreativeMode) {
+                     --itemstack.stackSize;
+                  }
+
+                  return false;
+               }
+
+               world.playSoundEffect((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "fire.ignite", 1.0F, itemRand.nextFloat() * 0.4F + 0.8F);
+               world.setBlockWithNotify(i, j, k, Block.fire.blockID);
             }
 
-            if(!var2.capabilities.isCreativeMode) {
-               --var1.stackSize;
+            if(!entityhuman.capabilities.isCreativeMode) {
+               --itemstack.stackSize;
             }
 
             return true;
Binary files mcp-mcdev/net/minecraft/src/ItemFishingRod.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFishingRod.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemFishingRod.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFishingRod.java
--- mcp-mcdev/net/minecraft/src/ItemFishingRod.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFishingRod.java	2012-11-29 20:44:00.000000000 -0800
@@ -6,30 +6,39 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerFishEvent;
+import org.bukkit.event.player.PlayerFishEvent.State;
 
 public class ItemFishingRod extends Item {
 
-   public ItemFishingRod(int var1) {
-      super(var1);
+   public ItemFishingRod(int i) {
+      super(i);
       this.setMaxDamage(64);
       this.setMaxStackSize(1);
       this.setCreativeTab(CreativeTabs.tabTools);
    }
 
-   public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-      if(var3.fishEntity != null) {
-         int var4 = var3.fishEntity.catchFish();
-         var1.damageItem(var4, var3);
-         var3.swingItem();
+   public ItemStack onItemRightClick(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      if(entityhuman.fishEntity != null) {
+         int playerFishEvent = entityhuman.fishEntity.catchFish();
+         itemstack.damageItem(playerFishEvent, entityhuman);
+         entityhuman.swingItem();
       } else {
-         var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
-         if(!var2.isRemote) {
-            var2.spawnEntityInWorld(new EntityFishHook(var2, var3));
+         PlayerFishEvent playerFishEvent1 = new PlayerFishEvent((Player)entityhuman.getBukkitEntity(), (org.bukkit.entity.Entity)null, State.FISHING);
+         world.getServer().getPluginManager().callEvent(playerFishEvent1);
+         if(playerFishEvent1.isCancelled()) {
+            return itemstack;
          }
 
-         var3.swingItem();
+         world.playSoundAtEntity(entityhuman, "random.bow", 0.5F, 0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
+         if(!world.isRemote) {
+            world.spawnEntityInWorld(new EntityFishHook(world, entityhuman));
+         }
+
+         entityhuman.swingItem();
       }
 
-      return var1;
+      return itemstack;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ItemFlintAndSteel.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFlintAndSteel.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemFlintAndSteel.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFlintAndSteel.java
--- mcp-mcdev/net/minecraft/src/ItemFlintAndSteel.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFlintAndSteel.java	2012-11-29 20:44:00.000000000 -0800
@@ -6,51 +6,75 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockIgniteEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.event.block.BlockIgniteEvent.IgniteCause;
 
 public class ItemFlintAndSteel extends Item {
 
-   public ItemFlintAndSteel(int var1) {
-      super(var1);
+   public ItemFlintAndSteel(int i) {
+      super(i);
       this.maxStackSize = 1;
       this.setMaxDamage(64);
       this.setCreativeTab(CreativeTabs.tabTools);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var7 == 0) {
-         --var5;
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      int clickedX = i;
+      int clickedY = j;
+      int clickedZ = k;
+      if(l == 0) {
+         --j;
       }
 
-      if(var7 == 1) {
-         ++var5;
+      if(l == 1) {
+         ++j;
       }
 
-      if(var7 == 2) {
-         --var6;
+      if(l == 2) {
+         --k;
       }
 
-      if(var7 == 3) {
-         ++var6;
+      if(l == 3) {
+         ++k;
       }
 
-      if(var7 == 4) {
-         --var4;
+      if(l == 4) {
+         --i;
       }
 
-      if(var7 == 5) {
-         ++var4;
+      if(l == 5) {
+         ++i;
       }
 
-      if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+      if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
          return false;
       } else {
-         int var11 = var3.getBlockId(var4, var5, var6);
-         if(var11 == 0) {
-            var3.playSoundEffect((double)var4 + 0.5D, (double)var5 + 0.5D, (double)var6 + 0.5D, "fire.ignite", 1.0F, itemRand.nextFloat() * 0.4F + 0.8F);
-            var3.setBlockWithNotify(var4, var5, var6, Block.fire.blockID);
+         int i1 = world.getBlockId(i, j, k);
+         if(i1 == 0) {
+            org.bukkit.block.Block blockClicked = world.getWorld().getBlockAt(i, j, k);
+            Player thePlayer = (Player)entityhuman.getBukkitEntity();
+            BlockIgniteEvent eventIgnite = new BlockIgniteEvent(blockClicked, IgniteCause.FLINT_AND_STEEL, thePlayer);
+            world.getServer().getPluginManager().callEvent(eventIgnite);
+            if(eventIgnite.isCancelled()) {
+               itemstack.damageItem(1, entityhuman);
+               return false;
+            }
+
+            CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j, k);
+            world.playSoundEffect((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D, "fire.ignite", 1.0F, itemRand.nextFloat() * 0.4F + 0.8F);
+            world.setBlockWithNotify(i, j, k, Block.fire.blockID);
+            BlockPlaceEvent placeEvent = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, clickedX, clickedY, clickedZ);
+            if(placeEvent.isCancelled() || !placeEvent.canBuild()) {
+               placeEvent.getBlockPlaced().setTypeIdAndData(0, (byte)0, false);
+               return false;
+            }
          }
 
-         var1.damageItem(1, var2);
+         itemstack.damageItem(1, entityhuman);
          return true;
       }
    }
Binary files mcp-mcdev/net/minecraft/src/ItemFood.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFood.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemFood.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFood.java
--- mcp-mcdev/net/minecraft/src/ItemFood.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemFood.java	2012-11-29 20:44:00.000000000 -0800
@@ -2,11 +2,15 @@
 
 import net.minecraft.src.CreativeTabs;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.EnumAction;
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
+import net.minecraft.src.Packet8UpdateHealth;
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.FoodLevelChangeEvent;
 
 public class ItemFood extends Item {
 
@@ -21,48 +25,54 @@
    private float potionEffectProbability;
 
 
-   public ItemFood(int var1, int var2, float var3, boolean var4) {
-      super(var1);
+   public ItemFood(int i, int j, float f, boolean flag) {
+      super(i);
       this.itemUseDuration = 32;
-      this.healAmount = var2;
-      this.isWolfsFavoriteMeat = var4;
-      this.saturationModifier = var3;
+      this.healAmount = j;
+      this.isWolfsFavoriteMeat = flag;
+      this.saturationModifier = f;
       this.setCreativeTab(CreativeTabs.tabFood);
    }
 
-   public ItemFood(int var1, int var2, boolean var3) {
-      this(var1, var2, 0.6F, var3);
+   public ItemFood(int i, int j, boolean flag) {
+      this(i, j, 0.6F, flag);
    }
 
-   public ItemStack onFoodEaten(ItemStack var1, World var2, EntityPlayer var3) {
-      --var1.stackSize;
-      var3.getFoodStats().addStats(this);
-      var2.playSoundAtEntity(var3, "random.burp", 0.5F, var2.rand.nextFloat() * 0.1F + 0.9F);
-      this.func_77849_c(var1, var2, var3);
-      return var1;
+   public ItemStack onFoodEaten(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      --itemstack.stackSize;
+      int oldFoodLevel = entityhuman.getFoodStats().foodLevel;
+      FoodLevelChangeEvent event = CraftEventFactory.callFoodLevelChangeEvent(entityhuman, this.getHealAmount() + oldFoodLevel);
+      if(!event.isCancelled()) {
+         entityhuman.getFoodStats().addStats(event.getFoodLevel() - oldFoodLevel, this.getSaturationModifier());
+      }
+
+      ((EntityPlayerMP)entityhuman).playerNetServerHandler.sendPacket(new Packet8UpdateHealth(entityhuman.getHealth(), entityhuman.getFoodStats().foodLevel, entityhuman.getFoodStats().foodSaturationLevel));
+      world.playSoundAtEntity(entityhuman, "random.burp", 0.5F, world.rand.nextFloat() * 0.1F + 0.9F);
+      this.func_77849_c(itemstack, world, entityhuman);
+      return itemstack;
    }
 
-   protected void func_77849_c(ItemStack var1, World var2, EntityPlayer var3) {
-      if(!var2.isRemote && this.potionId > 0 && var2.rand.nextFloat() < this.potionEffectProbability) {
-         var3.addPotionEffect(new PotionEffect(this.potionId, this.potionDuration * 20, this.potionAmplifier));
+   protected void func_77849_c(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      if(!world.isRemote && this.potionId > 0 && world.rand.nextFloat() < this.potionEffectProbability) {
+         entityhuman.addPotionEffect(new PotionEffect(this.potionId, this.potionDuration * 20, this.potionAmplifier));
       }
 
    }
 
-   public int getMaxItemUseDuration(ItemStack var1) {
+   public int getMaxItemUseDuration(ItemStack itemstack) {
       return 32;
    }
 
-   public EnumAction getItemUseAction(ItemStack var1) {
+   public EnumAction getItemUseAction(ItemStack itemstack) {
       return EnumAction.eat;
    }
 
-   public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-      if(var3.canEat(this.alwaysEdible)) {
-         var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+   public ItemStack onItemRightClick(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      if(entityhuman.canEat(this.alwaysEdible)) {
+         entityhuman.setItemInUse(itemstack, this.getMaxItemUseDuration(itemstack));
       }
 
-      return var1;
+      return itemstack;
    }
 
    public int getHealAmount() {
@@ -77,11 +87,11 @@
       return this.isWolfsFavoriteMeat;
    }
 
-   public ItemFood setPotionEffect(int var1, int var2, int var3, float var4) {
-      this.potionId = var1;
-      this.potionDuration = var2;
-      this.potionAmplifier = var3;
-      this.potionEffectProbability = var4;
+   public ItemFood setPotionEffect(int i, int j, int k, float f) {
+      this.potionId = i;
+      this.potionDuration = j;
+      this.potionAmplifier = k;
+      this.potionEffectProbability = f;
       return this;
    }
 
Binary files mcp-mcdev/net/minecraft/src/ItemHangingEntity.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemHangingEntity.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemHangingEntity.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemHangingEntity.java
--- mcp-mcdev/net/minecraft/src/ItemHangingEntity.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemHangingEntity.java	2012-11-29 20:44:00.000000000 -0800
@@ -9,35 +9,58 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.block.BlockFace;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.Painting;
+import org.bukkit.entity.Player;
+import org.bukkit.event.hanging.HangingPlaceEvent;
+import org.bukkit.event.painting.PaintingPlaceEvent;
 
 public class ItemHangingEntity extends Item {
 
    private final Class hangingEntityClass;
 
 
-   public ItemHangingEntity(int var1, Class var2) {
-      super(var1);
-      this.hangingEntityClass = var2;
+   public ItemHangingEntity(int i, Class oclass) {
+      super(i);
+      this.hangingEntityClass = oclass;
       this.setCreativeTab(CreativeTabs.tabDecorations);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var7 == 0) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(l == 0) {
          return false;
-      } else if(var7 == 1) {
+      } else if(l == 1) {
          return false;
       } else {
-         int var11 = Direction.vineGrowth[var7];
-         EntityHanging var12 = this.createHangingEntity(var3, var4, var5, var6, var11);
-         if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+         int i1 = Direction.vineGrowth[l];
+         EntityHanging entityhanging = this.createHangingEntity(world, i, j, k, i1);
+         if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
             return false;
          } else {
-            if(var12 != null && var12.onValidSurface()) {
-               if(!var3.isRemote) {
-                  var3.spawnEntityInWorld(var12);
+            if(entityhanging != null && entityhanging.onValidSurface()) {
+               if(!world.isRemote) {
+                  Player who = entityhuman == null?null:(Player)entityhuman.getBukkitEntity();
+                  org.bukkit.block.Block blockClicked = world.getWorld().getBlockAt(i, j, k);
+                  BlockFace blockFace = CraftBlock.notchToBlockFace(l);
+                  HangingPlaceEvent event = new HangingPlaceEvent((Hanging)entityhanging.getBukkitEntity(), who, blockClicked, blockFace);
+                  world.getServer().getPluginManager().callEvent(event);
+                  PaintingPlaceEvent paintingEvent = null;
+                  if(entityhanging instanceof EntityPainting) {
+                     paintingEvent = new PaintingPlaceEvent((Painting)entityhanging.getBukkitEntity(), who, blockClicked, blockFace);
+                     paintingEvent.setCancelled(event.isCancelled());
+                     world.getServer().getPluginManager().callEvent(paintingEvent);
+                  }
+
+                  if(event.isCancelled() || paintingEvent != null && paintingEvent.isCancelled()) {
+                     return false;
+                  }
+
+                  world.spawnEntityInWorld(entityhanging);
                }
 
-               --var1.stackSize;
+               --itemstack.stackSize;
             }
 
             return true;
@@ -45,7 +68,7 @@
       }
    }
 
-   private EntityHanging createHangingEntity(World var1, int var2, int var3, int var4, int var5) {
-      return (EntityHanging)(this.hangingEntityClass == EntityPainting.class?new EntityPainting(var1, var2, var3, var4, var5):(this.hangingEntityClass == EntityItemFrame.class?new EntityItemFrame(var1, var2, var3, var4, var5):null));
+   private EntityHanging createHangingEntity(World world, int i, int j, int k, int l) {
+      return (EntityHanging)(this.hangingEntityClass == EntityPainting.class?new EntityPainting(world, i, j, k, l):(this.hangingEntityClass == EntityItemFrame.class?new EntityItemFrame(world, i, j, k, l):null));
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ItemHoe.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemHoe.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemHoe.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemHoe.java
--- mcp-mcdev/net/minecraft/src/ItemHoe.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemHoe.java	2012-11-29 20:44:00.000000000 -0800
@@ -7,37 +7,47 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemHoe extends Item {
 
    protected EnumToolMaterial theToolMaterial;
 
 
-   public ItemHoe(int var1, EnumToolMaterial var2) {
-      super(var1);
-      this.theToolMaterial = var2;
+   public ItemHoe(int i, EnumToolMaterial enumtoolmaterial) {
+      super(i);
+      this.theToolMaterial = enumtoolmaterial;
       this.maxStackSize = 1;
-      this.setMaxDamage(var2.getMaxUses());
+      this.setMaxDamage(enumtoolmaterial.getMaxUses());
       this.setCreativeTab(CreativeTabs.tabTools);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
          return false;
       } else {
-         int var11 = var3.getBlockId(var4, var5, var6);
-         int var12 = var3.getBlockId(var4, var5 + 1, var6);
-         if((var7 == 0 || var12 != 0 || var11 != Block.grass.blockID) && var11 != Block.dirt.blockID) {
+         int i1 = world.getBlockId(i, j, k);
+         int j1 = world.getBlockId(i, j + 1, k);
+         if((l == 0 || j1 != 0 || i1 != Block.grass.blockID) && i1 != Block.dirt.blockID) {
             return false;
          } else {
-            Block var13 = Block.tilledField;
-            var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var13.stepSound.getStepSound(), (var13.stepSound.getVolume() + 1.0F) / 2.0F, var13.stepSound.getPitch() * 0.8F);
-            if(var3.isRemote) {
+            Block block = Block.tilledField;
+            world.playSoundEffect((double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), block.stepSound.getStepSound(), (block.stepSound.getVolume() + 1.0F) / 2.0F, block.stepSound.getPitch() * 0.8F);
+            if(world.isRemote) {
                return true;
             } else {
-               var3.setBlockWithNotify(var4, var5, var6, var13.blockID);
-               var1.damageItem(1, var2);
-               return true;
+               CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j, k);
+               world.setBlockWithNotify(i, j, k, block.blockID);
+               BlockPlaceEvent event = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, i, j, k);
+               if(!event.isCancelled() && event.canBuild()) {
+                  itemstack.damageItem(1, entityhuman);
+                  return true;
+               } else {
+                  event.getBlockPlaced().setTypeId(blockState.getTypeId());
+                  return false;
+               }
             }
          }
       }
Binary files mcp-mcdev/net/minecraft/src/ItemInWorldManager.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemInWorldManager.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemInWorldManager.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemInWorldManager.java
--- mcp-mcdev/net/minecraft/src/ItemInWorldManager.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemInWorldManager.java	2012-11-29 20:44:00.000000000 -0800
@@ -1,13 +1,21 @@
 package net.minecraft.src;
 
 import net.minecraft.src.Block;
+import net.minecraft.src.EnchantmentHelper;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.EnumGameType;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.Packet53BlockChange;
+import net.minecraft.src.TileEntity;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldServer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Event.Result;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockDamageEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
 
 public class ItemInWorldManager {
 
@@ -28,15 +36,19 @@
    private int durabilityRemainingOnBlock;
 
 
-   public ItemInWorldManager(World var1) {
+   public ItemInWorldManager(World world) {
       this.gameType = EnumGameType.NOT_SET;
       this.durabilityRemainingOnBlock = -1;
-      this.theWorld = var1;
+      this.theWorld = world;
    }
 
-   public void setGameType(EnumGameType var1) {
-      this.gameType = var1;
-      var1.configurePlayerCapabilities(this.thisPlayerMP.capabilities);
+   public ItemInWorldManager(WorldServer world) {
+      this((World)world);
+   }
+
+   public void setGameType(EnumGameType enumgamemode) {
+      this.gameType = enumgamemode;
+      enumgamemode.configurePlayerCapabilities(this.thisPlayerMP.capabilities);
       this.thisPlayerMP.sendPlayerAbilities();
    }
 
@@ -48,210 +60,309 @@
       return this.gameType.isCreative();
    }
 
-   public void initializeGameType(EnumGameType var1) {
+   public void initializeGameType(EnumGameType enumgamemode) {
       if(this.gameType == EnumGameType.NOT_SET) {
-         this.gameType = var1;
+         this.gameType = enumgamemode;
       }
 
       this.setGameType(this.gameType);
    }
 
    public void updateBlockRemoving() {
-      ++this.curblockDamage;
-      int var1;
-      float var4;
-      int var5;
+      this.curblockDamage = (int)(System.currentTimeMillis() / 50L);
+      int i;
+      float f;
+      int j;
       if(this.field_73097_j) {
-         var1 = this.curblockDamage - this.field_73093_n;
-         int var2 = this.theWorld.getBlockId(this.posX, this.posY, this.posZ);
-         if(var2 == 0) {
+         i = this.curblockDamage - this.field_73093_n;
+         int block1 = this.theWorld.getBlockId(this.posX, this.posY, this.posZ);
+         if(block1 == 0) {
             this.field_73097_j = false;
          } else {
-            Block var3 = Block.blocksList[var2];
-            var4 = var3.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, this.posX, this.posY, this.posZ) * (float)(var1 + 1);
-            var5 = (int)(var4 * 10.0F);
-            if(var5 != this.durabilityRemainingOnBlock) {
-               this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.posX, this.posY, this.posZ, var5);
-               this.durabilityRemainingOnBlock = var5;
+            Block l = Block.blocksList[block1];
+            f = l.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, this.posX, this.posY, this.posZ) * (float)(i + 1);
+            j = (int)(f * 10.0F);
+            if(j != this.durabilityRemainingOnBlock) {
+               this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.posX, this.posY, this.posZ, j);
+               this.durabilityRemainingOnBlock = j;
             }
 
-            if(var4 >= 1.0F) {
+            if(f >= 1.0F) {
                this.field_73097_j = false;
                this.tryHarvestBlock(this.posX, this.posY, this.posZ);
             }
          }
       } else if(this.isPartiallyDestroyedBlockWhole) {
-         var1 = this.theWorld.getBlockId(this.curBlockX, this.curBlockY, this.curBlockZ);
-         Block var6 = Block.blocksList[var1];
-         if(var6 == null) {
+         i = this.theWorld.getBlockId(this.curBlockX, this.curBlockY, this.curBlockZ);
+         Block block11 = Block.blocksList[i];
+         if(block11 == null) {
             this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.curBlockX, this.curBlockY, this.curBlockZ, -1);
             this.durabilityRemainingOnBlock = -1;
             this.isPartiallyDestroyedBlockWhole = false;
          } else {
-            int var7 = this.curblockDamage - this.initialDamage;
-            var4 = var6.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, this.curBlockX, this.curBlockY, this.curBlockZ) * (float)(var7 + 1);
-            var5 = (int)(var4 * 10.0F);
-            if(var5 != this.durabilityRemainingOnBlock) {
-               this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.curBlockX, this.curBlockY, this.curBlockZ, var5);
-               this.durabilityRemainingOnBlock = var5;
+            int l1 = this.curblockDamage - this.initialDamage;
+            f = block11.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, this.curBlockX, this.curBlockY, this.curBlockZ) * (float)(l1 + 1);
+            j = (int)(f * 10.0F);
+            if(j != this.durabilityRemainingOnBlock) {
+               this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.curBlockX, this.curBlockY, this.curBlockZ, j);
+               this.durabilityRemainingOnBlock = j;
             }
          }
       }
 
    }
 
-   public void blockClicked(int var1, int var2, int var3, int var4) {
-      if(!this.gameType.isAdventure() || this.thisPlayerMP.canCurrentToolHarvestBlock(var1, var2, var3)) {
-         if(this.isCreative()) {
-            if(!this.theWorld.extinguishFire((EntityPlayer)null, var1, var2, var3, var4)) {
-               this.tryHarvestBlock(var1, var2, var3);
+   public void blockClicked(int i, int j, int k, int l) {
+      PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.thisPlayerMP, Action.LEFT_CLICK_BLOCK, i, j, k, l, this.thisPlayerMP.inventory.getCurrentItem());
+      if(!this.gameType.isAdventure() || this.thisPlayerMP.canCurrentToolHarvestBlock(i, j, k)) {
+         if(event.isCancelled()) {
+            this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j, k, this.theWorld));
+            TileEntity f1 = this.theWorld.getBlockTileEntity(i, j, k);
+            if(f1 != null) {
+               this.thisPlayerMP.playerNetServerHandler.sendPacket(f1.getDescriptionPacket());
             }
 
+            return;
+         }
+
+         if(this.isCreative()) {
+            if(!this.theWorld.extinguishFire((EntityPlayer)null, i, j, k, l)) {
+               this.tryHarvestBlock(i, j, k);
+            }
          } else {
-            this.theWorld.extinguishFire(this.thisPlayerMP, var1, var2, var3, var4);
+            this.theWorld.extinguishFire(this.thisPlayerMP, i, j, k, l);
             this.initialDamage = this.curblockDamage;
-            float var5 = 1.0F;
-            int var6 = this.theWorld.getBlockId(var1, var2, var3);
-            if(var6 > 0) {
-               Block.blocksList[var6].onBlockClicked(this.theWorld, var1, var2, var3, this.thisPlayerMP);
-               var5 = Block.blocksList[var6].getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, var1, var2, var3);
+            float f = 1.0F;
+            int i1 = this.theWorld.getBlockId(i, j, k);
+            if(event.useInteractedBlock() == Result.DENY) {
+               if(i1 == Block.doorWood.blockID) {
+                  boolean blockEvent = (this.theWorld.getBlockMetadata(i, j, k) & 8) == 0;
+                  this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j, k, this.theWorld));
+                  this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j + (blockEvent?1:-1), k, this.theWorld));
+               } else if(i1 == Block.trapdoor.blockID) {
+                  this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j, k, this.theWorld));
+               }
+            } else if(i1 > 0) {
+               Block.blocksList[i1].onBlockClicked(this.theWorld, i, j, k, this.thisPlayerMP);
+               this.theWorld.extinguishFire((EntityPlayer)null, i, j, k, l);
+            }
+
+            if(i1 > 0) {
+               f = Block.blocksList[i1].getPlayerRelativeBlockHardness(this.thisPlayerMP, this.theWorld, i, j, k);
             }
 
-            if(var6 > 0 && var5 >= 1.0F) {
-               this.tryHarvestBlock(var1, var2, var3);
+            if(event.useItemInHand() == Result.DENY) {
+               if(f > 1.0F) {
+                  this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j, k, this.theWorld));
+               }
+
+               return;
+            }
+
+            BlockDamageEvent blockEvent1 = CraftEventFactory.callBlockDamageEvent(this.thisPlayerMP, i, j, k, this.thisPlayerMP.inventory.getCurrentItem(), f >= 1.0F);
+            if(blockEvent1.isCancelled()) {
+               this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j, k, this.theWorld));
+               return;
+            }
+
+            if(blockEvent1.getInstaBreak()) {
+               f = 2.0F;
+            }
+
+            if(i1 > 0 && f >= 1.0F) {
+               this.tryHarvestBlock(i, j, k);
             } else {
                this.isPartiallyDestroyedBlockWhole = true;
-               this.curBlockX = var1;
-               this.curBlockY = var2;
-               this.curBlockZ = var3;
-               int var7 = (int)(var5 * 10.0F);
-               this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, var1, var2, var3, var7);
-               this.durabilityRemainingOnBlock = var7;
+               this.curBlockX = i;
+               this.curBlockY = j;
+               this.curBlockZ = k;
+               int j1 = (int)(f * 10.0F);
+               this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, i, j, k, j1);
+               this.durabilityRemainingOnBlock = j1;
             }
-
          }
       }
+
    }
 
-   public void blockRemoving(int var1, int var2, int var3) {
-      if(var1 == this.curBlockX && var2 == this.curBlockY && var3 == this.curBlockZ) {
-         int var4 = this.curblockDamage - this.initialDamage;
-         int var5 = this.theWorld.getBlockId(var1, var2, var3);
-         if(var5 != 0) {
-            Block var6 = Block.blocksList[var5];
-            float var7 = var6.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, var1, var2, var3) * (float)(var4 + 1);
-            if(var7 >= 0.7F) {
+   public void blockRemoving(int i, int j, int k) {
+      if(i == this.curBlockX && j == this.curBlockY && k == this.curBlockZ) {
+         this.curblockDamage = (int)(System.currentTimeMillis() / 50L);
+         int l = this.curblockDamage - this.initialDamage;
+         int i1 = this.theWorld.getBlockId(i, j, k);
+         if(i1 != 0) {
+            Block block = Block.blocksList[i1];
+            float f = block.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, i, j, k) * (float)(l + 1);
+            if(f >= 0.7F) {
                this.isPartiallyDestroyedBlockWhole = false;
-               this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, var1, var2, var3, -1);
-               this.tryHarvestBlock(var1, var2, var3);
+               this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, i, j, k, -1);
+               this.tryHarvestBlock(i, j, k);
             } else if(!this.field_73097_j) {
                this.isPartiallyDestroyedBlockWhole = false;
                this.field_73097_j = true;
-               this.posX = var1;
-               this.posY = var2;
-               this.posZ = var3;
+               this.posX = i;
+               this.posY = j;
+               this.posZ = k;
                this.field_73093_n = this.initialDamage;
             }
          }
+      } else {
+         this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j, k, this.theWorld));
       }
 
    }
 
-   public void destroyBlockInWorldPartially(int var1, int var2, int var3) {
+   public void destroyBlockInWorldPartially(int i, int j, int k) {
       this.isPartiallyDestroyedBlockWhole = false;
       this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.curBlockX, this.curBlockY, this.curBlockZ, -1);
    }
 
-   private boolean removeBlock(int var1, int var2, int var3) {
-      Block var4 = Block.blocksList[this.theWorld.getBlockId(var1, var2, var3)];
-      int var5 = this.theWorld.getBlockMetadata(var1, var2, var3);
-      if(var4 != null) {
-         var4.onBlockHarvested(this.theWorld, var1, var2, var3, var5, this.thisPlayerMP);
+   private boolean removeBlock(int i, int j, int k) {
+      Block block = Block.blocksList[this.theWorld.getBlockId(i, j, k)];
+      int l = this.theWorld.getBlockMetadata(i, j, k);
+      if(block != null) {
+         block.onBlockHarvested(this.theWorld, i, j, k, l, this.thisPlayerMP);
       }
 
-      boolean var6 = this.theWorld.setBlockWithNotify(var1, var2, var3, 0);
-      if(var4 != null && var6) {
-         var4.onBlockDestroyedByPlayer(this.theWorld, var1, var2, var3, var5);
+      boolean flag = this.theWorld.setBlockWithNotify(i, j, k, 0);
+      if(block != null && flag) {
+         block.onBlockDestroyedByPlayer(this.theWorld, i, j, k, l);
       }
 
-      return var6;
+      return flag;
    }
 
-   public boolean tryHarvestBlock(int var1, int var2, int var3) {
-      if(this.gameType.isAdventure() && !this.thisPlayerMP.canCurrentToolHarvestBlock(var1, var2, var3)) {
+   public boolean tryHarvestBlock(int i, int j, int k) {
+      BlockBreakEvent event = null;
+      if(this.thisPlayerMP instanceof EntityPlayerMP) {
+         org.bukkit.block.Block l = this.theWorld.getWorld().getBlockAt(i, j, k);
+         if(this.theWorld.getBlockTileEntity(i, j, k) == null) {
+            Packet53BlockChange i1 = new Packet53BlockChange(i, j, k, this.theWorld);
+            i1.type = 0;
+            i1.metadata = 0;
+            this.thisPlayerMP.playerNetServerHandler.sendPacket(i1);
+         }
+
+         event = new BlockBreakEvent(l, this.thisPlayerMP.getBukkitEntity());
+         event.setCancelled(this.gameType.isAdventure() && !this.thisPlayerMP.canCurrentToolHarvestBlock(i, j, k));
+         Block i12 = Block.blocksList[l.getTypeId()];
+         if(i12 != null && !event.isCancelled() && !this.isCreative() && this.thisPlayerMP.canHarvestBlock(i12) && (!i12.canSilkHarvest() || !EnchantmentHelper.getSilkTouchModifier(this.thisPlayerMP))) {
+            byte flag = l.getData();
+            int itemstack = EnchantmentHelper.getFortuneModifier(this.thisPlayerMP);
+            event.setExpToDrop(i12.getExpDrop(this.theWorld, flag, itemstack));
+         }
+
+         this.theWorld.getServer().getPluginManager().callEvent(event);
+         if(event.isCancelled()) {
+            this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j, k, this.theWorld));
+            TileEntity flag2 = this.theWorld.getBlockTileEntity(i, j, k);
+            if(flag2 != null) {
+               this.thisPlayerMP.playerNetServerHandler.sendPacket(flag2.getDescriptionPacket());
+            }
+
+            return false;
+         }
+      }
+
+      int l1 = this.theWorld.getBlockId(i, j, k);
+      if(Block.blocksList[l1] == null) {
          return false;
       } else {
-         int var4 = this.theWorld.getBlockId(var1, var2, var3);
-         int var5 = this.theWorld.getBlockMetadata(var1, var2, var3);
-         this.theWorld.playAuxSFXAtEntity(this.thisPlayerMP, 2001, var1, var2, var3, var4 + (this.theWorld.getBlockMetadata(var1, var2, var3) << 12));
-         boolean var6 = this.removeBlock(var1, var2, var3);
-         if(this.isCreative()) {
-            this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(var1, var2, var3, this.theWorld));
+         int i11 = this.theWorld.getBlockMetadata(i, j, k);
+         if(l1 == Block.skull.blockID && !this.isCreative()) {
+            Block.skull.dropBlockAsItemWithChance(this.theWorld, i, j, k, i11, 1.0F, 0);
+            return this.removeBlock(i, j, k);
          } else {
-            ItemStack var7 = this.thisPlayerMP.getCurrentEquippedItem();
-            boolean var8 = this.thisPlayerMP.canHarvestBlock(Block.blocksList[var4]);
-            if(var7 != null) {
-               var7.onBlockDestroyed(this.theWorld, var4, var1, var2, var3, this.thisPlayerMP);
-               if(var7.stackSize == 0) {
-                  this.thisPlayerMP.destroyCurrentEquippedItem();
+            this.theWorld.playAuxSFXAtEntity(this.thisPlayerMP, 2001, i, j, k, l1 + (this.theWorld.getBlockMetadata(i, j, k) << 12));
+            boolean flag1 = this.removeBlock(i, j, k);
+            if(this.isCreative()) {
+               this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j, k, this.theWorld));
+            } else {
+               ItemStack itemstack1 = this.thisPlayerMP.getCurrentEquippedItem();
+               boolean flag1 = this.thisPlayerMP.canHarvestBlock(Block.blocksList[l1]);
+               if(itemstack1 != null) {
+                  itemstack1.onBlockDestroyed(this.theWorld, l1, i, j, k, this.thisPlayerMP);
+                  if(itemstack1.stackSize == 0) {
+                     this.thisPlayerMP.destroyCurrentEquippedItem();
+                  }
+               }
+
+               if(flag1 && flag1) {
+                  Block.blocksList[l1].harvestBlock(this.theWorld, this.thisPlayerMP, i, j, k, i11);
                }
             }
 
-            if(var6 && var8) {
-               Block.blocksList[var4].harvestBlock(this.theWorld, this.thisPlayerMP, var1, var2, var3, var5);
+            if(flag1 && event != null) {
+               Block.blocksList[l1].dropXpOnBlockBreak(this.theWorld, i, j, k, event.getExpToDrop());
             }
-         }
 
-         return var6;
+            return flag1;
+         }
       }
    }
 
-   public boolean tryUseItem(EntityPlayer var1, World var2, ItemStack var3) {
-      int var4 = var3.stackSize;
-      int var5 = var3.getItemDamage();
-      ItemStack var6 = var3.useItemRightClick(var2, var1);
-      if(var6 == var3 && (var6 == null || var6.stackSize == var4 && var6.getMaxItemUseDuration() <= 0 && var6.getItemDamage() == var5)) {
+   public boolean tryUseItem(EntityPlayer entityhuman, World world, ItemStack itemstack) {
+      int i = itemstack.stackSize;
+      int j = itemstack.getItemDamage();
+      ItemStack itemstack1 = itemstack.useItemRightClick(world, entityhuman);
+      if(itemstack1 == itemstack && (itemstack1 == null || itemstack1.stackSize == i && itemstack1.getMaxItemUseDuration() <= 0 && itemstack1.getItemDamage() == j)) {
          return false;
       } else {
-         var1.inventory.mainInventory[var1.inventory.currentItem] = var6;
+         entityhuman.inventory.mainInventory[entityhuman.inventory.currentItem] = itemstack1;
          if(this.isCreative()) {
-            var6.stackSize = var4;
-            if(var6.isItemStackDamageable()) {
-               var6.setItemDamage(var5);
+            itemstack1.stackSize = i;
+            if(itemstack1.isItemStackDamageable()) {
+               itemstack1.setItemDamage(j);
             }
          }
 
-         if(var6.stackSize == 0) {
-            var1.inventory.mainInventory[var1.inventory.currentItem] = null;
+         if(itemstack1.stackSize == 0) {
+            entityhuman.inventory.mainInventory[entityhuman.inventory.currentItem] = null;
          }
 
-         if(!var1.isUsingItem()) {
-            ((EntityPlayerMP)var1).sendContainerToPlayer(var1.inventoryContainer);
+         if(!entityhuman.isUsingItem()) {
+            ((EntityPlayerMP)entityhuman).sendContainerToPlayer(entityhuman.inventoryContainer);
          }
 
          return true;
       }
    }
 
-   public boolean activateBlockOrUseItem(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      int var11 = var2.getBlockId(var4, var5, var6);
-      if(var11 > 0 && Block.blocksList[var11].onBlockActivated(var2, var4, var5, var6, var1, var7, var8, var9, var10)) {
-         return true;
-      } else if(var3 == null) {
-         return false;
-      } else if(this.isCreative()) {
-         int var12 = var3.getItemDamage();
-         int var13 = var3.stackSize;
-         boolean var14 = var3.tryPlaceItemIntoWorld(var1, var2, var4, var5, var6, var7, var8, var9, var10);
-         var3.setItemDamage(var12);
-         var3.stackSize = var13;
-         return var14;
-      } else {
-         return var3.tryPlaceItemIntoWorld(var1, var2, var4, var5, var6, var7, var8, var9, var10);
+   public boolean activateBlockOrUseItem(EntityPlayer entityhuman, World world, ItemStack itemstack, int i, int j, int k, int l, float f, float f1, float f2) {
+      int i1 = world.getBlockId(i, j, k);
+      boolean result = false;
+      if(i1 > 0) {
+         PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(entityhuman, Action.RIGHT_CLICK_BLOCK, i, j, k, l, itemstack);
+         if(event.useInteractedBlock() == Result.DENY) {
+            if(i1 == Block.doorWood.blockID) {
+               boolean j1 = (world.getBlockMetadata(i, j, k) & 8) == 0;
+               ((EntityPlayerMP)entityhuman).playerNetServerHandler.sendPacket(new Packet53BlockChange(i, j + (j1?1:-1), k, world));
+            }
+
+            result = event.useItemInHand() != Result.ALLOW;
+         } else {
+            result = Block.blocksList[i1].onBlockActivated(world, i, j, k, entityhuman, l, f, f1, f2);
+         }
+
+         if(itemstack != null && !result) {
+            int j11 = itemstack.getItemDamage();
+            int k1 = itemstack.stackSize;
+            result = itemstack.tryPlaceItemIntoWorld(entityhuman, world, i, j, k, l, f, f1, f2);
+            if(this.isCreative()) {
+               itemstack.setItemDamage(j11);
+               itemstack.stackSize = k1;
+            }
+         }
+
+         if(itemstack != null && (!result && event.useItemInHand() != Result.DENY || event.useItemInHand() == Result.ALLOW)) {
+            this.tryUseItem(entityhuman, world, itemstack);
+         }
       }
+
+      return result;
    }
 
-   public void setWorld(WorldServer var1) {
-      this.theWorld = var1;
+   public void setWorld(WorldServer worldserver) {
+      this.theWorld = worldserver;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ItemLilyPad.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemLilyPad.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemLilyPad.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemLilyPad.java
--- mcp-mcdev/net/minecraft/src/ItemLilyPad.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemLilyPad.java	2012-11-29 20:44:00.000000000 -0800
@@ -8,39 +8,49 @@
 import net.minecraft.src.Material;
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemLilyPad extends ItemColored {
 
-   public ItemLilyPad(int var1) {
-      super(var1, false);
+   public ItemLilyPad(int i) {
+      super(i, false);
    }
 
-   public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-      MovingObjectPosition var4 = this.getMovingObjectPositionFromPlayer(var2, var3, true);
-      if(var4 == null) {
-         return var1;
+   public ItemStack onItemRightClick(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      MovingObjectPosition movingobjectposition = this.getMovingObjectPositionFromPlayer(world, entityhuman, true);
+      if(movingobjectposition == null) {
+         return itemstack;
       } else {
-         if(var4.typeOfHit == EnumMovingObjectType.TILE) {
-            int var5 = var4.blockX;
-            int var6 = var4.blockY;
-            int var7 = var4.blockZ;
-            if(!var2.canMineBlock(var3, var5, var6, var7)) {
-               return var1;
+         if(movingobjectposition.typeOfHit == EnumMovingObjectType.TILE) {
+            int i = movingobjectposition.blockX;
+            int j = movingobjectposition.blockY;
+            int k = movingobjectposition.blockZ;
+            if(!world.canMineBlock(entityhuman, i, j, k)) {
+               return itemstack;
             }
 
-            if(!var3.canPlayerEdit(var5, var6, var7, var4.sideHit, var1)) {
-               return var1;
+            if(!entityhuman.canPlayerEdit(i, j, k, movingobjectposition.sideHit, itemstack)) {
+               return itemstack;
             }
 
-            if(var2.getBlockMaterial(var5, var6, var7) == Material.water && var2.getBlockMetadata(var5, var6, var7) == 0 && var2.isAirBlock(var5, var6 + 1, var7)) {
-               var2.setBlockWithNotify(var5, var6 + 1, var7, Block.waterlily.blockID);
-               if(!var3.capabilities.isCreativeMode) {
-                  --var1.stackSize;
+            if(world.getBlockMaterial(i, j, k) == Material.water && world.getBlockMetadata(i, j, k) == 0 && world.isAirBlock(i, j + 1, k)) {
+               CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j + 1, k);
+               world.setBlockWithNotify(i, j + 1, k, Block.waterlily.blockID);
+               BlockPlaceEvent event = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, i, j, k);
+               if(event.isCancelled() || !event.canBuild()) {
+                  event.getBlockPlaced().setTypeId(0);
+                  return itemstack;
+               }
+
+               if(!entityhuman.capabilities.isCreativeMode) {
+                  --itemstack.stackSize;
                }
             }
          }
 
-         return var1;
+         return itemstack;
       }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ItemMap.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemMap.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemMap.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemMap.java
--- mcp-mcdev/net/minecraft/src/ItemMap.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemMap.java	2012-11-29 20:44:00.000000000 -0800
@@ -14,231 +14,238 @@
 import net.minecraft.src.Packet;
 import net.minecraft.src.Packet131MapData;
 import net.minecraft.src.World;
+import net.minecraft.src.WorldServer;
+import org.bukkit.Bukkit;
+import org.bukkit.event.server.MapInitializeEvent;
 
 public class ItemMap extends ItemMapBase {
 
-   protected ItemMap(int var1) {
-      super(var1);
+   protected ItemMap(int i) {
+      super(i);
       this.setHasSubtypes(true);
    }
 
-   public MapData getMapData(ItemStack var1, World var2) {
-      String var3 = "map_" + var1.getItemDamage();
-      MapData var4 = (MapData)var2.loadItemData(MapData.class, var3);
-      if(var4 == null && !var2.isRemote) {
-         var1.setItemDamage(var2.getUniqueDataId("map"));
-         var3 = "map_" + var1.getItemDamage();
-         var4 = new MapData(var3);
-         var4.scale = 3;
-         int var5 = 128 * (1 << var4.scale);
-         var4.xCenter = Math.round((float)var2.getWorldInfo().getSpawnX() / (float)var5) * var5;
-         var4.zCenter = Math.round((float)(var2.getWorldInfo().getSpawnZ() / var5)) * var5;
-         var4.dimension = (byte)var2.provider.dimensionId;
-         var4.markDirty();
-         var2.setItemData(var3, var4);
+   public MapData getMapData(ItemStack itemstack, World world) {
+      String s = "map_" + itemstack.getItemDamage();
+      MapData worldmap = (MapData)world.loadItemData(MapData.class, s);
+      if(worldmap == null && !world.isRemote) {
+         itemstack.setItemDamage(world.getUniqueDataId("map"));
+         s = "map_" + itemstack.getItemDamage();
+         worldmap = new MapData(s);
+         worldmap.scale = 3;
+         int i = 128 * (1 << worldmap.scale);
+         worldmap.xCenter = Math.round((float)world.getWorldInfo().getSpawnX() / (float)i) * i;
+         worldmap.zCenter = Math.round((float)(world.getWorldInfo().getSpawnZ() / i)) * i;
+         worldmap.dimension = (byte)((WorldServer)world).dimension;
+         worldmap.markDirty();
+         world.setItemData(s, worldmap);
+         MapInitializeEvent event = new MapInitializeEvent(worldmap.mapView);
+         Bukkit.getServer().getPluginManager().callEvent(event);
       }
 
-      return var4;
+      return worldmap;
    }
 
-   public void updateMapData(World var1, Entity var2, MapData var3) {
-      if(var1.provider.dimensionId == var3.dimension && var2 instanceof EntityPlayer) {
-         short var4 = 128;
-         short var5 = 128;
-         int var6 = 1 << var3.scale;
-         int var7 = var3.xCenter;
-         int var8 = var3.zCenter;
-         int var9 = MathHelper.floor_double(var2.posX - (double)var7) / var6 + var4 / 2;
-         int var10 = MathHelper.floor_double(var2.posZ - (double)var8) / var6 + var5 / 2;
-         int var11 = 128 / var6;
-         if(var1.provider.hasNoSky) {
-            var11 /= 2;
+   public void updateMapData(World world, Entity entity, MapData worldmap) {
+      if(((WorldServer)world).dimension == worldmap.dimension && entity instanceof EntityPlayer) {
+         short short1 = 128;
+         short short2 = 128;
+         int i = 1 << worldmap.scale;
+         int j = worldmap.xCenter;
+         int k = worldmap.zCenter;
+         int l = MathHelper.floor_double(entity.posX - (double)j) / i + short1 / 2;
+         int i1 = MathHelper.floor_double(entity.posZ - (double)k) / i + short2 / 2;
+         int j1 = 128 / i;
+         if(world.provider.hasNoSky) {
+            j1 /= 2;
          }
 
-         MapInfo var12 = var3.func_82568_a((EntityPlayer)var2);
-         ++var12.field_82569_d;
+         MapInfo worldmaphumantracker = worldmap.func_82568_a((EntityPlayer)entity);
+         ++worldmaphumantracker.field_82569_d;
 
-         for(int var13 = var9 - var11 + 1; var13 < var9 + var11; ++var13) {
-            if((var13 & 15) == (var12.field_82569_d & 15)) {
-               int var14 = 255;
-               int var15 = 0;
-               double var16 = 0.0D;
-
-               for(int var18 = var10 - var11 - 1; var18 < var10 + var11; ++var18) {
-                  if(var13 >= 0 && var18 >= -1 && var13 < var4 && var18 < var5) {
-                     int var19 = var13 - var9;
-                     int var20 = var18 - var10;
-                     boolean var21 = var19 * var19 + var20 * var20 > (var11 - 2) * (var11 - 2);
-                     int var22 = (var7 / var6 + var13 - var4 / 2) * var6;
-                     int var23 = (var8 / var6 + var18 - var5 / 2) * var6;
-                     int[] var24 = new int[256];
-                     Chunk var25 = var1.getChunkFromBlockCoords(var22, var23);
-                     if(!var25.isEmpty()) {
-                        int var26 = var22 & 15;
-                        int var27 = var23 & 15;
-                        int var28 = 0;
-                        double var29 = 0.0D;
-                        int var31;
-                        int var32;
-                        int var33;
-                        int var36;
-                        if(var1.provider.hasNoSky) {
-                           var31 = var22 + var23 * 231871;
-                           var31 = var31 * var31 * 31287121 + var31 * 11;
-                           if((var31 >> 20 & 1) == 0) {
-                              var24[Block.dirt.blockID] += 10;
+         for(int k1 = l - j1 + 1; k1 < l + j1; ++k1) {
+            if((k1 & 15) == (worldmaphumantracker.field_82569_d & 15)) {
+               int l1 = 255;
+               int i2 = 0;
+               double d0 = 0.0D;
+
+               for(int j2 = i1 - j1 - 1; j2 < i1 + j1; ++j2) {
+                  if(k1 >= 0 && j2 >= -1 && k1 < short1 && j2 < short2) {
+                     int k2 = k1 - l;
+                     int l2 = j2 - i1;
+                     boolean flag = k2 * k2 + l2 * l2 > (j1 - 2) * (j1 - 2);
+                     int i3 = (j / i + k1 - short1 / 2) * i;
+                     int j3 = (k / i + j2 - short2 / 2) * i;
+                     int[] aint = new int[256];
+                     Chunk chunk = world.getChunkFromBlockCoords(i3, j3);
+                     if(!chunk.isEmpty()) {
+                        int k3 = i3 & 15;
+                        int l3 = j3 & 15;
+                        int i4 = 0;
+                        double d1 = 0.0D;
+                        int j4;
+                        int k4;
+                        int l4;
+                        int i5;
+                        if(world.provider.hasNoSky) {
+                           j4 = i3 + j3 * 231871;
+                           j4 = j4 * j4 * 31287121 + j4 * 11;
+                           if((j4 >> 20 & 1) == 0) {
+                              aint[Block.dirt.blockID] += 10;
                            } else {
-                              var24[Block.stone.blockID] += 10;
+                              aint[Block.stone.blockID] += 10;
                            }
 
-                           var29 = 100.0D;
+                           d1 = 100.0D;
                         } else {
-                           for(var31 = 0; var31 < var6; ++var31) {
-                              for(var32 = 0; var32 < var6; ++var32) {
-                                 var33 = var25.getHeightValue(var31 + var26, var32 + var27) + 1;
-                                 int var34 = 0;
-                                 if(var33 > 1) {
-                                    boolean var35;
+                           for(j4 = 0; j4 < i; ++j4) {
+                              for(k4 = 0; k4 < i; ++k4) {
+                                 l4 = chunk.getHeightValue(j4 + k3, k4 + l3) + 1;
+                                 int j5 = 0;
+                                 if(l4 > 1) {
+                                    boolean flag1;
                                     do {
-                                       var35 = true;
-                                       var34 = var25.getBlockID(var31 + var26, var33 - 1, var32 + var27);
-                                       if(var34 == 0) {
-                                          var35 = false;
-                                       } else if(var33 > 0 && var34 > 0 && Block.blocksList[var34].blockMaterial.materialMapColor == MapColor.airColor) {
-                                          var35 = false;
+                                       flag1 = true;
+                                       j5 = chunk.getBlockID(j4 + k3, l4 - 1, k4 + l3);
+                                       if(j5 == 0) {
+                                          flag1 = false;
+                                       } else if(l4 > 0 && j5 > 0 && Block.blocksList[j5].blockMaterial.materialMapColor == MapColor.airColor) {
+                                          flag1 = false;
                                        }
 
-                                       if(!var35) {
-                                          --var33;
-                                          if(var33 <= 0) {
+                                       if(!flag1) {
+                                          --l4;
+                                          if(l4 <= 0) {
                                              break;
                                           }
 
-                                          var34 = var25.getBlockID(var31 + var26, var33 - 1, var32 + var27);
+                                          j5 = chunk.getBlockID(j4 + k3, l4 - 1, k4 + l3);
                                        }
-                                    } while(var33 > 0 && !var35);
+                                    } while(l4 > 0 && !flag1);
 
-                                    if(var33 > 0 && var34 != 0 && Block.blocksList[var34].blockMaterial.isLiquid()) {
-                                       var36 = var33 - 1;
-                                       boolean var37 = false;
+                                    if(l4 > 0 && j5 != 0 && Block.blocksList[j5].blockMaterial.isLiquid()) {
+                                       i5 = l4 - 1;
+                                       boolean b0 = false;
 
-                                       int var44;
+                                       int b1;
                                        do {
-                                          var44 = var25.getBlockID(var31 + var26, var36--, var32 + var27);
-                                          ++var28;
-                                       } while(var36 > 0 && var44 != 0 && Block.blocksList[var44].blockMaterial.isLiquid());
+                                          b1 = chunk.getBlockID(j4 + k3, i5--, k4 + l3);
+                                          ++i4;
+                                       } while(i5 > 0 && b1 != 0 && Block.blocksList[b1].blockMaterial.isLiquid());
                                     }
                                  }
 
-                                 var29 += (double)var33 / (double)(var6 * var6);
-                                 ++var24[var34];
+                                 d1 += (double)l4 / (double)(i * i);
+                                 ++aint[j5];
                               }
                            }
                         }
 
-                        var28 /= var6 * var6;
-                        var31 = 0;
-                        var32 = 0;
-
-                        for(var33 = 0; var33 < 256; ++var33) {
-                           if(var24[var33] > var31) {
-                              var32 = var33;
-                              var31 = var24[var33];
+                        i4 /= i * i;
+                        j4 = 0;
+                        k4 = 0;
+
+                        for(l4 = 0; l4 < 256; ++l4) {
+                           if(aint[l4] > j4) {
+                              k4 = l4;
+                              j4 = aint[l4];
                            }
                         }
 
-                        double var38 = (var29 - var16) * 4.0D / (double)(var6 + 4) + ((double)(var13 + var18 & 1) - 0.5D) * 0.4D;
-                        byte var41 = 1;
-                        if(var38 > 0.6D) {
-                           var41 = 2;
+                        double d2 = (d1 - d0) * 4.0D / (double)(i + 4) + ((double)(k1 + j2 & 1) - 0.5D) * 0.4D;
+                        byte var44 = 1;
+                        if(d2 > 0.6D) {
+                           var44 = 2;
                         }
 
-                        if(var38 < -0.6D) {
-                           var41 = 0;
+                        if(d2 < -0.6D) {
+                           var44 = 0;
                         }
 
-                        var36 = 0;
-                        if(var32 > 0) {
-                           MapColor var43 = Block.blocksList[var32].blockMaterial.materialMapColor;
+                        i5 = 0;
+                        if(k4 > 0) {
+                           MapColor var43 = Block.blocksList[k4].blockMaterial.materialMapColor;
                            if(var43 == MapColor.waterColor) {
-                              var38 = (double)var28 * 0.1D + (double)(var13 + var18 & 1) * 0.2D;
-                              var41 = 1;
-                              if(var38 < 0.5D) {
-                                 var41 = 2;
+                              d2 = (double)i4 * 0.1D + (double)(k1 + j2 & 1) * 0.2D;
+                              var44 = 1;
+                              if(d2 < 0.5D) {
+                                 var44 = 2;
                               }
 
-                              if(var38 > 0.9D) {
-                                 var41 = 0;
+                              if(d2 > 0.9D) {
+                                 var44 = 0;
                               }
                            }
 
-                           var36 = var43.colorIndex;
+                           i5 = var43.colorIndex;
                         }
 
-                        var16 = var29;
-                        if(var18 >= 0 && var19 * var19 + var20 * var20 < var11 * var11 && (!var21 || (var13 + var18 & 1) != 0)) {
-                           byte var42 = var3.colors[var13 + var18 * var4];
-                           byte var40 = (byte)(var36 * 4 + var41);
-                           if(var42 != var40) {
-                              if(var14 > var18) {
-                                 var14 = var18;
+                        d0 = d1;
+                        if(j2 >= 0 && k2 * k2 + l2 * l2 < j1 * j1 && (!flag || (k1 + j2 & 1) != 0)) {
+                           byte var42 = worldmap.colors[k1 + j2 * short1];
+                           byte b2 = (byte)(i5 * 4 + var44);
+                           if(var42 != b2) {
+                              if(l1 > j2) {
+                                 l1 = j2;
                               }
 
-                              if(var15 < var18) {
-                                 var15 = var18;
+                              if(i2 < j2) {
+                                 i2 = j2;
                               }
 
-                              var3.colors[var13 + var18 * var4] = var40;
+                              worldmap.colors[k1 + j2 * short1] = b2;
                            }
                         }
                      }
                   }
                }
 
-               if(var14 <= var15) {
-                  var3.setColumnDirty(var13, var14, var15);
+               if(l1 <= i2) {
+                  worldmap.setColumnDirty(k1, l1, i2);
                }
             }
          }
-
       }
+
    }
 
-   public void onUpdate(ItemStack var1, World var2, Entity var3, int var4, boolean var5) {
-      if(!var2.isRemote) {
-         MapData var6 = this.getMapData(var1, var2);
-         if(var3 instanceof EntityPlayer) {
-            EntityPlayer var7 = (EntityPlayer)var3;
-            var6.updateVisiblePlayers(var7, var1);
+   public void onUpdate(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {
+      if(!world.isRemote) {
+         MapData worldmap = this.getMapData(itemstack, world);
+         if(entity instanceof EntityPlayer) {
+            EntityPlayer entityhuman = (EntityPlayer)entity;
+            worldmap.updateVisiblePlayers(entityhuman, itemstack);
          }
 
-         if(var5) {
-            this.updateMapData(var2, var3, var6);
+         if(flag) {
+            this.updateMapData(world, entity, worldmap);
          }
-
       }
+
    }
 
-   public Packet getUpdatePacket(ItemStack var1, World var2, EntityPlayer var3) {
-      byte[] var4 = this.getMapData(var1, var2).func_76193_a(var1, var2, var3);
-      return var4 == null?null:new Packet131MapData((short)Item.map.shiftedIndex, (short)var1.getItemDamage(), var4);
+   public Packet getUpdatePacket(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      byte[] abyte = this.getMapData(itemstack, world).func_76193_a(itemstack, world, entityhuman);
+      return abyte == null?null:new Packet131MapData((short)Item.map.shiftedIndex, (short)itemstack.getItemDamage(), abyte);
    }
 
-   public void onCreated(ItemStack var1, World var2, EntityPlayer var3) {
-      if(var1.hasTagCompound() && var1.getTagCompound().getBoolean("map_is_scaling")) {
-         MapData var4 = Item.map.getMapData(var1, var2);
-         var1.setItemDamage(var2.getUniqueDataId("map"));
-         MapData var5 = new MapData("map_" + var1.getItemDamage());
-         var5.scale = (byte)(var4.scale + 1);
-         if(var5.scale > 4) {
-            var5.scale = 4;
+   public void onCreated(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      if(itemstack.hasTagCompound() && itemstack.getTagCompound().getBoolean("map_is_scaling")) {
+         MapData worldmap = Item.map.getMapData(itemstack, world);
+         itemstack.setItemDamage(world.getUniqueDataId("map"));
+         MapData worldmap1 = new MapData("map_" + itemstack.getItemDamage());
+         worldmap1.scale = (byte)(worldmap.scale + 1);
+         if(worldmap1.scale > 4) {
+            worldmap1.scale = 4;
          }
 
-         var5.xCenter = var4.xCenter;
-         var5.zCenter = var4.zCenter;
-         var5.dimension = var4.dimension;
-         var5.markDirty();
-         var2.setItemData("map_" + var1.getItemDamage(), var5);
+         worldmap1.xCenter = worldmap.xCenter;
+         worldmap1.zCenter = worldmap.zCenter;
+         worldmap1.dimension = worldmap.dimension;
+         worldmap1.markDirty();
+         world.setItemData("map_" + itemstack.getItemDamage(), worldmap1);
+         MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
+         Bukkit.getServer().getPluginManager().callEvent(event);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/ItemMinecart.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemMinecart.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemMinecart.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemMinecart.java
--- mcp-mcdev/net/minecraft/src/ItemMinecart.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemMinecart.java	2012-11-29 20:43:59.000000000 -0800
@@ -7,27 +7,35 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.player.PlayerInteractEvent;
 
 public class ItemMinecart extends Item {
 
    public int minecartType;
 
 
-   public ItemMinecart(int var1, int var2) {
-      super(var1);
+   public ItemMinecart(int i, int j) {
+      super(i);
       this.maxStackSize = 1;
-      this.minecartType = var2;
+      this.minecartType = j;
       this.setCreativeTab(CreativeTabs.tabTransport);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      int var11 = var3.getBlockId(var4, var5, var6);
-      if(BlockRail.isRailBlock(var11)) {
-         if(!var3.isRemote) {
-            var3.spawnEntityInWorld(new EntityMinecart(var3, (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.minecartType));
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      int i1 = world.getBlockId(i, j, k);
+      if(BlockRail.isRailBlock(i1)) {
+         if(!world.isRemote) {
+            PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(entityhuman, Action.RIGHT_CLICK_BLOCK, i, j, k, l, itemstack);
+            if(event.isCancelled()) {
+               return false;
+            }
+
+            world.spawnEntityInWorld(new EntityMinecart(world, (double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), this.minecartType));
          }
 
-         --var1.stackSize;
+         --itemstack.stackSize;
          return true;
       } else {
          return false;
Binary files mcp-mcdev/net/minecraft/src/ItemMonsterPlacer.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemMonsterPlacer.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemMonsterPlacer.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemMonsterPlacer.java
--- mcp-mcdev/net/minecraft/src/ItemMonsterPlacer.java	2012-11-29 21:14:48.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemMonsterPlacer.java	2012-11-29 20:43:59.000000000 -0800
@@ -11,63 +11,64 @@
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.StatCollector;
 import net.minecraft.src.World;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public class ItemMonsterPlacer extends Item {
 
-   public ItemMonsterPlacer(int var1) {
-      super(var1);
+   public ItemMonsterPlacer(int i) {
+      super(i);
       this.setHasSubtypes(true);
       this.setCreativeTab(CreativeTabs.tabMisc);
    }
 
-   public String getItemDisplayName(ItemStack var1) {
-      String var2 = ("" + StatCollector.translateToLocal(this.getItemName() + ".name")).trim();
-      String var3 = EntityList.getStringFromID(var1.getItemDamage());
-      if(var3 != null) {
-         var2 = var2 + " " + StatCollector.translateToLocal("entity." + var3 + ".name");
+   public String getItemDisplayName(ItemStack itemstack) {
+      String s = ("" + StatCollector.translateToLocal(this.getItemName() + ".name")).trim();
+      String s1 = EntityList.getStringFromID(itemstack.getItemDamage());
+      if(s1 != null) {
+         s = s + " " + StatCollector.translateToLocal("entity." + s1 + ".name");
       }
 
-      return var2;
+      return s;
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var3.isRemote) {
-         return true;
-      } else {
-         int var11 = var3.getBlockId(var4, var5, var6);
-         var4 += Facing.offsetsXForSide[var7];
-         var5 += Facing.offsetsYForSide[var7];
-         var6 += Facing.offsetsZForSide[var7];
-         double var12 = 0.0D;
-         if(var7 == 1 && Block.blocksList[var11] != null && Block.blocksList[var11].getRenderType() == 11) {
-            var12 = 0.5D;
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(!world.isRemote && itemstack.getItemDamage() != 48 && itemstack.getItemDamage() != 49 && itemstack.getItemDamage() != 63 && itemstack.getItemDamage() != 64) {
+         int i1 = world.getBlockId(i, j, k);
+         i += Facing.offsetsXForSide[l];
+         j += Facing.offsetsYForSide[l];
+         k += Facing.offsetsZForSide[l];
+         double d0 = 0.0D;
+         if(l == 1 && Block.blocksList[i1] != null && Block.blocksList[i1].getRenderType() == 11) {
+            d0 = 0.5D;
          }
 
-         if(spawnCreature(var3, var1.getItemDamage(), (double)var4 + 0.5D, (double)var5 + var12, (double)var6 + 0.5D) != null && !var2.capabilities.isCreativeMode) {
-            --var1.stackSize;
+         if(spawnCreature(world, itemstack.getItemDamage(), (double)i + 0.5D, (double)j + d0, (double)k + 0.5D) != null && !entityhuman.capabilities.isCreativeMode) {
+            --itemstack.stackSize;
          }
 
          return true;
+      } else {
+         return true;
       }
    }
 
-   public static Entity spawnCreature(World var0, int var1, double var2, double var4, double var6) {
-      if(!EntityList.entityEggs.containsKey(Integer.valueOf(var1))) {
+   public static Entity spawnCreature(World world, int i, double d0, double d1, double d2) {
+      if(!EntityList.entityEggs.containsKey(Integer.valueOf(i))) {
          return null;
       } else {
-         Entity var8 = null;
+         Entity entity = null;
 
-         for(int var9 = 0; var9 < 1; ++var9) {
-            var8 = EntityList.createEntityByID(var1, var0);
-            if(var8 != null) {
-               var8.setLocationAndAngles(var2, var4, var6, var0.rand.nextFloat() * 360.0F, 0.0F);
-               ((EntityLiving)var8).initCreature();
-               var0.spawnEntityInWorld(var8);
-               ((EntityLiving)var8).playLivingSound();
+         for(int j = 0; j < 1; ++j) {
+            entity = EntityList.createEntityByID(i, world);
+            if(entity != null && entity instanceof EntityLiving) {
+               entity.setLocationAndAngles(d0, d1, d2, world.rand.nextFloat() * 360.0F, 0.0F);
+               ((EntityLiving)entity).initCreature();
+               world.addEntity(entity, SpawnReason.SPAWNER_EGG);
+               ((EntityLiving)entity).playLivingSound();
             }
          }
 
-         return var8;
+         return entity;
       }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ItemRedstone.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemRedstone.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemRedstone.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemRedstone.java
--- mcp-mcdev/net/minecraft/src/ItemRedstone.java	2012-11-29 21:14:47.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemRedstone.java	2012-11-29 20:43:59.000000000 -0800
@@ -6,51 +6,67 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemRedstone extends Item {
 
-   public ItemRedstone(int var1) {
-      super(var1);
+   public ItemRedstone(int i) {
+      super(i);
       this.setCreativeTab(CreativeTabs.tabRedstone);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var3.getBlockId(var4, var5, var6) != Block.snow.blockID) {
-         if(var7 == 0) {
-            --var5;
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      int clickedX = i;
+      int clickedY = j;
+      int clickedZ = k;
+      if(world.getBlockId(i, j, k) != Block.snow.blockID) {
+         if(l == 0) {
+            --j;
          }
 
-         if(var7 == 1) {
-            ++var5;
+         if(l == 1) {
+            ++j;
          }
 
-         if(var7 == 2) {
-            --var6;
+         if(l == 2) {
+            --k;
          }
 
-         if(var7 == 3) {
-            ++var6;
+         if(l == 3) {
+            ++k;
          }
 
-         if(var7 == 4) {
-            --var4;
+         if(l == 4) {
+            --i;
          }
 
-         if(var7 == 5) {
-            ++var4;
+         if(l == 5) {
+            ++i;
          }
 
-         if(!var3.isAirBlock(var4, var5, var6)) {
+         if(!world.isAirBlock(i, j, k)) {
             return false;
          }
       }
 
-      if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+      if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
          return false;
       } else {
-         if(Block.redstoneWire.canPlaceBlockAt(var3, var4, var5, var6)) {
-            --var1.stackSize;
-            var3.setBlockWithNotify(var4, var5, var6, Block.redstoneWire.blockID);
+         if(Block.redstoneWire.canPlaceBlockAt(world, i, j, k)) {
+            CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j, k);
+            world.editingBlocks = true;
+            world.setBlock(i, j, k, Block.redstoneWire.blockID);
+            BlockPlaceEvent event = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, clickedX, clickedY, clickedZ);
+            blockState.update(true);
+            world.editingBlocks = false;
+            if(event.isCancelled() || !event.canBuild()) {
+               return false;
+            }
+
+            --itemstack.stackSize;
+            world.setBlockWithNotify(i, j, k, Block.redstoneWire.blockID);
          }
 
          return true;
Binary files mcp-mcdev/net/minecraft/src/ItemReed.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemReed.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemReed.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemReed.java
--- mcp-mcdev/net/minecraft/src/ItemReed.java	2012-11-29 21:14:47.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemReed.java	2012-11-29 20:43:59.000000000 -0800
@@ -6,63 +6,77 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemReed extends Item {
 
    private int spawnID;
 
 
-   public ItemReed(int var1, Block var2) {
-      super(var1);
-      this.spawnID = var2.blockID;
+   public ItemReed(int i, Block block) {
+      super(i);
+      this.spawnID = block.blockID;
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      int var11 = var3.getBlockId(var4, var5, var6);
-      if(var11 == Block.snow.blockID) {
-         var7 = 1;
-      } else if(var11 != Block.vine.blockID && var11 != Block.tallGrass.blockID && var11 != Block.deadBush.blockID) {
-         if(var7 == 0) {
-            --var5;
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      int clickedX = i;
+      int clickedY = j;
+      int clickedZ = k;
+      int i1 = world.getBlockId(i, j, k);
+      if(i1 == Block.snow.blockID) {
+         l = 1;
+      } else if(i1 != Block.vine.blockID && i1 != Block.tallGrass.blockID && i1 != Block.deadBush.blockID) {
+         if(l == 0) {
+            --j;
          }
 
-         if(var7 == 1) {
-            ++var5;
+         if(l == 1) {
+            ++j;
          }
 
-         if(var7 == 2) {
-            --var6;
+         if(l == 2) {
+            --k;
          }
 
-         if(var7 == 3) {
-            ++var6;
+         if(l == 3) {
+            ++k;
          }
 
-         if(var7 == 4) {
-            --var4;
+         if(l == 4) {
+            --i;
          }
 
-         if(var7 == 5) {
-            ++var4;
+         if(l == 5) {
+            ++i;
          }
       }
 
-      if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+      if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
          return false;
-      } else if(var1.stackSize == 0) {
+      } else if(itemstack.stackSize == 0) {
          return false;
       } else {
-         if(var3.canPlaceEntityOnSide(this.spawnID, var4, var5, var6, false, var7, (Entity)null)) {
-            Block var12 = Block.blocksList[this.spawnID];
-            int var13 = var12.func_85104_a(var3, var4, var5, var6, var7, var8, var9, var10, 0);
-            if(var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.spawnID, var13)) {
-               if(var3.getBlockId(var4, var5, var6) == this.spawnID) {
-                  Block.blocksList[this.spawnID].onBlockPlacedBy(var3, var4, var5, var6, var2);
-                  Block.blocksList[this.spawnID].func_85105_g(var3, var4, var5, var6, var13);
+         if(world.canPlaceEntityOnSide(this.spawnID, i, j, k, false, l, (Entity)null)) {
+            Block block = Block.blocksList[this.spawnID];
+            int j1 = block.func_85104_a(world, i, j, k, l, f, f1, f2, 0);
+            CraftBlockState replacedBlockState = CraftBlockState.getBlockState(world, i, j, k);
+            if(world.setBlockAndMetadata(i, j, k, this.spawnID, j1)) {
+               BlockPlaceEvent event = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, replacedBlockState, clickedX, clickedY, clickedZ);
+               if(event.isCancelled() || !event.canBuild()) {
+                  world.setBlockAndMetadataWithNotify(i, j, k, replacedBlockState.getTypeId(), replacedBlockState.getRawData());
+                  return true;
                }
 
-               var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), var12.stepSound.getPlaceSound(), (var12.stepSound.getVolume() + 1.0F) / 2.0F, var12.stepSound.getPitch() * 0.8F);
-               --var1.stackSize;
+               world.notifyBlockChange(i, j, k, this.spawnID);
+               if(world.getBlockId(i, j, k) == this.spawnID) {
+                  Block.blocksList[this.spawnID].onBlockPlacedBy(world, i, j, k, entityhuman);
+                  Block.blocksList[this.spawnID].func_85105_g(world, i, j, k, j1);
+               }
+
+               world.playSoundEffect((double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), block.stepSound.getPlaceSound(), (block.stepSound.getVolume() + 1.0F) / 2.0F, block.stepSound.getPitch() * 0.8F);
+               --itemstack.stackSize;
             }
          }
 
Binary files mcp-mcdev/net/minecraft/src/ItemSeedFood.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSeedFood.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemSeedFood.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSeedFood.java
--- mcp-mcdev/net/minecraft/src/ItemSeedFood.java	2012-11-29 21:14:47.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSeedFood.java	2012-11-29 20:43:59.000000000 -0800
@@ -4,6 +4,9 @@
 import net.minecraft.src.ItemFood;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemSeedFood extends ItemFood {
 
@@ -11,21 +14,28 @@
    private int soilId;
 
 
-   public ItemSeedFood(int var1, int var2, float var3, int var4, int var5) {
-      super(var1, var2, var3, false);
-      this.cropId = var4;
-      this.soilId = var5;
+   public ItemSeedFood(int i, int j, float f, int k, int l) {
+      super(i, j, f, false);
+      this.cropId = k;
+      this.soilId = l;
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var7 != 1) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(l != 1) {
          return false;
-      } else if(var2.canPlayerEdit(var4, var5, var6, var7, var1) && var2.canPlayerEdit(var4, var5 + 1, var6, var7, var1)) {
-         int var11 = var3.getBlockId(var4, var5, var6);
-         if(var11 == this.soilId && var3.isAirBlock(var4, var5 + 1, var6)) {
-            var3.setBlockWithNotify(var4, var5 + 1, var6, this.cropId);
-            --var1.stackSize;
-            return true;
+      } else if(entityhuman.canPlayerEdit(i, j, k, l, itemstack) && entityhuman.canPlayerEdit(i, j + 1, k, l, itemstack)) {
+         int i1 = world.getBlockId(i, j, k);
+         if(i1 == this.soilId && world.isAirBlock(i, j + 1, k)) {
+            CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j + 1, k);
+            world.setBlockWithNotify(i, j + 1, k, this.cropId);
+            BlockPlaceEvent event = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, i, j, k);
+            if(!event.isCancelled() && event.canBuild()) {
+               --itemstack.stackSize;
+               return true;
+            } else {
+               event.getBlockPlaced().setTypeId(0);
+               return false;
+            }
          } else {
             return false;
          }
Binary files mcp-mcdev/net/minecraft/src/ItemSeeds.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSeeds.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemSeeds.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSeeds.java
--- mcp-mcdev/net/minecraft/src/ItemSeeds.java	2012-11-29 21:14:47.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSeeds.java	2012-11-29 20:43:59.000000000 -0800
@@ -5,6 +5,9 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemSeeds extends Item {
 
@@ -12,22 +15,29 @@
    private int soilBlockID;
 
 
-   public ItemSeeds(int var1, int var2, int var3) {
-      super(var1);
-      this.blockType = var2;
-      this.soilBlockID = var3;
+   public ItemSeeds(int i, int j, int k) {
+      super(i);
+      this.blockType = j;
+      this.soilBlockID = k;
       this.setCreativeTab(CreativeTabs.tabMaterials);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var7 != 1) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(l != 1) {
          return false;
-      } else if(var2.canPlayerEdit(var4, var5, var6, var7, var1) && var2.canPlayerEdit(var4, var5 + 1, var6, var7, var1)) {
-         int var11 = var3.getBlockId(var4, var5, var6);
-         if(var11 == this.soilBlockID && var3.isAirBlock(var4, var5 + 1, var6)) {
-            var3.setBlockWithNotify(var4, var5 + 1, var6, this.blockType);
-            --var1.stackSize;
-            return true;
+      } else if(entityhuman.isWithinHomeDistance(i, j, k) && entityhuman.isWithinHomeDistance(i, j + 1, k)) {
+         int i1 = world.getBlockId(i, j, k);
+         if(i1 == this.soilBlockID && world.isAirBlock(i, j + 1, k)) {
+            CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j + 1, k);
+            world.setBlockWithNotify(i, j + 1, k, this.blockType);
+            BlockPlaceEvent event = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, i, j, k);
+            if(!event.isCancelled() && event.canBuild()) {
+               --itemstack.stackSize;
+               return true;
+            } else {
+               event.getBlockPlaced().setTypeId(0);
+               return false;
+            }
          } else {
             return false;
          }
Binary files mcp-mcdev/net/minecraft/src/ItemSign.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSign.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemSign.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSign.java
--- mcp-mcdev/net/minecraft/src/ItemSign.java	2012-11-29 21:14:47.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSign.java	2012-11-29 20:43:59.000000000 -0800
@@ -8,60 +8,73 @@
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.TileEntitySign;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemSign extends Item {
 
-   public ItemSign(int var1) {
-      super(var1);
+   public ItemSign(int i) {
+      super(i);
       this.maxStackSize = 16;
       this.setCreativeTab(CreativeTabs.tabDecorations);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var7 == 0) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(l == 0) {
          return false;
-      } else if(!var3.getBlockMaterial(var4, var5, var6).isSolid()) {
+      } else if(!world.getBlockMaterial(i, j, k).isSolid()) {
          return false;
       } else {
-         if(var7 == 1) {
-            ++var5;
+         int clickedX = i;
+         int clickedY = j;
+         int clickedZ = k;
+         if(l == 1) {
+            ++j;
          }
 
-         if(var7 == 2) {
-            --var6;
+         if(l == 2) {
+            --k;
          }
 
-         if(var7 == 3) {
-            ++var6;
+         if(l == 3) {
+            ++k;
          }
 
-         if(var7 == 4) {
-            --var4;
+         if(l == 4) {
+            --i;
          }
 
-         if(var7 == 5) {
-            ++var4;
+         if(l == 5) {
+            ++i;
          }
 
-         if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+         if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
             return false;
-         } else if(!Block.signPost.canPlaceBlockAt(var3, var4, var5, var6)) {
+         } else if(!Block.signPost.canPlaceBlockAt(world, i, j, k)) {
             return false;
          } else {
-            if(var7 == 1) {
-               int var11 = MathHelper.floor_double((double)((var2.rotationYaw + 180.0F) * 16.0F / 360.0F) + 0.5D) & 15;
-               var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.signPost.blockID, var11);
+            CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j, k);
+            if(l == 1) {
+               int event = MathHelper.floor_double((double)((entityhuman.rotationYaw + 180.0F) * 16.0F / 360.0F) + 0.5D) & 15;
+               world.setBlockAndMetadataWithNotify(i, j, k, Block.signPost.blockID, event);
             } else {
-               var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.signWall.blockID, var7);
+               world.setBlockAndMetadataWithNotify(i, j, k, Block.signWall.blockID, l);
             }
 
-            --var1.stackSize;
-            TileEntitySign var12 = (TileEntitySign)var3.getBlockTileEntity(var4, var5, var6);
-            if(var12 != null) {
-               var2.displayGUIEditSign(var12);
-            }
+            BlockPlaceEvent var17 = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, clickedX, clickedY, clickedZ);
+            if(!var17.isCancelled() && var17.canBuild()) {
+               --itemstack.stackSize;
+               TileEntitySign tileentitysign = (TileEntitySign)world.getBlockTileEntity(i, j, k);
+               if(tileentitysign != null) {
+                  entityhuman.displayGUIEditSign(tileentitysign);
+               }
 
-            return true;
+               return true;
+            } else {
+               var17.getBlockPlaced().setTypeIdAndData(blockState.getTypeId(), blockState.getRawData(), false);
+               return false;
+            }
          }
       }
    }
Binary files mcp-mcdev/net/minecraft/src/ItemSkull.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSkull.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemSkull.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSkull.java
--- mcp-mcdev/net/minecraft/src/ItemSkull.java	2012-11-29 21:14:47.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSkull.java	2012-11-29 20:43:59.000000000 -0800
@@ -11,6 +11,9 @@
 import net.minecraft.src.TileEntity;
 import net.minecraft.src.TileEntitySkull;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockPlaceEvent;
 
 public class ItemSkull extends Item {
 
@@ -18,83 +21,93 @@
    private static final int[] field_82806_b = new int[]{224, 225, 226, 227, 228};
 
 
-   public ItemSkull(int var1) {
-      super(var1);
+   public ItemSkull(int i) {
+      super(i);
       this.setCreativeTab(CreativeTabs.tabDecorations);
       this.setMaxDamage(0);
       this.setHasSubtypes(true);
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-      if(var7 == 0) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      if(l == 0) {
          return false;
-      } else if(!var3.getBlockMaterial(var4, var5, var6).isSolid()) {
+      } else if(!world.getBlockMaterial(i, j, k).isSolid()) {
          return false;
       } else {
-         if(var7 == 1) {
-            ++var5;
+         int clickedX = i;
+         int clickedY = j;
+         int clickedZ = k;
+         if(l == 1) {
+            ++j;
          }
 
-         if(var7 == 2) {
-            --var6;
+         if(l == 2) {
+            --k;
          }
 
-         if(var7 == 3) {
-            ++var6;
+         if(l == 3) {
+            ++k;
          }
 
-         if(var7 == 4) {
-            --var4;
+         if(l == 4) {
+            --i;
          }
 
-         if(var7 == 5) {
-            ++var4;
+         if(l == 5) {
+            ++i;
          }
 
-         if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+         if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
             return false;
-         } else if(!Block.skull.canPlaceBlockAt(var3, var4, var5, var6)) {
+         } else if(!Block.skull.canPlaceBlockAt(world, i, j, k)) {
             return false;
          } else {
-            var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.skull.blockID, var7);
-            int var11 = 0;
-            if(var7 == 1) {
-               var11 = MathHelper.floor_double((double)(var2.rotationYaw * 16.0F / 360.0F) + 0.5D) & 15;
+            CraftBlockState blockState = CraftBlockState.getBlockState(world, i, j, k);
+            world.setBlockAndMetadataWithNotify(i, j, k, Block.skull.blockID, l);
+            int i1 = 0;
+            if(l == 1) {
+               i1 = MathHelper.floor_double((double)(entityhuman.rotationYaw * 16.0F / 360.0F) + 0.5D) & 15;
             }
 
-            TileEntity var12 = var3.getBlockTileEntity(var4, var5, var6);
-            if(var12 != null && var12 instanceof TileEntitySkull) {
-               String var13 = "";
-               if(var1.hasTagCompound() && var1.getTagCompound().hasKey("SkullOwner")) {
-                  var13 = var1.getTagCompound().getString("SkullOwner");
+            TileEntity tileentity = world.getBlockTileEntity(i, j, k);
+            if(tileentity != null && tileentity instanceof TileEntitySkull) {
+               String event = "";
+               if(itemstack.hasTagCompound() && itemstack.getTagCompound().hasKey("SkullOwner")) {
+                  event = itemstack.getTagCompound().getString("SkullOwner");
                }
 
-               ((TileEntitySkull)var12).func_82118_a(var1.getItemDamage(), var13);
-               ((TileEntitySkull)var12).func_82116_a(var11);
-               ((BlockSkull)Block.skull).makeWither(var3, var4, var5, var6, (TileEntitySkull)var12);
+               ((TileEntitySkull)tileentity).func_82118_a(itemstack.getItemDamage(), event);
+               ((TileEntitySkull)tileentity).func_82116_a(i1);
+               ((BlockSkull)Block.skull).makeWither(world, i, j, k, (TileEntitySkull)tileentity);
             }
 
-            --var1.stackSize;
-            return true;
+            BlockPlaceEvent var18 = CraftEventFactory.callBlockPlaceEvent(world, entityhuman, blockState, clickedX, clickedY, clickedZ);
+            if(!var18.isCancelled() && var18.canBuild()) {
+               --itemstack.stackSize;
+               return true;
+            } else {
+               var18.getBlockPlaced().setTypeIdAndData(blockState.getTypeId(), blockState.getRawData(), false);
+               return false;
+            }
          }
       }
    }
 
-   public int getMetadata(int var1) {
-      return var1;
+   public int getMetadata(int i) {
+      return i;
    }
 
-   public String getItemNameIS(ItemStack var1) {
-      int var2 = var1.getItemDamage();
-      if(var2 < 0 || var2 >= skullTypes.length) {
-         var2 = 0;
+   public String getItemNameIS(ItemStack itemstack) {
+      int i = itemstack.getItemDamage();
+      if(i < 0 || i >= skullTypes.length) {
+         i = 0;
       }
 
-      return super.getItemName() + "." + skullTypes[var2];
+      return super.getItemName() + "." + skullTypes[i];
    }
 
-   public String getItemDisplayName(ItemStack var1) {
-      return var1.getItemDamage() == 3 && var1.hasTagCompound() && var1.getTagCompound().hasKey("SkullOwner")?StatCollector.translateToLocalFormatted("item.skull.player.name", new Object[]{var1.getTagCompound().getString("SkullOwner")}):super.getItemDisplayName(var1);
+   public String getItemDisplayName(ItemStack itemstack) {
+      return itemstack.getItemDamage() == 3 && itemstack.hasTagCompound() && itemstack.getTagCompound().hasKey("SkullOwner")?StatCollector.translateToLocalFormatted("item.skull.player.name", new Object[]{itemstack.getTagCompound().getString("SkullOwner")}):super.getItemDisplayName(itemstack);
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/ItemSlab.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSlab.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemSlab.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSlab.java
--- mcp-mcdev/net/minecraft/src/ItemSlab.java	2012-11-29 21:14:47.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemSlab.java	2012-11-29 20:43:58.000000000 -0800
@@ -13,80 +13,71 @@
    private final BlockHalfSlab theHalfSlab2;
 
 
-   public ItemSlab(int var1, BlockHalfSlab var2, BlockHalfSlab var3, boolean var4) {
-      super(var1);
-      this.theHalfSlab = var2;
-      this.theHalfSlab2 = var3;
-      this.isFullBlock = var4;
+   public ItemSlab(int i, BlockHalfSlab blockstepabstract, BlockHalfSlab blockstepabstract1, boolean flag) {
+      super(i);
+      this.theHalfSlab = blockstepabstract;
+      this.theHalfSlab2 = blockstepabstract1;
+      this.isFullBlock = flag;
       this.setMaxDamage(0);
       this.setHasSubtypes(true);
    }
 
-   public int getMetadata(int var1) {
-      return var1;
+   public int getMetadata(int i) {
+      return i;
    }
 
-   public String getItemNameIS(ItemStack var1) {
-      return this.theHalfSlab.getFullSlabName(var1.getItemDamage());
+   public String getItemNameIS(ItemStack itemstack) {
+      return this.theHalfSlab.getFullSlabName(itemstack.getItemDamage());
    }
 
-   public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
+   public boolean onItemUse(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
       if(this.isFullBlock) {
-         return super.onItemUse(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
-      } else if(var1.stackSize == 0) {
+         return super.onItemUse(itemstack, entityhuman, world, i, j, k, l, f, f1, f2);
+      } else if(itemstack.stackSize == 0) {
          return false;
-      } else if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+      } else if(!entityhuman.canPlayerEdit(i, j, k, l, itemstack)) {
          return false;
       } else {
-         int var11 = var3.getBlockId(var4, var5, var6);
-         int var12 = var3.getBlockMetadata(var4, var5, var6);
-         int var13 = var12 & 7;
-         boolean var14 = (var12 & 8) != 0;
-         if((var7 == 1 && !var14 || var7 == 0 && var14) && var11 == this.theHalfSlab.blockID && var13 == var1.getItemDamage()) {
-            if(var3.checkIfAABBIsClear(this.theHalfSlab2.getCollisionBoundingBoxFromPool(var3, var4, var5, var6)) && var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.theHalfSlab2.blockID, var13)) {
-               var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.theHalfSlab2.stepSound.getPlaceSound(), (this.theHalfSlab2.stepSound.getVolume() + 1.0F) / 2.0F, this.theHalfSlab2.stepSound.getPitch() * 0.8F);
-               --var1.stackSize;
-            }
-
-            return true;
-         } else {
-            return this.func_77888_a(var1, var2, var3, var4, var5, var6, var7)?true:super.onItemUse(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
-         }
+         int i1 = world.getBlockId(i, j, k);
+         int j1 = world.getBlockMetadata(i, j, k);
+         int k1 = j1 & 7;
+         boolean flag = (j1 & 8) != 0;
+         return (l == 1 && !flag || l == 0 && flag) && i1 == this.theHalfSlab.blockID && k1 == itemstack.getItemDamage()?super.onItemUse(itemstack, entityhuman, world, i, j, k, -1, f, f1, f2):(this.func_77888_a(itemstack, entityhuman, world, i, j, k, l)?true:super.onItemUse(itemstack, entityhuman, world, i, j, k, l, f, f1, f2));
       }
    }
 
-   private boolean func_77888_a(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
-      if(var7 == 0) {
-         --var5;
+   private boolean func_77888_a(ItemStack itemstack, EntityPlayer entityhuman, World world, int i, int j, int k, int l) {
+      if(l == 0) {
+         --j;
       }
 
-      if(var7 == 1) {
-         ++var5;
+      if(l == 1) {
+         ++j;
       }
 
-      if(var7 == 2) {
-         --var6;
+      if(l == 2) {
+         --k;
       }
 
-      if(var7 == 3) {
-         ++var6;
+      if(l == 3) {
+         ++k;
       }
 
-      if(var7 == 4) {
-         --var4;
+      if(l == 4) {
+         --i;
       }
 
-      if(var7 == 5) {
-         ++var4;
+      if(l == 5) {
+         ++i;
       }
 
-      int var8 = var3.getBlockId(var4, var5, var6);
-      int var9 = var3.getBlockMetadata(var4, var5, var6);
-      int var10 = var9 & 7;
-      if(var8 == this.theHalfSlab.blockID && var10 == var1.getItemDamage()) {
-         if(var3.checkIfAABBIsClear(this.theHalfSlab2.getCollisionBoundingBoxFromPool(var3, var4, var5, var6)) && var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.theHalfSlab2.blockID, var10)) {
-            var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.theHalfSlab2.stepSound.getPlaceSound(), (this.theHalfSlab2.stepSound.getVolume() + 1.0F) / 2.0F, this.theHalfSlab2.stepSound.getPitch() * 0.8F);
-            --var1.stackSize;
+      int i1 = world.getBlockId(i, j, k);
+      int j1 = world.getBlockMetadata(i, j, k);
+      int k1 = j1 & 7;
+      if(i1 == this.theHalfSlab.blockID && k1 == itemstack.getItemDamage()) {
+         if(world.checkIfAABBIsClear(this.theHalfSlab2.getCollisionBoundingBoxFromPool(world, i, j, k)) && world.setBlockAndMetadataWithNotify(i, j, k, this.theHalfSlab2.blockID, k1)) {
+            world.playSoundEffect((double)((float)i + 0.5F), (double)((float)j + 0.5F), (double)((float)k + 0.5F), this.theHalfSlab2.stepSound.getPlaceSound(), (this.theHalfSlab2.stepSound.getVolume() + 1.0F) / 2.0F, this.theHalfSlab2.stepSound.getPitch() * 0.8F);
+            --itemstack.stackSize;
          }
 
          return true;
Binary files mcp-mcdev/net/minecraft/src/ItemStack.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemStack.class differ
diff -ur mcp-mcdev/net/minecraft/src/ItemStack.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemStack.java
--- mcp-mcdev/net/minecraft/src/ItemStack.java	2012-11-29 21:14:47.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ItemStack.java	2012-11-29 20:43:58.000000000 -0800
@@ -14,6 +14,7 @@
 import net.minecraft.src.NBTTagList;
 import net.minecraft.src.StatList;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
 public final class ItemStack {
 
@@ -25,42 +26,54 @@
    private EntityItemFrame itemFrame;
 
 
-   public ItemStack(Block var1) {
-      this(var1, 1);
+   public ItemStack(Block block) {
+      this(block, 1);
    }
 
-   public ItemStack(Block var1, int var2) {
-      this(var1.blockID, var2, 0);
+   public ItemStack(Block block, int i) {
+      this(block.blockID, i, 0);
    }
 
-   public ItemStack(Block var1, int var2, int var3) {
-      this(var1.blockID, var2, var3);
+   public ItemStack(Block block, int i, int j) {
+      this(block.blockID, i, j);
    }
 
-   public ItemStack(Item var1) {
-      this(var1.shiftedIndex, 1, 0);
+   public ItemStack(Item item) {
+      this(item.shiftedIndex, 1, 0);
    }
 
-   public ItemStack(Item var1, int var2) {
-      this(var1.shiftedIndex, var2, 0);
+   public ItemStack(Item item, int i) {
+      this(item.shiftedIndex, i, 0);
    }
 
-   public ItemStack(Item var1, int var2, int var3) {
-      this(var1.shiftedIndex, var2, var3);
+   public ItemStack(Item item, int i, int j) {
+      this(item.shiftedIndex, i, j);
    }
 
-   public ItemStack(int var1, int var2, int var3) {
+   public ItemStack(int i, int j, int k) {
       this.stackSize = 0;
       this.itemFrame = null;
-      this.itemID = var1;
-      this.stackSize = var2;
-      this.itemDamage = var3;
+      this.itemID = i;
+      this.stackSize = j;
+      this.setItemDamage(k);
    }
 
-   public static ItemStack loadItemStackFromNBT(NBTTagCompound var0) {
-      ItemStack var1 = new ItemStack();
-      var1.readFromNBT(var0);
-      return var1.getItem() != null?var1:null;
+   public ItemStack(int id, int count, int data, NBTTagList enchantments) {
+      this(id, count, data);
+      if(enchantments != null && Item.itemsList[this.itemID].getItemStackLimit() == 1) {
+         if(this.stackTagCompound == null) {
+            this.setTagCompound(new NBTTagCompound());
+         }
+
+         this.stackTagCompound.setTag("ench", enchantments.copy());
+      }
+
+   }
+
+   public static ItemStack loadItemStackFromNBT(NBTTagCompound nbttagcompound) {
+      ItemStack itemstack = new ItemStack();
+      itemstack.readFromNBT(nbttagcompound);
+      return itemstack.getItem() != null?itemstack:null;
    }
 
    private ItemStack() {
@@ -68,58 +81,58 @@
       this.itemFrame = null;
    }
 
-   public ItemStack splitStack(int var1) {
-      ItemStack var2 = new ItemStack(this.itemID, var1, this.itemDamage);
+   public ItemStack splitStack(int i) {
+      ItemStack itemstack = new ItemStack(this.itemID, i, this.itemDamage);
       if(this.stackTagCompound != null) {
-         var2.stackTagCompound = (NBTTagCompound)this.stackTagCompound.copy();
+         itemstack.stackTagCompound = (NBTTagCompound)this.stackTagCompound.copy();
       }
 
-      this.stackSize -= var1;
-      return var2;
+      this.stackSize -= i;
+      return itemstack;
    }
 
    public Item getItem() {
       return Item.itemsList[this.itemID];
    }
 
-   public boolean tryPlaceItemIntoWorld(EntityPlayer var1, World var2, int var3, int var4, int var5, int var6, float var7, float var8, float var9) {
-      boolean var10 = this.getItem().onItemUse(this, var1, var2, var3, var4, var5, var6, var7, var8, var9);
-      if(var10) {
-         var1.addStat(StatList.objectUseStats[this.itemID], 1);
+   public boolean tryPlaceItemIntoWorld(EntityPlayer entityhuman, World world, int i, int j, int k, int l, float f, float f1, float f2) {
+      boolean flag = this.getItem().onItemUse(this, entityhuman, world, i, j, k, l, f, f1, f2);
+      if(flag) {
+         entityhuman.addStat(StatList.objectUseStats[this.itemID], 1);
       }
 
-      return var10;
+      return flag;
    }
 
-   public float getStrVsBlock(Block var1) {
-      return this.getItem().getStrVsBlock(this, var1);
+   public float getStrVsBlock(Block block) {
+      return this.getItem().getStrVsBlock(this, block);
    }
 
-   public ItemStack useItemRightClick(World var1, EntityPlayer var2) {
-      return this.getItem().onItemRightClick(this, var1, var2);
+   public ItemStack useItemRightClick(World world, EntityPlayer entityhuman) {
+      return this.getItem().onItemRightClick(this, world, entityhuman);
    }
 
-   public ItemStack onFoodEaten(World var1, EntityPlayer var2) {
-      return this.getItem().onFoodEaten(this, var1, var2);
+   public ItemStack onFoodEaten(World world, EntityPlayer entityhuman) {
+      return this.getItem().onFoodEaten(this, world, entityhuman);
    }
 
-   public NBTTagCompound writeToNBT(NBTTagCompound var1) {
-      var1.setShort("id", (short)this.itemID);
-      var1.setByte("Count", (byte)this.stackSize);
-      var1.setShort("Damage", (short)this.itemDamage);
+   public NBTTagCompound writeToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setShort("id", (short)this.itemID);
+      nbttagcompound.setByte("Count", (byte)this.stackSize);
+      nbttagcompound.setShort("Damage", (short)this.itemDamage);
       if(this.stackTagCompound != null) {
-         var1.setTag("tag", this.stackTagCompound);
+         nbttagcompound.setTag("tag", this.stackTagCompound);
       }
 
-      return var1;
+      return nbttagcompound;
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      this.itemID = var1.getShort("id");
-      this.stackSize = var1.getByte("Count");
-      this.itemDamage = var1.getShort("Damage");
-      if(var1.hasKey("tag")) {
-         this.stackTagCompound = var1.getCompoundTag("tag");
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      this.itemID = nbttagcompound.getShort("id");
+      this.stackSize = nbttagcompound.getByte("Count");
+      this.itemDamage = nbttagcompound.getShort("Damage");
+      if(nbttagcompound.hasKey("tag")) {
+         this.stackTagCompound = nbttagcompound.getCompoundTag("tag");
       }
 
    }
@@ -152,31 +165,31 @@
       return this.itemDamage;
    }
 
-   public void setItemDamage(int var1) {
-      this.itemDamage = var1;
+   public void setItemDamage(int i) {
+      this.itemDamage = this.itemID > 0 && this.itemID < 256 && this.itemID != Block.anvil.blockID?Item.itemsList[this.itemID].getMetadata(i):i;
    }
 
    public int getMaxDamage() {
       return Item.itemsList[this.itemID].getMaxDamage();
    }
 
-   public void damageItem(int var1, EntityLiving var2) {
+   public void damageItem(int i, EntityLiving entityliving) {
       if(this.isItemStackDamageable()) {
-         if(var1 > 0 && var2 instanceof EntityPlayer) {
-            int var3 = EnchantmentHelper.getUnbreakingModifier(var2);
-            if(var3 > 0 && var2.worldObj.rand.nextInt(var3 + 1) > 0) {
+         if(i > 0 && entityliving instanceof EntityPlayer) {
+            int j = EnchantmentHelper.getUnbreakingModifier(entityliving);
+            if(j > 0 && entityliving.worldObj.rand.nextInt(j + 1) > 0) {
                return;
             }
          }
 
-         if(!(var2 instanceof EntityPlayer) || !((EntityPlayer)var2).capabilities.isCreativeMode) {
-            this.itemDamage += var1;
+         if(!(entityliving instanceof EntityPlayer) || !((EntityPlayer)entityliving).capabilities.isCreativeMode) {
+            this.itemDamage += i;
          }
 
          if(this.itemDamage > this.getMaxDamage()) {
-            var2.renderBrokenItemStack(this);
-            if(var2 instanceof EntityPlayer) {
-               ((EntityPlayer)var2).addStat(StatList.objectBreakStats[this.itemID], 1);
+            entityliving.renderBrokenItemStack(this);
+            if(entityliving instanceof EntityPlayer) {
+               ((EntityPlayer)entityliving).addStat(StatList.objectBreakStats[this.itemID], 1);
             }
 
             --this.stackSize;
@@ -184,88 +197,92 @@
                this.stackSize = 0;
             }
 
+            if(this.stackSize == 0 && entityliving instanceof EntityPlayer) {
+               CraftEventFactory.callPlayerItemBreakEvent((EntityPlayer)entityliving, this);
+            }
+
             this.itemDamage = 0;
          }
-
       }
+
    }
 
-   public void hitEntity(EntityLiving var1, EntityPlayer var2) {
-      boolean var3 = Item.itemsList[this.itemID].hitEntity(this, var1, var2);
-      if(var3) {
-         var2.addStat(StatList.objectUseStats[this.itemID], 1);
+   public void hitEntity(EntityLiving entityliving, EntityPlayer entityhuman) {
+      boolean flag = Item.itemsList[this.itemID].hitEntity(this, entityliving, entityhuman);
+      if(flag) {
+         entityhuman.addStat(StatList.objectUseStats[this.itemID], 1);
       }
 
    }
 
-   public void onBlockDestroyed(World var1, int var2, int var3, int var4, int var5, EntityPlayer var6) {
-      boolean var7 = Item.itemsList[this.itemID].onBlockDestroyed(this, var1, var2, var3, var4, var5, var6);
-      if(var7) {
-         var6.addStat(StatList.objectUseStats[this.itemID], 1);
+   public void onBlockDestroyed(World world, int i, int j, int k, int l, EntityPlayer entityhuman) {
+      boolean flag = Item.itemsList[this.itemID].onBlockDestroyed(this, world, i, j, k, l, entityhuman);
+      if(flag) {
+         entityhuman.addStat(StatList.objectUseStats[this.itemID], 1);
       }
 
    }
 
-   public int getDamageVsEntity(Entity var1) {
-      return Item.itemsList[this.itemID].getDamageVsEntity(var1);
+   public int getDamageVsEntity(Entity entity) {
+      return Item.itemsList[this.itemID].getDamageVsEntity(entity);
    }
 
-   public boolean canHarvestBlock(Block var1) {
-      return Item.itemsList[this.itemID].canHarvestBlock(var1);
+   public boolean canHarvestBlock(Block block) {
+      return Item.itemsList[this.itemID].canHarvestBlock(block);
    }
 
-   public boolean interactWith(EntityLiving var1) {
-      return Item.itemsList[this.itemID].useItemOnEntity(this, var1);
+   public boolean interactWith(EntityLiving entityliving) {
+      return Item.itemsList[this.itemID].useItemOnEntity(this, entityliving);
    }
 
    public ItemStack copy() {
-      ItemStack var1 = new ItemStack(this.itemID, this.stackSize, this.itemDamage);
+      ItemStack itemstack = new ItemStack(this.itemID, this.stackSize, this.itemDamage);
       if(this.stackTagCompound != null) {
-         var1.stackTagCompound = (NBTTagCompound)this.stackTagCompound.copy();
+         itemstack.stackTagCompound = (NBTTagCompound)this.stackTagCompound.copy();
       }
 
-      return var1;
+      return itemstack;
    }
 
-   public static boolean areItemStackTagsEqual(ItemStack var0, ItemStack var1) {
-      return var0 == null && var1 == null?true:(var0 != null && var1 != null?(var0.stackTagCompound == null && var1.stackTagCompound != null?false:var0.stackTagCompound == null || var0.stackTagCompound.equals(var1.stackTagCompound)):false);
+   public static boolean areItemStackTagsEqual(ItemStack itemstack, ItemStack itemstack1) {
+      return itemstack == null && itemstack1 == null?true:(itemstack != null && itemstack1 != null?(itemstack.stackTagCompound == null && itemstack1.stackTagCompound != null?false:itemstack.stackTagCompound == null || itemstack.stackTagCompound.equals(itemstack1.stackTagCompound)):false);
    }
 
-   public static boolean areItemStacksEqual(ItemStack var0, ItemStack var1) {
-      return var0 == null && var1 == null?true:(var0 != null && var1 != null?var0.isItemStackEqual(var1):false);
+   public static boolean areItemStacksEqual(ItemStack itemstack, ItemStack itemstack1) {
+      return itemstack == null && itemstack1 == null?true:(itemstack != null && itemstack1 != null?itemstack.isItemStackEqual(itemstack1):false);
    }
 
-   private boolean isItemStackEqual(ItemStack var1) {
-      return this.stackSize != var1.stackSize?false:(this.itemID != var1.itemID?false:(this.itemDamage != var1.itemDamage?false:(this.stackTagCompound == null && var1.stackTagCompound != null?false:this.stackTagCompound == null || this.stackTagCompound.equals(var1.stackTagCompound))));
+   private boolean isItemStackEqual(ItemStack itemstack) {
+      return this.stackSize != itemstack.stackSize?false:(this.itemID != itemstack.itemID?false:(this.itemDamage != itemstack.itemDamage?false:(this.stackTagCompound == null && itemstack.stackTagCompound != null?false:this.stackTagCompound == null || this.stackTagCompound.equals(itemstack.stackTagCompound))));
    }
 
-   public boolean isItemEqual(ItemStack var1) {
-      return this.itemID == var1.itemID && this.itemDamage == var1.itemDamage;
+   public boolean isItemEqual(ItemStack itemstack) {
+      return this.itemID == itemstack.itemID && this.itemDamage == itemstack.itemDamage;
    }
 
    public String getItemName() {
       return Item.itemsList[this.itemID].getItemNameIS(this);
    }
 
-   public static ItemStack copyItemStack(ItemStack var0) {
-      return var0 == null?null:var0.copy();
+   public static ItemStack copyItemStack(ItemStack itemstack) {
+      return itemstack == null?null:itemstack.copy();
    }
 
    public String toString() {
       return this.stackSize + "x" + Item.itemsList[this.itemID].getItemName() + "@" + this.itemDamage;
    }
 
-   public void updateAnimation(World var1, Entity var2, int var3, boolean var4) {
+   public void updateAnimation(World world, Entity entity, int i, boolean flag) {
       if(this.animationsToGo > 0) {
          --this.animationsToGo;
       }
 
-      Item.itemsList[this.itemID].onUpdate(this, var1, var2, var3, var4);
+      Item.itemsList[this.itemID].onUpdate(this, world, entity, i, flag);
    }
 
-   public void onCrafting(World var1, EntityPlayer var2, int var3) {
-      var2.addStat(StatList.objectCraftStats[this.itemID], var3);
-      Item.itemsList[this.itemID].onCreated(this, var1, var2);
+   public void onCrafting(World world, EntityPlayer entityhuman, int i) {
+      entityhuman.addStat(StatList.objectCraftStats[this.itemID], i);
+      Item.itemsList[this.itemID].onCreated(this, world, entityhuman);
    }
 
    public int getMaxItemUseDuration() {
@@ -276,8 +293,8 @@
       return this.getItem().getItemUseAction(this);
    }
 
-   public void onPlayerStoppedUsing(World var1, EntityPlayer var2, int var3) {
-      this.getItem().onPlayerStoppedUsing(this, var1, var2, var3);
+   public void onPlayerStoppedUsing(World world, EntityPlayer entityhuman, int i) {
+      this.getItem().onPlayerStoppedUsing(this, world, entityhuman, i);
    }
 
    public boolean hasTagCompound() {
@@ -292,23 +309,23 @@
       return this.stackTagCompound == null?null:(NBTTagList)this.stackTagCompound.getTag("ench");
    }
 
-   public void setTagCompound(NBTTagCompound var1) {
-      this.stackTagCompound = var1;
+   public void setTagCompound(NBTTagCompound nbttagcompound) {
+      this.stackTagCompound = nbttagcompound;
    }
 
    public String getDisplayName() {
-      String var1 = this.getItem().getItemDisplayName(this);
+      String s = this.getItem().getItemDisplayName(this);
       if(this.stackTagCompound != null && this.stackTagCompound.hasKey("display")) {
-         NBTTagCompound var2 = this.stackTagCompound.getCompoundTag("display");
-         if(var2.hasKey("Name")) {
-            var1 = var2.getString("Name");
+         NBTTagCompound nbttagcompound = this.stackTagCompound.getCompoundTag("display");
+         if(nbttagcompound.hasKey("Name")) {
+            s = nbttagcompound.getString("Name");
          }
       }
 
-      return var1;
+      return s;
    }
 
-   public void setItemName(String var1) {
+   public void setItemName(String s) {
       if(this.stackTagCompound == null) {
          this.stackTagCompound = new NBTTagCompound();
       }
@@ -317,7 +334,7 @@
          this.stackTagCompound.setCompoundTag("display", new NBTTagCompound());
       }
 
-      this.stackTagCompound.getCompoundTag("display").setString("Name", var1);
+      this.stackTagCompound.getCompoundTag("display").setString("Name", s);
    }
 
    public boolean hasDisplayName() {
@@ -328,7 +345,7 @@
       return !this.getItem().isItemTool(this)?false:!this.isItemEnchanted();
    }
 
-   public void addEnchantment(Enchantment var1, int var2) {
+   public void addEnchantment(Enchantment enchantment, int i) {
       if(this.stackTagCompound == null) {
          this.setTagCompound(new NBTTagCompound());
       }
@@ -337,23 +354,23 @@
          this.stackTagCompound.setTag("ench", new NBTTagList("ench"));
       }
 
-      NBTTagList var3 = (NBTTagList)this.stackTagCompound.getTag("ench");
-      NBTTagCompound var4 = new NBTTagCompound();
-      var4.setShort("id", (short)var1.effectId);
-      var4.setShort("lvl", (short)((byte)var2));
-      var3.appendTag(var4);
+      NBTTagList nbttaglist = (NBTTagList)this.stackTagCompound.getTag("ench");
+      NBTTagCompound nbttagcompound = new NBTTagCompound();
+      nbttagcompound.setShort("id", (short)enchantment.effectId);
+      nbttagcompound.setShort("lvl", (short)((byte)i));
+      nbttaglist.appendTag(nbttagcompound);
    }
 
    public boolean isItemEnchanted() {
       return this.stackTagCompound != null && this.stackTagCompound.hasKey("ench");
    }
 
-   public void setTagInfo(String var1, NBTBase var2) {
+   public void setTagInfo(String s, NBTBase nbtbase) {
       if(this.stackTagCompound == null) {
          this.setTagCompound(new NBTTagCompound());
       }
 
-      this.stackTagCompound.setTag(var1, var2);
+      this.stackTagCompound.setTag(s, nbtbase);
    }
 
    public boolean func_82835_x() {
@@ -364,8 +381,8 @@
       return this.itemFrame != null;
    }
 
-   public void setItemFrame(EntityItemFrame var1) {
-      this.itemFrame = var1;
+   public void setItemFrame(EntityItemFrame entityitemframe) {
+      this.itemFrame = entityitemframe;
    }
 
    public EntityItemFrame getItemFrame() {
@@ -376,11 +393,11 @@
       return this.hasTagCompound() && this.stackTagCompound.hasKey("RepairCost")?this.stackTagCompound.getInteger("RepairCost"):0;
    }
 
-   public void setRepairCost(int var1) {
+   public void setRepairCost(int i) {
       if(!this.hasTagCompound()) {
          this.stackTagCompound = new NBTTagCompound();
       }
 
-      this.stackTagCompound.setInteger("RepairCost", var1);
+      this.stackTagCompound.setInteger("RepairCost", i);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/MapData.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/MapData.class differ
diff -ur mcp-mcdev/net/minecraft/src/MapData.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/MapData.java
--- mcp-mcdev/net/minecraft/src/MapData.java	2012-11-29 21:14:46.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/MapData.java	2012-11-29 20:43:57.000000000 -0800
@@ -2,9 +2,11 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.UUID;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.MapCoord;
@@ -12,6 +14,10 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldSavedData;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.map.CraftMapView;
 
 public class MapData extends WorldSavedData {
 
@@ -23,17 +29,35 @@
    public List playersArrayList = new ArrayList();
    private Map playersHashMap = new HashMap();
    public Map playersVisibleOnMap = new LinkedHashMap();
-
-
-   public MapData(String var1) {
-      super(var1);
-   }
-
-   public void readFromNBT(NBTTagCompound var1) {
-      this.dimension = var1.getByte("dimension");
-      this.xCenter = var1.getInteger("xCenter");
-      this.zCenter = var1.getInteger("zCenter");
-      this.scale = var1.getByte("scale");
+   public final CraftMapView mapView = new CraftMapView(this);
+   private CraftServer server = (CraftServer)Bukkit.getServer();
+   private UUID uniqueId = null;
+
+
+   public MapData(String s) {
+      super(s);
+   }
+
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      byte dimension = nbttagcompound.getByte("dimension");
+      if(dimension >= 10) {
+         long least = nbttagcompound.getLong("UUIDLeast");
+         long most = nbttagcompound.getLong("UUIDMost");
+         if(least != 0L && most != 0L) {
+            this.uniqueId = new UUID(most, least);
+            CraftWorld j = (CraftWorld)this.server.getWorld(this.uniqueId);
+            if(j == null) {
+               dimension = 127;
+            } else {
+               dimension = (byte)j.getHandle().dimension;
+            }
+         }
+      }
+
+      this.dimension = dimension;
+      this.xCenter = nbttagcompound.getInteger("xCenter");
+      this.zCenter = nbttagcompound.getInteger("zCenter");
+      this.scale = nbttagcompound.getByte("scale");
       if(this.scale < 0) {
          this.scale = 0;
       }
@@ -42,23 +66,23 @@
          this.scale = 4;
       }
 
-      short var2 = var1.getShort("width");
-      short var3 = var1.getShort("height");
-      if(var2 == 128 && var3 == 128) {
-         this.colors = var1.getByteArray("colors");
+      short short1 = nbttagcompound.getShort("width");
+      short short2 = nbttagcompound.getShort("height");
+      if(short1 == 128 && short2 == 128) {
+         this.colors = nbttagcompound.getByteArray("colors");
       } else {
-         byte[] var4 = var1.getByteArray("colors");
+         byte[] abyte = nbttagcompound.getByteArray("colors");
          this.colors = new byte[16384];
-         int var5 = (128 - var2) / 2;
-         int var6 = (128 - var3) / 2;
+         int i = (128 - short1) / 2;
+         int var16 = (128 - short2) / 2;
 
-         for(int var7 = 0; var7 < var3; ++var7) {
-            int var8 = var7 + var6;
-            if(var8 >= 0 || var8 < 128) {
-               for(int var9 = 0; var9 < var2; ++var9) {
-                  int var10 = var9 + var5;
-                  if(var10 >= 0 || var10 < 128) {
-                     this.colors[var10 + var8 * 128] = var4[var9 + var7 * var2];
+         for(int k = 0; k < short2; ++k) {
+            int l = k + var16;
+            if(l >= 0 || l < 128) {
+               for(int i1 = 0; i1 < short1; ++i1) {
+                  int j1 = i1 + i;
+                  if(j1 >= 0 || j1 < 128) {
+                     this.colors[j1 + l * 128] = abyte[i1 + k * short1];
                   }
                }
             }
@@ -67,117 +91,137 @@
 
    }
 
-   public void writeToNBT(NBTTagCompound var1) {
-      var1.setByte("dimension", this.dimension);
-      var1.setInteger("xCenter", this.xCenter);
-      var1.setInteger("zCenter", this.zCenter);
-      var1.setByte("scale", this.scale);
-      var1.setShort("width", (short)128);
-      var1.setShort("height", (short)128);
-      var1.setByteArray("colors", this.colors);
-   }
-
-   public void updateVisiblePlayers(EntityPlayer var1, ItemStack var2) {
-      if(!this.playersHashMap.containsKey(var1)) {
-         MapInfo var3 = new MapInfo(this, var1);
-         this.playersHashMap.put(var1, var3);
-         this.playersArrayList.add(var3);
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      if(this.dimension >= 10) {
+         if(this.uniqueId == null) {
+            Iterator i$ = this.server.getWorlds().iterator();
+
+            while(i$.hasNext()) {
+               org.bukkit.World world = (org.bukkit.World)i$.next();
+               CraftWorld cWorld = (CraftWorld)world;
+               if(cWorld.getHandle().dimension == this.dimension) {
+                  this.uniqueId = cWorld.getUID();
+                  break;
+               }
+            }
+         }
+
+         if(this.uniqueId != null) {
+            nbttagcompound.setLong("UUIDLeast", this.uniqueId.getLeastSignificantBits());
+            nbttagcompound.setLong("UUIDMost", this.uniqueId.getMostSignificantBits());
+         }
+      }
+
+      nbttagcompound.setByte("dimension", this.dimension);
+      nbttagcompound.setInteger("xCenter", this.xCenter);
+      nbttagcompound.setInteger("zCenter", this.zCenter);
+      nbttagcompound.setByte("scale", this.scale);
+      nbttagcompound.setShort("width", (short)128);
+      nbttagcompound.setShort("height", (short)128);
+      nbttagcompound.setByteArray("colors", this.colors);
+   }
+
+   public void updateVisiblePlayers(EntityPlayer entityhuman, ItemStack itemstack) {
+      if(!this.playersHashMap.containsKey(entityhuman)) {
+         MapInfo i = new MapInfo(this, entityhuman);
+         this.playersHashMap.put(entityhuman, i);
+         this.playersArrayList.add(i);
       }
 
-      if(!var1.inventory.hasItemStack(var2)) {
-         this.playersVisibleOnMap.remove(var1.getCommandSenderName());
+      if(!entityhuman.inventory.hasItemStack(itemstack)) {
+         this.playersVisibleOnMap.remove(entityhuman.getCommandSenderName());
       }
 
       for(int var5 = 0; var5 < this.playersArrayList.size(); ++var5) {
-         MapInfo var4 = (MapInfo)this.playersArrayList.get(var5);
-         if(!var4.entityplayerObj.isDead && (var4.entityplayerObj.inventory.hasItemStack(var2) || var2.isOnItemFrame())) {
-            if(!var2.isOnItemFrame() && var4.entityplayerObj.dimension == this.dimension) {
-               this.func_82567_a(0, var4.entityplayerObj.worldObj, var4.entityplayerObj.getCommandSenderName(), var4.entityplayerObj.posX, var4.entityplayerObj.posZ, (double)var4.entityplayerObj.rotationYaw);
+         MapInfo worldmaphumantracker1 = (MapInfo)this.playersArrayList.get(var5);
+         if(!worldmaphumantracker1.entityplayerObj.isDead && (worldmaphumantracker1.entityplayerObj.inventory.hasItemStack(itemstack) || itemstack.isOnItemFrame())) {
+            if(!itemstack.isOnItemFrame() && worldmaphumantracker1.entityplayerObj.dimension == this.dimension) {
+               this.func_82567_a(0, worldmaphumantracker1.entityplayerObj.worldObj, worldmaphumantracker1.entityplayerObj.getCommandSenderName(), worldmaphumantracker1.entityplayerObj.posX, worldmaphumantracker1.entityplayerObj.posZ, (double)worldmaphumantracker1.entityplayerObj.rotationYaw);
             }
          } else {
-            this.playersHashMap.remove(var4.entityplayerObj);
-            this.playersArrayList.remove(var4);
+            this.playersHashMap.remove(worldmaphumantracker1.entityplayerObj);
+            this.playersArrayList.remove(worldmaphumantracker1);
          }
       }
 
-      if(var2.isOnItemFrame()) {
-         this.func_82567_a(1, var1.worldObj, "frame-" + var2.getItemFrame().entityId, (double)var2.getItemFrame().xPosition, (double)var2.getItemFrame().zPosition, (double)(var2.getItemFrame().hangingDirection * 90));
+      if(itemstack.isOnItemFrame()) {
+         this.func_82567_a(1, entityhuman.worldObj, "frame-" + itemstack.getItemFrame().entityId, (double)itemstack.getItemFrame().xPosition, (double)itemstack.getItemFrame().zPosition, (double)(itemstack.getItemFrame().hangingDirection * 90));
       }
 
    }
 
-   private void func_82567_a(int var1, World var2, String var3, double var4, double var6, double var8) {
-      int var10 = 1 << this.scale;
-      float var11 = (float)(var4 - (double)this.xCenter) / (float)var10;
-      float var12 = (float)(var6 - (double)this.zCenter) / (float)var10;
-      byte var13 = (byte)((int)((double)(var11 * 2.0F) + 0.5D));
-      byte var14 = (byte)((int)((double)(var12 * 2.0F) + 0.5D));
-      byte var15 = 63;
-      byte var16;
-      if(var11 >= (float)(-var15) && var12 >= (float)(-var15) && var11 <= (float)var15 && var12 <= (float)var15) {
-         var8 += var8 < 0.0D?-8.0D:8.0D;
-         var16 = (byte)((int)(var8 * 16.0D / 360.0D));
+   private void func_82567_a(int i, World world, String s, double d0, double d1, double d2) {
+      int j = 1 << this.scale;
+      float f = (float)(d0 - (double)this.xCenter) / (float)j;
+      float f1 = (float)(d1 - (double)this.zCenter) / (float)j;
+      byte b0 = (byte)((int)((double)(f * 2.0F) + 0.5D));
+      byte b1 = (byte)((int)((double)(f1 * 2.0F) + 0.5D));
+      byte b2 = 63;
+      byte b3;
+      if(f >= (float)(-b2) && f1 >= (float)(-b2) && f <= (float)b2 && f1 <= (float)b2) {
+         d2 += d2 < 0.0D?-8.0D:8.0D;
+         b3 = (byte)((int)(d2 * 16.0D / 360.0D));
          if(this.dimension < 0) {
-            int var17 = (int)(var2.getWorldInfo().getWorldTime() / 10L);
-            var16 = (byte)(var17 * var17 * 34187121 + var17 * 121 >> 15 & 15);
+            int k = (int)(world.getWorldInfo().getWorldTime() / 10L);
+            b3 = (byte)(k * k * 34187121 + k * 121 >> 15 & 15);
          }
       } else {
-         if(Math.abs(var11) >= 320.0F || Math.abs(var12) >= 320.0F) {
-            this.playersVisibleOnMap.remove(var3);
+         if(Math.abs(f) >= 320.0F || Math.abs(f1) >= 320.0F) {
+            this.playersVisibleOnMap.remove(s);
             return;
          }
 
-         var1 = 6;
-         var16 = 0;
-         if(var11 <= (float)(-var15)) {
-            var13 = (byte)((int)((double)(var15 * 2) + 2.5D));
+         i = 6;
+         b3 = 0;
+         if(f <= (float)(-b2)) {
+            b0 = (byte)((int)((double)(b2 * 2) + 2.5D));
          }
 
-         if(var12 <= (float)(-var15)) {
-            var14 = (byte)((int)((double)(var15 * 2) + 2.5D));
+         if(f1 <= (float)(-b2)) {
+            b1 = (byte)((int)((double)(b2 * 2) + 2.5D));
          }
 
-         if(var11 >= (float)var15) {
-            var13 = (byte)(var15 * 2 + 1);
+         if(f >= (float)b2) {
+            b0 = (byte)(b2 * 2 + 1);
          }
 
-         if(var12 >= (float)var15) {
-            var14 = (byte)(var15 * 2 + 1);
+         if(f1 >= (float)b2) {
+            b1 = (byte)(b2 * 2 + 1);
          }
       }
 
-      this.playersVisibleOnMap.put(var3, new MapCoord(this, (byte)var1, var13, var14, var16));
+      this.playersVisibleOnMap.put(s, new MapCoord(this, (byte)i, b0, b1, b3));
    }
 
-   public byte[] func_76193_a(ItemStack var1, World var2, EntityPlayer var3) {
-      MapInfo var4 = (MapInfo)this.playersHashMap.get(var3);
-      return var4 == null?null:var4.getPlayersOnMap(var1);
+   public byte[] func_76193_a(ItemStack itemstack, World world, EntityPlayer entityhuman) {
+      MapInfo worldmaphumantracker = (MapInfo)this.playersHashMap.get(entityhuman);
+      return worldmaphumantracker == null?null:worldmaphumantracker.getPlayersOnMap(itemstack);
    }
 
-   public void setColumnDirty(int var1, int var2, int var3) {
+   public void setColumnDirty(int i, int j, int k) {
       super.markDirty();
 
-      for(int var4 = 0; var4 < this.playersArrayList.size(); ++var4) {
-         MapInfo var5 = (MapInfo)this.playersArrayList.get(var4);
-         if(var5.field_76209_b[var1] < 0 || var5.field_76209_b[var1] > var2) {
-            var5.field_76209_b[var1] = var2;
+      for(int l = 0; l < this.playersArrayList.size(); ++l) {
+         MapInfo worldmaphumantracker = (MapInfo)this.playersArrayList.get(l);
+         if(worldmaphumantracker.field_76209_b[i] < 0 || worldmaphumantracker.field_76209_b[i] > j) {
+            worldmaphumantracker.field_76209_b[i] = j;
          }
 
-         if(var5.field_76210_c[var1] < 0 || var5.field_76210_c[var1] < var3) {
-            var5.field_76210_c[var1] = var3;
+         if(worldmaphumantracker.field_76210_c[i] < 0 || worldmaphumantracker.field_76210_c[i] < k) {
+            worldmaphumantracker.field_76210_c[i] = k;
          }
       }
 
    }
 
-   public MapInfo func_82568_a(EntityPlayer var1) {
-      MapInfo var2 = (MapInfo)this.playersHashMap.get(var1);
-      if(var2 == null) {
-         var2 = new MapInfo(this, var1);
-         this.playersHashMap.put(var1, var2);
-         this.playersArrayList.add(var2);
+   public MapInfo func_82568_a(EntityPlayer entityhuman) {
+      MapInfo worldmaphumantracker = (MapInfo)this.playersHashMap.get(entityhuman);
+      if(worldmaphumantracker == null) {
+         worldmaphumantracker = new MapInfo(this, entityhuman);
+         this.playersHashMap.put(entityhuman, worldmaphumantracker);
+         this.playersArrayList.add(worldmaphumantracker);
       }
 
-      return var2;
+      return worldmaphumantracker;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/MapInfo.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/MapInfo.class differ
diff -ur mcp-mcdev/net/minecraft/src/MapInfo.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/MapInfo.java
--- mcp-mcdev/net/minecraft/src/MapInfo.java	2012-11-29 21:14:45.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/MapInfo.java	2012-11-29 20:43:55.000000000 -0800
@@ -1,10 +1,11 @@
 package net.minecraft.src;
 
-import java.util.Iterator;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.ItemStack;
-import net.minecraft.src.MapCoord;
 import net.minecraft.src.MapData;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.map.RenderData;
+import org.bukkit.map.MapCursor;
 
 public class MapInfo {
 
@@ -16,83 +17,85 @@
    private byte[] lastPlayerLocationOnMap;
    public int field_82569_d;
    private boolean field_82570_i;
-   // $FF: synthetic field
    final MapData mapDataObj;
 
 
-   public MapInfo(MapData var1, EntityPlayer var2) {
-      this.mapDataObj = var1;
+   public MapInfo(MapData worldmap, EntityPlayer entityhuman) {
+      this.mapDataObj = worldmap;
       this.field_76209_b = new int[128];
       this.field_76210_c = new int[128];
       this.currentRandomNumber = 0;
       this.ticksUntilPlayerLocationMapUpdate = 0;
       this.field_82570_i = false;
-      this.entityplayerObj = var2;
+      this.entityplayerObj = entityhuman;
 
-      for(int var3 = 0; var3 < this.field_76209_b.length; ++var3) {
-         this.field_76209_b[var3] = 0;
-         this.field_76210_c[var3] = 127;
+      for(int i = 0; i < this.field_76209_b.length; ++i) {
+         this.field_76209_b[i] = 0;
+         this.field_76210_c[i] = 127;
       }
 
    }
 
-   public byte[] getPlayersOnMap(ItemStack var1) {
-      byte[] var2;
+   public byte[] getPlayersOnMap(ItemStack itemstack) {
+      byte[] abyte;
       if(!this.field_82570_i) {
-         var2 = new byte[]{(byte)2, this.mapDataObj.scale};
+         abyte = new byte[]{(byte)2, this.mapDataObj.scale};
          this.field_82570_i = true;
-         return var2;
+         return abyte;
       } else {
-         int var3;
+         RenderData render = this.mapDataObj.mapView.render((CraftPlayer)this.entityplayerObj.getBukkitEntity());
+         int j;
          int var10;
          if(--this.ticksUntilPlayerLocationMapUpdate < 0) {
             this.ticksUntilPlayerLocationMapUpdate = 4;
-            var2 = new byte[this.mapDataObj.playersVisibleOnMap.size() * 3 + 1];
-            var2[0] = 1;
-            var3 = 0;
-
-            for(Iterator var4 = this.mapDataObj.playersVisibleOnMap.values().iterator(); var4.hasNext(); ++var3) {
-               MapCoord var5 = (MapCoord)var4.next();
-               var2[var3 * 3 + 1] = (byte)(var5.iconSize << 4 | var5.iconRotation & 15);
-               var2[var3 * 3 + 2] = var5.centerX;
-               var2[var3 * 3 + 3] = var5.centerZ;
+            abyte = new byte[render.cursors.size() * 3 + 1];
+            abyte[0] = 1;
+            boolean i = false;
+
+            for(var10 = 0; var10 < render.cursors.size(); ++var10) {
+               MapCursor k = (MapCursor)render.cursors.get(var10);
+               if(k.isVisible()) {
+                  abyte[var10 * 3 + 1] = (byte)(k.getRawType() << 4 | k.getDirection() & 15);
+                  abyte[var10 * 3 + 2] = k.getX();
+                  abyte[var10 * 3 + 3] = k.getY();
+               }
             }
 
-            boolean var9 = !var1.isOnItemFrame();
-            if(this.lastPlayerLocationOnMap != null && this.lastPlayerLocationOnMap.length == var2.length) {
-               for(var10 = 0; var10 < var2.length; ++var10) {
-                  if(var2[var10] != this.lastPlayerLocationOnMap[var10]) {
-                     var9 = false;
+            boolean var11 = !itemstack.isOnItemFrame();
+            if(this.lastPlayerLocationOnMap != null && this.lastPlayerLocationOnMap.length == abyte.length) {
+               for(j = 0; j < abyte.length; ++j) {
+                  if(abyte[j] != this.lastPlayerLocationOnMap[j]) {
+                     var11 = false;
                      break;
                   }
                }
             } else {
-               var9 = false;
+               var11 = false;
             }
 
-            if(!var9) {
-               this.lastPlayerLocationOnMap = var2;
-               return var2;
+            if(!var11) {
+               this.lastPlayerLocationOnMap = abyte;
+               return abyte;
             }
          }
 
-         for(int var8 = 0; var8 < 1; ++var8) {
-            var3 = this.currentRandomNumber++ * 11 % 128;
-            if(this.field_76209_b[var3] >= 0) {
-               int var11 = this.field_76210_c[var3] - this.field_76209_b[var3] + 1;
-               var10 = this.field_76209_b[var3];
-               byte[] var6 = new byte[var11 + 3];
-               var6[0] = 0;
-               var6[1] = (byte)var3;
-               var6[2] = (byte)var10;
+         for(int var12 = 0; var12 < 1; ++var12) {
+            var10 = this.currentRandomNumber++ * 11 % 128;
+            if(this.field_76209_b[var10] >= 0) {
+               int l = this.field_76210_c[var10] - this.field_76209_b[var10] + 1;
+               j = this.field_76209_b[var10];
+               byte[] abyte1 = new byte[l + 3];
+               abyte1[0] = 0;
+               abyte1[1] = (byte)var10;
+               abyte1[2] = (byte)j;
 
-               for(int var7 = 0; var7 < var6.length - 3; ++var7) {
-                  var6[var7 + 3] = this.mapDataObj.colors[(var7 + var10) * 128 + var3];
+               for(int i1 = 0; i1 < abyte1.length - 3; ++i1) {
+                  abyte1[i1 + 3] = render.buffer[(i1 + j) * 128 + var10];
                }
 
-               this.field_76210_c[var3] = -1;
-               this.field_76209_b[var3] = -1;
-               return var6;
+               this.field_76210_c[var10] = -1;
+               this.field_76209_b[var10] = -1;
+               return abyte1;
             }
          }
 
Binary files mcp-mcdev/net/minecraft/src/NBTTagCompound.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/NBTTagCompound.class differ
diff -ur mcp-mcdev/net/minecraft/src/NBTTagCompound.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/NBTTagCompound.java
--- mcp-mcdev/net/minecraft/src/NBTTagCompound.java	2012-11-29 21:14:44.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/NBTTagCompound.java	2012-11-29 20:43:54.000000000 -0800
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -32,27 +33,36 @@
       super("");
    }
 
-   public NBTTagCompound(String var1) {
-      super(var1);
+   public NBTTagCompound(String s) {
+      super(s);
    }
 
-   void write(DataOutput var1) {
-      Iterator var2 = this.tagMap.values().iterator();
+   void write(DataOutput dataoutput) {
+      Iterator iterator = this.tagMap.values().iterator();
 
-      while(var2.hasNext()) {
-         NBTBase var3 = (NBTBase)var2.next();
-         NBTBase.writeNamedTag(var3, var1);
+      while(iterator.hasNext()) {
+         NBTBase ex = (NBTBase)iterator.next();
+         NBTBase.writeNamedTag(ex, dataoutput);
       }
 
-      var1.writeByte(0);
+      try {
+         dataoutput.writeByte(0);
+      } catch (IOException var4) {
+         var4.printStackTrace();
+      }
+
+   }
+
+   public void remove(String name) {
+      this.tagMap.remove(name);
    }
 
-   void load(DataInput var1) {
+   void load(DataInput datainput) {
       this.tagMap.clear();
 
-      NBTBase var2;
-      while((var2 = NBTBase.readNamedTag(var1)).getId() != 0) {
-         this.tagMap.put(var2.getName(), var2);
+      NBTBase nbtbase;
+      while((nbtbase = NBTBase.readNamedTag(datainput)).getId() != 0) {
+         this.tagMap.put(nbtbase.getName(), nbtbase);
       }
 
    }
@@ -65,156 +75,156 @@
       return (byte)10;
    }
 
-   public void setTag(String var1, NBTBase var2) {
-      this.tagMap.put(var1, var2.setName(var1));
+   public void setTag(String s, NBTBase nbtbase) {
+      this.tagMap.put(s, nbtbase.setName(s));
    }
 
-   public void setByte(String var1, byte var2) {
-      this.tagMap.put(var1, new NBTTagByte(var1, var2));
+   public void setByte(String s, byte b0) {
+      this.tagMap.put(s, new NBTTagByte(s, b0));
    }
 
-   public void setShort(String var1, short var2) {
-      this.tagMap.put(var1, new NBTTagShort(var1, var2));
+   public void setShort(String s, short short1) {
+      this.tagMap.put(s, new NBTTagShort(s, short1));
    }
 
-   public void setInteger(String var1, int var2) {
-      this.tagMap.put(var1, new NBTTagInt(var1, var2));
+   public void setInteger(String s, int i) {
+      this.tagMap.put(s, new NBTTagInt(s, i));
    }
 
-   public void setLong(String var1, long var2) {
-      this.tagMap.put(var1, new NBTTagLong(var1, var2));
+   public void setLong(String s, long i) {
+      this.tagMap.put(s, new NBTTagLong(s, i));
    }
 
-   public void setFloat(String var1, float var2) {
-      this.tagMap.put(var1, new NBTTagFloat(var1, var2));
+   public void setFloat(String s, float f) {
+      this.tagMap.put(s, new NBTTagFloat(s, f));
    }
 
-   public void setDouble(String var1, double var2) {
-      this.tagMap.put(var1, new NBTTagDouble(var1, var2));
+   public void setDouble(String s, double d0) {
+      this.tagMap.put(s, new NBTTagDouble(s, d0));
    }
 
-   public void setString(String var1, String var2) {
-      this.tagMap.put(var1, new NBTTagString(var1, var2));
+   public void setString(String s, String s1) {
+      this.tagMap.put(s, new NBTTagString(s, s1));
    }
 
-   public void setByteArray(String var1, byte[] var2) {
-      this.tagMap.put(var1, new NBTTagByteArray(var1, var2));
+   public void setByteArray(String s, byte[] abyte) {
+      this.tagMap.put(s, new NBTTagByteArray(s, abyte));
    }
 
-   public void setIntArray(String var1, int[] var2) {
-      this.tagMap.put(var1, new NBTTagIntArray(var1, var2));
+   public void setIntArray(String s, int[] aint) {
+      this.tagMap.put(s, new NBTTagIntArray(s, aint));
    }
 
-   public void setCompoundTag(String var1, NBTTagCompound var2) {
-      this.tagMap.put(var1, var2.setName(var1));
+   public void setCompoundTag(String s, NBTTagCompound nbttagcompound) {
+      this.tagMap.put(s, nbttagcompound.setName(s));
    }
 
-   public void setBoolean(String var1, boolean var2) {
-      this.setByte(var1, (byte)(var2?1:0));
+   public void setBoolean(String s, boolean flag) {
+      this.setByte(s, (byte)(flag?1:0));
    }
 
-   public NBTBase getTag(String var1) {
-      return (NBTBase)this.tagMap.get(var1);
+   public NBTBase getTag(String s) {
+      return (NBTBase)this.tagMap.get(s);
    }
 
-   public boolean hasKey(String var1) {
-      return this.tagMap.containsKey(var1);
+   public boolean hasKey(String s) {
+      return this.tagMap.containsKey(s);
    }
 
-   public byte getByte(String var1) {
+   public byte getByte(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?0:((NBTTagByte)this.tagMap.get(var1)).data;
+         return !this.tagMap.containsKey(s)?0:((NBTTagByte)this.tagMap.get(s)).data;
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 1, var3));
+         throw new ReportedException(this.createCrashReport(s, 1, var3));
       }
    }
 
-   public short getShort(String var1) {
+   public short getShort(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?0:((NBTTagShort)this.tagMap.get(var1)).data;
+         return !this.tagMap.containsKey(s)?0:((NBTTagShort)this.tagMap.get(s)).data;
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 2, var3));
+         throw new ReportedException(this.createCrashReport(s, 2, var3));
       }
    }
 
-   public int getInteger(String var1) {
+   public int getInteger(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?0:((NBTTagInt)this.tagMap.get(var1)).data;
+         return !this.tagMap.containsKey(s)?0:((NBTTagInt)this.tagMap.get(s)).data;
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 3, var3));
+         throw new ReportedException(this.createCrashReport(s, 3, var3));
       }
    }
 
-   public long getLong(String var1) {
+   public long getLong(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?0L:((NBTTagLong)this.tagMap.get(var1)).data;
+         return !this.tagMap.containsKey(s)?0L:((NBTTagLong)this.tagMap.get(s)).data;
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 4, var3));
+         throw new ReportedException(this.createCrashReport(s, 4, var3));
       }
    }
 
-   public float getFloat(String var1) {
+   public float getFloat(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?0.0F:((NBTTagFloat)this.tagMap.get(var1)).data;
+         return !this.tagMap.containsKey(s)?0.0F:((NBTTagFloat)this.tagMap.get(s)).data;
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 5, var3));
+         throw new ReportedException(this.createCrashReport(s, 5, var3));
       }
    }
 
-   public double getDouble(String var1) {
+   public double getDouble(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?0.0D:((NBTTagDouble)this.tagMap.get(var1)).data;
+         return !this.tagMap.containsKey(s)?0.0D:((NBTTagDouble)this.tagMap.get(s)).data;
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 6, var3));
+         throw new ReportedException(this.createCrashReport(s, 6, var3));
       }
    }
 
-   public String getString(String var1) {
+   public String getString(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?"":((NBTTagString)this.tagMap.get(var1)).data;
+         return !this.tagMap.containsKey(s)?"":((NBTTagString)this.tagMap.get(s)).data;
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 8, var3));
+         throw new ReportedException(this.createCrashReport(s, 8, var3));
       }
    }
 
-   public byte[] getByteArray(String var1) {
+   public byte[] getByteArray(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?new byte[0]:((NBTTagByteArray)this.tagMap.get(var1)).byteArray;
+         return !this.tagMap.containsKey(s)?new byte[0]:((NBTTagByteArray)this.tagMap.get(s)).byteArray;
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 7, var3));
+         throw new ReportedException(this.createCrashReport(s, 7, var3));
       }
    }
 
-   public int[] getIntArray(String var1) {
+   public int[] getIntArray(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?new int[0]:((NBTTagIntArray)this.tagMap.get(var1)).intArray;
+         return !this.tagMap.containsKey(s)?new int[0]:((NBTTagIntArray)this.tagMap.get(s)).intArray;
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 11, var3));
+         throw new ReportedException(this.createCrashReport(s, 11, var3));
       }
    }
 
-   public NBTTagCompound getCompoundTag(String var1) {
+   public NBTTagCompound getCompoundTag(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?new NBTTagCompound(var1):(NBTTagCompound)this.tagMap.get(var1);
+         return !this.tagMap.containsKey(s)?new NBTTagCompound(s):(NBTTagCompound)this.tagMap.get(s);
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 10, var3));
+         throw new ReportedException(this.createCrashReport(s, 10, var3));
       }
    }
 
-   public NBTTagList getTagList(String var1) {
+   public NBTTagList getTagList(String s) {
       try {
-         return !this.tagMap.containsKey(var1)?new NBTTagList(var1):(NBTTagList)this.tagMap.get(var1);
+         return !this.tagMap.containsKey(s)?new NBTTagList(s):(NBTTagList)this.tagMap.get(s);
       } catch (ClassCastException var3) {
-         throw new ReportedException(this.createCrashReport(var1, 9, var3));
+         throw new ReportedException(this.createCrashReport(s, 9, var3));
       }
    }
 
-   public boolean getBoolean(String var1) {
-      return this.getByte(var1) != 0;
+   public boolean getBoolean(String s) {
+      return this.getByte(s) != 0;
    }
 
-   public void removeTag(String var1) {
-      this.tagMap.remove(var1);
+   public void removeTag(String s) {
+      this.tagMap.remove(s);
    }
 
    public String toString() {
@@ -225,35 +235,35 @@
       return this.tagMap.isEmpty();
    }
 
-   private CrashReport createCrashReport(String var1, int var2, ClassCastException var3) {
-      CrashReport var4 = CrashReport.func_85055_a(var3, "Reading NBT data");
-      CrashReportCategory var5 = var4.func_85057_a("Corrupt NBT tag", 1);
-      var5.addCrashSectionCallable("Tag type found", new CallableTagCompound1(this, var1));
-      var5.addCrashSectionCallable("Tag type expected", new CallableTagCompound2(this, var2));
-      var5.addCrashSection("Tag name", var1);
+   private CrashReport createCrashReport(String s, int i, ClassCastException classcastexception) {
+      CrashReport crashreport = CrashReport.func_85055_a(classcastexception, "Reading NBT data");
+      CrashReportCategory crashreportsystemdetails = crashreport.func_85057_a("Corrupt NBT tag", 1);
+      crashreportsystemdetails.addCrashSectionCallable("Tag type found", new CallableTagCompound1(this, s));
+      crashreportsystemdetails.addCrashSectionCallable("Tag type expected", new CallableTagCompound2(this, i));
+      crashreportsystemdetails.addCrashSection("Tag name", s);
       if(this.getName() != null && this.getName().length() > 0) {
-         var5.addCrashSection("Tag parent", this.getName());
+         crashreportsystemdetails.addCrashSection("Tag parent", this.getName());
       }
 
-      return var4;
+      return crashreport;
    }
 
    public NBTBase copy() {
-      NBTTagCompound var1 = new NBTTagCompound(this.getName());
-      Iterator var2 = this.tagMap.keySet().iterator();
+      NBTTagCompound nbttagcompound = new NBTTagCompound(this.getName());
+      Iterator iterator = this.tagMap.keySet().iterator();
 
-      while(var2.hasNext()) {
-         String var3 = (String)var2.next();
-         var1.setTag(var3, ((NBTBase)this.tagMap.get(var3)).copy());
+      while(iterator.hasNext()) {
+         String s = (String)iterator.next();
+         nbttagcompound.setTag(s, ((NBTBase)this.tagMap.get(s)).copy());
       }
 
-      return var1;
+      return nbttagcompound;
    }
 
-   public boolean equals(Object var1) {
-      if(super.equals(var1)) {
-         NBTTagCompound var2 = (NBTTagCompound)var1;
-         return this.tagMap.entrySet().equals(var2.tagMap.entrySet());
+   public boolean equals(Object object) {
+      if(super.equals(object)) {
+         NBTTagCompound nbttagcompound = (NBTTagCompound)object;
+         return this.tagMap.entrySet().equals(nbttagcompound.tagMap.entrySet());
       } else {
          return false;
       }
@@ -263,8 +273,7 @@
       return super.hashCode() ^ this.tagMap.hashCode();
    }
 
-   // $FF: synthetic method
-   static Map getTagMap(NBTTagCompound var0) {
-      return var0.tagMap;
+   static Map getTagMap(NBTTagCompound nbttagcompound) {
+      return nbttagcompound.tagMap;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/NetLoginHandler.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/NetLoginHandler.class differ
diff -ur mcp-mcdev/net/minecraft/src/NetLoginHandler.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/NetLoginHandler.java
--- mcp-mcdev/net/minecraft/src/NetLoginHandler.java	2012-11-29 21:14:44.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/NetLoginHandler.java	2012-11-29 20:43:54.000000000 -0800
@@ -1,13 +1,11 @@
 package net.minecraft.src;
 
-import java.io.Serializable;
+import java.io.IOException;
 import java.net.InetAddress;
 import java.net.Socket;
 import java.security.PrivateKey;
 import java.security.PublicKey;
 import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
 import java.util.Random;
 import java.util.logging.Logger;
 import javax.crypto.SecretKey;
@@ -27,6 +25,8 @@
 import net.minecraft.src.StringUtils;
 import net.minecraft.src.TcpConnection;
 import net.minecraft.src.ThreadLoginVerifier;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.server.ServerListPingEvent;
 
 public class NetLoginHandler extends NetHandler {
 
@@ -39,16 +39,26 @@
    private int loginTimer = 0;
    private String clientUsername = null;
    private volatile boolean field_72544_i = false;
-   private String loginServerId = "";
-   private SecretKey field_72542_k = null;
+   private String loginServerId;
+   private SecretKey field_72542_k;
+   public String hostname;
+   private boolean login;
 
 
-   public NetLoginHandler(MinecraftServer var1, Socket var2, String var3) {
-      this.mcServer = var1;
-      this.myTCPConnection = new TcpConnection(var2, var3, this, var1.getKeyPair().getPrivate());
+   public NetLoginHandler(MinecraftServer minecraftserver, Socket socket, String s) throws IOException {
+      this.loginServerId = Long.toString(rand.nextLong(), 16);
+      this.field_72542_k = null;
+      this.hostname = "";
+      this.login = false;
+      this.mcServer = minecraftserver;
+      this.myTCPConnection = new TcpConnection(socket, s, this, minecraftserver.getKeyPair().getPrivate());
       this.myTCPConnection.field_74468_e = 0;
    }
 
+   public Socket getSocket() {
+      return this.myTCPConnection.getSocket();
+   }
+
    public void tryLogin() {
       if(this.field_72544_i) {
          this.initializePlayerConnection();
@@ -62,10 +72,10 @@
 
    }
 
-   public void kickUser(String var1) {
+   public void kickUser(String s) {
       try {
-         logger.info("Disconnecting " + this.getUsernameAndAddress() + ": " + var1);
-         this.myTCPConnection.addToSendQueue(new Packet255KickDisconnect(var1));
+         logger.info("Disconnecting " + this.getUsernameAndAddress() + ": " + s);
+         this.myTCPConnection.addToSendQueue(new Packet255KickDisconnect(s));
          this.myTCPConnection.serverShutdown();
          this.finishedProcessing = true;
       } catch (Exception var3) {
@@ -74,42 +84,49 @@
 
    }
 
-   public void handleClientProtocol(Packet2ClientProtocol var1) {
-      this.clientUsername = var1.getUsername();
+   public void handleClientProtocol(Packet2ClientProtocol packet2handshake) {
+      this.hostname = packet2handshake.serverHost == null?"":packet2handshake.serverHost + ':' + packet2handshake.serverPort;
+      this.clientUsername = packet2handshake.getUsername();
       if(!this.clientUsername.equals(StringUtils.stripControlCodes(this.clientUsername))) {
          this.kickUser("Invalid username!");
       } else {
-         PublicKey var2 = this.mcServer.getKeyPair().getPublic();
-         if(var1.getProtocolVersion() != 49) {
-            if(var1.getProtocolVersion() > 49) {
+         PublicKey publickey = this.mcServer.getKeyPair().getPublic();
+         if(packet2handshake.getProtocolVersion() != 49) {
+            if(packet2handshake.getProtocolVersion() > 49) {
                this.kickUser("Outdated server!");
             } else {
                this.kickUser("Outdated client!");
             }
-
          } else {
             this.loginServerId = this.mcServer.isServerInOnlineMode()?Long.toString(rand.nextLong(), 16):"-";
             this.field_72536_d = new byte[4];
             rand.nextBytes(this.field_72536_d);
-            this.myTCPConnection.addToSendQueue(new Packet253ServerAuthData(this.loginServerId, var2, this.field_72536_d));
+            this.myTCPConnection.addToSendQueue(new Packet253ServerAuthData(this.loginServerId, publickey, this.field_72536_d));
          }
       }
+
    }
 
-   public void handleSharedKey(Packet252SharedKey var1) {
-      PrivateKey var2 = this.mcServer.getKeyPair().getPrivate();
-      this.field_72542_k = var1.func_73303_a(var2);
-      if(!Arrays.equals(this.field_72536_d, var1.func_73302_b(var2))) {
+   public void handleSharedKey(Packet252SharedKey packet252keyresponse) {
+      PrivateKey privatekey = this.mcServer.getKeyPair().getPrivate();
+      this.field_72542_k = packet252keyresponse.func_73303_a(privatekey);
+      if(!Arrays.equals(this.field_72536_d, packet252keyresponse.func_73302_b(privatekey))) {
          this.kickUser("Invalid client reply");
       }
 
       this.myTCPConnection.addToSendQueue(new Packet252SharedKey());
    }
 
-   public void handleClientCommand(Packet205ClientCommand var1) {
-      if(var1.forceRespawn == 0) {
+   public void handleClientCommand(Packet205ClientCommand packet205clientcommand) {
+      if(packet205clientcommand.forceRespawn == 0) {
          if(this.mcServer.isServerInOnlineMode()) {
-            (new ThreadLoginVerifier(this)).start();
+            if(this.login) {
+               this.kickUser("Duplicate login");
+               return;
+            }
+
+            this.login = true;
+            (new ThreadLoginVerifier(this, this.mcServer.server)).start();
          } else {
             this.field_72544_i = true;
          }
@@ -117,66 +134,70 @@
 
    }
 
-   public void handleLogin(Packet1Login var1) {}
+   public void handleLogin(Packet1Login packet1login) {}
 
    public void initializePlayerConnection() {
-      String var1 = this.mcServer.getConfigurationManager().allowUserToConnect(this.myTCPConnection.getRemoteAddress(), this.clientUsername);
-      if(var1 != null) {
-         this.kickUser(var1);
-      } else {
-         EntityPlayerMP var2 = this.mcServer.getConfigurationManager().createPlayerForUser(this.clientUsername);
-         if(var2 != null) {
-            this.mcServer.getConfigurationManager().initializeConnectionToPlayer(this.myTCPConnection, var2);
+      EntityPlayerMP s = this.mcServer.getConfigurationManager().attemptLogin(this, this.clientUsername, this.hostname);
+      if(s != null) {
+         EntityPlayerMP entityplayer = this.mcServer.getConfigurationManager().processLogin(s);
+         if(entityplayer != null) {
+            this.mcServer.getConfigurationManager().initializeConnectionToPlayer(this.myTCPConnection, entityplayer);
          }
-      }
 
-      this.finishedProcessing = true;
+         this.finishedProcessing = true;
+      }
    }
 
-   public void handleErrorMessage(String var1, Object[] var2) {
+   public void handleErrorMessage(String s, Object[] aobject) {
       logger.info(this.getUsernameAndAddress() + " lost connection");
       this.finishedProcessing = true;
    }
 
-   public void handleServerPing(Packet254ServerPing var1) {
-      try {
-         ServerConfigurationManager var2 = this.mcServer.getConfigurationManager();
-         String var3 = null;
-         if(var1.field_82559_a == 1) {
-            List var4 = Arrays.asList(new Serializable[]{Integer.valueOf(1), Integer.valueOf(49), this.mcServer.getMinecraftVersion(), this.mcServer.getMOTD(), Integer.valueOf(var2.getCurrentPlayerCount()), Integer.valueOf(var2.getMaxPlayers())});
-
-            Object var6;
-            for(Iterator var5 = var4.iterator(); var5.hasNext(); var3 = var3 + var6.toString().replaceAll(" ", "")) {
-               var6 = var5.next();
-               if(var3 == null) {
-                  var3 = "§";
-               } else {
-                  var3 = var3 + " ";
+   public void handleServerPing(Packet254ServerPing packet254getinfo) {
+      if(this.myTCPConnection.getSocket() != null) {
+         try {
+            ServerConfigurationManager exception = this.mcServer.getConfigurationManager();
+            String s = null;
+            ServerListPingEvent pingEvent = CraftEventFactory.callServerListPingEvent(this.mcServer.server, this.getSocket().getInetAddress(), this.mcServer.getMOTD(), exception.getCurrentPlayerCount(), exception.getMaxPlayers());
+            if(packet254getinfo.field_82559_a == 1) {
+               Object[] inetaddress = new Object[]{Integer.valueOf(1), Integer.valueOf(49), this.mcServer.getMinecraftVersion(), pingEvent.getMotd(), Integer.valueOf(exception.getCurrentPlayerCount()), Integer.valueOf(pingEvent.getMaxPlayers())};
+               Object[] arr$ = inetaddress;
+               int len$ = inetaddress.length;
+
+               for(int i$ = 0; i$ < len$; ++i$) {
+                  Object object = arr$[i$];
+                  if(s == null) {
+                     s = "§";
+                  } else {
+                     s = s + " ";
+                  }
+
+                  s = s + org.apache.commons.lang.StringUtils.replace(object.toString(), " ", "");
                }
+            } else {
+               s = pingEvent.getMotd() + "§" + exception.getCurrentPlayerCount() + "§" + pingEvent.getMaxPlayers();
             }
-         } else {
-            var3 = this.mcServer.getMOTD() + "§" + var2.getCurrentPlayerCount() + "§" + var2.getMaxPlayers();
-         }
 
-         InetAddress var8 = null;
-         if(this.myTCPConnection.getSocket() != null) {
-            var8 = this.myTCPConnection.getSocket().getInetAddress();
-         }
+            InetAddress var11 = null;
+            if(this.myTCPConnection.getSocket() != null) {
+               var11 = this.myTCPConnection.getSocket().getInetAddress();
+            }
 
-         this.myTCPConnection.addToSendQueue(new Packet255KickDisconnect(var3));
-         this.myTCPConnection.serverShutdown();
-         if(var8 != null && this.mcServer.getNetworkThread() instanceof DedicatedServerListenThread) {
-            ((DedicatedServerListenThread)this.mcServer.getNetworkThread()).func_71761_a(var8);
+            this.myTCPConnection.addToSendQueue(new Packet255KickDisconnect(s));
+            this.myTCPConnection.serverShutdown();
+            if(var11 != null && this.mcServer.getNetworkThread() instanceof DedicatedServerListenThread) {
+               ((DedicatedServerListenThread)this.mcServer.getNetworkThread()).func_71761_a(var11);
+            }
+
+            this.finishedProcessing = true;
+         } catch (Exception var10) {
+            var10.printStackTrace();
          }
 
-         this.finishedProcessing = true;
-      } catch (Exception var7) {
-         var7.printStackTrace();
       }
-
    }
 
-   public void unexpectedPacket(Packet var1) {
+   public void unexpectedPacket(Packet packet) {
       this.kickUser("Protocol error");
    }
 
@@ -188,29 +209,24 @@
       return true;
    }
 
-   // $FF: synthetic method
-   static String getServerId(NetLoginHandler var0) {
-      return var0.loginServerId;
+   static String getServerId(NetLoginHandler netloginhandler) {
+      return netloginhandler.loginServerId;
    }
 
-   // $FF: synthetic method
-   static MinecraftServer getLoginMinecraftServer(NetLoginHandler var0) {
-      return var0.mcServer;
+   static MinecraftServer getLoginMinecraftServer(NetLoginHandler netloginhandler) {
+      return netloginhandler.mcServer;
    }
 
-   // $FF: synthetic method
-   static SecretKey func_72525_c(NetLoginHandler var0) {
-      return var0.field_72542_k;
+   static SecretKey func_72525_c(NetLoginHandler netloginhandler) {
+      return netloginhandler.field_72542_k;
    }
 
-   // $FF: synthetic method
-   static String getClientUsername(NetLoginHandler var0) {
-      return var0.clientUsername;
+   static String getClientUsername(NetLoginHandler netloginhandler) {
+      return netloginhandler.clientUsername;
    }
 
-   // $FF: synthetic method
-   static boolean func_72531_a(NetLoginHandler var0, boolean var1) {
-      return var0.field_72544_i = var1;
+   static boolean func_72531_a(NetLoginHandler netloginhandler, boolean flag) {
+      return netloginhandler.field_72544_i = flag;
    }
 
 }
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: NetServerHandler$1.class
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: NetServerHandler$2.class
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: NetServerHandler$3.class
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: NetServerHandler$4.class
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: NetServerHandler$5.class
Binary files mcp-mcdev/net/minecraft/src/NetServerHandler.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/NetServerHandler.class differ
Only in mcp-mcdev/net/minecraft/src: NetServerHandler.java
Binary files mcp-mcdev/net/minecraft/src/Packet.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet.class differ
diff -ur mcp-mcdev/net/minecraft/src/Packet.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet.java
--- mcp-mcdev/net/minecraft/src/Packet.java	2012-11-29 21:14:42.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet.java	2012-11-29 20:43:52.000000000 -0800
@@ -5,6 +5,8 @@
 import java.io.EOFException;
 import java.io.IOException;
 import java.net.Socket;
+import java.net.SocketException;
+import java.net.SocketTimeoutException;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -103,134 +105,145 @@
    public static long sentID;
    public static long sentSize;
    public boolean isChunkDataPacket = false;
+   private int packetID;
 
 
-   static void addIdClassMapping(int var0, boolean var1, boolean var2, Class var3) {
-      if(packetIdToClassMap.containsItem(var0)) {
-         throw new IllegalArgumentException("Duplicate packet id:" + var0);
-      } else if(packetClassToIdMap.containsKey(var3)) {
-         throw new IllegalArgumentException("Duplicate packet class:" + var3);
+   public Packet() {
+      this.packetID = ((Integer)packetClassToIdMap.get(this.getClass())).intValue();
+   }
+
+   static void addIdClassMapping(int i, boolean flag, boolean flag1, Class oclass) {
+      if(packetIdToClassMap.containsItem(i)) {
+         throw new IllegalArgumentException("Duplicate packet id:" + i);
+      } else if(packetClassToIdMap.containsKey(oclass)) {
+         throw new IllegalArgumentException("Duplicate packet class:" + oclass);
       } else {
-         packetIdToClassMap.addKey(var0, var3);
-         packetClassToIdMap.put(var3, Integer.valueOf(var0));
-         if(var1) {
-            clientPacketIdList.add(Integer.valueOf(var0));
+         packetIdToClassMap.addKey(i, oclass);
+         packetClassToIdMap.put(oclass, Integer.valueOf(i));
+         if(flag) {
+            clientPacketIdList.add(Integer.valueOf(i));
          }
 
-         if(var2) {
-            serverPacketIdList.add(Integer.valueOf(var0));
+         if(flag1) {
+            serverPacketIdList.add(Integer.valueOf(i));
          }
 
       }
    }
 
-   public static Packet getNewPacket(int var0) {
+   public static Packet getNewPacket(int i) {
       try {
-         Class var1 = (Class)packetIdToClassMap.lookup(var0);
-         return var1 == null?null:(Packet)var1.newInstance();
+         Class exception = (Class)packetIdToClassMap.lookup(i);
+         return exception == null?null:(Packet)exception.newInstance();
       } catch (Exception var2) {
          var2.printStackTrace();
-         System.out.println("Skipping packet with id " + var0);
+         System.out.println("Skipping packet with id " + i);
          return null;
       }
    }
 
-   public static void writeByteArray(DataOutputStream var0, byte[] var1) {
-      var0.writeShort(var1.length);
-      var0.write(var1);
+   public static void writeByteArray(DataOutputStream dataoutputstream, byte[] abyte) throws IOException {
+      dataoutputstream.writeShort(abyte.length);
+      dataoutputstream.write(abyte);
    }
 
-   public static byte[] readBytesFromStream(DataInputStream var0) {
-      short var1 = var0.readShort();
-      if(var1 < 0) {
+   public static byte[] readBytesFromStream(DataInputStream datainputstream) throws IOException {
+      short short1 = datainputstream.readShort();
+      if(short1 < 0) {
          throw new IOException("Key was smaller than nothing!  Weird key!");
       } else {
-         byte[] var2 = new byte[var1];
-         var0.read(var2);
-         return var2;
+         byte[] abyte = new byte[short1];
+         datainputstream.read(abyte);
+         return abyte;
       }
    }
 
    public final int getPacketId() {
-      return ((Integer)packetClassToIdMap.get(this.getClass())).intValue();
+      return this.packetID;
    }
 
-   public static Packet readPacket(DataInputStream var0, boolean var1, Socket var2) {
-      boolean var3 = false;
-      Packet var4 = null;
-      int var5 = var2.getSoTimeout();
+   public static Packet readPacket(DataInputStream datainputstream, boolean flag, Socket socket) throws IOException {
+      boolean flag1 = false;
+      Packet packet = null;
+      int i = socket.getSoTimeout();
 
-      int var8;
+      int j;
       try {
-         var8 = var0.read();
-         if(var8 == -1) {
+         j = datainputstream.read();
+         if(j == -1) {
             return null;
          }
 
-         if(var1 && !serverPacketIdList.contains(Integer.valueOf(var8)) || !var1 && !clientPacketIdList.contains(Integer.valueOf(var8))) {
-            throw new IOException("Bad packet id " + var8);
+         if(flag && !serverPacketIdList.contains(Integer.valueOf(j)) || !flag && !clientPacketIdList.contains(Integer.valueOf(j))) {
+            throw new IOException("Bad packet id " + j);
          }
 
-         var4 = getNewPacket(var8);
-         if(var4 == null) {
-            throw new IOException("Bad packet id " + var8);
+         packet = getNewPacket(j);
+         if(packet == null) {
+            throw new IOException("Bad packet id " + j);
          }
 
-         if(var4 instanceof Packet254ServerPing) {
-            var2.setSoTimeout(1500);
+         if(packet instanceof Packet254ServerPing) {
+            socket.setSoTimeout(1500);
          }
 
-         var4.readPacketData(var0);
+         packet.readPacketData(datainputstream);
          ++receivedID;
-         receivedSize += (long)var4.getPacketSize();
-      } catch (EOFException var7) {
+         receivedSize += (long)packet.getPacketSize();
+      } catch (EOFException var8) {
          System.out.println("Reached end of stream");
          return null;
+      } catch (SocketTimeoutException var9) {
+         System.out.println("Read timed out");
+         return null;
+      } catch (SocketException var10) {
+         System.out.println("Connection reset");
+         return null;
       }
 
-      PacketCount.countPacket(var8, (long)var4.getPacketSize());
+      PacketCount.countPacket(j, (long)packet.getPacketSize());
       ++receivedID;
-      receivedSize += (long)var4.getPacketSize();
-      var2.setSoTimeout(var5);
-      return var4;
+      receivedSize += (long)packet.getPacketSize();
+      socket.setSoTimeout(i);
+      return packet;
    }
 
-   public static void writePacket(Packet var0, DataOutputStream var1) {
-      var1.write(var0.getPacketId());
-      var0.writePacketData(var1);
+   public static void writePacket(Packet packet, DataOutputStream dataoutputstream) throws IOException {
+      dataoutputstream.write(packet.getPacketId());
+      packet.writePacketData(dataoutputstream);
       ++sentID;
-      sentSize += (long)var0.getPacketSize();
+      sentSize += (long)packet.getPacketSize();
    }
 
-   public static void writeString(String var0, DataOutputStream var1) {
-      if(var0.length() > 32767) {
+   public static void writeString(String s, DataOutputStream dataoutputstream) throws IOException {
+      if(s.length() > 32767) {
          throw new IOException("String too big");
       } else {
-         var1.writeShort(var0.length());
-         var1.writeChars(var0);
+         dataoutputstream.writeShort(s.length());
+         dataoutputstream.writeChars(s);
       }
    }
 
-   public static String readString(DataInputStream var0, int var1) {
-      short var2 = var0.readShort();
-      if(var2 > var1) {
-         throw new IOException("Received string length longer than maximum allowed (" + var2 + " > " + var1 + ")");
-      } else if(var2 < 0) {
+   public static String readString(DataInputStream datainputstream, int i) throws IOException {
+      short short1 = datainputstream.readShort();
+      if(short1 > i) {
+         throw new IOException("Received string length longer than maximum allowed (" + short1 + " > " + i + ")");
+      } else if(short1 < 0) {
          throw new IOException("Received string length is less than zero! Weird string!");
       } else {
-         StringBuilder var3 = new StringBuilder();
+         StringBuilder stringbuilder = new StringBuilder();
 
-         for(int var4 = 0; var4 < var2; ++var4) {
-            var3.append(var0.readChar());
+         for(int j = 0; j < short1; ++j) {
+            stringbuilder.append(datainputstream.readChar());
          }
 
-         return var3.toString();
+         return stringbuilder.toString();
       }
    }
 
-   public abstract void readPacketData(DataInputStream var1);
+   public abstract void readPacketData(DataInputStream var1) throws IOException;
 
-   public abstract void writePacketData(DataOutputStream var1);
+   public abstract void writePacketData(DataOutputStream var1) throws IOException;
 
    public abstract void processPacket(NetHandler var1);
 
@@ -240,7 +253,7 @@
       return false;
    }
 
-   public boolean containsSameEntityIDAs(Packet var1) {
+   public boolean containsSameEntityIDAs(Packet packet) {
       return false;
    }
 
@@ -249,58 +262,58 @@
    }
 
    public String toString() {
-      String var1 = this.getClass().getSimpleName();
-      return var1;
+      String s = this.getClass().getSimpleName();
+      return s;
    }
 
-   public static ItemStack readItemStack(DataInputStream var0) {
-      ItemStack var1 = null;
-      short var2 = var0.readShort();
-      if(var2 >= 0) {
-         byte var3 = var0.readByte();
-         short var4 = var0.readShort();
-         var1 = new ItemStack(var2, var3, var4);
-         var1.stackTagCompound = readNBTTagCompound(var0);
+   public static ItemStack readItemStack(DataInputStream datainputstream) throws IOException {
+      ItemStack itemstack = null;
+      short short1 = datainputstream.readShort();
+      if(short1 >= 0) {
+         byte b0 = datainputstream.readByte();
+         short short2 = datainputstream.readShort();
+         itemstack = new ItemStack(short1, b0, short2);
+         itemstack.stackTagCompound = readNBTTagCompound(datainputstream);
       }
 
-      return var1;
+      return itemstack;
    }
 
-   public static void writeItemStack(ItemStack var0, DataOutputStream var1) {
-      if(var0 == null) {
-         var1.writeShort(-1);
+   public static void writeItemStack(ItemStack itemstack, DataOutputStream dataoutputstream) throws IOException {
+      if(itemstack == null) {
+         dataoutputstream.writeShort(-1);
       } else {
-         var1.writeShort(var0.itemID);
-         var1.writeByte(var0.stackSize);
-         var1.writeShort(var0.getItemDamage());
-         NBTTagCompound var2 = null;
-         if(var0.getItem().isDamageable() || var0.getItem().getShareTag()) {
-            var2 = var0.stackTagCompound;
+         dataoutputstream.writeShort(itemstack.itemID);
+         dataoutputstream.writeByte(itemstack.stackSize);
+         dataoutputstream.writeShort(itemstack.getItemDamage());
+         NBTTagCompound nbttagcompound = null;
+         if(itemstack.getItem().isDamageable() || itemstack.getItem().getShareTag()) {
+            nbttagcompound = itemstack.stackTagCompound;
          }
 
-         writeNBTTagCompound(var2, var1);
+         writeNBTTagCompound(nbttagcompound, dataoutputstream);
       }
 
    }
 
-   public static NBTTagCompound readNBTTagCompound(DataInputStream var0) {
-      short var1 = var0.readShort();
-      if(var1 < 0) {
+   public static NBTTagCompound readNBTTagCompound(DataInputStream datainputstream) throws IOException {
+      short short1 = datainputstream.readShort();
+      if(short1 < 0) {
          return null;
       } else {
-         byte[] var2 = new byte[var1];
-         var0.readFully(var2);
-         return CompressedStreamTools.decompress(var2);
+         byte[] abyte = new byte[short1];
+         datainputstream.readFully(abyte);
+         return CompressedStreamTools.decompress(abyte);
       }
    }
 
-   protected static void writeNBTTagCompound(NBTTagCompound var0, DataOutputStream var1) {
-      if(var0 == null) {
-         var1.writeShort(-1);
+   protected static void writeNBTTagCompound(NBTTagCompound nbttagcompound, DataOutputStream dataoutputstream) throws IOException {
+      if(nbttagcompound == null) {
+         dataoutputstream.writeShort(-1);
       } else {
-         byte[] var2 = CompressedStreamTools.compress(var0);
-         var1.writeShort((short)var2.length);
-         var1.write(var2);
+         byte[] abyte = CompressedStreamTools.compress(nbttagcompound);
+         dataoutputstream.writeShort((short)abyte.length);
+         dataoutputstream.write(abyte);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/Packet20NamedEntitySpawn.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet20NamedEntitySpawn.class differ
diff -ur mcp-mcdev/net/minecraft/src/Packet20NamedEntitySpawn.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet20NamedEntitySpawn.java
--- mcp-mcdev/net/minecraft/src/Packet20NamedEntitySpawn.java	2012-11-29 21:14:42.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet20NamedEntitySpawn.java	2012-11-29 20:43:51.000000000 -0800
@@ -2,6 +2,7 @@
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
+import java.io.IOException;
 import java.util.List;
 import net.minecraft.src.DataWatcher;
 import net.minecraft.src.EntityPlayer;
@@ -26,45 +27,50 @@
 
    public Packet20NamedEntitySpawn() {}
 
-   public Packet20NamedEntitySpawn(EntityPlayer var1) {
-      this.entityId = var1.entityId;
-      this.name = var1.username;
-      this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-      this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-      this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-      this.rotation = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-      this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-      ItemStack var2 = var1.inventory.getCurrentItem();
-      this.currentItem = var2 == null?0:var2.itemID;
-      this.metadata = var1.getDataWatcher();
+   public Packet20NamedEntitySpawn(EntityPlayer entityhuman) {
+      this.entityId = entityhuman.entityId;
+      if(entityhuman.username.length() > 16) {
+         this.name = entityhuman.username.substring(0, 16);
+      } else {
+         this.name = entityhuman.username;
+      }
+
+      this.xPosition = MathHelper.floor_double(entityhuman.posX * 32.0D);
+      this.yPosition = MathHelper.floor_double(entityhuman.posY * 32.0D);
+      this.zPosition = MathHelper.floor_double(entityhuman.posZ * 32.0D);
+      this.rotation = (byte)((int)(entityhuman.rotationYaw * 256.0F / 360.0F));
+      this.pitch = (byte)((int)(entityhuman.rotationPitch * 256.0F / 360.0F));
+      ItemStack itemstack = entityhuman.inventory.getCurrentItem();
+      this.currentItem = itemstack == null?0:itemstack.itemID;
+      this.metadata = entityhuman.getDataWatcher();
    }
 
-   public void readPacketData(DataInputStream var1) {
-      this.entityId = var1.readInt();
-      this.name = readString(var1, 16);
-      this.xPosition = var1.readInt();
-      this.yPosition = var1.readInt();
-      this.zPosition = var1.readInt();
-      this.rotation = var1.readByte();
-      this.pitch = var1.readByte();
-      this.currentItem = var1.readShort();
-      this.field_73517_j = DataWatcher.readWatchableObjects(var1);
+   public void readPacketData(DataInputStream datainputstream) throws IOException {
+      this.entityId = datainputstream.readInt();
+      this.name = readString(datainputstream, 16);
+      this.xPosition = datainputstream.readInt();
+      this.yPosition = datainputstream.readInt();
+      this.zPosition = datainputstream.readInt();
+      this.rotation = datainputstream.readByte();
+      this.pitch = datainputstream.readByte();
+      this.currentItem = datainputstream.readShort();
+      this.field_73517_j = DataWatcher.readWatchableObjects(datainputstream);
    }
 
-   public void writePacketData(DataOutputStream var1) {
-      var1.writeInt(this.entityId);
-      writeString(this.name, var1);
-      var1.writeInt(this.xPosition);
-      var1.writeInt(this.yPosition);
-      var1.writeInt(this.zPosition);
-      var1.writeByte(this.rotation);
-      var1.writeByte(this.pitch);
-      var1.writeShort(this.currentItem);
-      this.metadata.writeWatchableObjects(var1);
+   public void writePacketData(DataOutputStream dataoutputstream) throws IOException {
+      dataoutputstream.writeInt(this.entityId);
+      writeString(this.name, dataoutputstream);
+      dataoutputstream.writeInt(this.xPosition);
+      dataoutputstream.writeInt(this.yPosition);
+      dataoutputstream.writeInt(this.zPosition);
+      dataoutputstream.writeByte(this.rotation);
+      dataoutputstream.writeByte(this.pitch);
+      dataoutputstream.writeShort(this.currentItem);
+      this.metadata.writeWatchableObjects(dataoutputstream);
    }
 
-   public void processPacket(NetHandler var1) {
-      var1.handleNamedEntitySpawn(this);
+   public void processPacket(NetHandler nethandler) {
+      nethandler.handleNamedEntitySpawn(this);
    }
 
    public int getPacketSize() {
Binary files mcp-mcdev/net/minecraft/src/Packet2ClientProtocol.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet2ClientProtocol.class differ
diff -ur mcp-mcdev/net/minecraft/src/Packet2ClientProtocol.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet2ClientProtocol.java
--- mcp-mcdev/net/minecraft/src/Packet2ClientProtocol.java	2012-11-29 21:14:41.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet2ClientProtocol.java	2012-11-29 20:43:51.000000000 -0800
@@ -2,6 +2,7 @@
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
+import java.io.IOException;
 import net.minecraft.src.NetHandler;
 import net.minecraft.src.Packet;
 
@@ -9,26 +10,26 @@
 
    private int protocolVersion;
    private String username;
-   private String serverHost;
-   private int serverPort;
+   public String serverHost;
+   public int serverPort;
 
 
-   public void readPacketData(DataInputStream var1) {
-      this.protocolVersion = var1.readByte();
-      this.username = readString(var1, 16);
-      this.serverHost = readString(var1, 255);
-      this.serverPort = var1.readInt();
+   public void readPacketData(DataInputStream datainputstream) throws IOException {
+      this.protocolVersion = datainputstream.readByte();
+      this.username = readString(datainputstream, 16);
+      this.serverHost = readString(datainputstream, 255);
+      this.serverPort = datainputstream.readInt();
    }
 
-   public void writePacketData(DataOutputStream var1) {
-      var1.writeByte(this.protocolVersion);
-      writeString(this.username, var1);
-      writeString(this.serverHost, var1);
-      var1.writeInt(this.serverPort);
+   public void writePacketData(DataOutputStream dataoutputstream) throws IOException {
+      dataoutputstream.writeByte(this.protocolVersion);
+      writeString(this.username, dataoutputstream);
+      writeString(this.serverHost, dataoutputstream);
+      dataoutputstream.writeInt(this.serverPort);
    }
 
-   public void processPacket(NetHandler var1) {
-      var1.handleClientProtocol(this);
+   public void processPacket(NetHandler nethandler) {
+      nethandler.handleClientProtocol(this);
    }
 
    public int getPacketSize() {
Binary files mcp-mcdev/net/minecraft/src/Packet3Chat.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet3Chat.class differ
diff -ur mcp-mcdev/net/minecraft/src/Packet3Chat.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet3Chat.java
--- mcp-mcdev/net/minecraft/src/Packet3Chat.java	2012-11-29 21:14:41.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet3Chat.java	2012-11-29 20:43:50.000000000 -0800
@@ -2,6 +2,7 @@
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
+import java.io.IOException;
 import net.minecraft.src.NetHandler;
 import net.minecraft.src.Packet;
 
@@ -16,30 +17,26 @@
       this.field_73477_c = true;
    }
 
-   public Packet3Chat(String var1) {
-      this(var1, true);
+   public Packet3Chat(String s) {
+      this(s, true);
    }
 
-   public Packet3Chat(String var1, boolean var2) {
+   public Packet3Chat(String s, boolean flag) {
       this.field_73477_c = true;
-      if(var1.length() > maxChatLength) {
-         var1 = var1.substring(0, maxChatLength);
-      }
-
-      this.message = var1;
-      this.field_73477_c = var2;
+      this.message = s;
+      this.field_73477_c = flag;
    }
 
-   public void readPacketData(DataInputStream var1) {
-      this.message = readString(var1, maxChatLength);
+   public void readPacketData(DataInputStream datainputstream) throws IOException {
+      this.message = readString(datainputstream, maxChatLength);
    }
 
-   public void writePacketData(DataOutputStream var1) {
-      writeString(this.message, var1);
+   public void writePacketData(DataOutputStream dataoutputstream) throws IOException {
+      writeString(this.message, dataoutputstream);
    }
 
-   public void processPacket(NetHandler var1) {
-      var1.handleChat(this);
+   public void processPacket(NetHandler nethandler) {
+      nethandler.handleChat(this);
    }
 
    public int getPacketSize() {
Binary files mcp-mcdev/net/minecraft/src/Packet51MapChunk.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet51MapChunk.class differ
diff -ur mcp-mcdev/net/minecraft/src/Packet51MapChunk.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet51MapChunk.java
--- mcp-mcdev/net/minecraft/src/Packet51MapChunk.java	2012-11-29 21:14:41.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet51MapChunk.java	2012-11-29 20:43:50.000000000 -0800
@@ -3,6 +3,7 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
+import java.util.Arrays;
 import java.util.zip.DataFormatException;
 import java.util.zip.Deflater;
 import java.util.zip.Inflater;
@@ -30,157 +31,163 @@
       this.isChunkDataPacket = true;
    }
 
-   public Packet51MapChunk(Chunk var1, boolean var2, int var3) {
+   public Packet51MapChunk(Chunk chunk, boolean flag, int i) {
       this.isChunkDataPacket = true;
-      this.xCh = var1.xPosition;
-      this.zCh = var1.zPosition;
-      this.includeInitialize = var2;
-      Packet51MapChunkData var4 = getMapChunkData(var1, var2, var3);
-      Deflater var5 = new Deflater(-1);
-      this.yChMax = var4.field_74581_c;
-      this.yChMin = var4.field_74580_b;
+      this.xCh = chunk.xPosition;
+      this.zCh = chunk.zPosition;
+      this.includeInitialize = flag;
+      Packet51MapChunkData chunkmap = getMapChunkData(chunk, flag, i);
+      Deflater deflater = new Deflater(-1);
+      this.yChMax = chunkmap.field_74581_c;
+      this.yChMin = chunkmap.field_74580_b;
 
       try {
-         this.field_73596_g = var4.field_74582_a;
-         var5.setInput(var4.field_74582_a, 0, var4.field_74582_a.length);
-         var5.finish();
-         this.chunkData = new byte[var4.field_74582_a.length];
-         this.tempLength = var5.deflate(this.chunkData);
+         this.field_73596_g = chunkmap.field_74582_a;
+         deflater.setInput(chunkmap.field_74582_a, 0, chunkmap.field_74582_a.length);
+         deflater.finish();
+         this.chunkData = new byte[chunkmap.field_74582_a.length];
+         this.tempLength = deflater.deflate(this.chunkData);
       } finally {
-         var5.end();
+         deflater.end();
       }
 
    }
 
-   public void readPacketData(DataInputStream var1) {
-      this.xCh = var1.readInt();
-      this.zCh = var1.readInt();
-      this.includeInitialize = var1.readBoolean();
-      this.yChMin = var1.readShort();
-      this.yChMax = var1.readShort();
-      this.tempLength = var1.readInt();
+   public void readPacketData(DataInputStream datainputstream) throws IOException {
+      this.xCh = datainputstream.readInt();
+      this.zCh = datainputstream.readInt();
+      this.includeInitialize = datainputstream.readBoolean();
+      this.yChMin = datainputstream.readShort();
+      this.yChMax = datainputstream.readShort();
+      this.tempLength = datainputstream.readInt();
       if(temp.length < this.tempLength) {
          temp = new byte[this.tempLength];
       }
 
-      var1.readFully(temp, 0, this.tempLength);
-      int var2 = 0;
+      datainputstream.readFully(temp, 0, this.tempLength);
+      int i = 0;
 
-      int var3;
-      for(var3 = 0; var3 < 16; ++var3) {
-         var2 += this.yChMin >> var3 & 1;
+      int j;
+      for(j = 0; j < 16; ++j) {
+         i += this.yChMin >> j & 1;
       }
 
-      var3 = 12288 * var2;
+      j = 12288 * i;
       if(this.includeInitialize) {
-         var3 += 256;
+         j += 256;
       }
 
-      this.field_73596_g = new byte[var3];
-      Inflater var4 = new Inflater();
-      var4.setInput(temp, 0, this.tempLength);
+      this.field_73596_g = new byte[j];
+      Inflater inflater = new Inflater();
+      inflater.setInput(temp, 0, this.tempLength);
 
       try {
-         var4.inflate(this.field_73596_g);
-      } catch (DataFormatException var9) {
+         inflater.inflate(this.field_73596_g);
+      } catch (DataFormatException var10) {
          throw new IOException("Bad compressed data format");
       } finally {
-         var4.end();
+         inflater.end();
       }
 
    }
 
-   public void writePacketData(DataOutputStream var1) {
-      var1.writeInt(this.xCh);
-      var1.writeInt(this.zCh);
-      var1.writeBoolean(this.includeInitialize);
-      var1.writeShort((short)(this.yChMin & '\uffff'));
-      var1.writeShort((short)(this.yChMax & '\uffff'));
-      var1.writeInt(this.tempLength);
-      var1.write(this.chunkData, 0, this.tempLength);
+   public void writePacketData(DataOutputStream dataoutputstream) throws IOException {
+      dataoutputstream.writeInt(this.xCh);
+      dataoutputstream.writeInt(this.zCh);
+      dataoutputstream.writeBoolean(this.includeInitialize);
+      dataoutputstream.writeShort((short)(this.yChMin & '\uffff'));
+      dataoutputstream.writeShort((short)(this.yChMax & '\uffff'));
+      dataoutputstream.writeInt(this.tempLength);
+      dataoutputstream.write(this.chunkData, 0, this.tempLength);
    }
 
-   public void processPacket(NetHandler var1) {
-      var1.handleMapChunk(this);
+   public void processPacket(NetHandler nethandler) {
+      nethandler.handleMapChunk(this);
    }
 
    public int getPacketSize() {
       return 17 + this.tempLength;
    }
 
-   public static Packet51MapChunkData getMapChunkData(Chunk var0, boolean var1, int var2) {
-      int var3 = 0;
-      ExtendedBlockStorage[] var4 = var0.getBlockStorageArray();
-      int var5 = 0;
-      Packet51MapChunkData var6 = new Packet51MapChunkData();
-      byte[] var7 = temp;
-      if(var1) {
-         var0.deferRender = true;
-      }
-
-      int var8;
-      for(var8 = 0; var8 < var4.length; ++var8) {
-         if(var4[var8] != null && (!var1 || !var4[var8].isEmpty()) && (var2 & 1 << var8) != 0) {
-            var6.field_74580_b |= 1 << var8;
-            if(var4[var8].getBlockMSBArray() != null) {
-               var6.field_74581_c |= 1 << var8;
-               ++var5;
+   public static Packet51MapChunkData getMapChunkData(Chunk chunk, boolean flag, int i) {
+      int j = 0;
+      ExtendedBlockStorage[] achunksection = chunk.getBlockStorageArray();
+      int k = 0;
+      Packet51MapChunkData chunkmap = new Packet51MapChunkData();
+      byte[] abyte = temp;
+      if(flag) {
+         chunk.deferRender = true;
+      }
+
+      int l;
+      for(l = 0; l < achunksection.length; ++l) {
+         if(achunksection[l] != null && (!flag || !achunksection[l].isEmpty()) && (i & 1 << l) != 0) {
+            chunkmap.field_74580_b |= 1 << l;
+            if(achunksection[l].getBlockMSBArray() != null) {
+               chunkmap.field_74581_c |= 1 << l;
+               ++k;
             }
          }
       }
 
-      for(var8 = 0; var8 < var4.length; ++var8) {
-         if(var4[var8] != null && (!var1 || !var4[var8].isEmpty()) && (var2 & 1 << var8) != 0) {
-            byte[] var9 = var4[var8].getBlockLSBArray();
-            System.arraycopy(var9, 0, var7, var3, var9.length);
-            var3 += var9.length;
+      for(l = 0; l < achunksection.length; ++l) {
+         if(achunksection[l] != null && (!flag || !achunksection[l].isEmpty()) && (i & 1 << l) != 0) {
+            byte[] nibblearray = achunksection[l].getBlockLSBArray();
+            System.arraycopy(nibblearray, 0, abyte, j, nibblearray.length);
+            j += nibblearray.length;
          }
       }
 
-      NibbleArray var10;
-      for(var8 = 0; var8 < var4.length; ++var8) {
-         if(var4[var8] != null && (!var1 || !var4[var8].isEmpty()) && (var2 & 1 << var8) != 0) {
-            var10 = var4[var8].getMetadataArray();
-            System.arraycopy(var10.data, 0, var7, var3, var10.data.length);
-            var3 += var10.data.length;
+      NibbleArray var11;
+      for(l = 0; l < achunksection.length; ++l) {
+         if(achunksection[l] != null && (!flag || !achunksection[l].isEmpty()) && (i & 1 << l) != 0) {
+            var11 = achunksection[l].getMetadataArray();
+            System.arraycopy(var11.data, 0, abyte, j, var11.data.length);
+            j += var11.data.length;
          }
       }
 
-      for(var8 = 0; var8 < var4.length; ++var8) {
-         if(var4[var8] != null && (!var1 || !var4[var8].isEmpty()) && (var2 & 1 << var8) != 0) {
-            var10 = var4[var8].getBlocklightArray();
-            System.arraycopy(var10.data, 0, var7, var3, var10.data.length);
-            var3 += var10.data.length;
+      for(l = 0; l < achunksection.length; ++l) {
+         if(achunksection[l] != null && (!flag || !achunksection[l].isEmpty()) && (i & 1 << l) != 0) {
+            var11 = achunksection[l].getBlocklightArray();
+            System.arraycopy(var11.data, 0, abyte, j, var11.data.length);
+            j += var11.data.length;
          }
       }
 
-      for(var8 = 0; var8 < var4.length; ++var8) {
-         if(var4[var8] != null && (!var1 || !var4[var8].isEmpty()) && (var2 & 1 << var8) != 0) {
-            var10 = var4[var8].getSkylightArray();
-            System.arraycopy(var10.data, 0, var7, var3, var10.data.length);
-            var3 += var10.data.length;
+      for(l = 0; l < achunksection.length; ++l) {
+         if(achunksection[l] != null && (!flag || !achunksection[l].isEmpty()) && (i & 1 << l) != 0) {
+            var11 = achunksection[l].getSkylightArray();
+            System.arraycopy(var11.data, 0, abyte, j, var11.data.length);
+            j += var11.data.length;
          }
       }
 
-      if(var5 > 0) {
-         for(var8 = 0; var8 < var4.length; ++var8) {
-            if(var4[var8] != null && (!var1 || !var4[var8].isEmpty()) && var4[var8].getBlockMSBArray() != null && (var2 & 1 << var8) != 0) {
-               var10 = var4[var8].getBlockMSBArray();
-               System.arraycopy(var10.data, 0, var7, var3, var10.data.length);
-               var3 += var10.data.length;
+      if(k > 0) {
+         for(l = 0; l < achunksection.length; ++l) {
+            if(achunksection[l] != null && (!flag || !achunksection[l].isEmpty()) && achunksection[l].getBlockMSBArray() != null && (i & 1 << l) != 0) {
+               var11 = achunksection[l].getBlockMSBArray();
+               System.arraycopy(var11.data, 0, abyte, j, var11.data.length);
+               j += var11.data.length;
             }
          }
       }
 
-      if(var1) {
-         byte[] var11 = var0.getBiomeArray();
-         System.arraycopy(var11, 0, var7, var3, var11.length);
-         var3 += var11.length;
+      if(flag && i == '\uffff' && j == 0 && chunkmap.field_74580_b == 0 && chunkmap.field_74581_c == 0) {
+         chunkmap.field_74580_b = 1;
+         j = 10240;
+         Arrays.fill(abyte, 0, j, (byte)0);
       }
 
-      var6.field_74582_a = new byte[var3];
-      System.arraycopy(var7, 0, var6.field_74582_a, 0, var3);
-      return var6;
+      if(flag) {
+         byte[] abyte2 = chunk.getBiomeArray();
+         System.arraycopy(abyte2, 0, abyte, j, abyte2.length);
+         j += abyte2.length;
+      }
+
+      chunkmap.field_74582_a = new byte[j];
+      System.arraycopy(abyte, 0, chunkmap.field_74582_a, 0, j);
+      return chunkmap;
    }
 
 }
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: Packet56MapChunks$1.class
Binary files mcp-mcdev/net/minecraft/src/Packet56MapChunks.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet56MapChunks.class differ
diff -ur mcp-mcdev/net/minecraft/src/Packet56MapChunks.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet56MapChunks.java
--- mcp-mcdev/net/minecraft/src/Packet56MapChunks.java	2012-11-29 21:14:40.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Packet56MapChunks.java	2012-11-29 20:43:50.000000000 -0800
@@ -22,114 +22,120 @@
    private byte[] field_73587_e;
    private byte[][] field_73584_f;
    private int field_73585_g;
-   private static byte[] field_73591_h = new byte[0];
+   private byte[] field_73591_h = new byte[0];
+   static final ThreadLocal localDeflater = new ThreadLocal() {
+      protected Deflater initialValue() {
+         return new Deflater(6);
+      }
+   };
 
 
    public Packet56MapChunks() {}
 
-   public Packet56MapChunks(List var1) {
-      int var2 = var1.size();
-      this.field_73589_c = new int[var2];
-      this.field_73586_d = new int[var2];
-      this.field_73590_a = new int[var2];
-      this.field_73588_b = new int[var2];
-      this.field_73584_f = new byte[var2][];
-      int var3 = 0;
-
-      for(int var4 = 0; var4 < var2; ++var4) {
-         Chunk var5 = (Chunk)var1.get(var4);
-         Packet51MapChunkData var6 = Packet51MapChunk.getMapChunkData(var5, true, '\uffff');
-         if(field_73591_h.length < var3 + var6.field_74582_a.length) {
-            byte[] var7 = new byte[var3 + var6.field_74582_a.length];
-            System.arraycopy(field_73591_h, 0, var7, 0, field_73591_h.length);
-            field_73591_h = var7;
+   public Packet56MapChunks(List list) {
+      int i = list.size();
+      this.field_73589_c = new int[i];
+      this.field_73586_d = new int[i];
+      this.field_73590_a = new int[i];
+      this.field_73588_b = new int[i];
+      this.field_73584_f = new byte[i][];
+      int j = 0;
+
+      for(int k = 0; k < i; ++k) {
+         Chunk chunk = (Chunk)list.get(k);
+         Packet51MapChunkData chunkmap = Packet51MapChunk.getMapChunkData(chunk, true, '\uffff');
+         if(this.field_73591_h.length < j + chunkmap.field_74582_a.length) {
+            byte[] abyte = new byte[j + chunkmap.field_74582_a.length];
+            System.arraycopy(this.field_73591_h, 0, abyte, 0, this.field_73591_h.length);
+            this.field_73591_h = abyte;
          }
 
-         System.arraycopy(var6.field_74582_a, 0, field_73591_h, var3, var6.field_74582_a.length);
-         var3 += var6.field_74582_a.length;
-         this.field_73589_c[var4] = var5.xPosition;
-         this.field_73586_d[var4] = var5.zPosition;
-         this.field_73590_a[var4] = var6.field_74580_b;
-         this.field_73588_b[var4] = var6.field_74581_c;
-         this.field_73584_f[var4] = var6.field_74582_a;
-      }
-
-      Deflater var11 = new Deflater(-1);
-
-      try {
-         var11.setInput(field_73591_h, 0, var3);
-         var11.finish();
-         this.field_73587_e = new byte[var3];
-         this.field_73585_g = var11.deflate(this.field_73587_e);
-      } finally {
-         var11.end();
+         System.arraycopy(chunkmap.field_74582_a, 0, this.field_73591_h, j, chunkmap.field_74582_a.length);
+         j += chunkmap.field_74582_a.length;
+         this.field_73589_c[k] = chunk.xPosition;
+         this.field_73586_d[k] = chunk.zPosition;
+         this.field_73590_a[k] = chunkmap.field_74580_b;
+         this.field_73588_b[k] = chunkmap.field_74581_c;
+         this.field_73584_f[k] = chunkmap.field_74582_a;
       }
 
    }
 
-   public void readPacketData(DataInputStream var1) {
-      short var2 = var1.readShort();
-      this.field_73585_g = var1.readInt();
-      this.field_73589_c = new int[var2];
-      this.field_73586_d = new int[var2];
-      this.field_73590_a = new int[var2];
-      this.field_73588_b = new int[var2];
-      this.field_73584_f = new byte[var2][];
-      if(field_73591_h.length < this.field_73585_g) {
-         field_73591_h = new byte[this.field_73585_g];
+   public void compress() {
+      if(this.field_73587_e == null) {
+         Deflater deflater = (Deflater)localDeflater.get();
+         deflater.reset();
+         deflater.setInput(this.field_73591_h);
+         deflater.finish();
+         this.field_73587_e = new byte[this.field_73591_h.length + 100];
+         this.field_73585_g = deflater.deflate(this.field_73587_e);
       }
-
-      var1.readFully(field_73591_h, 0, this.field_73585_g);
-      byte[] var3 = new byte[196864 * var2];
-      Inflater var4 = new Inflater();
-      var4.setInput(field_73591_h, 0, this.field_73585_g);
+   }
+
+   public void readPacketData(DataInputStream datainputstream) throws IOException {
+      short short1 = datainputstream.readShort();
+      this.field_73585_g = datainputstream.readInt();
+      this.field_73589_c = new int[short1];
+      this.field_73586_d = new int[short1];
+      this.field_73590_a = new int[short1];
+      this.field_73588_b = new int[short1];
+      this.field_73584_f = new byte[short1][];
+      if(this.field_73591_h.length < this.field_73585_g) {
+         this.field_73591_h = new byte[this.field_73585_g];
+      }
+
+      datainputstream.readFully(this.field_73591_h, 0, this.field_73585_g);
+      byte[] abyte = new byte[196864 * short1];
+      Inflater inflater = new Inflater();
+      inflater.setInput(this.field_73591_h, 0, this.field_73585_g);
 
       try {
-         var4.inflate(var3);
+         inflater.inflate(abyte);
       } catch (DataFormatException var11) {
          throw new IOException("Bad compressed data format");
       } finally {
-         var4.end();
+         inflater.end();
       }
 
-      int var5 = 0;
+      int i = 0;
 
-      for(int var6 = 0; var6 < var2; ++var6) {
-         this.field_73589_c[var6] = var1.readInt();
-         this.field_73586_d[var6] = var1.readInt();
-         this.field_73590_a[var6] = var1.readShort();
-         this.field_73588_b[var6] = var1.readShort();
-         int var7 = 0;
+      for(int j = 0; j < short1; ++j) {
+         this.field_73589_c[j] = datainputstream.readInt();
+         this.field_73586_d[j] = datainputstream.readInt();
+         this.field_73590_a[j] = datainputstream.readShort();
+         this.field_73588_b[j] = datainputstream.readShort();
+         int k = 0;
 
-         int var8;
-         for(var8 = 0; var8 < 16; ++var8) {
-            var7 += this.field_73590_a[var6] >> var8 & 1;
+         int l;
+         for(l = 0; l < 16; ++l) {
+            k += this.field_73590_a[j] >> l & 1;
          }
 
-         var8 = 2048 * 5 * var7 + 256;
-         this.field_73584_f[var6] = new byte[var8];
-         System.arraycopy(var3, var5, this.field_73584_f[var6], 0, var8);
-         var5 += var8;
+         l = 10240 * k + 256;
+         this.field_73584_f[j] = new byte[l];
+         System.arraycopy(abyte, i, this.field_73584_f[j], 0, l);
+         i += l;
       }
 
    }
 
-   public void writePacketData(DataOutputStream var1) {
-      var1.writeShort(this.field_73589_c.length);
-      var1.writeInt(this.field_73585_g);
-      var1.write(this.field_73587_e, 0, this.field_73585_g);
+   public void writePacketData(DataOutputStream dataoutputstream) throws IOException {
+      this.compress();
+      dataoutputstream.writeShort(this.field_73589_c.length);
+      dataoutputstream.writeInt(this.field_73585_g);
+      dataoutputstream.write(this.field_73587_e, 0, this.field_73585_g);
 
-      for(int var2 = 0; var2 < this.field_73589_c.length; ++var2) {
-         var1.writeInt(this.field_73589_c[var2]);
-         var1.writeInt(this.field_73586_d[var2]);
-         var1.writeShort((short)(this.field_73590_a[var2] & '\uffff'));
-         var1.writeShort((short)(this.field_73588_b[var2] & '\uffff'));
+      for(int i = 0; i < this.field_73589_c.length; ++i) {
+         dataoutputstream.writeInt(this.field_73589_c[i]);
+         dataoutputstream.writeInt(this.field_73586_d[i]);
+         dataoutputstream.writeShort((short)(this.field_73590_a[i] & '\uffff'));
+         dataoutputstream.writeShort((short)(this.field_73588_b[i] & '\uffff'));
       }
 
    }
 
-   public void processPacket(NetHandler var1) {
-      var1.handleMapChunks(this);
+   public void processPacket(NetHandler nethandler) {
+      nethandler.handleMapChunks(this);
    }
 
    public int getPacketSize() {
Binary files mcp-mcdev/net/minecraft/src/Path.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Path.class differ
diff -ur mcp-mcdev/net/minecraft/src/Path.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Path.java
--- mcp-mcdev/net/minecraft/src/Path.java	2012-11-29 21:14:40.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Path.java	2012-11-29 20:43:50.000000000 -0800
@@ -4,24 +4,24 @@
 
 public class Path {
 
-   private PathPoint[] pathPoints = new PathPoint[1024];
+   private PathPoint[] pathPoints = new PathPoint[128];
    private int count = 0;
 
 
-   public PathPoint addPoint(PathPoint var1) {
-      if(var1.index >= 0) {
+   public PathPoint addPoint(PathPoint pathpoint) {
+      if(pathpoint.index >= 0) {
          throw new IllegalStateException("OW KNOWS!");
       } else {
          if(this.count == this.pathPoints.length) {
-            PathPoint[] var2 = new PathPoint[this.count << 1];
-            System.arraycopy(this.pathPoints, 0, var2, 0, this.count);
-            this.pathPoints = var2;
+            PathPoint[] apathpoint = new PathPoint[this.count << 1];
+            System.arraycopy(this.pathPoints, 0, apathpoint, 0, this.count);
+            this.pathPoints = apathpoint;
          }
 
-         this.pathPoints[this.count] = var1;
-         var1.index = this.count;
+         this.pathPoints[this.count] = pathpoint;
+         pathpoint.index = this.count;
          this.sortBack(this.count++);
-         return var1;
+         return pathpoint;
       }
    }
 
@@ -30,91 +30,91 @@
    }
 
    public PathPoint dequeue() {
-      PathPoint var1 = this.pathPoints[0];
+      PathPoint pathpoint = this.pathPoints[0];
       this.pathPoints[0] = this.pathPoints[--this.count];
       this.pathPoints[this.count] = null;
       if(this.count > 0) {
          this.sortForward(0);
       }
 
-      var1.index = -1;
-      return var1;
+      pathpoint.index = -1;
+      return pathpoint;
    }
 
-   public void changeDistance(PathPoint var1, float var2) {
-      float var3 = var1.distanceToTarget;
-      var1.distanceToTarget = var2;
-      if(var2 < var3) {
-         this.sortBack(var1.index);
+   public void changeDistance(PathPoint pathpoint, float f) {
+      float f1 = pathpoint.distanceToTarget;
+      pathpoint.distanceToTarget = f;
+      if(f < f1) {
+         this.sortBack(pathpoint.index);
       } else {
-         this.sortForward(var1.index);
+         this.sortForward(pathpoint.index);
       }
 
    }
 
-   private void sortBack(int var1) {
-      PathPoint var2 = this.pathPoints[var1];
+   private void sortBack(int i) {
+      PathPoint pathpoint = this.pathPoints[i];
 
-      int var4;
-      for(float var3 = var2.distanceToTarget; var1 > 0; var1 = var4) {
-         var4 = var1 - 1 >> 1;
-         PathPoint var5 = this.pathPoints[var4];
-         if(var3 >= var5.distanceToTarget) {
+      int j;
+      for(float f = pathpoint.distanceToTarget; i > 0; i = j) {
+         j = i - 1 >> 1;
+         PathPoint pathpoint1 = this.pathPoints[j];
+         if(f >= pathpoint1.distanceToTarget) {
             break;
          }
 
-         this.pathPoints[var1] = var5;
-         var5.index = var1;
+         this.pathPoints[i] = pathpoint1;
+         pathpoint1.index = i;
       }
 
-      this.pathPoints[var1] = var2;
-      var2.index = var1;
+      this.pathPoints[i] = pathpoint;
+      pathpoint.index = i;
    }
 
-   private void sortForward(int var1) {
-      PathPoint var2 = this.pathPoints[var1];
-      float var3 = var2.distanceToTarget;
+   private void sortForward(int i) {
+      PathPoint pathpoint = this.pathPoints[i];
+      float f = pathpoint.distanceToTarget;
 
       while(true) {
-         int var4 = 1 + (var1 << 1);
-         int var5 = var4 + 1;
-         if(var4 >= this.count) {
+         int j = 1 + (i << 1);
+         int k = j + 1;
+         if(j >= this.count) {
             break;
          }
 
-         PathPoint var6 = this.pathPoints[var4];
-         float var7 = var6.distanceToTarget;
-         PathPoint var8;
-         float var9;
-         if(var5 >= this.count) {
-            var8 = null;
-            var9 = Float.POSITIVE_INFINITY;
+         PathPoint pathpoint1 = this.pathPoints[j];
+         float f1 = pathpoint1.distanceToTarget;
+         PathPoint pathpoint2;
+         float f2;
+         if(k >= this.count) {
+            pathpoint2 = null;
+            f2 = Float.POSITIVE_INFINITY;
          } else {
-            var8 = this.pathPoints[var5];
-            var9 = var8.distanceToTarget;
+            pathpoint2 = this.pathPoints[k];
+            f2 = pathpoint2.distanceToTarget;
          }
 
-         if(var7 < var9) {
-            if(var7 >= var3) {
+         if(f1 < f2) {
+            if(f1 >= f) {
                break;
             }
 
-            this.pathPoints[var1] = var6;
-            var6.index = var1;
-            var1 = var4;
+            this.pathPoints[i] = pathpoint1;
+            pathpoint1.index = i;
+            i = j;
          } else {
-            if(var9 >= var3) {
+            if(f2 >= f) {
                break;
             }
 
-            this.pathPoints[var1] = var8;
-            var8.index = var1;
-            var1 = var5;
+            this.pathPoints[i] = pathpoint2;
+            pathpoint2.index = i;
+            i = k;
          }
       }
 
-      this.pathPoints[var1] = var2;
-      var2.index = var1;
+      this.pathPoints[i] = pathpoint;
+      pathpoint.index = i;
    }
 
    public boolean isPathEmpty() {
Binary files mcp-mcdev/net/minecraft/src/PlayerCapabilities.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PlayerCapabilities.class differ
diff -ur mcp-mcdev/net/minecraft/src/PlayerCapabilities.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PlayerCapabilities.java
--- mcp-mcdev/net/minecraft/src/PlayerCapabilities.java	2012-11-29 21:14:39.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PlayerCapabilities.java	2012-11-29 20:43:49.000000000 -0800
@@ -9,36 +9,36 @@
    public boolean allowFlying = false;
    public boolean isCreativeMode = false;
    public boolean allowEdit = true;
-   private float flySpeed = 0.05F;
-   private float walkSpeed = 0.1F;
+   public float flySpeed = 0.05F;
+   public float walkSpeed = 0.1F;
 
 
-   public void writeCapabilitiesToNBT(NBTTagCompound var1) {
-      NBTTagCompound var2 = new NBTTagCompound();
-      var2.setBoolean("invulnerable", this.disableDamage);
-      var2.setBoolean("flying", this.isFlying);
-      var2.setBoolean("mayfly", this.allowFlying);
-      var2.setBoolean("instabuild", this.isCreativeMode);
-      var2.setBoolean("mayBuild", this.allowEdit);
-      var2.setFloat("flySpeed", this.flySpeed);
-      var2.setFloat("walkSpeed", this.walkSpeed);
-      var1.setTag("abilities", var2);
+   public void writeCapabilitiesToNBT(NBTTagCompound nbttagcompound) {
+      NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+      nbttagcompound1.setBoolean("invulnerable", this.disableDamage);
+      nbttagcompound1.setBoolean("flying", this.isFlying);
+      nbttagcompound1.setBoolean("mayfly", this.allowFlying);
+      nbttagcompound1.setBoolean("instabuild", this.isCreativeMode);
+      nbttagcompound1.setBoolean("mayBuild", this.allowEdit);
+      nbttagcompound1.setFloat("flySpeed", this.flySpeed);
+      nbttagcompound1.setFloat("walkSpeed", this.walkSpeed);
+      nbttagcompound.setTag("abilities", nbttagcompound1);
    }
 
-   public void readCapabilitiesFromNBT(NBTTagCompound var1) {
-      if(var1.hasKey("abilities")) {
-         NBTTagCompound var2 = var1.getCompoundTag("abilities");
-         this.disableDamage = var2.getBoolean("invulnerable");
-         this.isFlying = var2.getBoolean("flying");
-         this.allowFlying = var2.getBoolean("mayfly");
-         this.isCreativeMode = var2.getBoolean("instabuild");
-         if(var2.hasKey("flySpeed")) {
-            this.flySpeed = var2.getFloat("flySpeed");
-            this.walkSpeed = var2.getFloat("walkSpeed");
+   public void readCapabilitiesFromNBT(NBTTagCompound nbttagcompound) {
+      if(nbttagcompound.hasKey("abilities")) {
+         NBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag("abilities");
+         this.disableDamage = nbttagcompound1.getBoolean("invulnerable");
+         this.isFlying = nbttagcompound1.getBoolean("flying");
+         this.allowFlying = nbttagcompound1.getBoolean("mayfly");
+         this.isCreativeMode = nbttagcompound1.getBoolean("instabuild");
+         if(nbttagcompound1.hasKey("flySpeed")) {
+            this.flySpeed = nbttagcompound1.getFloat("flySpeed");
+            this.walkSpeed = nbttagcompound1.getFloat("walkSpeed");
          }
 
-         if(var2.hasKey("mayBuild")) {
-            this.allowEdit = var2.getBoolean("mayBuild");
+         if(nbttagcompound1.hasKey("mayBuild")) {
+            this.allowEdit = nbttagcompound1.getBoolean("mayBuild");
          }
       }
 
Binary files mcp-mcdev/net/minecraft/src/PlayerInstance.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PlayerInstance.class differ
diff -ur mcp-mcdev/net/minecraft/src/PlayerInstance.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PlayerInstance.java
--- mcp-mcdev/net/minecraft/src/PlayerInstance.java	2012-11-29 21:14:39.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PlayerInstance.java	2012-11-29 20:43:49.000000000 -0800
@@ -18,71 +18,70 @@
    private short[] blocksToUpdate;
    private int numBlocksToUpdate;
    private int field_73260_f;
-   // $FF: synthetic field
    final PlayerManager playerManager;
 
 
-   public PlayerInstance(PlayerManager var1, int var2, int var3) {
-      this.playerManager = var1;
+   public PlayerInstance(PlayerManager playermanager, int i, int j) {
+      this.playerManager = playermanager;
       this.players = new ArrayList();
       this.blocksToUpdate = new short[64];
       this.numBlocksToUpdate = 0;
-      this.currentChunk = new ChunkCoordIntPair(var2, var3);
-      var1.getMinecraftServer().theChunkProviderServer.loadChunk(var2, var3);
+      this.currentChunk = new ChunkCoordIntPair(i, j);
+      playermanager.getMinecraftServer().theChunkProviderServer.loadChunk(i, j);
    }
 
-   public void addPlayer(EntityPlayerMP var1) {
-      if(this.players.contains(var1)) {
-         throw new IllegalStateException("Failed to add player. " + var1 + " already is in chunk " + this.currentChunk.chunkXPos + ", " + this.currentChunk.chunkZPos);
+   public void addPlayer(EntityPlayerMP entityplayer) {
+      if(this.players.contains(entityplayer)) {
+         throw new IllegalStateException("Failed to add player. " + entityplayer + " already is in chunk " + this.currentChunk.chunkXPos + ", " + this.currentChunk.chunkZPos);
       } else {
-         this.players.add(var1);
-         var1.loadedChunks.add(this.currentChunk);
+         this.players.add(entityplayer);
+         entityplayer.loadedChunks.add(this.currentChunk);
       }
    }
 
-   public void removePlayer(EntityPlayerMP var1) {
-      if(this.players.contains(var1)) {
-         var1.playerNetServerHandler.sendPacket(new Packet51MapChunk(PlayerManager.getWorldServer(this.playerManager).getChunkFromChunkCoords(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos), true, 0));
-         this.players.remove(var1);
-         var1.loadedChunks.remove(this.currentChunk);
+   public void removePlayer(EntityPlayerMP entityplayer) {
+      if(this.players.contains(entityplayer)) {
+         entityplayer.playerNetServerHandler.sendPacket(new Packet51MapChunk(PlayerManager.getWorldServer(this.playerManager).getChunkFromChunkCoords(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos), true, 0));
+         this.players.remove(entityplayer);
+         entityplayer.loadedChunks.remove(this.currentChunk);
          if(this.players.isEmpty()) {
-            long var2 = (long)this.currentChunk.chunkXPos + 2147483647L | (long)this.currentChunk.chunkZPos + 2147483647L << 32;
-            PlayerManager.getChunkWatchers(this.playerManager).remove(var2);
+            long i = (long)this.currentChunk.chunkXPos + 2147483647L | (long)this.currentChunk.chunkZPos + 2147483647L << 32;
+            PlayerManager.getChunkWatchers(this.playerManager).remove(i);
             if(this.numBlocksToUpdate > 0) {
-               PlayerManager.getChunkWatchersWithPlayers(this.playerManager).remove(this);
+               PlayerManager.c(this.playerManager).remove(this);
             }
 
             this.playerManager.getMinecraftServer().theChunkProviderServer.dropChunk(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos);
          }
-
       }
+
    }
 
-   public void markBlockNeedsUpdate(int var1, int var2, int var3) {
+   public void markBlockNeedsUpdate(int i, int j, int k) {
       if(this.numBlocksToUpdate == 0) {
-         PlayerManager.getChunkWatchersWithPlayers(this.playerManager).add(this);
+         PlayerManager.c(this.playerManager).add(this);
       }
 
-      this.field_73260_f |= 1 << (var2 >> 4);
+      this.field_73260_f |= 1 << (j >> 4);
       if(this.numBlocksToUpdate < 64) {
-         short var4 = (short)(var1 << 12 | var3 << 8 | var2);
+         short short1 = (short)(i << 12 | k << 8 | j);
 
-         for(int var5 = 0; var5 < this.numBlocksToUpdate; ++var5) {
-            if(this.blocksToUpdate[var5] == var4) {
+         for(int l = 0; l < this.numBlocksToUpdate; ++l) {
+            if(this.blocksToUpdate[l] == short1) {
                return;
             }
          }
 
-         this.blocksToUpdate[this.numBlocksToUpdate++] = var4;
+         this.blocksToUpdate[this.numBlocksToUpdate++] = short1;
       }
 
    }
 
-   public void sendPacketToPlayersInInstance(Packet var1) {
-      for(int var2 = 0; var2 < this.players.size(); ++var2) {
-         EntityPlayerMP var3 = (EntityPlayerMP)this.players.get(var2);
-         if(!var3.loadedChunks.contains(this.currentChunk)) {
-            var3.playerNetServerHandler.sendPacket(var1);
+   public void sendPacketToPlayersInInstance(Packet packet) {
+      for(int i = 0; i < this.players.size(); ++i) {
+         EntityPlayerMP entityplayer = (EntityPlayerMP)this.players.get(i);
+         if(!entityplayer.loadedChunks.contains(this.currentChunk)) {
+            entityplayer.playerNetServerHandler.sendPacket(packet);
          }
       }
 
@@ -90,43 +89,43 @@
 
    public void onUpdate() {
       if(this.numBlocksToUpdate != 0) {
-         int var1;
-         int var2;
-         int var3;
+         int i;
+         int j;
+         int k;
          if(this.numBlocksToUpdate == 1) {
-            var1 = this.currentChunk.chunkXPos * 16 + (this.blocksToUpdate[0] >> 12 & 15);
-            var2 = this.blocksToUpdate[0] & 255;
-            var3 = this.currentChunk.chunkZPos * 16 + (this.blocksToUpdate[0] >> 8 & 15);
-            this.sendPacketToPlayersInInstance(new Packet53BlockChange(var1, var2, var3, PlayerManager.getWorldServer(this.playerManager)));
-            if(PlayerManager.getWorldServer(this.playerManager).blockHasTileEntity(var1, var2, var3)) {
-               this.updateTileEntity(PlayerManager.getWorldServer(this.playerManager).getBlockTileEntity(var1, var2, var3));
+            i = this.currentChunk.chunkXPos * 16 + (this.blocksToUpdate[0] >> 12 & 15);
+            j = this.blocksToUpdate[0] & 255;
+            k = this.currentChunk.chunkZPos * 16 + (this.blocksToUpdate[0] >> 8 & 15);
+            this.sendPacketToPlayersInInstance(new Packet53BlockChange(i, j, k, PlayerManager.getWorldServer(this.playerManager)));
+            if(PlayerManager.getWorldServer(this.playerManager).blockHasTileEntity(i, j, k)) {
+               this.updateTileEntity(PlayerManager.getWorldServer(this.playerManager).getTileEntity(i, j, k));
             }
          } else {
-            int var4;
+            int l;
             if(this.numBlocksToUpdate == 64) {
-               var1 = this.currentChunk.chunkXPos * 16;
-               var2 = this.currentChunk.chunkZPos * 16;
-               this.sendPacketToPlayersInInstance(new Packet51MapChunk(PlayerManager.getWorldServer(this.playerManager).getChunkFromChunkCoords(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos), false, this.field_73260_f));
-
-               for(var3 = 0; var3 < 16; ++var3) {
-                  if((this.field_73260_f & 1 << var3) != 0) {
-                     var4 = var3 << 4;
-                     List var5 = PlayerManager.getWorldServer(this.playerManager).getTileEntityList(var1, var4, var2, var1 + 16, var4 + 16, var2 + 16);
+               i = this.currentChunk.chunkXPos * 16;
+               j = this.currentChunk.chunkZPos * 16;
+               this.sendPacketToPlayersInInstance(new Packet51MapChunk(PlayerManager.getWorldServer(this.playerManager).getChunkFromChunkCoords(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos), this.field_73260_f == '\uffff', this.field_73260_f));
+
+               for(k = 0; k < 16; ++k) {
+                  if((this.field_73260_f & 1 << k) != 0) {
+                     l = k << 4;
+                     List list = PlayerManager.getWorldServer(this.playerManager).getTileEntityList(i, l, j, i + 16, l + 16, j + 16);
 
-                     for(int var6 = 0; var6 < var5.size(); ++var6) {
-                        this.updateTileEntity((TileEntity)var5.get(var6));
+                     for(int i1 = 0; i1 < list.size(); ++i1) {
+                        this.updateTileEntity((TileEntity)list.get(i1));
                      }
                   }
                }
             } else {
                this.sendPacketToPlayersInInstance(new Packet52MultiBlockChange(this.currentChunk.chunkXPos, this.currentChunk.chunkZPos, this.blocksToUpdate, this.numBlocksToUpdate, PlayerManager.getWorldServer(this.playerManager)));
 
-               for(var1 = 0; var1 < this.numBlocksToUpdate; ++var1) {
-                  var2 = this.currentChunk.chunkXPos * 16 + (this.blocksToUpdate[var1] >> 12 & 15);
-                  var3 = this.blocksToUpdate[var1] & 255;
-                  var4 = this.currentChunk.chunkZPos * 16 + (this.blocksToUpdate[var1] >> 8 & 15);
-                  if(PlayerManager.getWorldServer(this.playerManager).blockHasTileEntity(var2, var3, var4)) {
-                     this.updateTileEntity(PlayerManager.getWorldServer(this.playerManager).getBlockTileEntity(var2, var3, var4));
+               for(i = 0; i < this.numBlocksToUpdate; ++i) {
+                  j = this.currentChunk.chunkXPos * 16 + (this.blocksToUpdate[i] >> 12 & 15);
+                  k = this.blocksToUpdate[i] & 255;
+                  l = this.currentChunk.chunkZPos * 16 + (this.blocksToUpdate[i] >> 8 & 15);
+                  if(PlayerManager.getWorldServer(this.playerManager).blockHasTileEntity(j, k, l)) {
+                     this.updateTileEntity(PlayerManager.getWorldServer(this.playerManager).getTileEntity(j, k, l));
                   }
                }
             }
@@ -135,25 +134,24 @@
          this.numBlocksToUpdate = 0;
          this.field_73260_f = 0;
       }
+
    }
 
-   private void updateTileEntity(TileEntity var1) {
-      if(var1 != null) {
-         Packet var2 = var1.getDescriptionPacket();
-         if(var2 != null) {
-            this.sendPacketToPlayersInInstance(var2);
+   private void updateTileEntity(TileEntity tileentity) {
+      if(tileentity != null) {
+         Packet packet = tileentity.getDescriptionPacket();
+         if(packet != null) {
+            this.sendPacketToPlayersInInstance(packet);
          }
       }
 
    }
 
-   // $FF: synthetic method
-   static ChunkCoordIntPair getChunkLocation(PlayerInstance var0) {
-      return var0.currentChunk;
+   static ChunkCoordIntPair getChunkLocation(PlayerInstance playerinstance) {
+      return playerinstance.currentChunk;
    }
 
-   // $FF: synthetic method
-   static List getPlayersInChunk(PlayerInstance var0) {
-      return var0.players;
+   static List getPlayersInChunk(PlayerInstance playerinstance) {
+      return playerinstance.players;
    }
 }
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: PlayerManager$1.class
Binary files mcp-mcdev/net/minecraft/src/PlayerManager.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PlayerManager.class differ
diff -ur mcp-mcdev/net/minecraft/src/PlayerManager.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PlayerManager.java
--- mcp-mcdev/net/minecraft/src/PlayerManager.java	2012-11-29 21:14:38.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PlayerManager.java	2012-11-29 20:43:48.000000000 -0800
@@ -1,7 +1,12 @@
 package net.minecraft.src;
 
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import net.minecraft.src.ChunkCoordIntPair;
 import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.LongHashMap;
@@ -14,19 +19,20 @@
    private final WorldServer theWorldServer;
    private final List players = new ArrayList();
    private final LongHashMap playerInstances = new LongHashMap();
-   private final List playerInstancesToUpdate = new ArrayList();
+   private final Queue playerInstancesToUpdate = new ConcurrentLinkedQueue();
    private final int playerViewRadius;
    private final int[][] xzDirectionsConst = new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
+   private boolean wasNotEmpty;
 
 
-   public PlayerManager(WorldServer var1, int var2) {
-      if(var2 > 15) {
+   public PlayerManager(WorldServer worldserver, int i) {
+      if(i > 15) {
          throw new IllegalArgumentException("Too big view radius!");
-      } else if(var2 < 3) {
+      } else if(i < 3) {
          throw new IllegalArgumentException("Too small view radius!");
       } else {
-         this.playerViewRadius = var2;
-         this.theWorldServer = var1;
+         this.playerViewRadius = i;
+         this.theWorldServer = worldserver;
       }
    }
 
@@ -35,178 +41,200 @@
    }
 
    public void updatePlayerInstances() {
-      for(int var1 = 0; var1 < this.playerInstancesToUpdate.size(); ++var1) {
-         ((PlayerInstance)this.playerInstancesToUpdate.get(var1)).onUpdate();
+      Iterator iterator = this.playerInstancesToUpdate.iterator();
+
+      while(iterator.hasNext()) {
+         PlayerInstance worldprovider = (PlayerInstance)iterator.next();
+         worldprovider.onUpdate();
+         iterator.remove();
       }
 
-      this.playerInstancesToUpdate.clear();
       if(this.players.isEmpty()) {
-         WorldProvider var2 = this.theWorldServer.provider;
-         if(!var2.canRespawnHere()) {
+         if(!this.wasNotEmpty) {
+            return;
+         }
+
+         WorldProvider worldprovider1 = this.theWorldServer.provider;
+         if(!worldprovider1.canRespawnHere()) {
             this.theWorldServer.theChunkProviderServer.unloadAllChunks();
          }
+
+         this.wasNotEmpty = false;
+      } else {
+         this.wasNotEmpty = true;
       }
 
    }
 
-   private PlayerInstance getPlayerInstance(int var1, int var2, boolean var3) {
-      long var4 = (long)var1 + 2147483647L | (long)var2 + 2147483647L << 32;
-      PlayerInstance var6 = (PlayerInstance)this.playerInstances.getValueByKey(var4);
-      if(var6 == null && var3) {
-         var6 = new PlayerInstance(this, var1, var2);
-         this.playerInstances.add(var4, var6);
+   private PlayerInstance getPlayerInstance(int i, int j, boolean flag) {
+      long k = (long)i + 2147483647L | (long)j + 2147483647L << 32;
+      PlayerInstance playerinstance = (PlayerInstance)this.playerInstances.getValueByKey(k);
+      if(playerinstance == null && flag) {
+         playerinstance = new PlayerInstance(this, i, j);
+         this.playerInstances.add(k, playerinstance);
       }
 
-      return var6;
+      return playerinstance;
    }
 
-   public void markBlockNeedsUpdate(int var1, int var2, int var3) {
-      int var4 = var1 >> 4;
-      int var5 = var3 >> 4;
-      PlayerInstance var6 = this.getPlayerInstance(var4, var5, false);
-      if(var6 != null) {
-         var6.markBlockNeedsUpdate(var1 & 15, var2, var3 & 15);
+   public final boolean isChunkInUse(int x, int z) {
+      PlayerInstance pi = this.getPlayerInstance(x, z, false);
+      return pi != null?PlayerInstance.getPlayersInChunk(pi).size() > 0:false;
+   }
+
+   public void markBlockNeedsUpdate(int i, int j, int k) {
+      int l = i >> 4;
+      int i1 = k >> 4;
+      PlayerInstance playerinstance = this.getPlayerInstance(l, i1, false);
+      if(playerinstance != null) {
+         playerinstance.markBlockNeedsUpdate(i & 15, j, k & 15);
       }
 
    }
 
-   public void addPlayer(EntityPlayerMP var1) {
-      int var2 = (int)var1.posX >> 4;
-      int var3 = (int)var1.posZ >> 4;
-      var1.managedPosX = var1.posX;
-      var1.managedPosZ = var1.posZ;
+   public void addPlayer(EntityPlayerMP entityplayer) {
+      int i = (int)entityplayer.posX >> 4;
+      int j = (int)entityplayer.posZ >> 4;
+      entityplayer.managedPosX = entityplayer.posX;
+      entityplayer.managedPosZ = entityplayer.posZ;
 
-      for(int var4 = var2 - this.playerViewRadius; var4 <= var2 + this.playerViewRadius; ++var4) {
-         for(int var5 = var3 - this.playerViewRadius; var5 <= var3 + this.playerViewRadius; ++var5) {
-            this.getPlayerInstance(var4, var5, true).addPlayer(var1);
+      for(int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k) {
+         for(int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l) {
+            this.getPlayerInstance(k, l, true).addPlayer(entityplayer);
          }
       }
 
-      this.players.add(var1);
-      this.filterChunkLoadQueue(var1);
+      this.players.add(entityplayer);
+      this.filterChunkLoadQueue(entityplayer);
    }
 
-   public void filterChunkLoadQueue(EntityPlayerMP var1) {
-      ArrayList var2 = new ArrayList(var1.loadedChunks);
-      int var3 = 0;
-      int var4 = this.playerViewRadius;
-      int var5 = (int)var1.posX >> 4;
-      int var6 = (int)var1.posZ >> 4;
-      int var7 = 0;
-      int var8 = 0;
-      ChunkCoordIntPair var9 = PlayerInstance.getChunkLocation(this.getPlayerInstance(var5, var6, true));
-      var1.loadedChunks.clear();
-      if(var2.contains(var9)) {
-         var1.loadedChunks.add(var9);
+   public void filterChunkLoadQueue(EntityPlayerMP entityplayer) {
+      ArrayList arraylist = new ArrayList(entityplayer.loadedChunks);
+      int i = 0;
+      int j = this.playerViewRadius;
+      int k = (int)entityplayer.posX >> 4;
+      int l = (int)entityplayer.posZ >> 4;
+      int i1 = 0;
+      int j1 = 0;
+      ChunkCoordIntPair chunkcoordintpair = PlayerInstance.getChunkLocation(this.getPlayerInstance(k, l, true));
+      entityplayer.loadedChunks.clear();
+      if(arraylist.contains(chunkcoordintpair)) {
+         entityplayer.loadedChunks.add(chunkcoordintpair);
       }
 
-      int var10;
-      for(var10 = 1; var10 <= var4 * 2; ++var10) {
-         for(int var11 = 0; var11 < 2; ++var11) {
-            int[] var12 = this.xzDirectionsConst[var3++ % 4];
+      int k1;
+      for(k1 = 1; k1 <= j * 2; ++k1) {
+         for(int l1 = 0; l1 < 2; ++l1) {
+            int[] aint = this.xzDirectionsConst[i++ % 4];
 
-            for(int var13 = 0; var13 < var10; ++var13) {
-               var7 += var12[0];
-               var8 += var12[1];
-               var9 = PlayerInstance.getChunkLocation(this.getPlayerInstance(var5 + var7, var6 + var8, true));
-               if(var2.contains(var9)) {
-                  var1.loadedChunks.add(var9);
+            for(int i2 = 0; i2 < k1; ++i2) {
+               i1 += aint[0];
+               j1 += aint[1];
+               chunkcoordintpair = PlayerInstance.getChunkLocation(this.getPlayerInstance(k + i1, l + j1, true));
+               if(arraylist.contains(chunkcoordintpair)) {
+                  entityplayer.loadedChunks.add(chunkcoordintpair);
                }
             }
          }
       }
 
-      var3 %= 4;
+      i %= 4;
 
-      for(var10 = 0; var10 < var4 * 2; ++var10) {
-         var7 += this.xzDirectionsConst[var3][0];
-         var8 += this.xzDirectionsConst[var3][1];
-         var9 = PlayerInstance.getChunkLocation(this.getPlayerInstance(var5 + var7, var6 + var8, true));
-         if(var2.contains(var9)) {
-            var1.loadedChunks.add(var9);
+      for(k1 = 0; k1 < j * 2; ++k1) {
+         i1 += this.xzDirectionsConst[i][0];
+         j1 += this.xzDirectionsConst[i][1];
+         chunkcoordintpair = PlayerInstance.getChunkLocation(this.getPlayerInstance(k + i1, l + j1, true));
+         if(arraylist.contains(chunkcoordintpair)) {
+            entityplayer.loadedChunks.add(chunkcoordintpair);
          }
       }
 
    }
 
-   public void removePlayer(EntityPlayerMP var1) {
-      int var2 = (int)var1.managedPosX >> 4;
-      int var3 = (int)var1.managedPosZ >> 4;
+   public void removePlayer(EntityPlayerMP entityplayer) {
+      int i = (int)entityplayer.managedPosX >> 4;
+      int j = (int)entityplayer.managedPosZ >> 4;
 
-      for(int var4 = var2 - this.playerViewRadius; var4 <= var2 + this.playerViewRadius; ++var4) {
-         for(int var5 = var3 - this.playerViewRadius; var5 <= var3 + this.playerViewRadius; ++var5) {
-            PlayerInstance var6 = this.getPlayerInstance(var4, var5, false);
-            if(var6 != null) {
-               var6.removePlayer(var1);
+      for(int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k) {
+         for(int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l) {
+            PlayerInstance playerinstance = this.getPlayerInstance(k, l, false);
+            if(playerinstance != null) {
+               playerinstance.removePlayer(entityplayer);
             }
          }
       }
 
-      this.players.remove(var1);
+      this.players.remove(entityplayer);
    }
 
-   private boolean func_72684_a(int var1, int var2, int var3, int var4, int var5) {
-      int var6 = var1 - var3;
-      int var7 = var2 - var4;
-      return var6 >= -var5 && var6 <= var5?var7 >= -var5 && var7 <= var5:false;
-   }
-
-   public void updateMountedMovingPlayer(EntityPlayerMP var1) {
-      int var2 = (int)var1.posX >> 4;
-      int var3 = (int)var1.posZ >> 4;
-      double var4 = var1.managedPosX - var1.posX;
-      double var6 = var1.managedPosZ - var1.posZ;
-      double var8 = var4 * var4 + var6 * var6;
-      if(var8 >= 64.0D) {
-         int var10 = (int)var1.managedPosX >> 4;
-         int var11 = (int)var1.managedPosZ >> 4;
-         int var12 = this.playerViewRadius;
-         int var13 = var2 - var10;
-         int var14 = var3 - var11;
-         if(var13 != 0 || var14 != 0) {
-            for(int var15 = var2 - var12; var15 <= var2 + var12; ++var15) {
-               for(int var16 = var3 - var12; var16 <= var3 + var12; ++var16) {
-                  if(!this.func_72684_a(var15, var16, var10, var11, var12)) {
-                     this.getPlayerInstance(var15, var16, true).addPlayer(var1);
+   private boolean func_72684_a(int i, int j, int k, int l, int i1) {
+      int j1 = i - k;
+      int k1 = j - l;
+      return j1 >= -i1 && j1 <= i1?k1 >= -i1 && k1 <= i1:false;
+   }
+
+   public void updateMountedMovingPlayer(EntityPlayerMP entityplayer) {
+      final int i = (int)entityplayer.posX >> 4;
+      final int j = (int)entityplayer.posZ >> 4;
+      double d0 = entityplayer.managedPosX - entityplayer.posX;
+      double d1 = entityplayer.managedPosZ - entityplayer.posZ;
+      double d2 = d0 * d0 + d1 * d1;
+      if(d2 >= 64.0D) {
+         int k = (int)entityplayer.managedPosX >> 4;
+         int l = (int)entityplayer.managedPosZ >> 4;
+         int i1 = this.playerViewRadius;
+         int j1 = i - k;
+         int k1 = j - l;
+         if(j1 != 0 || k1 != 0) {
+            for(int x = i - i1; x <= i + i1; ++x) {
+               for(int z = j - i1; z <= j + i1; ++z) {
+                  if(!this.func_72684_a(x, z, k, l, i1)) {
+                     this.getPlayerInstance(x, z, true).addPlayer(entityplayer);
                   }
 
-                  if(!this.func_72684_a(var15 - var13, var16 - var14, var2, var3, var12)) {
-                     PlayerInstance var17 = this.getPlayerInstance(var15 - var13, var16 - var14, false);
-                     if(var17 != null) {
-                        var17.removePlayer(var1);
+                  if(!this.func_72684_a(x - j1, z - k1, i, j, i1)) {
+                     PlayerInstance chunksToSend = this.getPlayerInstance(x - j1, z - k1, false);
+                     if(chunksToSend != null) {
+                        chunksToSend.removePlayer(entityplayer);
                      }
                   }
                }
             }
 
-            this.filterChunkLoadQueue(var1);
-            var1.managedPosX = var1.posX;
-            var1.managedPosZ = var1.posZ;
+            this.filterChunkLoadQueue(entityplayer);
+            entityplayer.managedPosX = entityplayer.posX;
+            entityplayer.managedPosZ = entityplayer.posZ;
+            if(i1 > 1 || i1 < -1 || j1 > 1 || j1 < -1) {
+               List var18 = entityplayer.loadedChunks;
+               Collections.sort(var18, new Comparator() {
+                  public int compare(ChunkCoordIntPair a, ChunkCoordIntPair b) {
+                     return Math.max(Math.abs(a.chunkXPos - i), Math.abs(a.chunkZPos - j)) - Math.max(Math.abs(b.chunkXPos - i), Math.abs(b.chunkZPos - j));
+                  }
+               });
+            }
          }
       }
+
    }
 
-   public boolean isPlayerWatchingChunk(EntityPlayerMP var1, int var2, int var3) {
-      PlayerInstance var4 = this.getPlayerInstance(var2, var3, false);
-      return var4 == null?false:PlayerInstance.getPlayersInChunk(var4).contains(var1) && !var1.loadedChunks.contains(PlayerInstance.getChunkLocation(var4));
+   public boolean isPlayerWatchingChunk(EntityPlayerMP entityplayer, int i, int j) {
+      PlayerInstance playerinstance = this.getPlayerInstance(i, j, false);
+      return playerinstance == null?false:PlayerInstance.getPlayersInChunk(playerinstance).contains(entityplayer) && !entityplayer.loadedChunks.contains(PlayerInstance.getChunkLocation(playerinstance));
    }
 
-   public static int func_72686_a(int var0) {
-      return var0 * 16 - 16;
+   public static int func_72686_a(int i) {
+      return i * 16 - 16;
    }
 
-   // $FF: synthetic method
-   static WorldServer getWorldServer(PlayerManager var0) {
-      return var0.theWorldServer;
+   static WorldServer getWorldServer(PlayerManager playermanager) {
+      return playermanager.theWorldServer;
    }
 
-   // $FF: synthetic method
-   static LongHashMap getChunkWatchers(PlayerManager var0) {
-      return var0.playerInstances;
+   static LongHashMap getChunkWatchers(PlayerManager playermanager) {
+      return playermanager.playerInstances;
    }
 
-   // $FF: synthetic method
-   static List getChunkWatchersWithPlayers(PlayerManager var0) {
-      return var0.playerInstancesToUpdate;
+   static Queue c(PlayerManager playermanager) {
+      return playermanager.playerInstancesToUpdate;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/Potion.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Potion.class differ
diff -ur mcp-mcdev/net/minecraft/src/Potion.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Potion.java
--- mcp-mcdev/net/minecraft/src/Potion.java	2012-11-29 21:14:37.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Potion.java	2012-11-29 20:43:47.000000000 -0800
@@ -1,9 +1,17 @@
 package net.minecraft.src;
 
 import net.minecraft.src.DamageSource;
+import net.minecraft.src.Entity;
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPotion;
 import net.minecraft.src.PotionHealth;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
+import org.bukkit.potion.PotionEffectType;
 
 public class Potion {
 
@@ -49,21 +57,22 @@
    private final int liquidColor;
 
 
-   protected Potion(int var1, boolean var2, int var3) {
-      this.id = var1;
-      potionTypes[var1] = this;
-      this.isBadEffect = var2;
-      if(var2) {
+   protected Potion(int i, boolean flag, int j) {
+      this.id = i;
+      potionTypes[i] = this;
+      this.isBadEffect = flag;
+      if(flag) {
          this.effectiveness = 0.5D;
       } else {
          this.effectiveness = 1.0D;
       }
 
-      this.liquidColor = var3;
+      this.liquidColor = j;
+      PotionEffectType.registerPotionEffectType(new CraftPotionEffectType(this));
    }
 
-   protected Potion setIconIndex(int var1, int var2) {
-      this.statusIconIndex = var1 + var2 * 8;
+   protected Potion setIconIndex(int i, int j) {
+      this.statusIconIndex = i + j * 8;
       return this;
    }
 
@@ -71,43 +80,59 @@
       return this.id;
    }
 
-   public void performEffect(EntityLiving var1, int var2) {
+   public void performEffect(EntityLiving entityliving, int i) {
       if(this.id == regeneration.id) {
-         if(var1.getHealth() < var1.getMaxHealth()) {
-            var1.heal(1);
-         }
-      } else if(this.id == poison.id) {
-         if(var1.getHealth() > 1) {
-            var1.attackEntityFrom(DamageSource.magic, 1);
-         }
-      } else if(this.id == wither.id) {
-         var1.attackEntityFrom(DamageSource.wither, 1);
-      } else if(this.id == hunger.id && var1 instanceof EntityPlayer) {
-         ((EntityPlayer)var1).addExhaustion(0.025F * (float)(var2 + 1));
-      } else if((this.id != heal.id || var1.isEntityUndead()) && (this.id != harm.id || !var1.isEntityUndead())) {
-         if(this.id == harm.id && !var1.isEntityUndead() || this.id == heal.id && var1.isEntityUndead()) {
-            var1.attackEntityFrom(DamageSource.magic, 6 << var2);
+         if(entityliving.getHealth() < entityliving.getMaxHealth()) {
+            entityliving.heal(1, RegainReason.MAGIC_REGEN);
          }
       } else {
-         var1.heal(6 << var2);
+         EntityDamageEvent event;
+         if(this.id == poison.id) {
+            if(entityliving.getHealth() > 1) {
+               event = CraftEventFactory.callEntityDamageEvent((Entity)null, entityliving, DamageCause.POISON, 1);
+               if(!event.isCancelled() && event.getDamage() > 0) {
+                  entityliving.attackEntityFrom(DamageSource.magic, event.getDamage());
+               }
+            }
+         } else if(this.id == wither.id) {
+            event = CraftEventFactory.callEntityDamageEvent((Entity)null, entityliving, DamageCause.WITHER, 1);
+            if(!event.isCancelled() && event.getDamage() > 0) {
+               entityliving.attackEntityFrom(DamageSource.wither, event.getDamage());
+            }
+         } else if(this.id == hunger.id && entityliving instanceof EntityPlayer) {
+            ((EntityPlayer)entityliving).addExhaustion(0.025F * (float)(i + 1));
+         } else if((this.id != heal.id || entityliving.isEntityUndead()) && (this.id != harm.id || !entityliving.isEntityUndead())) {
+            if(this.id == harm.id && !entityliving.isEntityUndead() || this.id == heal.id && entityliving.isEntityUndead()) {
+               event = CraftEventFactory.callEntityDamageEvent((Entity)null, entityliving, DamageCause.MAGIC, 6 << i);
+               if(!event.isCancelled() && event.getDamage() > 0) {
+                  entityliving.attackEntityFrom(DamageSource.magic, event.getDamage());
+               }
+            }
+         } else {
+            entityliving.heal(6 << i, RegainReason.MAGIC);
+         }
       }
 
    }
 
-   public void affectEntity(EntityLiving var1, EntityLiving var2, int var3, double var4) {
-      int var6;
-      if((this.id != heal.id || var2.isEntityUndead()) && (this.id != harm.id || !var2.isEntityUndead())) {
-         if(this.id == harm.id && !var2.isEntityUndead() || this.id == heal.id && var2.isEntityUndead()) {
-            var6 = (int)(var4 * (double)(6 << var3) + 0.5D);
-            if(var1 == null) {
-               var2.attackEntityFrom(DamageSource.magic, var6);
+   public void affectEntity(EntityLiving entityliving, EntityLiving entityliving1, int i, double d0) {
+      this.applyInstantEffect(entityliving, entityliving1, i, d0, (EntityPotion)null);
+   }
+
+   public void applyInstantEffect(EntityLiving entityliving, EntityLiving entityliving1, int i, double d0, EntityPotion potion) {
+      int j;
+      if((this.id != heal.id || entityliving1.isEntityUndead()) && (this.id != harm.id || !entityliving1.isEntityUndead())) {
+         if(this.id == harm.id && !entityliving1.isEntityUndead() || this.id == heal.id && entityliving1.isEntityUndead()) {
+            j = (int)(d0 * (double)(6 << i) + 0.5D);
+            if(entityliving == null) {
+               entityliving1.attackEntityFrom(DamageSource.magic, j);
             } else {
-               var2.attackEntityFrom(DamageSource.causeIndirectMagicDamage(var2, var1), var6);
+               entityliving1.attackEntityFrom(DamageSource.causeIndirectMagicDamage((Entity)(potion != null?potion:entityliving1), entityliving), j);
             }
          }
       } else {
-         var6 = (int)(var4 * (double)(6 << var3) + 0.5D);
-         var2.heal(var6);
+         j = (int)(d0 * (double)(6 << i) + 0.5D);
+         entityliving1.heal(j, RegainReason.MAGIC);
       }
 
    }
@@ -116,23 +141,23 @@
       return false;
    }
 
-   public boolean isReady(int var1, int var2) {
-      int var3;
+   public boolean isReady(int i, int j) {
+      int k;
       if(this.id != regeneration.id && this.id != poison.id) {
          if(this.id == wither.id) {
-            var3 = 40 >> var2;
-            return var3 > 0?var1 % var3 == 0:true;
+            k = 40 >> j;
+            return k > 0?i % k == 0:true;
          } else {
             return this.id == hunger.id;
          }
       } else {
-         var3 = 25 >> var2;
-         return var3 > 0?var1 % var3 == 0:true;
+         k = 25 >> j;
+         return k > 0?i % k == 0:true;
       }
    }
 
-   public Potion setPotionName(String var1) {
-      this.name = var1;
+   public Potion setPotionName(String s) {
+      this.name = s;
       return this;
    }
 
@@ -140,8 +165,8 @@
       return this.name;
    }
 
-   protected Potion setEffectiveness(double var1) {
-      this.effectiveness = var1;
+   protected Potion setEffectiveness(double d0) {
+      this.effectiveness = d0;
       return this;
    }
 
Binary files mcp-mcdev/net/minecraft/src/Profiler.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Profiler.class differ
diff -ur mcp-mcdev/net/minecraft/src/Profiler.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Profiler.java
--- mcp-mcdev/net/minecraft/src/Profiler.java	2012-11-29 21:14:36.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Profiler.java	2012-11-29 20:43:47.000000000 -0800
@@ -1,127 +1,25 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
-import net.minecraft.src.ProfilerResult;
 
 public class Profiler {
 
-   private final List sectionList = new ArrayList();
-   private final List timestampList = new ArrayList();
    public boolean profilingEnabled = false;
-   private String profilingSection = "";
-   private final Map profilingMap = new HashMap();
 
 
-   public void clearProfiling() {
-      this.profilingMap.clear();
-      this.profilingSection = "";
-      this.sectionList.clear();
-   }
+   public final void clearProfiling() {}
 
-   public void startSection(String var1) {
-      if(this.profilingEnabled) {
-         if(this.profilingSection.length() > 0) {
-            this.profilingSection = this.profilingSection + ".";
-         }
-
-         this.profilingSection = this.profilingSection + var1;
-         this.sectionList.add(this.profilingSection);
-         this.timestampList.add(Long.valueOf(System.nanoTime()));
-      }
-   }
+   public final void startSection(String s) {}
 
-   public void endSection() {
-      if(this.profilingEnabled) {
-         long var1 = System.nanoTime();
-         long var3 = ((Long)this.timestampList.remove(this.timestampList.size() - 1)).longValue();
-         this.sectionList.remove(this.sectionList.size() - 1);
-         long var5 = var1 - var3;
-         if(this.profilingMap.containsKey(this.profilingSection)) {
-            this.profilingMap.put(this.profilingSection, Long.valueOf(((Long)this.profilingMap.get(this.profilingSection)).longValue() + var5));
-         } else {
-            this.profilingMap.put(this.profilingSection, Long.valueOf(var5));
-         }
-
-         if(var5 > 100000000L) {
-            System.out.println("Something\'s taking too long! \'" + this.profilingSection + "\' took aprox " + (double)var5 / 1000000.0D + " ms");
-         }
-
-         this.profilingSection = !this.sectionList.isEmpty()?(String)this.sectionList.get(this.sectionList.size() - 1):"";
-      }
-   }
+   public final void endSection() {}
 
-   public List getProfilingData(String var1) {
-      if(!this.profilingEnabled) {
-         return null;
-      } else {
-         long var3 = this.profilingMap.containsKey("root")?((Long)this.profilingMap.get("root")).longValue():0L;
-         long var5 = this.profilingMap.containsKey(var1)?((Long)this.profilingMap.get(var1)).longValue():-1L;
-         ArrayList var7 = new ArrayList();
-         if(var1.length() > 0) {
-            var1 = var1 + ".";
-         }
-
-         long var8 = 0L;
-         Iterator var10 = this.profilingMap.keySet().iterator();
-
-         while(var10.hasNext()) {
-            String var11 = (String)var10.next();
-            if(var11.length() > var1.length() && var11.startsWith(var1) && var11.indexOf(".", var1.length() + 1) < 0) {
-               var8 += ((Long)this.profilingMap.get(var11)).longValue();
-            }
-         }
-
-         float var21 = (float)var8;
-         if(var8 < var5) {
-            var8 = var5;
-         }
-
-         if(var3 < var8) {
-            var3 = var8;
-         }
-
-         Iterator var20 = this.profilingMap.keySet().iterator();
-
-         String var12;
-         while(var20.hasNext()) {
-            var12 = (String)var20.next();
-            if(var12.length() > var1.length() && var12.startsWith(var1) && var12.indexOf(".", var1.length() + 1) < 0) {
-               long var13 = ((Long)this.profilingMap.get(var12)).longValue();
-               double var15 = (double)var13 * 100.0D / (double)var8;
-               double var17 = (double)var13 * 100.0D / (double)var3;
-               String var19 = var12.substring(var1.length());
-               var7.add(new ProfilerResult(var19, var15, var17));
-            }
-         }
-
-         var20 = this.profilingMap.keySet().iterator();
-
-         while(var20.hasNext()) {
-            var12 = (String)var20.next();
-            this.profilingMap.put(var12, Long.valueOf(((Long)this.profilingMap.get(var12)).longValue() * 999L / 1000L));
-         }
-
-         if((float)var8 > var21) {
-            var7.add(new ProfilerResult("unspecified", (double)((float)var8 - var21) * 100.0D / (double)var8, (double)((float)var8 - var21) * 100.0D / (double)var3));
-         }
-
-         Collections.sort(var7);
-         var7.add(0, new ProfilerResult(var1, 100.0D, (double)var8 * 100.0D / (double)var3));
-         return var7;
-      }
+   public final List getProfilingData(String s) {
+      return null;
    }
 
-   public void endStartSection(String var1) {
-      this.endSection();
-      this.startSection(var1);
-   }
+   public final void endStartSection(String s) {}
 
-   public String getNameOfLastSection() {
-      return this.sectionList.size() == 0?"[UNKNOWN]":(String)this.sectionList.get(this.sectionList.size() - 1);
+   public final String getNameOfLastSection() {
+      return null;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/PropertyManager.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PropertyManager.class differ
diff -ur mcp-mcdev/net/minecraft/src/PropertyManager.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PropertyManager.java
--- mcp-mcdev/net/minecraft/src/PropertyManager.java	2012-11-29 21:14:36.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/PropertyManager.java	2012-11-29 20:43:47.000000000 -0800
@@ -7,29 +7,33 @@
 import java.util.Properties;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import org.bukkit.craftbukkit.libs.joptsimple.OptionSet;
 
 public class PropertyManager {
 
    public static Logger logger = Logger.getLogger("Minecraft");
-   private Properties serverProperties = new Properties();
+   public Properties serverProperties;
    private File serverPropertiesFile;
+   private OptionSet options;
 
 
-   public PropertyManager(File var1) {
-      this.serverPropertiesFile = var1;
-      if(var1.exists()) {
-         FileInputStream var2 = null;
+   public PropertyManager(File file1) {
+      this.serverProperties = new Properties();
+      this.options = null;
+      this.serverPropertiesFile = file1;
+      if(file1.exists()) {
+         FileInputStream fileinputstream = null;
 
          try {
-            var2 = new FileInputStream(var1);
-            this.serverProperties.load(var2);
+            fileinputstream = new FileInputStream(file1);
+            this.serverProperties.load(fileinputstream);
          } catch (Exception var12) {
-            logger.log(Level.WARNING, "Failed to load " + var1, var12);
+            logger.log(Level.WARNING, "Failed to load " + file1, var12);
             this.generateNewProperties();
          } finally {
-            if(var2 != null) {
+            if(fileinputstream != null) {
                try {
-                  var2.close();
+                  fileinputstream.close();
                } catch (IOException var11) {
                   ;
                }
@@ -37,30 +41,39 @@
 
          }
       } else {
-         logger.log(Level.WARNING, var1 + " does not exist");
+         logger.log(Level.WARNING, file1 + " does not exist");
          this.generateNewProperties();
       }
 
    }
 
+   public PropertyManager(OptionSet options) {
+      this((File)options.valueOf("config"));
+      this.options = options;
+   }
+
+   private Object getOverride(String name, Object value) {
+      return this.options != null && this.options.has(name)?this.options.valueOf(name):value;
+   }
+
    public void generateNewProperties() {
       logger.log(Level.INFO, "Generating new properties file");
       this.saveProperties();
    }
 
    public void saveProperties() {
-      FileOutputStream var1 = null;
+      FileOutputStream fileoutputstream = null;
 
       try {
-         var1 = new FileOutputStream(this.serverPropertiesFile);
-         this.serverProperties.store(var1, "Minecraft server properties");
+         fileoutputstream = new FileOutputStream(this.serverPropertiesFile);
+         this.serverProperties.store(fileoutputstream, "Minecraft server properties");
       } catch (Exception var11) {
          logger.log(Level.WARNING, "Failed to save " + this.serverPropertiesFile, var11);
          this.generateNewProperties();
       } finally {
-         if(var1 != null) {
+         if(fileoutputstream != null) {
             try {
-               var1.close();
+               fileoutputstream.close();
             } catch (IOException var10) {
                ;
             }
@@ -74,35 +87,38 @@
       return this.serverPropertiesFile;
    }
 
-   public String getStringProperty(String var1, String var2) {
-      if(!this.serverProperties.containsKey(var1)) {
-         this.serverProperties.setProperty(var1, var2);
+   public String getStringProperty(String s, String s1) {
+      if(!this.serverProperties.containsKey(s)) {
+         s1 = (String)this.getOverride(s, s1);
+         this.serverProperties.setProperty(s, s1);
          this.saveProperties();
       }
 
-      return this.serverProperties.getProperty(var1, var2);
+      return (String)this.getOverride(s, this.serverProperties.getProperty(s, s1));
    }
 
-   public int getIntProperty(String var1, int var2) {
+   public int getIntProperty(String s, int i) {
       try {
-         return Integer.parseInt(this.getStringProperty(var1, "" + var2));
+         return ((Integer)this.getOverride(s, Integer.valueOf(Integer.parseInt(this.getStringProperty(s, "" + i))))).intValue();
       } catch (Exception var4) {
-         this.serverProperties.setProperty(var1, "" + var2);
-         return var2;
+         i = ((Integer)this.getOverride(s, Integer.valueOf(i))).intValue();
+         this.serverProperties.setProperty(s, "" + i);
+         return i;
       }
    }
 
-   public boolean getBooleanProperty(String var1, boolean var2) {
+   public boolean getBooleanProperty(String s, boolean flag) {
       try {
-         return Boolean.parseBoolean(this.getStringProperty(var1, "" + var2));
+         return ((Boolean)this.getOverride(s, Boolean.valueOf(Boolean.parseBoolean(this.getStringProperty(s, "" + flag))))).booleanValue();
       } catch (Exception var4) {
-         this.serverProperties.setProperty(var1, "" + var2);
-         return var2;
+         flag = ((Boolean)this.getOverride(s, Boolean.valueOf(flag))).booleanValue();
+         this.serverProperties.setProperty(s, "" + flag);
+         return flag;
       }
    }
 
-   public void setProperty(String var1, Object var2) {
-      this.serverProperties.setProperty(var1, "" + var2);
+   public void setProperty(String s, Object object) {
+      this.serverProperties.setProperty(s, "" + object);
    }
 
 }
diff -ur mcp-mcdev/net/minecraft/src/RConThreadClient.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/RConThreadClient.java
--- mcp-mcdev/net/minecraft/src/RConThreadClient.java	2012-11-29 21:14:35.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/RConThreadClient.java	2012-11-29 20:43:46.000000000 -0800
@@ -41,13 +41,13 @@
 
             BufferedInputStream var1 = new BufferedInputStream(this.clientSocket.getInputStream());
             int var2 = var1.read(this.buffer, 0, 1460);
-            if(10 <= var2) {
-               byte var3 = 0;
-               int var4 = RConUtils.getBytesAsLEInt(this.buffer, 0, var2);
-               if(var4 != var2 - 4) {
-                  return;
-               }
+            if(10 > var2) {
+               return;
+            }
 
+            byte var3 = 0;
+            int var4 = RConUtils.getBytesAsLEInt(this.buffer, 0, var2);
+            if(var4 == var2 - 4) {
                int var21 = var3 + 4;
                int var5 = RConUtils.getBytesAsLEInt(this.buffer, var21, var2);
                var21 += 4;
Binary files mcp-mcdev/net/minecraft/src/RecipesArmorDyes.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/RecipesArmorDyes.class differ
diff -ur mcp-mcdev/net/minecraft/src/RecipesArmorDyes.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/RecipesArmorDyes.java
--- mcp-mcdev/net/minecraft/src/RecipesArmorDyes.java	2012-11-29 21:14:35.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/RecipesArmorDyes.java	2012-11-29 20:43:45.000000000 -0800
@@ -1,6 +1,7 @@
 package net.minecraft.src;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import net.minecraft.src.BlockCloth;
 import net.minecraft.src.EntitySheep;
 import net.minecraft.src.EnumArmorMaterial;
@@ -9,103 +10,108 @@
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemArmor;
 import net.minecraft.src.ItemStack;
+import net.minecraft.src.ShapelessRecipes;
 import net.minecraft.src.World;
 
-public class RecipesArmorDyes implements IRecipe {
+public class RecipesArmorDyes extends ShapelessRecipes implements IRecipe {
 
-   public boolean matches(InventoryCrafting var1, World var2) {
-      ItemStack var3 = null;
-      ArrayList var4 = new ArrayList();
-
-      for(int var5 = 0; var5 < var1.getSizeInventory(); ++var5) {
-         ItemStack var6 = var1.getStackInSlot(var5);
-         if(var6 != null) {
-            if(var6.getItem() instanceof ItemArmor) {
-               ItemArmor var7 = (ItemArmor)var6.getItem();
-               if(var7.getArmorMaterial() != EnumArmorMaterial.CLOTH || var3 != null) {
+   public RecipesArmorDyes() {
+      super(new ItemStack(Item.helmetLeather, 0, 0), Arrays.asList(new ItemStack[]{new ItemStack(Item.dyePowder, 0, 5)}));
+   }
+
+   public boolean matches(InventoryCrafting inventorycrafting, World world) {
+      ItemStack itemstack = null;
+      ArrayList arraylist = new ArrayList();
+
+      for(int i = 0; i < inventorycrafting.getSizeInventory(); ++i) {
+         ItemStack itemstack1 = inventorycrafting.getStackInSlot(i);
+         if(itemstack1 != null) {
+            if(itemstack1.getItem() instanceof ItemArmor) {
+               ItemArmor itemarmor = (ItemArmor)itemstack1.getItem();
+               if(itemarmor.getArmorMaterial() != EnumArmorMaterial.CLOTH || itemstack != null) {
                   return false;
                }
 
-               var3 = var6;
+               itemstack = itemstack1;
             } else {
-               if(var6.itemID != Item.dyePowder.shiftedIndex) {
+               if(itemstack1.itemID != Item.dyePowder.shiftedIndex) {
                   return false;
                }
 
-               var4.add(var6);
+               arraylist.add(itemstack1);
             }
          }
       }
 
-      return var3 != null && !var4.isEmpty();
+      return itemstack != null && !arraylist.isEmpty();
    }
 
-   public ItemStack getCraftingResult(InventoryCrafting var1) {
-      ItemStack var2 = null;
-      int[] var3 = new int[3];
-      int var4 = 0;
-      int var5 = 0;
-      ItemArmor var6 = null;
-
-      int var7;
-      int var9;
-      float var10;
-      float var11;
-      int var17;
-      for(var7 = 0; var7 < var1.getSizeInventory(); ++var7) {
-         ItemStack var8 = var1.getStackInSlot(var7);
-         if(var8 != null) {
-            if(var8.getItem() instanceof ItemArmor) {
-               var6 = (ItemArmor)var8.getItem();
-               if(var6.getArmorMaterial() != EnumArmorMaterial.CLOTH || var2 != null) {
+   public ItemStack getCraftingResult(InventoryCrafting inventorycrafting) {
+      ItemStack itemstack = null;
+      int[] aint = new int[3];
+      int i = 0;
+      int j = 0;
+      ItemArmor itemarmor = null;
+
+      int k;
+      int l;
+      float f;
+      float f1;
+      int i1;
+      for(k = 0; k < inventorycrafting.getSizeInventory(); ++k) {
+         ItemStack l1 = inventorycrafting.getStackInSlot(k);
+         if(l1 != null) {
+            if(l1.getItem() instanceof ItemArmor) {
+               itemarmor = (ItemArmor)l1.getItem();
+               if(itemarmor.getArmorMaterial() != EnumArmorMaterial.CLOTH || itemstack != null) {
                   return null;
                }
 
-               var2 = var8.copy();
-               if(var6.hasColor(var8)) {
-                  var9 = var6.getColor(var2);
-                  var10 = (float)(var9 >> 16 & 255) / 255.0F;
-                  var11 = (float)(var9 >> 8 & 255) / 255.0F;
-                  float var12 = (float)(var9 & 255) / 255.0F;
-                  var4 = (int)((float)var4 + Math.max(var10, Math.max(var11, var12)) * 255.0F);
-                  var3[0] = (int)((float)var3[0] + var10 * 255.0F);
-                  var3[1] = (int)((float)var3[1] + var11 * 255.0F);
-                  var3[2] = (int)((float)var3[2] + var12 * 255.0F);
-                  ++var5;
+               itemstack = l1.copy();
+               if(itemarmor.hasColor(l1)) {
+                  l = itemarmor.getColor(itemstack);
+                  f = (float)(l >> 16 & 255) / 255.0F;
+                  f1 = (float)(l >> 8 & 255) / 255.0F;
+                  float afloat = (float)(l & 255) / 255.0F;
+                  i = (int)((float)i + Math.max(f, Math.max(f1, afloat)) * 255.0F);
+                  aint[0] = (int)((float)aint[0] + f * 255.0F);
+                  aint[1] = (int)((float)aint[1] + f1 * 255.0F);
+                  aint[2] = (int)((float)aint[2] + afloat * 255.0F);
+                  ++j;
                }
             } else {
-               if(var8.itemID != Item.dyePowder.shiftedIndex) {
+               if(l1.itemID != Item.dyePowder.shiftedIndex) {
                   return null;
                }
 
-               float[] var14 = EntitySheep.fleeceColorTable[BlockCloth.getBlockFromDye(var8.getItemDamage())];
-               int var16 = (int)(var14[0] * 255.0F);
-               int var15 = (int)(var14[1] * 255.0F);
-               var17 = (int)(var14[2] * 255.0F);
-               var4 += Math.max(var16, Math.max(var15, var17));
-               var3[0] += var16;
-               var3[1] += var15;
-               var3[2] += var17;
-               ++var5;
+               float[] var17 = EntitySheep.fleeceColorTable[BlockCloth.getBlockFromDye(l1.getItemDamage())];
+               int j1 = (int)(var17[0] * 255.0F);
+               int k1 = (int)(var17[1] * 255.0F);
+               i1 = (int)(var17[2] * 255.0F);
+               i += Math.max(j1, Math.max(k1, i1));
+               aint[0] += j1;
+               aint[1] += k1;
+               aint[2] += i1;
+               ++j;
             }
          }
       }
 
-      if(var6 == null) {
+      if(itemarmor == null) {
          return null;
       } else {
-         var7 = var3[0] / var5;
-         int var13 = var3[1] / var5;
-         var9 = var3[2] / var5;
-         var10 = (float)var4 / (float)var5;
-         var11 = (float)Math.max(var7, Math.max(var13, var9));
-         var7 = (int)((float)var7 * var10 / var11);
-         var13 = (int)((float)var13 * var10 / var11);
-         var9 = (int)((float)var9 * var10 / var11);
-         var17 = (var7 << 8) + var13;
-         var17 = (var17 << 8) + var9;
-         var6.func_82813_b(var2, var17);
-         return var2;
+         k = aint[0] / j;
+         int var16 = aint[1] / j;
+         l = aint[2] / j;
+         f = (float)i / (float)j;
+         f1 = (float)Math.max(k, Math.max(var16, l));
+         k = (int)((float)k * f / f1);
+         var16 = (int)((float)var16 * f / f1);
+         l = (int)((float)l * f / f1);
+         i1 = (k << 8) + var16;
+         i1 = (i1 << 8) + l;
+         itemarmor.func_82813_b(itemstack, i1);
+         return itemstack;
       }
    }
 
Binary files mcp-mcdev/net/minecraft/src/RecipesMapCloning.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/RecipesMapCloning.class differ
diff -ur mcp-mcdev/net/minecraft/src/RecipesMapCloning.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/RecipesMapCloning.java
--- mcp-mcdev/net/minecraft/src/RecipesMapCloning.java	2012-11-29 21:14:34.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/RecipesMapCloning.java	2012-11-29 20:43:45.000000000 -0800
@@ -1,66 +1,72 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
 import net.minecraft.src.IRecipe;
 import net.minecraft.src.InventoryCrafting;
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
+import net.minecraft.src.ShapelessRecipes;
 import net.minecraft.src.World;
 
-public class RecipesMapCloning implements IRecipe {
+public class RecipesMapCloning extends ShapelessRecipes implements IRecipe {
 
-   public boolean matches(InventoryCrafting var1, World var2) {
-      int var3 = 0;
-      ItemStack var4 = null;
-
-      for(int var5 = 0; var5 < var1.getSizeInventory(); ++var5) {
-         ItemStack var6 = var1.getStackInSlot(var5);
-         if(var6 != null) {
-            if(var6.itemID == Item.map.shiftedIndex) {
-               if(var4 != null) {
+   public RecipesMapCloning() {
+      super(new ItemStack(Item.map, 0, -1), Arrays.asList(new ItemStack[]{new ItemStack(Item.emptyMap, 0, 0)}));
+   }
+
+   public boolean matches(InventoryCrafting inventorycrafting, World world) {
+      int i = 0;
+      ItemStack itemstack = null;
+
+      for(int j = 0; j < inventorycrafting.getSizeInventory(); ++j) {
+         ItemStack itemstack1 = inventorycrafting.getStackInSlot(j);
+         if(itemstack1 != null) {
+            if(itemstack1.itemID == Item.map.shiftedIndex) {
+               if(itemstack != null) {
                   return false;
                }
 
-               var4 = var6;
+               itemstack = itemstack1;
             } else {
-               if(var6.itemID != Item.emptyMap.shiftedIndex) {
+               if(itemstack1.itemID != Item.emptyMap.shiftedIndex) {
                   return false;
                }
 
-               ++var3;
+               ++i;
             }
          }
       }
 
-      return var4 != null && var3 > 0;
+      return itemstack != null && i > 0;
    }
 
-   public ItemStack getCraftingResult(InventoryCrafting var1) {
-      int var2 = 0;
-      ItemStack var3 = null;
-
-      for(int var4 = 0; var4 < var1.getSizeInventory(); ++var4) {
-         ItemStack var5 = var1.getStackInSlot(var4);
-         if(var5 != null) {
-            if(var5.itemID == Item.map.shiftedIndex) {
-               if(var3 != null) {
+   public ItemStack getCraftingResult(InventoryCrafting inventorycrafting) {
+      int i = 0;
+      ItemStack itemstack = null;
+
+      for(int itemstack2 = 0; itemstack2 < inventorycrafting.getSizeInventory(); ++itemstack2) {
+         ItemStack itemstack1 = inventorycrafting.getStackInSlot(itemstack2);
+         if(itemstack1 != null) {
+            if(itemstack1.itemID == Item.map.shiftedIndex) {
+               if(itemstack != null) {
                   return null;
                }
 
-               var3 = var5;
+               itemstack = itemstack1;
             } else {
-               if(var5.itemID != Item.emptyMap.shiftedIndex) {
+               if(itemstack1.itemID != Item.emptyMap.shiftedIndex) {
                   return null;
                }
 
-               ++var2;
+               ++i;
             }
          }
       }
 
-      if(var3 != null && var2 >= 1) {
-         ItemStack var6 = new ItemStack(Item.map, var2 + 1, var3.getItemDamage());
-         if(var3.hasDisplayName()) {
-            var6.setItemName(var3.getDisplayName());
+      if(itemstack != null && i >= 1) {
+         ItemStack var6 = new ItemStack(Item.map, i + 1, itemstack.getItemDamage());
+         if(itemstack.hasDisplayName()) {
+            var6.setItemName(itemstack.getDisplayName());
          }
 
          return var6;
Binary files mcp-mcdev/net/minecraft/src/SaveHandler.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/SaveHandler.class differ
diff -ur mcp-mcdev/net/minecraft/src/SaveHandler.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/SaveHandler.java
--- mcp-mcdev/net/minecraft/src/SaveHandler.java	2012-11-29 21:14:33.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/SaveHandler.java	2012-11-29 20:43:44.000000000 -0800
@@ -6,9 +6,11 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.util.UUID;
 import java.util.logging.Logger;
 import net.minecraft.src.CompressedStreamTools;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.IChunkLoader;
 import net.minecraft.src.IPlayerFileData;
 import net.minecraft.src.ISaveHandler;
@@ -16,6 +18,7 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.WorldInfo;
 import net.minecraft.src.WorldProvider;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 
 public class SaveHandler implements ISaveHandler, IPlayerFileData {
 
@@ -25,16 +28,17 @@
    private final File mapDataDir;
    private final long initializationTime = System.currentTimeMillis();
    private final String saveDirectoryName;
+   private UUID uuid = null;
 
 
-   public SaveHandler(File var1, String var2, boolean var3) {
-      this.worldDirectory = new File(var1, var2);
+   public SaveHandler(File file1, String s, boolean flag) {
+      this.worldDirectory = new File(file1, s);
       this.worldDirectory.mkdirs();
       this.playersDirectory = new File(this.worldDirectory, "players");
       this.mapDataDir = new File(this.worldDirectory, "data");
       this.mapDataDir.mkdirs();
-      this.saveDirectoryName = var2;
-      if(var3) {
+      this.saveDirectoryName = s;
+      if(flag) {
          this.playersDirectory.mkdirs();
       }
 
@@ -43,97 +47,97 @@
 
    private void setSessionLock() {
       try {
-         File var1 = new File(this.worldDirectory, "session.lock");
-         DataOutputStream var2 = new DataOutputStream(new FileOutputStream(var1));
+         File ioexception = new File(this.worldDirectory, "session.lock");
+         DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(ioexception));
 
          try {
-            var2.writeLong(this.initializationTime);
+            dataoutputstream.writeLong(this.initializationTime);
          } finally {
-            var2.close();
+            dataoutputstream.close();
          }
 
-      } catch (IOException var7) {
-         var7.printStackTrace();
+      } catch (IOException var8) {
+         var8.printStackTrace();
          throw new RuntimeException("Failed to check session lock, aborting");
       }
    }
 
-   protected File getWorldDirectory() {
+   public File getWorldDirectory() {
       return this.worldDirectory;
    }
 
-   public void checkSessionLock() {
+   public void checkSessionLock() throws MinecraftException {
       try {
-         File var1 = new File(this.worldDirectory, "session.lock");
-         DataInputStream var2 = new DataInputStream(new FileInputStream(var1));
+         File ioexception = new File(this.worldDirectory, "session.lock");
+         DataInputStream datainputstream = new DataInputStream(new FileInputStream(ioexception));
 
          try {
-            if(var2.readLong() != this.initializationTime) {
+            if(datainputstream.readLong() != this.initializationTime) {
                throw new MinecraftException("The save is being accessed from another location, aborting");
             }
          } finally {
-            var2.close();
+            datainputstream.close();
          }
 
-      } catch (IOException var7) {
+      } catch (IOException var8) {
          throw new MinecraftException("Failed to check session lock, aborting");
       }
    }
 
-   public IChunkLoader getChunkLoader(WorldProvider var1) {
+   public IChunkLoader getChunkLoader(WorldProvider worldprovider) {
       throw new RuntimeException("Old Chunk Storage is no longer supported.");
    }
 
    public WorldInfo loadWorldInfo() {
-      File var1 = new File(this.worldDirectory, "level.dat");
-      NBTTagCompound var2;
-      NBTTagCompound var3;
-      if(var1.exists()) {
+      File file1 = new File(this.worldDirectory, "level.dat");
+      NBTTagCompound nbttagcompound;
+      NBTTagCompound nbttagcompound1;
+      if(file1.exists()) {
          try {
-            var2 = CompressedStreamTools.readCompressed(new FileInputStream(var1));
-            var3 = var2.getCompoundTag("Data");
-            return new WorldInfo(var3);
-         } catch (Exception var5) {
-            var5.printStackTrace();
+            nbttagcompound = CompressedStreamTools.readCompressed(new FileInputStream(file1));
+            nbttagcompound1 = nbttagcompound.getCompoundTag("Data");
+            return new WorldInfo(nbttagcompound1);
+         } catch (Exception var6) {
+            var6.printStackTrace();
          }
       }
 
-      var1 = new File(this.worldDirectory, "level.dat_old");
-      if(var1.exists()) {
+      file1 = new File(this.worldDirectory, "level.dat_old");
+      if(file1.exists()) {
          try {
-            var2 = CompressedStreamTools.readCompressed(new FileInputStream(var1));
-            var3 = var2.getCompoundTag("Data");
-            return new WorldInfo(var3);
-         } catch (Exception var4) {
-            var4.printStackTrace();
+            nbttagcompound = CompressedStreamTools.readCompressed(new FileInputStream(file1));
+            nbttagcompound1 = nbttagcompound.getCompoundTag("Data");
+            return new WorldInfo(nbttagcompound1);
+         } catch (Exception var5) {
+            var5.printStackTrace();
          }
       }
 
       return null;
    }
 
-   public void saveWorldInfoWithPlayer(WorldInfo var1, NBTTagCompound var2) {
-      NBTTagCompound var3 = var1.cloneNBTCompound(var2);
-      NBTTagCompound var4 = new NBTTagCompound();
-      var4.setTag("Data", var3);
+   public void saveWorldInfoWithPlayer(WorldInfo worlddata, NBTTagCompound nbttagcompound) {
+      NBTTagCompound nbttagcompound1 = worlddata.cloneNBTCompound(nbttagcompound);
+      NBTTagCompound nbttagcompound2 = new NBTTagCompound();
+      nbttagcompound2.setTag("Data", nbttagcompound1);
 
       try {
-         File var5 = new File(this.worldDirectory, "level.dat_new");
-         File var6 = new File(this.worldDirectory, "level.dat_old");
-         File var7 = new File(this.worldDirectory, "level.dat");
-         CompressedStreamTools.writeCompressed(var4, new FileOutputStream(var5));
-         if(var6.exists()) {
-            var6.delete();
-         }
-
-         var7.renameTo(var6);
-         if(var7.exists()) {
-            var7.delete();
-         }
-
-         var5.renameTo(var7);
-         if(var5.exists()) {
-            var5.delete();
+         File exception = new File(this.worldDirectory, "level.dat_new");
+         File file2 = new File(this.worldDirectory, "level.dat_old");
+         File file3 = new File(this.worldDirectory, "level.dat");
+         CompressedStreamTools.writeCompressed(nbttagcompound2, new FileOutputStream(exception));
+         if(file2.exists()) {
+            file2.delete();
+         }
+
+         file3.renameTo(file2);
+         if(file3.exists()) {
+            file3.delete();
+         }
+
+         exception.renameTo(file3);
+         if(exception.exists()) {
+            exception.delete();
          }
       } catch (Exception var8) {
          var8.printStackTrace();
@@ -141,28 +145,28 @@
 
    }
 
-   public void saveWorldInfo(WorldInfo var1) {
-      NBTTagCompound var2 = var1.getNBTTagCompound();
-      NBTTagCompound var3 = new NBTTagCompound();
-      var3.setTag("Data", var2);
+   public void saveWorldInfo(WorldInfo worlddata) {
+      NBTTagCompound nbttagcompound = worlddata.getNBTTagCompound();
+      NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+      nbttagcompound1.setTag("Data", nbttagcompound);
 
       try {
-         File var4 = new File(this.worldDirectory, "level.dat_new");
-         File var5 = new File(this.worldDirectory, "level.dat_old");
-         File var6 = new File(this.worldDirectory, "level.dat");
-         CompressedStreamTools.writeCompressed(var3, new FileOutputStream(var4));
-         if(var5.exists()) {
-            var5.delete();
-         }
-
-         var6.renameTo(var5);
-         if(var6.exists()) {
-            var6.delete();
-         }
-
-         var4.renameTo(var6);
-         if(var4.exists()) {
-            var4.delete();
+         File exception = new File(this.worldDirectory, "level.dat_new");
+         File file2 = new File(this.worldDirectory, "level.dat_old");
+         File file3 = new File(this.worldDirectory, "level.dat");
+         CompressedStreamTools.writeCompressed(nbttagcompound1, new FileOutputStream(exception));
+         if(file2.exists()) {
+            file2.delete();
+         }
+
+         file3.renameTo(file2);
+         if(file3.exists()) {
+            file3.delete();
+         }
+
+         exception.renameTo(file3);
+         if(exception.exists()) {
+            exception.delete();
          }
       } catch (Exception var7) {
          var7.printStackTrace();
@@ -170,40 +174,45 @@
 
    }
 
-   public void writePlayerData(EntityPlayer var1) {
+   public void writePlayerData(EntityPlayer entityhuman) {
       try {
-         NBTTagCompound var2 = new NBTTagCompound();
-         var1.writeToNBT(var2);
-         File var3 = new File(this.playersDirectory, var1.username + ".dat.tmp");
-         File var4 = new File(this.playersDirectory, var1.username + ".dat");
-         CompressedStreamTools.writeCompressed(var2, new FileOutputStream(var3));
-         if(var4.exists()) {
-            var4.delete();
+         NBTTagCompound exception = new NBTTagCompound();
+         entityhuman.writeToNBT(exception);
+         File file1 = new File(this.playersDirectory, entityhuman.username + ".dat.tmp");
+         File file2 = new File(this.playersDirectory, entityhuman.username + ".dat");
+         CompressedStreamTools.writeCompressed(exception, new FileOutputStream(file1));
+         if(file2.exists()) {
+            file2.delete();
          }
 
-         var3.renameTo(var4);
+         file1.renameTo(file2);
       } catch (Exception var5) {
-         logger.warning("Failed to save player data for " + var1.username);
+         logger.warning("Failed to save player data for " + entityhuman.username);
       }
 
    }
 
-   public void readPlayerData(EntityPlayer var1) {
-      NBTTagCompound var2 = this.getPlayerData(var1.username);
-      if(var2 != null) {
-         var1.readFromNBT(var2);
+   public void readPlayerData(EntityPlayer entityhuman) {
+      NBTTagCompound nbttagcompound = this.getPlayerData(entityhuman.username);
+      if(nbttagcompound != null) {
+         if(entityhuman instanceof EntityPlayerMP) {
+            CraftPlayer player = (CraftPlayer)entityhuman.bukkitEntity;
+            player.setFirstPlayed((new File(this.playersDirectory, entityhuman.username + ".dat")).lastModified());
+         }
+
+         entityhuman.readFromNBT(nbttagcompound);
       }
 
    }
 
-   public NBTTagCompound getPlayerData(String var1) {
+   public NBTTagCompound getPlayerData(String s) {
       try {
-         File var2 = new File(this.playersDirectory, var1 + ".dat");
-         if(var2.exists()) {
-            return CompressedStreamTools.readCompressed(new FileInputStream(var2));
+         File exception = new File(this.playersDirectory, s + ".dat");
+         if(exception.exists()) {
+            return CompressedStreamTools.readCompressed(new FileInputStream(exception));
          }
       } catch (Exception var3) {
-         logger.warning("Failed to load player data for " + var1);
+         logger.warning("Failed to load player data for " + s);
       }
 
       return null;
@@ -214,25 +223,54 @@
    }
 
    public String[] getAvailablePlayerDat() {
-      String[] var1 = this.playersDirectory.list();
+      String[] astring = this.playersDirectory.list();
 
-      for(int var2 = 0; var2 < var1.length; ++var2) {
-         if(var1[var2].endsWith(".dat")) {
-            var1[var2] = var1[var2].substring(0, var1[var2].length() - 4);
+      for(int i = 0; i < astring.length; ++i) {
+         if(astring[i].endsWith(".dat")) {
+            astring[i] = astring[i].substring(0, astring[i].length() - 4);
          }
       }
 
-      return var1;
+      return astring;
    }
 
    public void flush() {}
 
-   public File getMapFileFromName(String var1) {
-      return new File(this.mapDataDir, var1 + ".dat");
+   public File getMapFileFromName(String s) {
+      return new File(this.mapDataDir, s + ".dat");
    }
 
    public String getSaveDirectoryName() {
       return this.saveDirectoryName;
    }
 
+   public UUID getUUID() {
+      if(this.uuid != null) {
+         return this.uuid;
+      } else {
+         try {
+            File ex = new File(this.worldDirectory, "uid.dat");
+            if(!ex.exists()) {
+               DataOutputStream dis = new DataOutputStream(new FileOutputStream(ex));
+               this.uuid = UUID.randomUUID();
+               dis.writeLong(this.uuid.getMostSignificantBits());
+               dis.writeLong(this.uuid.getLeastSignificantBits());
+               dis.close();
+            } else {
+               DataInputStream dis1 = new DataInputStream(new FileInputStream(ex));
+               this.uuid = new UUID(dis1.readLong(), dis1.readLong());
+               dis1.close();
+            }
+
+            return this.uuid;
+         } catch (IOException var3) {
+            return null;
+         }
+      }
+   }
+
+   public File getPlayerDir() {
+      return this.playersDirectory;
+   }
+
 }
Binary files mcp-mcdev/net/minecraft/src/ServerBlockEventList.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ServerBlockEventList.class differ
diff -ur mcp-mcdev/net/minecraft/src/ServerBlockEventList.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ServerBlockEventList.java
--- mcp-mcdev/net/minecraft/src/ServerBlockEventList.java	2012-11-29 21:14:33.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ServerBlockEventList.java	2012-11-29 20:43:44.000000000 -0800
@@ -7,8 +7,7 @@
 
    private ServerBlockEventList() {}
 
-   // $FF: synthetic method
-   ServerBlockEventList(Empty3 var1) {
+   ServerBlockEventList(Empty3 emptyclass2) {
       this();
    }
 }
Binary files mcp-mcdev/net/minecraft/src/ServerConfigurationManager.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ServerConfigurationManager.class differ
diff -ur mcp-mcdev/net/minecraft/src/ServerConfigurationManager.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ServerConfigurationManager.java
--- mcp-mcdev/net/minecraft/src/ServerConfigurationManager.java	2012-11-29 21:14:33.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ServerConfigurationManager.java	2012-11-29 20:43:44.000000000 -0800
@@ -7,8 +7,10 @@
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.logging.Logger;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.BanEntry;
@@ -24,6 +26,7 @@
 import net.minecraft.src.ItemInWorldManager;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.NBTTagCompound;
+import net.minecraft.src.NetLoginHandler;
 import net.minecraft.src.NetServerHandler;
 import net.minecraft.src.Packet;
 import net.minecraft.src.Packet1Login;
@@ -41,317 +44,463 @@
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.PortalTravelAgent;
+import org.bukkit.craftbukkit.command.ColouredConsoleSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
+import org.bukkit.event.player.PlayerJoinEvent;
+import org.bukkit.event.player.PlayerLoginEvent;
+import org.bukkit.event.player.PlayerPortalEvent;
+import org.bukkit.event.player.PlayerQuitEvent;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import org.bukkit.event.player.PlayerLoginEvent.Result;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 
 public abstract class ServerConfigurationManager {
 
    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
    public static final Logger logger = Logger.getLogger("Minecraft");
    private final MinecraftServer mcServer;
-   public final List playerEntityList = new ArrayList();
+   public final List playerEntityList = new CopyOnWriteArrayList();
    private final BanList bannedPlayers = new BanList(new File("banned-players.txt"));
    private final BanList bannedIPs = new BanList(new File("banned-ips.txt"));
    private Set ops = new HashSet();
-   private Set whiteListedPlayers = new HashSet();
-   private IPlayerFileData playerNBTManagerObj;
-   private boolean whiteListEnforced;
+   private Set whiteListedPlayers = new LinkedHashSet();
+   public IPlayerFileData playerNBTManagerObj;
+   public boolean whiteListEnforced;
    protected int maxPlayers;
    protected int viewDistance;
    private EnumGameType gameType;
    private boolean commandsAllowedForAll;
    private int playerPingIndex = 0;
+   private CraftServer cserver;
 
 
-   public ServerConfigurationManager(MinecraftServer var1) {
-      this.mcServer = var1;
+   public ServerConfigurationManager(MinecraftServer minecraftserver) {
+      minecraftserver.server = new CraftServer(minecraftserver, this);
+      minecraftserver.console = ColouredConsoleSender.getInstance();
+      this.cserver = minecraftserver.server;
+      this.mcServer = minecraftserver;
       this.bannedPlayers.setListActive(false);
       this.bannedIPs.setListActive(false);
       this.maxPlayers = 8;
    }
 
-   public void initializeConnectionToPlayer(INetworkManager var1, EntityPlayerMP var2) {
-      this.readPlayerDataFromFile(var2);
-      var2.setWorld(this.mcServer.worldServerForDimension(var2.dimension));
-      var2.theItemInWorldManager.setWorld((WorldServer)var2.worldObj);
-      String var3 = "local";
-      if(var1.getRemoteAddress() != null) {
-         var3 = var1.getRemoteAddress().toString();
-      }
-
-      logger.info(var2.username + "[" + var3 + "] logged in with entity id " + var2.entityId + " at (" + var2.posX + ", " + var2.posY + ", " + var2.posZ + ")");
-      WorldServer var4 = this.mcServer.worldServerForDimension(var2.dimension);
-      ChunkCoordinates var5 = var4.getSpawnPoint();
-      this.func_72381_a(var2, (EntityPlayerMP)null, var4);
-      NetServerHandler var6 = new NetServerHandler(this.mcServer, var1, var2);
-      var6.sendPacket(new Packet1Login(var2.entityId, var4.getWorldInfo().getTerrainType(), var2.theItemInWorldManager.getGameType(), var4.getWorldInfo().isHardcoreModeEnabled(), var4.provider.dimensionId, var4.difficultySetting, var4.getHeight(), this.getMaxPlayers()));
-      var6.sendPacket(new Packet6SpawnPosition(var5.posX, var5.posY, var5.posZ));
-      var6.sendPacket(new Packet202PlayerAbilities(var2.capabilities));
-      this.updateTimeAndWeatherForPlayer(var2, var4);
-      this.sendPacketToAllPlayers(new Packet3Chat("§e" + var2.username + " joined the game."));
-      this.playerLoggedIn(var2);
-      var6.setPlayerLocation(var2.posX, var2.posY, var2.posZ, var2.rotationYaw, var2.rotationPitch);
-      this.mcServer.getNetworkThread().addPlayer(var6);
-      var6.sendPacket(new Packet4UpdateTime(var4.getTotalWorldTime(), var4.getWorldTime()));
+   public void initializeConnectionToPlayer(INetworkManager inetworkmanager, EntityPlayerMP entityplayer) {
+      this.readPlayerDataFromFile(entityplayer);
+      entityplayer.spawnIn(this.mcServer.worldServerForDimension(entityplayer.dimension));
+      entityplayer.theItemInWorldManager.setWorld((WorldServer)entityplayer.worldObj);
+      String s = "local";
+      if(inetworkmanager.getRemoteAddress() != null) {
+         s = inetworkmanager.getRemoteAddress().toString();
+      }
+
+      logger.info(entityplayer.username + "[" + s + "] logged in with entity id " + entityplayer.entityId + " at ([" + entityplayer.worldObj.worldInfo.getWorldName() + "] " + entityplayer.posX + ", " + entityplayer.posY + ", " + entityplayer.posZ + ")");
+      WorldServer worldserver = this.mcServer.worldServerForDimension(entityplayer.dimension);
+      ChunkCoordinates chunkcoordinates = worldserver.getSpawnPoint();
+      this.func_72381_a(entityplayer, (EntityPlayerMP)null, worldserver);
+      NetServerHandler netserverhandler = new NetServerHandler(this.mcServer, inetworkmanager, entityplayer);
+      int maxPlayers = this.getMaxPlayers();
+      if(maxPlayers > 60) {
+         maxPlayers = 60;
+      }
+
+      netserverhandler.sendPacket(new Packet1Login(entityplayer.entityId, worldserver.getWorldInfo().getTerrainType(), entityplayer.theItemInWorldManager.getGameType(), worldserver.getWorldInfo().isHardcoreModeEnabled(), worldserver.provider.dimensionId, worldserver.difficultySetting, worldserver.getHeight(), maxPlayers));
+      entityplayer.getBukkitEntity().sendSupportedChannels();
+      netserverhandler.sendPacket(new Packet6SpawnPosition(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ));
+      netserverhandler.sendPacket(new Packet202PlayerAbilities(entityplayer.capabilities));
+      this.updateTimeAndWeatherForPlayer(entityplayer, worldserver);
+      this.playerLoggedIn(entityplayer);
+      netserverhandler.setPlayerLocation(entityplayer.posX, entityplayer.posY, entityplayer.posZ, entityplayer.rotationYaw, entityplayer.rotationPitch);
+      this.mcServer.getNetworkThread().addPlayer(netserverhandler);
+      netserverhandler.sendPacket(new Packet4UpdateTime(worldserver.getTotalWorldTime(), worldserver.getWorldTime()));
       if(this.mcServer.getTexturePack().length() > 0) {
-         var2.requestTexturePackLoad(this.mcServer.getTexturePack(), this.mcServer.textureSize());
+         entityplayer.requestTexturePackLoad(this.mcServer.getTexturePack(), this.mcServer.textureSize());
       }
 
-      Iterator var7 = var2.getActivePotionEffects().iterator();
+      Iterator iterator = entityplayer.getActivePotionEffects().iterator();
 
-      while(var7.hasNext()) {
-         PotionEffect var8 = (PotionEffect)var7.next();
-         var6.sendPacket(new Packet41EntityEffect(var2.entityId, var8));
+      while(iterator.hasNext()) {
+         PotionEffect mobeffect = (PotionEffect)iterator.next();
+         netserverhandler.sendPacket(new Packet41EntityEffect(entityplayer.entityId, mobeffect));
       }
 
-      var2.addSelfToInternalCraftingInventory();
+      entityplayer.addSelfToInternalCraftingInventory();
    }
 
-   public void setPlayerManager(WorldServer[] var1) {
-      this.playerNBTManagerObj = var1[0].getSaveHandler().getPlayerNBTManager();
+   public void setPlayerManager(WorldServer[] aworldserver) {
+      if(this.playerNBTManagerObj == null) {
+         this.playerNBTManagerObj = aworldserver[0].getSaveHandler().getPlayerNBTManager();
+      }
    }
 
-   public void func_72375_a(EntityPlayerMP var1, WorldServer var2) {
-      WorldServer var3 = var1.getServerForPlayer();
-      if(var2 != null) {
-         var2.getPlayerManager().removePlayer(var1);
+   public void func_72375_a(EntityPlayerMP entityplayer, WorldServer worldserver) {
+      WorldServer worldserver1 = entityplayer.getServerForPlayer();
+      if(worldserver != null) {
+         worldserver.getPlayerManager().removePlayer(entityplayer);
       }
 
-      var3.getPlayerManager().addPlayer(var1);
-      var3.theChunkProviderServer.loadChunk((int)var1.posX >> 4, (int)var1.posZ >> 4);
+      worldserver1.getPlayerManager().addPlayer(entityplayer);
+      worldserver1.theChunkProviderServer.loadChunk((int)entityplayer.posX >> 4, (int)entityplayer.posZ >> 4);
    }
 
    public int getEntityViewDistance() {
       return PlayerManager.func_72686_a(this.getViewDistance());
    }
 
-   public void readPlayerDataFromFile(EntityPlayerMP var1) {
-      NBTTagCompound var2 = this.mcServer.worldServers[0].getWorldInfo().getPlayerNBTTagCompound();
-      if(var1.getCommandSenderName().equals(this.mcServer.getServerOwner()) && var2 != null) {
-         var1.readFromNBT(var2);
+   public void readPlayerDataFromFile(EntityPlayerMP entityplayer) {
+      NBTTagCompound nbttagcompound = ((WorldServer)this.mcServer.worlds.get(0)).getWorldInfo().getPlayerNBTTagCompound();
+      if(entityplayer.getCommandSenderName().equals(this.mcServer.getServerOwner()) && nbttagcompound != null) {
+         entityplayer.readFromNBT(nbttagcompound);
       } else {
-         this.playerNBTManagerObj.readPlayerData(var1);
+         this.playerNBTManagerObj.readPlayerData(entityplayer);
       }
 
    }
 
-   protected void writePlayerData(EntityPlayerMP var1) {
-      this.playerNBTManagerObj.writePlayerData(var1);
+   protected void writePlayerData(EntityPlayerMP entityplayer) {
+      this.playerNBTManagerObj.writePlayerData(entityplayer);
    }
 
-   public void playerLoggedIn(EntityPlayerMP var1) {
-      this.sendPacketToAllPlayers(new Packet201PlayerInfo(var1.username, true, 1000));
-      this.playerEntityList.add(var1);
-      WorldServer var2 = this.mcServer.worldServerForDimension(var1.dimension);
-      var2.spawnEntityInWorld(var1);
-      this.func_72375_a(var1, (WorldServer)null);
+   public void playerLoggedIn(EntityPlayerMP entityplayer) {
+      this.cserver.detectListNameConflict(entityplayer);
+      this.playerEntityList.add(entityplayer);
+      WorldServer worldserver = this.mcServer.worldServerForDimension(entityplayer.dimension);
+      PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(this.cserver.getPlayer(entityplayer), "§e" + entityplayer.username + " joined the game.");
+      this.cserver.getPluginManager().callEvent(playerJoinEvent);
+      String joinMessage = playerJoinEvent.getJoinMessage();
+      if(joinMessage != null && joinMessage.length() > 0) {
+         this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new Packet3Chat(joinMessage));
+      }
 
-      for(int var3 = 0; var3 < this.playerEntityList.size(); ++var3) {
-         EntityPlayerMP var4 = (EntityPlayerMP)this.playerEntityList.get(var3);
-         var1.playerNetServerHandler.sendPacket(new Packet201PlayerInfo(var4.username, true, var4.ping));
+      this.cserver.onPlayerJoin(playerJoinEvent.getPlayer());
+      if(entityplayer.worldObj == worldserver && !worldserver.playerEntities.contains(entityplayer)) {
+         worldserver.spawnEntityInWorld(entityplayer);
+         this.func_72375_a(entityplayer, (WorldServer)null);
+      }
+
+      Packet201PlayerInfo packet = new Packet201PlayerInfo(entityplayer.listName, true, 1000);
+
+      int i;
+      EntityPlayerMP entityplayer1;
+      for(i = 0; i < this.playerEntityList.size(); ++i) {
+         entityplayer1 = (EntityPlayerMP)this.playerEntityList.get(i);
+         if(entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
+            entityplayer1.playerNetServerHandler.sendPacket(packet);
+         }
+      }
+
+      for(i = 0; i < this.playerEntityList.size(); ++i) {
+         entityplayer1 = (EntityPlayerMP)this.playerEntityList.get(i);
+         if(entityplayer.getBukkitEntity().canSee(entityplayer1.getBukkitEntity())) {
+            entityplayer.playerNetServerHandler.sendPacket(new Packet201PlayerInfo(entityplayer1.listName, true, entityplayer1.ping));
+         }
       }
 
    }
 
-   public void serverUpdateMountedMovingPlayer(EntityPlayerMP var1) {
-      var1.getServerForPlayer().getPlayerManager().updateMountedMovingPlayer(var1);
+   public void serverUpdateMountedMovingPlayer(EntityPlayerMP entityplayer) {
+      entityplayer.getServerForPlayer().getPlayerManager().updateMountedMovingPlayer(entityplayer);
    }
 
-   public void playerLoggedOut(EntityPlayerMP var1) {
-      this.writePlayerData(var1);
-      WorldServer var2 = var1.getServerForPlayer();
-      var2.setEntityDead(var1);
-      var2.getPlayerManager().removePlayer(var1);
-      this.playerEntityList.remove(var1);
-      this.sendPacketToAllPlayers(new Packet201PlayerInfo(var1.username, false, 9999));
+   public String disconnect(EntityPlayerMP entityplayer) {
+      if(entityplayer.playerNetServerHandler.connectionClosed) {
+         return null;
+      } else {
+         PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(this.cserver.getPlayer(entityplayer), "§e" + entityplayer.username + " left the game.");
+         this.cserver.getPluginManager().callEvent(playerQuitEvent);
+         this.writePlayerData(entityplayer);
+         WorldServer worldserver = entityplayer.getServerForPlayer();
+         worldserver.setEntityDead(entityplayer);
+         worldserver.getPlayerManager().removePlayer(entityplayer);
+         this.playerEntityList.remove(entityplayer);
+         Packet201PlayerInfo packet = new Packet201PlayerInfo(entityplayer.listName, false, 9999);
+
+         for(int i = 0; i < this.playerEntityList.size(); ++i) {
+            EntityPlayerMP entityplayer1 = (EntityPlayerMP)this.playerEntityList.get(i);
+            if(entityplayer1.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
+               entityplayer1.playerNetServerHandler.sendPacket(packet);
+            }
+         }
+
+         return playerQuitEvent.getQuitMessage();
+      }
    }
 
-   public String allowUserToConnect(SocketAddress var1, String var2) {
-      if(this.bannedPlayers.isBanned(var2)) {
-         BanEntry var6 = (BanEntry)this.bannedPlayers.getBannedList().get(var2);
-         String var7 = "You are banned from this server!\nReason: " + var6.getBanReason();
-         if(var6.getBanEndDate() != null) {
-            var7 = var7 + "\nYour ban will be removed on " + dateFormat.format(var6.getBanEndDate());
+   public EntityPlayerMP attemptLogin(NetLoginHandler netloginhandler, String s, String hostname) {
+      EntityPlayerMP entity = new EntityPlayerMP(this.mcServer, this.mcServer.worldServerForDimension(0), s, (ItemInWorldManager)(this.mcServer.isDemo()?new DemoWorldManager(this.mcServer.worldServerForDimension(0)):new ItemInWorldManager(this.mcServer.worldServerForDimension(0))));
+      CraftPlayer player = entity.getBukkitEntity();
+      PlayerLoginEvent event = new PlayerLoginEvent(player, hostname, netloginhandler.getSocket().getInetAddress());
+      SocketAddress socketaddress = netloginhandler.myTCPConnection.getRemoteAddress();
+      if(this.bannedPlayers.isBanned(s)) {
+         BanEntry s2 = (BanEntry)this.bannedPlayers.getBannedList().get(s);
+         String banentry1 = "You are banned from this server!\nReason: " + s2.getBanReason();
+         if(s2.getBanEndDate() != null) {
+            banentry1 = banentry1 + "\nYour ban will be removed on " + dateFormat.format(s2.getBanEndDate());
          }
 
-         return var7;
-      } else if(!this.isAllowedToLogin(var2)) {
-         return "You are not white-listed on this server!";
+         event.disallow(Result.KICK_BANNED, banentry1);
+      } else if(!this.isAllowedToLogin(s)) {
+         event.disallow(Result.KICK_WHITELIST, "You are not white-listed on this server!");
       } else {
-         String var3 = var1.toString();
-         var3 = var3.substring(var3.indexOf("/") + 1);
-         var3 = var3.substring(0, var3.indexOf(":"));
-         if(this.bannedIPs.isBanned(var3)) {
-            BanEntry var4 = (BanEntry)this.bannedIPs.getBannedList().get(var3);
-            String var5 = "Your IP address is banned from this server!\nReason: " + var4.getBanReason();
-            if(var4.getBanEndDate() != null) {
-               var5 = var5 + "\nYour ban will be removed on " + dateFormat.format(var4.getBanEndDate());
+         String s21 = socketaddress.toString();
+         s21 = s21.substring(s21.indexOf("/") + 1);
+         s21 = s21.substring(0, s21.indexOf(":"));
+         if(this.bannedIPs.isBanned(s21)) {
+            BanEntry banentry11 = (BanEntry)this.bannedIPs.getBannedList().get(s21);
+            String s3 = "Your IP address is banned from this server!\nReason: " + banentry11.getBanReason();
+            if(banentry11.getBanEndDate() != null) {
+               s3 = s3 + "\nYour ban will be removed on " + dateFormat.format(banentry11.getBanEndDate());
             }
 
-            return var5;
+            event.disallow(Result.KICK_BANNED, s3);
+         } else if(this.playerEntityList.size() >= this.maxPlayers) {
+            event.disallow(Result.KICK_FULL, "The server is full!");
          } else {
-            return this.playerEntityList.size() >= this.maxPlayers?"The server is full!":null;
+            event.disallow(Result.ALLOWED, s21);
          }
       }
+
+      this.cserver.getPluginManager().callEvent(event);
+      if(event.getResult() != Result.ALLOWED) {
+         netloginhandler.kickUser(event.getKickMessage());
+         return null;
+      } else {
+         return entity;
+      }
    }
 
-   public EntityPlayerMP createPlayerForUser(String var1) {
-      ArrayList var2 = new ArrayList();
+   public EntityPlayerMP processLogin(EntityPlayerMP player) {
+      String s = player.username;
+      ArrayList arraylist = new ArrayList();
 
-      EntityPlayerMP var4;
-      for(int var3 = 0; var3 < this.playerEntityList.size(); ++var3) {
-         var4 = (EntityPlayerMP)this.playerEntityList.get(var3);
-         if(var4.username.equalsIgnoreCase(var1)) {
-            var2.add(var4);
+      EntityPlayerMP entityplayer;
+      for(int iterator = 0; iterator < this.playerEntityList.size(); ++iterator) {
+         entityplayer = (EntityPlayerMP)this.playerEntityList.get(iterator);
+         if(entityplayer.username.equalsIgnoreCase(s)) {
+            arraylist.add(entityplayer);
          }
       }
 
-      Iterator var5 = var2.iterator();
+      Iterator var6 = arraylist.iterator();
 
-      while(var5.hasNext()) {
-         var4 = (EntityPlayerMP)var5.next();
-         var4.playerNetServerHandler.kickPlayer("You logged in from another location");
-      }
-
-      Object var6;
-      if(this.mcServer.isDemo()) {
-         var6 = new DemoWorldManager(this.mcServer.worldServerForDimension(0));
-      } else {
-         var6 = new ItemInWorldManager(this.mcServer.worldServerForDimension(0));
+      while(var6.hasNext()) {
+         entityplayer = (EntityPlayerMP)var6.next();
+         entityplayer.playerNetServerHandler.kickPlayer("You logged in from another location");
       }
 
-      return new EntityPlayerMP(this.mcServer, this.mcServer.worldServerForDimension(0), var1, (ItemInWorldManager)var6);
+      return player;
    }
 
-   public EntityPlayerMP recreatePlayerEntity(EntityPlayerMP var1, int var2, boolean var3) {
-      var1.getServerForPlayer().getEntityTracker().removeTrackedPlayerSymmetric(var1);
-      var1.getServerForPlayer().getEntityTracker().untrackEntity(var1);
-      var1.getServerForPlayer().getPlayerManager().removePlayer(var1);
-      this.playerEntityList.remove(var1);
-      this.mcServer.worldServerForDimension(var1.dimension).removeEntity(var1);
-      ChunkCoordinates var4 = var1.getBedLocation();
-      boolean var5 = var1.isSpawnForced();
-      var1.dimension = var2;
-      Object var6;
-      if(this.mcServer.isDemo()) {
-         var6 = new DemoWorldManager(this.mcServer.worldServerForDimension(var1.dimension));
+   public EntityPlayerMP recreatePlayerEntity(EntityPlayerMP entityplayer, int i, boolean flag) {
+      return this.moveToWorld(entityplayer, i, flag, (Location)null);
+   }
+
+   public EntityPlayerMP moveToWorld(EntityPlayerMP entityplayer, int i, boolean flag, Location location) {
+      entityplayer.getServerForPlayer().getEntityTracker().removeTrackedPlayerSymmetric(entityplayer);
+      entityplayer.getServerForPlayer().getPlayerManager().removePlayer(entityplayer);
+      this.playerEntityList.remove(entityplayer);
+      this.mcServer.worldServerForDimension(entityplayer.dimension).removeEntity(entityplayer);
+      ChunkCoordinates chunkcoordinates = entityplayer.getBedLocation();
+      boolean flag1 = entityplayer.isSpawnForced();
+      EntityPlayerMP entityplayer1 = entityplayer;
+      org.bukkit.World fromWorld = entityplayer.getBukkitEntity().getWorld();
+      entityplayer.playerConqueredTheEnd = false;
+      entityplayer.clonePlayer(entityplayer, flag);
+      ChunkCoordinates chunkcoordinates1;
+      if(location == null) {
+         boolean worldserver = false;
+         CraftWorld actualDimension = (CraftWorld)this.mcServer.server.getWorld(entityplayer.spawnWorld);
+         if(actualDimension != null && chunkcoordinates != null) {
+            chunkcoordinates1 = EntityPlayer.verifyRespawnCoordinates(actualDimension.getHandle(), chunkcoordinates, flag1);
+            if(chunkcoordinates1 != null) {
+               worldserver = true;
+               location = new Location(actualDimension, (double)chunkcoordinates1.posX + 0.5D, (double)chunkcoordinates1.posY, (double)chunkcoordinates1.posZ + 0.5D);
+            } else {
+               entityplayer.setSpawnChunk((ChunkCoordinates)null, true);
+               entityplayer.playerNetServerHandler.sendPacket(new Packet70GameEvent(0, 0));
+            }
+         }
+
+         if(location == null) {
+            actualDimension = (CraftWorld)this.mcServer.server.getWorlds().get(0);
+            chunkcoordinates = actualDimension.getHandle().getSpawnPoint();
+            location = new Location(actualDimension, (double)chunkcoordinates.posX + 0.5D, (double)chunkcoordinates.posY, (double)chunkcoordinates.posZ + 0.5D);
+         }
+
+         Player iterator = this.cserver.getPlayer(entityplayer);
+         PlayerRespawnEvent event = new PlayerRespawnEvent(iterator, location, worldserver);
+         this.cserver.getPluginManager().callEvent(event);
+         location = event.getRespawnLocation();
+         entityplayer.reset();
       } else {
-         var6 = new ItemInWorldManager(this.mcServer.worldServerForDimension(var1.dimension));
+         location.setWorld(this.mcServer.worldServerForDimension(i).getWorld());
       }
 
-      EntityPlayerMP var7 = new EntityPlayerMP(this.mcServer, this.mcServer.worldServerForDimension(var1.dimension), var1.username, (ItemInWorldManager)var6);
-      var7.playerNetServerHandler = var1.playerNetServerHandler;
-      var7.clonePlayer(var1, var3);
-      var7.entityId = var1.entityId;
-      WorldServer var8 = this.mcServer.worldServerForDimension(var1.dimension);
-      this.func_72381_a(var7, var1, var8);
-      ChunkCoordinates var9;
-      if(var4 != null) {
-         var9 = EntityPlayer.verifyRespawnCoordinates(this.mcServer.worldServerForDimension(var1.dimension), var4, var5);
-         if(var9 != null) {
-            var7.setLocationAndAngles((double)((float)var9.posX + 0.5F), (double)((float)var9.posY + 0.1F), (double)((float)var9.posZ + 0.5F), 0.0F, 0.0F);
-            var7.setSpawnChunk(var4, var5);
-         } else {
-            var7.playerNetServerHandler.sendPacket(new Packet70GameEvent(0, 0));
+      WorldServer worldserver1 = ((CraftWorld)location.getWorld()).getHandle();
+      entityplayer.setPositionAndRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+      worldserver1.theChunkProviderServer.loadChunk((int)entityplayer.posX >> 4, (int)entityplayer.posZ >> 4);
+
+      while(!worldserver1.getCollidingBoundingBoxes(entityplayer1, entityplayer1.boundingBox).isEmpty()) {
+         entityplayer1.setPosition(entityplayer1.posX, entityplayer1.posY + 1.0D, entityplayer1.posZ);
+      }
+
+      byte actualDimension1 = (byte)worldserver1.getWorld().getEnvironment().getId();
+      entityplayer1.playerNetServerHandler.sendPacket(new Packet9Respawn((byte)(actualDimension1 >= 0?-1:0), (byte)worldserver1.difficultySetting, worldserver1.getWorldInfo().getTerrainType(), worldserver1.getHeight(), entityplayer.theItemInWorldManager.getGameType()));
+      entityplayer1.playerNetServerHandler.sendPacket(new Packet9Respawn(actualDimension1, (byte)worldserver1.difficultySetting, worldserver1.getWorldInfo().getTerrainType(), worldserver1.getHeight(), entityplayer.theItemInWorldManager.getGameType()));
+      entityplayer1.spawnIn(worldserver1);
+      entityplayer1.isDead = false;
+      entityplayer1.playerNetServerHandler.teleport(new Location(worldserver1.getWorld(), entityplayer1.posX, entityplayer1.posY, entityplayer1.posZ, entityplayer1.rotationYaw, entityplayer1.rotationPitch));
+      entityplayer1.setSneaking(false);
+      chunkcoordinates1 = worldserver1.getSpawnPoint();
+      entityplayer1.playerNetServerHandler.sendPacket(new Packet6SpawnPosition(chunkcoordinates1.posX, chunkcoordinates1.posY, chunkcoordinates1.posZ));
+      entityplayer1.playerNetServerHandler.sendPacket(new Packet43Experience(entityplayer1.experience, entityplayer1.experienceTotal, entityplayer1.experienceLevel));
+      this.updateTimeAndWeatherForPlayer(entityplayer1, worldserver1);
+      worldserver1.getPlayerManager().addPlayer(entityplayer1);
+      worldserver1.spawnEntityInWorld(entityplayer1);
+      this.playerEntityList.add(entityplayer1);
+      this.syncPlayerInventory(entityplayer1);
+      entityplayer1.sendPlayerAbilities();
+      Iterator iterator1 = entityplayer1.getActivePotionEffects().iterator();
+
+      while(iterator1.hasNext()) {
+         PotionEffect event2 = (PotionEffect)iterator1.next();
+         entityplayer1.playerNetServerHandler.sendPacket(new Packet41EntityEffect(entityplayer1.entityId, event2));
+      }
+
+      if(fromWorld != location.getWorld()) {
+         PlayerChangedWorldEvent event1 = new PlayerChangedWorldEvent(entityplayer1.getBukkitEntity(), fromWorld);
+         Bukkit.getServer().getPluginManager().callEvent(event1);
+      }
+
+      return entityplayer1;
+   }
+
+   public void sendPlayerToOtherDimension(EntityPlayerMP entityplayer, int i) {
+      int dimension = i;
+      WorldServer fromWorld = this.mcServer.worldServerForDimension(entityplayer.dimension);
+      WorldServer toWorld = null;
+      if(entityplayer.dimension < 10) {
+         Iterator fromLocation = this.mcServer.worlds.iterator();
+
+         while(fromLocation.hasNext()) {
+            WorldServer toLocation = (WorldServer)fromLocation.next();
+            if(toLocation.dimension == dimension) {
+               toWorld = toLocation;
+            }
          }
       }
 
-      var8.theChunkProviderServer.loadChunk((int)var7.posX >> 4, (int)var7.posZ >> 4);
-
-      while(!var8.getCollidingBoundingBoxes(var7, var7.boundingBox).isEmpty()) {
-         var7.setPosition(var7.posX, var7.posY + 1.0D, var7.posZ);
+      Location fromLocation1 = new Location(fromWorld.getWorld(), entityplayer.posX, entityplayer.posY, entityplayer.posZ, entityplayer.rotationYaw, entityplayer.rotationPitch);
+      Location toLocation1 = null;
+      if(toWorld != null) {
+         if((dimension == -1 || dimension == 0) && (entityplayer.dimension == -1 || entityplayer.dimension == 0)) {
+            double blockRatio = dimension == 0?8.0D:0.125D;
+            toLocation1 = toWorld == null?null:new Location(toWorld.getWorld(), entityplayer.posX * blockRatio, entityplayer.posY, entityplayer.posZ * blockRatio, entityplayer.rotationYaw, entityplayer.rotationPitch);
+         } else {
+            ChunkCoordinates cause = toWorld.getEntrancePortalLocation();
+            if(cause != null) {
+               toLocation1 = new Location(toWorld.getWorld(), (double)cause.posX, (double)cause.posY, (double)cause.posZ, 90.0F, 0.0F);
+            }
+         }
       }
 
-      var7.playerNetServerHandler.sendPacket(new Packet9Respawn(var7.dimension, (byte)var7.worldObj.difficultySetting, var7.worldObj.getWorldInfo().getTerrainType(), var7.worldObj.getHeight(), var7.theItemInWorldManager.getGameType()));
-      var9 = var8.getSpawnPoint();
-      var7.playerNetServerHandler.setPlayerLocation(var7.posX, var7.posY, var7.posZ, var7.rotationYaw, var7.rotationPitch);
-      var7.playerNetServerHandler.sendPacket(new Packet6SpawnPosition(var9.posX, var9.posY, var9.posZ));
-      var7.playerNetServerHandler.sendPacket(new Packet43Experience(var7.experience, var7.experienceTotal, var7.experienceLevel));
-      this.updateTimeAndWeatherForPlayer(var7, var8);
-      var8.getPlayerManager().addPlayer(var7);
-      var8.spawnEntityInWorld(var7);
-      this.playerEntityList.add(var7);
-      var7.addSelfToInternalCraftingInventory();
-      return var7;
-   }
-
-   public void sendPlayerToOtherDimension(EntityPlayerMP var1, int var2) {
-      int var3 = var1.dimension;
-      WorldServer var4 = this.mcServer.worldServerForDimension(var1.dimension);
-      var1.dimension = var2;
-      WorldServer var5 = this.mcServer.worldServerForDimension(var1.dimension);
-      var1.playerNetServerHandler.sendPacket(new Packet9Respawn(var1.dimension, (byte)var1.worldObj.difficultySetting, var5.getWorldInfo().getTerrainType(), var5.getHeight(), var1.theItemInWorldManager.getGameType()));
-      var4.removeEntity(var1);
-      var1.isDead = false;
-      this.transferEntityToWorld(var1, var3, var4, var5);
-      this.func_72375_a(var1, var4);
-      var1.playerNetServerHandler.setPlayerLocation(var1.posX, var1.posY, var1.posZ, var1.rotationYaw, var1.rotationPitch);
-      var1.theItemInWorldManager.setWorld(var5);
-      this.updateTimeAndWeatherForPlayer(var1, var5);
-      this.syncPlayerInventory(var1);
-      Iterator var6 = var1.getActivePotionEffects().iterator();
-
-      while(var6.hasNext()) {
-         PotionEffect var7 = (PotionEffect)var6.next();
-         var1.playerNetServerHandler.sendPacket(new Packet41EntityEffect(var1.entityId, var7));
+      TeleportCause cause1 = TeleportCause.UNKNOWN;
+      int playerEnvironmentId = entityplayer.getBukkitEntity().getWorld().getEnvironment().getId();
+      switch(dimension) {
+      case -1:
+         cause1 = TeleportCause.NETHER_PORTAL;
+         break;
+      case 0:
+         if(playerEnvironmentId == -1) {
+            cause1 = TeleportCause.NETHER_PORTAL;
+         } else if(playerEnvironmentId == 1) {
+            cause1 = TeleportCause.END_PORTAL;
+         }
+         break;
+      case 1:
+         cause1 = TeleportCause.END_PORTAL;
+      }
+
+      PortalTravelAgent pta = new PortalTravelAgent();
+      PlayerPortalEvent event = new PlayerPortalEvent(entityplayer.getBukkitEntity(), fromLocation1, toLocation1, pta, cause1);
+      if(entityplayer.dimension == 1) {
+         event.useTravelAgent(false);
+      }
+
+      Bukkit.getServer().getPluginManager().callEvent(event);
+      if(!event.isCancelled() && event.getTo() != null) {
+         Location finalLocation = event.getTo();
+         if(event.useTravelAgent()) {
+            finalLocation = event.getPortalTravelAgent().findOrCreate(finalLocation);
+         }
+
+         toWorld = ((CraftWorld)finalLocation.getWorld()).getHandle();
+         this.moveToWorld(entityplayer, toWorld.dimension, true, finalLocation);
       }
-
    }
 
-   public void transferEntityToWorld(Entity var1, int var2, WorldServer var3, WorldServer var4) {
-      double var5 = var1.posX;
-      double var7 = var1.posZ;
-      double var9 = 8.0D;
-      double var11 = var1.posX;
-      double var13 = var1.posY;
-      double var15 = var1.posZ;
-      float var17 = var1.rotationYaw;
-      var3.theProfiler.startSection("moving");
-      if(var1.dimension == -1) {
-         var5 /= var9;
-         var7 /= var9;
-         var1.setLocationAndAngles(var5, var1.posY, var7, var1.rotationYaw, var1.rotationPitch);
-         if(var1.isEntityAlive()) {
-            var3.updateEntityWithOptionalForce(var1, false);
-         }
-      } else if(var1.dimension == 0) {
-         var5 *= var9;
-         var7 *= var9;
-         var1.setLocationAndAngles(var5, var1.posY, var7, var1.rotationYaw, var1.rotationPitch);
-         if(var1.isEntityAlive()) {
-            var3.updateEntityWithOptionalForce(var1, false);
+   public void transferEntityToWorld(Entity entity, int i, WorldServer worldserver, WorldServer worldserver1) {
+      double d0 = entity.posX;
+      double d1 = entity.posZ;
+      double d2 = 8.0D;
+      double d3 = entity.posX;
+      double d4 = entity.posY;
+      double d5 = entity.posZ;
+      float f = entity.rotationYaw;
+      worldserver.theProfiler.startSection("moving");
+      if(entity.dimension == -1) {
+         d0 /= d2;
+         d1 /= d2;
+         entity.setLocationAndAngles(d0, entity.posY, d1, entity.rotationYaw, entity.rotationPitch);
+         if(entity.isEntityAlive()) {
+            worldserver.updateEntityWithOptionalForce(entity, false);
+         }
+      } else if(entity.dimension == 0) {
+         d0 *= d2;
+         d1 *= d2;
+         entity.setLocationAndAngles(d0, entity.posY, d1, entity.rotationYaw, entity.rotationPitch);
+         if(entity.isEntityAlive()) {
+            worldserver.updateEntityWithOptionalForce(entity, false);
          }
       } else {
-         ChunkCoordinates var18;
-         if(var2 == 1) {
-            var18 = var4.getSpawnPoint();
+         ChunkCoordinates chunkcoordinates;
+         if(i == 1) {
+            chunkcoordinates = worldserver1.getSpawnPoint();
          } else {
-            var18 = var4.getEntrancePortalLocation();
+            chunkcoordinates = worldserver1.getEntrancePortalLocation();
          }
 
-         var5 = (double)var18.posX;
-         var1.posY = (double)var18.posY;
-         var7 = (double)var18.posZ;
-         var1.setLocationAndAngles(var5, var1.posY, var7, 90.0F, 0.0F);
-         if(var1.isEntityAlive()) {
-            var3.updateEntityWithOptionalForce(var1, false);
+         d0 = (double)chunkcoordinates.posX;
+         entity.posY = (double)chunkcoordinates.posY;
+         d1 = (double)chunkcoordinates.posZ;
+         entity.setLocationAndAngles(d0, entity.posY, d1, 90.0F, 0.0F);
+         if(entity.isEntityAlive()) {
+            worldserver.updateEntityWithOptionalForce(entity, false);
          }
       }
 
-      var3.theProfiler.endSection();
-      if(var2 != 1) {
-         var3.theProfiler.startSection("placing");
-         var5 = (double)MathHelper.clamp_int((int)var5, -29999872, 29999872);
-         var7 = (double)MathHelper.clamp_int((int)var7, -29999872, 29999872);
-         if(var1.isEntityAlive()) {
-            var4.spawnEntityInWorld(var1);
-            var1.setLocationAndAngles(var5, var1.posY, var7, var1.rotationYaw, var1.rotationPitch);
-            var4.updateEntityWithOptionalForce(var1, false);
-            var4.func_85176_s().placeInPortal(var1, var11, var13, var15, var17);
+      worldserver.theProfiler.endSection();
+      if(i != 1) {
+         worldserver.theProfiler.startSection("placing");
+         d0 = (double)MathHelper.clamp_int((int)d0, -29999872, 29999872);
+         d1 = (double)MathHelper.clamp_int((int)d1, -29999872, 29999872);
+         if(entity.isEntityAlive()) {
+            worldserver1.spawnEntityInWorld(entity);
+            entity.setLocationAndAngles(d0, entity.posY, d1, entity.rotationYaw, entity.rotationPitch);
+            worldserver1.updateEntityWithOptionalForce(entity, false);
+            worldserver1.func_85176_s().placeInPortal(entity, d3, d4, d5, f);
          }
 
-         var3.theProfiler.endSection();
+         worldserver.theProfiler.endSection();
       }
 
-      var1.setWorld(var4);
+      entity.setWorld(worldserver1);
    }
 
    public void onTick() {
@@ -359,52 +508,47 @@
          this.playerPingIndex = 0;
       }
 
-      if(this.playerPingIndex < this.playerEntityList.size()) {
-         EntityPlayerMP var1 = (EntityPlayerMP)this.playerEntityList.get(this.playerPingIndex);
-         this.sendPacketToAllPlayers(new Packet201PlayerInfo(var1.username, true, var1.ping));
-      }
-
    }
 
-   public void sendPacketToAllPlayers(Packet var1) {
-      for(int var2 = 0; var2 < this.playerEntityList.size(); ++var2) {
-         ((EntityPlayerMP)this.playerEntityList.get(var2)).playerNetServerHandler.sendPacket(var1);
+   public void sendPacketToAllPlayers(Packet packet) {
+      for(int i = 0; i < this.playerEntityList.size(); ++i) {
+         ((EntityPlayerMP)this.playerEntityList.get(i)).playerNetServerHandler.sendPacket(packet);
       }
 
    }
 
-   public void sendPacketToAllPlayersInDimension(Packet var1, int var2) {
-      for(int var3 = 0; var3 < this.playerEntityList.size(); ++var3) {
-         EntityPlayerMP var4 = (EntityPlayerMP)this.playerEntityList.get(var3);
-         if(var4.dimension == var2) {
-            var4.playerNetServerHandler.sendPacket(var1);
+   public void sendPacketToAllPlayersInDimension(Packet packet, int i) {
+      for(int j = 0; j < this.playerEntityList.size(); ++j) {
+         EntityPlayerMP entityplayer = (EntityPlayerMP)this.playerEntityList.get(j);
+         if(entityplayer.dimension == i) {
+            entityplayer.playerNetServerHandler.sendPacket(packet);
          }
       }
 
    }
 
    public String getPlayerListAsString() {
-      String var1 = "";
+      String s = "";
 
-      for(int var2 = 0; var2 < this.playerEntityList.size(); ++var2) {
-         if(var2 > 0) {
-            var1 = var1 + ", ";
+      for(int i = 0; i < this.playerEntityList.size(); ++i) {
+         if(i > 0) {
+            s = s + ", ";
          }
 
-         var1 = var1 + ((EntityPlayerMP)this.playerEntityList.get(var2)).username;
+         s = s + ((EntityPlayerMP)this.playerEntityList.get(i)).username;
       }
 
-      return var1;
+      return s;
    }
 
    public String[] getAllUsernames() {
-      String[] var1 = new String[this.playerEntityList.size()];
+      String[] astring = new String[this.playerEntityList.size()];
 
-      for(int var2 = 0; var2 < this.playerEntityList.size(); ++var2) {
-         var1[var2] = ((EntityPlayerMP)this.playerEntityList.get(var2)).username;
+      for(int i = 0; i < this.playerEntityList.size(); ++i) {
+         astring[i] = ((EntityPlayerMP)this.playerEntityList.get(i)).username;
       }
 
-      return var1;
+      return astring;
    }
 
    public BanList getBannedPlayers() {
@@ -415,91 +559,107 @@
       return this.bannedIPs;
    }
 
-   public void addOp(String var1) {
-      this.ops.add(var1.toLowerCase());
+   public void addOp(String s) {
+      this.ops.add(s.toLowerCase());
+      Player player = this.mcServer.server.getPlayer(s);
+      if(player != null) {
+         player.recalculatePermissions();
+      }
+
    }
 
-   public void removeOp(String var1) {
-      this.ops.remove(var1.toLowerCase());
+   public void removeOp(String s) {
+      this.ops.remove(s.toLowerCase());
+      Player player = this.mcServer.server.getPlayer(s);
+      if(player != null) {
+         player.recalculatePermissions();
+      }
+
    }
 
-   public boolean isAllowedToLogin(String var1) {
-      var1 = var1.trim().toLowerCase();
-      return !this.whiteListEnforced || this.ops.contains(var1) || this.whiteListedPlayers.contains(var1);
+   public boolean isAllowedToLogin(String s) {
+      s = s.trim().toLowerCase();
+      return !this.whiteListEnforced || this.ops.contains(s) || this.whiteListedPlayers.contains(s);
    }
 
-   public boolean areCommandsAllowed(String var1) {
-      return this.ops.contains(var1.trim().toLowerCase()) || this.mcServer.isSinglePlayer() && this.mcServer.worldServers[0].getWorldInfo().areCommandsAllowed() && this.mcServer.getServerOwner().equalsIgnoreCase(var1) || this.commandsAllowedForAll;
+   public boolean areCommandsAllowed(String s) {
+      return this.ops.contains(s.trim().toLowerCase()) || this.mcServer.isSinglePlayer() && ((WorldServer)this.mcServer.worlds.get(0)).getWorldInfo().areCommandsAllowed() && this.mcServer.getServerOwner().equalsIgnoreCase(s) || this.commandsAllowedForAll;
    }
 
-   public EntityPlayerMP getPlayerEntity(String var1) {
-      Iterator var2 = this.playerEntityList.iterator();
+   public EntityPlayerMP getPlayerEntity(String s) {
+      Iterator iterator = this.playerEntityList.iterator();
 
-      EntityPlayerMP var3;
-      do {
-         if(!var2.hasNext()) {
-            return null;
+      while(iterator.hasNext()) {
+         EntityPlayerMP entityplayer = (EntityPlayerMP)iterator.next();
+         if(entityplayer.username.equalsIgnoreCase(s)) {
+            return entityplayer;
          }
+      }
 
-         var3 = (EntityPlayerMP)var2.next();
-      } while(!var3.username.equalsIgnoreCase(var1));
-
-      return var3;
+      return null;
    }
 
-   public List findPlayers(ChunkCoordinates var1, int var2, int var3, int var4, int var5, int var6, int var7) {
+   public List findPlayers(ChunkCoordinates chunkcoordinates, int i, int j, int k, int l, int i1, int j1) {
       if(this.playerEntityList.isEmpty()) {
          return null;
       } else {
-         Object var8 = new ArrayList();
-         boolean var9 = var4 < 0;
-         int var10 = var2 * var2;
-         int var11 = var3 * var3;
-         var4 = MathHelper.abs(var4);
-
-         for(int var12 = 0; var12 < this.playerEntityList.size(); ++var12) {
-            EntityPlayerMP var13 = (EntityPlayerMP)this.playerEntityList.get(var12);
-            if(var1 != null && (var2 > 0 || var3 > 0)) {
-               float var14 = var1.getDistanceSquaredToChunkCoordinates(var13.getCommandSenderPosition());
-               if(var2 > 0 && var14 < (float)var10 || var3 > 0 && var14 > (float)var11) {
+         Object object = new ArrayList();
+         boolean flag = k < 0;
+         int k1 = i * i;
+         int l1 = j * j;
+         k = MathHelper.abs(k);
+
+         for(int i2 = 0; i2 < this.playerEntityList.size(); ++i2) {
+            EntityPlayerMP entityplayer = (EntityPlayerMP)this.playerEntityList.get(i2);
+            if(chunkcoordinates != null && (i > 0 || j > 0)) {
+               float f = chunkcoordinates.getDistanceSquaredToChunkCoordinates(entityplayer.getCommandSenderPosition());
+               if(i > 0 && f < (float)k1 || j > 0 && f > (float)l1) {
                   continue;
                }
             }
 
-            if((var5 == EnumGameType.NOT_SET.getID() || var5 == var13.theItemInWorldManager.getGameType().getID()) && (var6 <= 0 || var13.experienceLevel >= var6) && var13.experienceLevel <= var7) {
-               ((List)var8).add(var13);
+            if((l == EnumGameType.NOT_SET.getID() || l == entityplayer.theItemInWorldManager.getGameType().getID()) && (i1 <= 0 || entityplayer.experienceLevel >= i1) && entityplayer.experienceLevel <= j1) {
+               ((List)object).add(entityplayer);
             }
          }
 
-         if(var1 != null) {
-            Collections.sort((List)var8, new PlayerPositionComparator(var1));
+         if(chunkcoordinates != null) {
+            Collections.sort((List)object, new PlayerPositionComparator(chunkcoordinates));
          }
 
-         if(var9) {
-            Collections.reverse((List)var8);
+         if(flag) {
+            Collections.reverse((List)object);
          }
 
-         if(var4 > 0) {
-            var8 = ((List)var8).subList(0, Math.min(var4, ((List)var8).size()));
+         if(k > 0) {
+            object = ((List)object).subList(0, Math.min(k, ((List)object).size()));
          }
 
-         return (List)var8;
+         return (List)object;
       }
    }
 
-   public void sendPacketToPlayersAroundPoint(double var1, double var3, double var5, double var7, int var9, Packet var10) {
-      this.sendToAllNearExcept((EntityPlayer)null, var1, var3, var5, var7, var9, var10);
+   public void sendPacketToPlayersAroundPoint(double d0, double d1, double d2, double d3, int i, Packet packet) {
+      this.sendPacketNearby(d0, d1, d2, d3, i, packet, (Entity)null);
+   }
+
+   public void sendToAllNearExcept(EntityPlayer entityhuman, double d0, double d1, double d2, double d3, int i, Packet packet) {
+      this.sendPacketNearby(entityhuman, d0, d1, d2, d3, i, packet, (Entity)null);
+   }
+
+   public void sendPacketNearby(double d0, double d1, double d2, double d3, int i, Packet packet, Entity sourceentity) {
+      this.sendPacketNearby((EntityPlayer)null, d0, d1, d2, d3, i, packet, sourceentity);
    }
 
-   public void sendToAllNearExcept(EntityPlayer var1, double var2, double var4, double var6, double var8, int var10, Packet var11) {
-      for(int var12 = 0; var12 < this.playerEntityList.size(); ++var12) {
-         EntityPlayerMP var13 = (EntityPlayerMP)this.playerEntityList.get(var12);
-         if(var13 != var1 && var13.dimension == var10) {
-            double var14 = var2 - var13.posX;
-            double var16 = var4 - var13.posY;
-            double var18 = var6 - var13.posZ;
-            if(var14 * var14 + var16 * var16 + var18 * var18 < var8 * var8) {
-               var13.playerNetServerHandler.sendPacket(var11);
+   public void sendPacketNearby(EntityPlayer entityhuman, double d0, double d1, double d2, double d3, int i, Packet packet, Entity sourceentity) {
+      for(int j = 0; j < this.playerEntityList.size(); ++j) {
+         EntityPlayerMP entityplayer = (EntityPlayerMP)this.playerEntityList.get(j);
+         if((sourceentity == null || !(sourceentity instanceof EntityPlayerMP) || entityplayer.getBukkitEntity().canSee(((EntityPlayerMP)sourceentity).getBukkitEntity())) && entityplayer != entityhuman && entityplayer.dimension == i) {
+            double d4 = d0 - entityplayer.posX;
+            double d5 = d1 - entityplayer.posY;
+            double d6 = d2 - entityplayer.posZ;
+            if(d4 * d4 + d5 * d5 + d6 * d6 < d3 * d3) {
+               entityplayer.playerNetServerHandler.sendPacket(packet);
             }
          }
       }
@@ -507,18 +667,18 @@
    }
 
    public void saveAllPlayerData() {
-      for(int var1 = 0; var1 < this.playerEntityList.size(); ++var1) {
-         this.writePlayerData((EntityPlayerMP)this.playerEntityList.get(var1));
+      for(int i = 0; i < this.playerEntityList.size(); ++i) {
+         this.writePlayerData((EntityPlayerMP)this.playerEntityList.get(i));
       }
 
    }
 
-   public void addToWhiteList(String var1) {
-      this.whiteListedPlayers.add(var1);
+   public void addToWhiteList(String s) {
+      this.whiteListedPlayers.add(s);
    }
 
-   public void removeFromWhitelist(String var1) {
-      this.whiteListedPlayers.remove(var1);
+   public void removeFromWhitelist(String s) {
+      this.whiteListedPlayers.remove(s);
    }
 
    public Set getWhiteListedPlayers() {
@@ -531,17 +691,17 @@
 
    public void loadWhiteList() {}
 
-   public void updateTimeAndWeatherForPlayer(EntityPlayerMP var1, WorldServer var2) {
-      var1.playerNetServerHandler.sendPacket(new Packet4UpdateTime(var2.getTotalWorldTime(), var2.getWorldTime()));
-      if(var2.isRaining()) {
-         var1.playerNetServerHandler.sendPacket(new Packet70GameEvent(1, 0));
+   public void updateTimeAndWeatherForPlayer(EntityPlayerMP entityplayer, WorldServer worldserver) {
+      entityplayer.playerNetServerHandler.sendPacket(new Packet4UpdateTime(worldserver.getTotalWorldTime(), worldserver.getWorldTime()));
+      if(worldserver.isRaining()) {
+         entityplayer.playerNetServerHandler.sendPacket(new Packet70GameEvent(1, 0));
       }
 
    }
 
-   public void syncPlayerInventory(EntityPlayerMP var1) {
-      var1.sendContainerToPlayer(var1.inventoryContainer);
-      var1.setPlayerHealthUpdated();
+   public void syncPlayerInventory(EntityPlayerMP entityplayer) {
+      entityplayer.sendContainerToPlayer(entityplayer.inventoryContainer);
+      entityplayer.setPlayerHealthUpdated();
    }
 
    public int getCurrentPlayerCount() {
@@ -553,29 +713,29 @@
    }
 
    public String[] getAvailablePlayerDat() {
-      return this.mcServer.worldServers[0].getSaveHandler().getPlayerNBTManager().getAvailablePlayerDat();
+      return ((WorldServer)this.mcServer.worlds.get(0)).getSaveHandler().getPlayerNBTManager().getAvailablePlayerDat();
    }
 
    public boolean isWhiteListEnabled() {
       return this.whiteListEnforced;
    }
 
-   public void setWhiteListEnabled(boolean var1) {
-      this.whiteListEnforced = var1;
+   public void setWhiteListEnabled(boolean flag) {
+      this.whiteListEnforced = flag;
    }
 
-   public List getPlayerList(String var1) {
-      ArrayList var2 = new ArrayList();
-      Iterator var3 = this.playerEntityList.iterator();
+   public List getPlayerList(String s) {
+      ArrayList arraylist = new ArrayList();
+      Iterator iterator = this.playerEntityList.iterator();
 
-      while(var3.hasNext()) {
-         EntityPlayerMP var4 = (EntityPlayerMP)var3.next();
-         if(var4.func_71114_r().equals(var1)) {
-            var2.add(var4);
+      while(iterator.hasNext()) {
+         EntityPlayerMP entityplayer = (EntityPlayerMP)iterator.next();
+         if(entityplayer.func_71114_r().equals(s)) {
+            arraylist.add(entityplayer);
          }
       }
 
-      return var2;
+      return arraylist;
    }
 
    public int getViewDistance() {
@@ -590,14 +750,14 @@
       return null;
    }
 
-   private void func_72381_a(EntityPlayerMP var1, EntityPlayerMP var2, World var3) {
-      if(var2 != null) {
-         var1.theItemInWorldManager.setGameType(var2.theItemInWorldManager.getGameType());
+   private void func_72381_a(EntityPlayerMP entityplayer, EntityPlayerMP entityplayer1, World world) {
+      if(entityplayer1 != null) {
+         entityplayer.theItemInWorldManager.setGameType(entityplayer1.theItemInWorldManager.getGameType());
       } else if(this.gameType != null) {
-         var1.theItemInWorldManager.setGameType(this.gameType);
+         entityplayer.theItemInWorldManager.setGameType(this.gameType);
       }
 
-      var1.theItemInWorldManager.initializeGameType(var3.getWorldInfo().getGameType());
+      entityplayer.theItemInWorldManager.initializeGameType(world.getWorldInfo().getGameType());
    }
 
    public void removeAllPlayers() {
Binary files mcp-mcdev/net/minecraft/src/ServerListenThread.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ServerListenThread.class differ
diff -ur mcp-mcdev/net/minecraft/src/ServerListenThread.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ServerListenThread.java
--- mcp-mcdev/net/minecraft/src/ServerListenThread.java	2012-11-29 21:14:32.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ServerListenThread.java	2012-11-29 20:43:42.000000000 -0800
@@ -23,35 +23,37 @@
    private NetworkListenThread myNetworkListenThread;
    private final InetAddress myServerAddress;
    private final int myPort;
+   long connectionThrottle;
 
 
-   public ServerListenThread(NetworkListenThread var1, InetAddress var2, int var3) {
+   public ServerListenThread(NetworkListenThread serverconnection, InetAddress inetaddress, int i) throws IOException {
       super("Listen thread");
-      this.myNetworkListenThread = var1;
-      this.myPort = var3;
-      this.myServerSocket = new ServerSocket(var3, 0, var2);
-      this.myServerAddress = var2 == null?this.myServerSocket.getInetAddress():var2;
+      this.myNetworkListenThread = serverconnection;
+      this.myPort = i;
+      this.myServerSocket = new ServerSocket(i, 0, inetaddress);
+      this.myServerAddress = inetaddress == null?this.myServerSocket.getInetAddress():inetaddress;
       this.myServerSocket.setPerformancePreferences(0, 2, 1);
    }
 
    public void processPendingConnections() {
-      List var1 = this.pendingConnections;
+      List list = this.pendingConnections;
+      List var2 = this.pendingConnections;
       synchronized(this.pendingConnections) {
-         for(int var2 = 0; var2 < this.pendingConnections.size(); ++var2) {
-            NetLoginHandler var3 = (NetLoginHandler)this.pendingConnections.get(var2);
+         for(int i = 0; i < this.pendingConnections.size(); ++i) {
+            NetLoginHandler netloginhandler = (NetLoginHandler)this.pendingConnections.get(i);
 
             try {
-               var3.tryLogin();
-            } catch (Exception var6) {
-               var3.kickUser("Internal server error");
-               logger.log(Level.WARNING, "Failed to handle packet for " + var3.getUsernameAndAddress() + ": " + var6, var6);
+               netloginhandler.tryLogin();
+            } catch (Exception var7) {
+               netloginhandler.kickUser("Internal server error");
+               logger.log(Level.WARNING, "Failed to handle packet for " + netloginhandler.getUsernameAndAddress() + ": " + var7, var7);
             }
 
-            if(var3.finishedProcessing) {
-               this.pendingConnections.remove(var2--);
+            if(netloginhandler.finishedProcessing) {
+               this.pendingConnections.remove(i--);
             }
 
-            var3.myTCPConnection.wakeThreads();
+            netloginhandler.myTCPConnection.wakeThreads();
          }
 
       }
@@ -60,50 +62,58 @@
    public void run() {
       while(this.myNetworkListenThread.isListening) {
          try {
-            Socket var1 = this.myServerSocket.accept();
-            InetAddress var2 = var1.getInetAddress();
-            long var3 = System.currentTimeMillis();
-            HashMap var5 = this.recentConnections;
-            synchronized(this.recentConnections) {
-               if(this.recentConnections.containsKey(var2) && !isLocalHost(var2) && var3 - ((Long)this.recentConnections.get(var2)).longValue() < 4000L) {
-                  this.recentConnections.put(var2, Long.valueOf(var3));
-                  var1.close();
-                  continue;
+            Socket ioexception = this.myServerSocket.accept();
+            InetAddress inetaddress = ioexception.getInetAddress();
+            long i = System.currentTimeMillis();
+            HashMap hashmap = this.recentConnections;
+            if(this.myNetworkListenThread.getServer().server == null) {
+               ioexception.close();
+            } else {
+               this.connectionThrottle = this.myNetworkListenThread.getServer().server.getConnectionThrottle();
+               HashMap netloginhandler = this.recentConnections;
+               synchronized(this.recentConnections) {
+                  if(this.recentConnections.containsKey(inetaddress) && !isLocalHost(inetaddress) && i - ((Long)this.recentConnections.get(inetaddress)).longValue() < this.connectionThrottle) {
+                     this.recentConnections.put(inetaddress, Long.valueOf(i));
+                     ioexception.close();
+                     continue;
+                  }
+
+                  this.recentConnections.put(inetaddress, Long.valueOf(i));
                }
 
-               this.recentConnections.put(var2, Long.valueOf(var3));
+               NetLoginHandler netloginhandler1 = new NetLoginHandler(this.myNetworkListenThread.getServer(), ioexception, "Connection #" + this.connectionCounter++);
+               this.addPendingConnection(netloginhandler1);
             }
-
-            NetLoginHandler var9 = new NetLoginHandler(this.myNetworkListenThread.getServer(), var1, "Connection #" + this.connectionCounter++);
-            this.addPendingConnection(var9);
-         } catch (IOException var8) {
-            var8.printStackTrace();
+         } catch (IOException var9) {
+            logger.warning("DSCT: " + var9.getMessage());
          }
       }
 
       System.out.println("Closing listening thread");
    }
 
-   private void addPendingConnection(NetLoginHandler var1) {
-      if(var1 == null) {
+   private void addPendingConnection(NetLoginHandler netloginhandler) {
+      if(netloginhandler == null) {
          throw new IllegalArgumentException("Got null pendingconnection!");
       } else {
-         List var2 = this.pendingConnections;
+         List list = this.pendingConnections;
+         List var3 = this.pendingConnections;
          synchronized(this.pendingConnections) {
-            this.pendingConnections.add(var1);
+            this.pendingConnections.add(netloginhandler);
          }
       }
    }
 
-   private static boolean isLocalHost(InetAddress var0) {
-      return "127.0.0.1".equals(var0.getHostAddress());
+   private static boolean isLocalHost(InetAddress inetaddress) {
+      return "127.0.0.1".equals(inetaddress.getHostAddress());
    }
 
-   public void func_71769_a(InetAddress var1) {
-      if(var1 != null) {
-         HashMap var2 = this.recentConnections;
+   public void func_71769_a(InetAddress inetaddress) {
+      if(inetaddress != null) {
+         HashMap hashmap = this.recentConnections;
+         HashMap var3 = this.recentConnections;
          synchronized(this.recentConnections) {
-            this.recentConnections.remove(var1);
+            this.recentConnections.remove(inetaddress);
          }
       }
 
Binary files mcp-mcdev/net/minecraft/src/ShapedRecipes.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ShapedRecipes.class differ
diff -ur mcp-mcdev/net/minecraft/src/ShapedRecipes.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ShapedRecipes.java
--- mcp-mcdev/net/minecraft/src/ShapedRecipes.java	2012-11-29 21:14:32.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ShapedRecipes.java	2012-11-29 20:43:42.000000000 -0800
@@ -4,6 +4,9 @@
 import net.minecraft.src.InventoryCrafting;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
+import org.bukkit.inventory.ShapedRecipe;
 
 public class ShapedRecipes implements IRecipe {
 
@@ -14,26 +17,87 @@
    public final int recipeOutputItemID;
 
 
-   public ShapedRecipes(int var1, int var2, ItemStack[] var3, ItemStack var4) {
-      this.recipeOutputItemID = var4.itemID;
-      this.recipeWidth = var1;
-      this.recipeHeight = var2;
-      this.recipeItems = var3;
-      this.recipeOutput = var4;
+   public ShapedRecipes(int i, int j, ItemStack[] aitemstack, ItemStack itemstack) {
+      this.recipeOutputItemID = itemstack.itemID;
+      this.recipeWidth = i;
+      this.recipeHeight = j;
+      this.recipeItems = aitemstack;
+      this.recipeOutput = itemstack;
+   }
+
+   public ShapedRecipe toBukkitRecipe() {
+      CraftShapedRecipe recipe;
+      CraftItemStack result = new CraftItemStack(this.recipeOutput);
+      recipe = new CraftShapedRecipe(result, this);
+      label40:
+      switch(this.recipeHeight) {
+      case 1:
+         switch(this.recipeWidth) {
+         case 1:
+            recipe.shape(new String[]{"a"});
+            break label40;
+         case 2:
+            recipe.shape(new String[]{"ab"});
+            break label40;
+         case 3:
+            recipe.shape(new String[]{"abc"});
+         default:
+            break label40;
+         }
+      case 2:
+         switch(this.recipeWidth) {
+         case 1:
+            recipe.shape(new String[]{"a", "b"});
+            break label40;
+         case 2:
+            recipe.shape(new String[]{"ab", "cd"});
+            break label40;
+         case 3:
+            recipe.shape(new String[]{"abc", "def"});
+         default:
+            break label40;
+         }
+      case 3:
+         switch(this.recipeWidth) {
+         case 1:
+            recipe.shape(new String[]{"a", "b", "c"});
+            break;
+         case 2:
+            recipe.shape(new String[]{"ab", "cd", "ef"});
+            break;
+         case 3:
+            recipe.shape(new String[]{"abc", "def", "ghi"});
+         }
+      }
+
+      char c = 97;
+      ItemStack[] arr$ = this.recipeItems;
+      int len$ = arr$.length;
+
+      for(int i$ = 0; i$ < len$; ++i$) {
+         ItemStack stack = arr$[i$];
+         if(stack != null) {
+            recipe.setIngredient(c, org.bukkit.Material.getMaterial(stack.itemID), stack.getItemDamage());
+         }
+
+         ++c;
+      }
+
+      return recipe;
    }
 
    public ItemStack getRecipeOutput() {
       return this.recipeOutput;
    }
 
-   public boolean matches(InventoryCrafting var1, World var2) {
-      for(int var3 = 0; var3 <= 3 - this.recipeWidth; ++var3) {
-         for(int var4 = 0; var4 <= 3 - this.recipeHeight; ++var4) {
-            if(this.checkMatch(var1, var3, var4, true)) {
+   public boolean matches(InventoryCrafting inventorycrafting, World world) {
+      for(int i = 0; i <= 3 - this.recipeWidth; ++i) {
+         for(int j = 0; j <= 3 - this.recipeHeight; ++j) {
+            if(this.checkMatch(inventorycrafting, i, j, true)) {
                return true;
             }
 
-            if(this.checkMatch(var1, var3, var4, false)) {
+            if(this.checkMatch(inventorycrafting, i, j, false)) {
                return true;
             }
          }
@@ -42,31 +106,31 @@
       return false;
    }
 
-   private boolean checkMatch(InventoryCrafting var1, int var2, int var3, boolean var4) {
-      for(int var5 = 0; var5 < 3; ++var5) {
-         for(int var6 = 0; var6 < 3; ++var6) {
-            int var7 = var5 - var2;
-            int var8 = var6 - var3;
-            ItemStack var9 = null;
-            if(var7 >= 0 && var8 >= 0 && var7 < this.recipeWidth && var8 < this.recipeHeight) {
-               if(var4) {
-                  var9 = this.recipeItems[this.recipeWidth - var7 - 1 + var8 * this.recipeWidth];
+   private boolean checkMatch(InventoryCrafting inventorycrafting, int i, int j, boolean flag) {
+      for(int k = 0; k < 3; ++k) {
+         for(int l = 0; l < 3; ++l) {
+            int i1 = k - i;
+            int j1 = l - j;
+            ItemStack itemstack = null;
+            if(i1 >= 0 && j1 >= 0 && i1 < this.recipeWidth && j1 < this.recipeHeight) {
+               if(flag) {
+                  itemstack = this.recipeItems[this.recipeWidth - i1 - 1 + j1 * this.recipeWidth];
                } else {
-                  var9 = this.recipeItems[var7 + var8 * this.recipeWidth];
+                  itemstack = this.recipeItems[i1 + j1 * this.recipeWidth];
                }
             }
 
-            ItemStack var10 = var1.getStackInRowAndColumn(var5, var6);
-            if(var10 != null || var9 != null) {
-               if(var10 == null && var9 != null || var10 != null && var9 == null) {
+            ItemStack itemstack1 = inventorycrafting.getStackInRowAndColumn(k, l);
+            if(itemstack1 != null || itemstack != null) {
+               if(itemstack1 == null && itemstack != null || itemstack1 != null && itemstack == null) {
                   return false;
                }
 
-               if(var9.itemID != var10.itemID) {
+               if(itemstack.itemID != itemstack1.itemID) {
                   return false;
                }
 
-               if(var9.getItemDamage() != -1 && var9.getItemDamage() != var10.getItemDamage()) {
+               if(itemstack.getItemDamage() != -1 && itemstack.getItemDamage() != itemstack1.getItemDamage()) {
                   return false;
                }
             }
@@ -76,7 +140,7 @@
       return true;
    }
 
-   public ItemStack getCraftingResult(InventoryCrafting var1) {
+   public ItemStack getCraftingResult(InventoryCrafting inventorycrafting) {
       return this.getRecipeOutput().copy();
    }
 
Binary files mcp-mcdev/net/minecraft/src/ShapelessRecipes.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ShapelessRecipes.class differ
diff -ur mcp-mcdev/net/minecraft/src/ShapelessRecipes.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ShapelessRecipes.java
--- mcp-mcdev/net/minecraft/src/ShapelessRecipes.java	2012-11-29 21:14:31.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ShapelessRecipes.java	2012-11-29 20:43:42.000000000 -0800
@@ -7,6 +7,9 @@
 import net.minecraft.src.InventoryCrafting;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftShapelessRecipe;
+import org.bukkit.inventory.ShapelessRecipe;
 
 public class ShapelessRecipes implements IRecipe {
 
@@ -14,45 +17,60 @@
    private final List recipeItems;
 
 
-   public ShapelessRecipes(ItemStack var1, List var2) {
-      this.recipeOutput = var1;
-      this.recipeItems = var2;
+   public ShapelessRecipes(ItemStack itemstack, List list) {
+      this.recipeOutput = itemstack;
+      this.recipeItems = list;
+   }
+
+   public ShapelessRecipe toBukkitRecipe() {
+      CraftItemStack result = new CraftItemStack(this.recipeOutput);
+      CraftShapelessRecipe recipe = new CraftShapelessRecipe(result, this);
+      Iterator i$ = this.recipeItems.iterator();
+
+      while(i$.hasNext()) {
+         ItemStack stack = (ItemStack)i$.next();
+         if(stack != null) {
+            recipe.addIngredient(org.bukkit.Material.getMaterial(stack.itemID), stack.getItemDamage());
+         }
+      }
+
+      return recipe;
    }
 
    public ItemStack getRecipeOutput() {
       return this.recipeOutput;
    }
 
-   public boolean matches(InventoryCrafting var1, World var2) {
-      ArrayList var3 = new ArrayList(this.recipeItems);
+   public boolean matches(InventoryCrafting inventorycrafting, World world) {
+      ArrayList arraylist = new ArrayList(this.recipeItems);
+
+      for(int i = 0; i < 3; ++i) {
+         for(int j = 0; j < 3; ++j) {
+            ItemStack itemstack = inventorycrafting.getStackInRowAndColumn(j, i);
+            if(itemstack != null) {
+               boolean flag = false;
+               Iterator iterator = arraylist.iterator();
 
-      for(int var4 = 0; var4 < 3; ++var4) {
-         for(int var5 = 0; var5 < 3; ++var5) {
-            ItemStack var6 = var1.getStackInRowAndColumn(var5, var4);
-            if(var6 != null) {
-               boolean var7 = false;
-               Iterator var8 = var3.iterator();
-
-               while(var8.hasNext()) {
-                  ItemStack var9 = (ItemStack)var8.next();
-                  if(var6.itemID == var9.itemID && (var9.getItemDamage() == -1 || var6.getItemDamage() == var9.getItemDamage())) {
-                     var7 = true;
-                     var3.remove(var9);
+               while(iterator.hasNext()) {
+                  ItemStack itemstack1 = (ItemStack)iterator.next();
+                  if(itemstack.itemID == itemstack1.itemID && (itemstack1.getItemDamage() == -1 || itemstack.getItemDamage() == itemstack1.getItemDamage())) {
+                     flag = true;
+                     arraylist.remove(itemstack1);
                      break;
                   }
                }
 
-               if(!var7) {
+               if(!flag) {
                   return false;
                }
             }
          }
       }
 
-      return var3.isEmpty();
+      return arraylist.isEmpty();
    }
 
-   public ItemStack getCraftingResult(InventoryCrafting var1) {
+   public ItemStack getCraftingResult(InventoryCrafting inventorycrafting) {
       return this.recipeOutput.copy();
    }
 
Binary files mcp-mcdev/net/minecraft/src/Slot.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Slot.class differ
diff -ur mcp-mcdev/net/minecraft/src/Slot.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Slot.java
--- mcp-mcdev/net/minecraft/src/Slot.java	2012-11-29 21:14:31.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Slot.java	2012-11-29 20:43:42.000000000 -0800
@@ -6,41 +6,39 @@
 
 public class Slot {
 
-   private final int slotIndex;
+   public final int slotIndex;
    public final IInventory inventory;
    public int slotNumber;
    public int xDisplayPosition;
    public int yDisplayPosition;
 
 
-   public Slot(IInventory var1, int var2, int var3, int var4) {
-      this.inventory = var1;
-      this.slotIndex = var2;
-      this.xDisplayPosition = var3;
-      this.yDisplayPosition = var4;
+   public Slot(IInventory iinventory, int i, int j, int k) {
+      this.inventory = iinventory;
+      this.slotIndex = i;
+      this.xDisplayPosition = j;
+      this.yDisplayPosition = k;
    }
 
-   public void onSlotChange(ItemStack var1, ItemStack var2) {
-      if(var1 != null && var2 != null) {
-         if(var1.itemID == var2.itemID) {
-            int var3 = var2.stackSize - var1.stackSize;
-            if(var3 > 0) {
-               this.onCrafting(var1, var3);
-            }
-
+   public void onSlotChange(ItemStack itemstack, ItemStack itemstack1) {
+      if(itemstack != null && itemstack1 != null && itemstack.itemID == itemstack1.itemID) {
+         int i = itemstack1.stackSize - itemstack.stackSize;
+         if(i > 0) {
+            this.onCrafting(itemstack, i);
          }
       }
+
    }
 
-   protected void onCrafting(ItemStack var1, int var2) {}
+   protected void onCrafting(ItemStack itemstack, int i) {}
 
-   protected void onCrafting(ItemStack var1) {}
+   protected void onCrafting(ItemStack itemstack) {}
 
-   public void onPickupFromSlot(EntityPlayer var1, ItemStack var2) {
+   public void onPickupFromSlot(EntityPlayer entityhuman, ItemStack itemstack) {
       this.onSlotChanged();
    }
 
-   public boolean isItemValid(ItemStack var1) {
+   public boolean isItemValid(ItemStack itemstack) {
       return true;
    }
 
@@ -52,8 +50,8 @@
       return this.getStack() != null;
    }
 
-   public void putStack(ItemStack var1) {
-      this.inventory.setInventorySlotContents(this.slotIndex, var1);
+   public void putStack(ItemStack itemstack) {
+      this.inventory.setInventorySlotContents(this.slotIndex, itemstack);
       this.onSlotChanged();
    }
 
@@ -65,15 +63,15 @@
       return this.inventory.getInventoryStackLimit();
    }
 
-   public ItemStack decrStackSize(int var1) {
-      return this.inventory.decrStackSize(this.slotIndex, var1);
+   public ItemStack decrStackSize(int i) {
+      return this.inventory.decrStackSize(this.slotIndex, i);
    }
 
-   public boolean isHere(IInventory var1, int var2) {
-      return var1 == this.inventory && var2 == this.slotIndex;
+   public boolean isHere(IInventory iinventory, int i) {
+      return iinventory == this.inventory && i == this.slotIndex;
    }
 
-   public boolean canTakeStack(EntityPlayer var1) {
+   public boolean canTakeStack(EntityPlayer entityhuman) {
       return true;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/SlotEnchantmentTable.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/SlotEnchantmentTable.class differ
diff -ur mcp-mcdev/net/minecraft/src/SlotEnchantmentTable.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/SlotEnchantmentTable.java
--- mcp-mcdev/net/minecraft/src/SlotEnchantmentTable.java	2012-11-29 21:14:31.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/SlotEnchantmentTable.java	2012-11-29 20:43:41.000000000 -0800
@@ -1,21 +1,54 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.src.ContainerEnchantment;
 import net.minecraft.src.InventoryBasic;
+import net.minecraft.src.ItemStack;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.InventoryHolder;
 
-class SlotEnchantmentTable extends InventoryBasic {
+public class SlotEnchantmentTable extends InventoryBasic {
 
-   // $FF: synthetic field
-   final ContainerEnchantment container;
+   private final ContainerEnchantment container;
+   public List transaction = new ArrayList();
+   public Player player;
+   private int maxStack = 64;
 
 
-   SlotEnchantmentTable(ContainerEnchantment var1, String var2, int var3) {
-      super(var2, var3);
-      this.container = var1;
+   public ItemStack[] getContents() {
+      return this.inventoryContents;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public InventoryHolder getOwner() {
+      return this.player;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
+   SlotEnchantmentTable(ContainerEnchantment containerenchanttable, String s, int i) {
+      super(s, i);
+      this.container = containerenchanttable;
+      this.setMaxStackSize(1);
    }
 
    public int getInventoryStackLimit() {
-      return 1;
+      return this.maxStack;
    }
 
    public void onInventoryChanged() {
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: SpawnerAnimals$1.class
Binary files mcp-mcdev/net/minecraft/src/SpawnerAnimals.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/SpawnerAnimals.class differ
Only in mcp-mcdev/net/minecraft/src: SpawnerAnimals.java
Binary files mcp-mcdev/net/minecraft/src/TcpConnection.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TcpConnection.class differ
diff -ur mcp-mcdev/net/minecraft/src/TcpConnection.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TcpConnection.java
--- mcp-mcdev/net/minecraft/src/TcpConnection.java	2012-11-29 21:14:26.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TcpConnection.java	2012-11-29 20:43:38.000000000 -0800
@@ -3,6 +3,7 @@
 import java.io.BufferedOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.net.Socket;
 import java.net.SocketAddress;
@@ -12,11 +13,15 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.crypto.SecretKey;
 import net.minecraft.src.CryptManager;
 import net.minecraft.src.INetworkManager;
 import net.minecraft.src.NetHandler;
+import net.minecraft.src.NetLoginHandler;
+import net.minecraft.src.NetServerHandler;
 import net.minecraft.src.Packet;
 import net.minecraft.src.Packet252SharedKey;
 import net.minecraft.src.TcpMasterThread;
@@ -29,13 +34,13 @@
    public static AtomicInteger field_74471_a = new AtomicInteger();
    public static AtomicInteger field_74469_b = new AtomicInteger();
    private Object sendQueueLock = new Object();
-   private Socket networkSocket;
+   public Socket networkSocket;
    private final SocketAddress remoteSocketAddress;
    private volatile DataInputStream socketInputStream;
    private volatile DataOutputStream socketOutputStream;
    private volatile boolean isRunning = true;
    private volatile boolean isTerminating = false;
-   private List readPackets = Collections.synchronizedList(new ArrayList());
+   private Queue readPackets = new ConcurrentLinkedQueue();
    private List dataPackets = Collections.synchronizedList(new ArrayList());
    private List chunkDataPackets = Collections.synchronizedList(new ArrayList());
    private NetHandler theNetHandler;
@@ -56,123 +61,124 @@
    private int field_74464_B = 50;
 
 
-   public TcpConnection(Socket var1, String var2, NetHandler var3, PrivateKey var4) {
-      this.field_74463_A = var4;
-      this.networkSocket = var1;
-      this.remoteSocketAddress = var1.getRemoteSocketAddress();
-      this.theNetHandler = var3;
+   public TcpConnection(Socket socket, String s, NetHandler nethandler, PrivateKey privatekey) throws IOException {
+      this.field_74463_A = privatekey;
+      this.networkSocket = socket;
+      this.remoteSocketAddress = socket.getRemoteSocketAddress();
+      this.theNetHandler = nethandler;
 
       try {
-         var1.setSoTimeout(30000);
-         var1.setTrafficClass(24);
+         socket.setSoTimeout(30000);
+         socket.setTrafficClass(24);
       } catch (SocketException var6) {
          System.err.println(var6.getMessage());
       }
 
-      this.socketInputStream = new DataInputStream(var1.getInputStream());
-      this.socketOutputStream = new DataOutputStream(new BufferedOutputStream(var1.getOutputStream(), 5120));
-      this.readThread = new TcpReaderThread(this, var2 + " read thread");
-      this.writeThread = new TcpWriterThread(this, var2 + " write thread");
+      this.socketInputStream = new DataInputStream(socket.getInputStream());
+      this.socketOutputStream = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream(), 5120));
+      this.readThread = new TcpReaderThread(this, s + " read thread");
+      this.writeThread = new TcpWriterThread(this, s + " write thread");
       this.readThread.start();
       this.writeThread.start();
    }
 
-   public void setNetHandler(NetHandler var1) {
-      this.theNetHandler = var1;
+   public void setNetHandler(NetHandler nethandler) {
+      this.theNetHandler = nethandler;
    }
 
-   public void addToSendQueue(Packet var1) {
+   public void addToSendQueue(Packet packet) {
       if(!this.isServerTerminating) {
-         Object var2 = this.sendQueueLock;
+         Object object = this.sendQueueLock;
+         Object var3 = this.sendQueueLock;
          synchronized(this.sendQueueLock) {
-            this.sendQueueByteLength += var1.getPacketSize() + 1;
-            this.dataPackets.add(var1);
+            this.sendQueueByteLength += packet.getPacketSize() + 1;
+            this.dataPackets.add(packet);
          }
       }
+
    }
 
    private boolean sendPacket() {
-      boolean var1 = false;
+      boolean flag = false;
 
       try {
-         Packet var2;
-         int var10001;
-         int[] var10000;
+         Packet exception;
+         int[] aint;
+         int i;
          if(this.field_74468_e == 0 || !this.dataPackets.isEmpty() && System.currentTimeMillis() - ((Packet)this.dataPackets.get(0)).creationTimeMillis >= (long)this.field_74468_e) {
-            var2 = this.func_74460_a(false);
-            if(var2 != null) {
-               Packet.writePacket(var2, this.socketOutputStream);
-               if(var2 instanceof Packet252SharedKey && !this.isOutputEncrypted) {
+            exception = this.func_74460_a(false);
+            if(exception != null) {
+               Packet.writePacket(exception, this.socketOutputStream);
+               if(exception instanceof Packet252SharedKey && !this.isOutputEncrypted) {
                   if(!this.theNetHandler.isServerHandler()) {
-                     this.sharedKeyForEncryption = ((Packet252SharedKey)var2).func_73304_d();
+                     this.sharedKeyForEncryption = ((Packet252SharedKey)exception).func_73304_d();
                   }
 
                   this.encryptOuputStream();
                }
 
-               var10000 = field_74467_d;
-               var10001 = var2.getPacketId();
-               var10000[var10001] += var2.getPacketSize() + 1;
-               var1 = true;
+               aint = field_74467_d;
+               i = exception.getPacketId();
+               aint[i] += exception.getPacketSize() + 1;
+               flag = true;
             }
          }
 
-         if(this.field_74464_B-- <= 0 && (this.field_74468_e == 0 || !this.chunkDataPackets.isEmpty() && System.currentTimeMillis() - ((Packet)this.chunkDataPackets.get(0)).creationTimeMillis >= (long)this.field_74468_e)) {
-            var2 = this.func_74460_a(true);
-            if(var2 != null) {
-               Packet.writePacket(var2, this.socketOutputStream);
-               var10000 = field_74467_d;
-               var10001 = var2.getPacketId();
-               var10000[var10001] += var2.getPacketSize() + 1;
+         if((flag || this.field_74464_B-- <= 0) && !this.chunkDataPackets.isEmpty() && (this.dataPackets.isEmpty() || ((Packet)this.dataPackets.get(0)).creationTimeMillis > ((Packet)this.chunkDataPackets.get(0)).creationTimeMillis)) {
+            exception = this.func_74460_a(true);
+            if(exception != null) {
+               Packet.writePacket(exception, this.socketOutputStream);
+               aint = field_74467_d;
+               i = exception.getPacketId();
+               aint[i] += exception.getPacketSize() + 1;
                this.field_74464_B = 0;
-               var1 = true;
+               flag = true;
             }
          }
 
-         return var1;
-      } catch (Exception var3) {
+         return flag;
+      } catch (Exception var5) {
          if(!this.isTerminating) {
-            this.onNetworkError(var3);
+            this.onNetworkError(var5);
          }
 
          return false;
       }
    }
 
-   private Packet func_74460_a(boolean var1) {
-      Packet var2 = null;
-      List var3 = var1?this.chunkDataPackets:this.dataPackets;
-      Object var4 = this.sendQueueLock;
+   private Packet func_74460_a(boolean flag) {
+      Packet packet = null;
+      List list = flag?this.chunkDataPackets:this.dataPackets;
+      Object object = this.sendQueueLock;
+      Object var5 = this.sendQueueLock;
       synchronized(this.sendQueueLock) {
-         while(!var3.isEmpty() && var2 == null) {
-            var2 = (Packet)var3.remove(0);
-            this.sendQueueByteLength -= var2.getPacketSize() + 1;
-            if(this.func_74454_a(var2, var1)) {
-               var2 = null;
+         while(!list.isEmpty() && packet == null) {
+            packet = (Packet)list.remove(0);
+            this.sendQueueByteLength -= packet.getPacketSize() + 1;
+            if(this.func_74454_a(packet, flag)) {
+               packet = null;
             }
          }
 
-         return var2;
+         return packet;
       }
    }
 
-   private boolean func_74454_a(Packet var1, boolean var2) {
-      if(!var1.isRealPacket()) {
+   private boolean func_74454_a(Packet packet, boolean flag) {
+      if(!packet.isRealPacket()) {
          return false;
       } else {
-         List var3 = var2?this.chunkDataPackets:this.dataPackets;
-         Iterator var4 = var3.iterator();
+         List list = flag?this.chunkDataPackets:this.dataPackets;
+         Iterator iterator = list.iterator();
 
-         Packet var5;
-         do {
-            if(!var4.hasNext()) {
-               return false;
+         while(iterator.hasNext()) {
+            Packet packet1 = (Packet)iterator.next();
+            if(packet1.getPacketId() == packet.getPacketId()) {
+               return packet.containsSameEntityIDAs(packet1);
             }
+         }
 
-            var5 = (Packet)var4.next();
-         } while(var5.getPacketId() != var1.getPacketId());
-
-         return var1.containsSameEntityIDAs(var5);
+         return false;
       }
    }
 
@@ -188,56 +194,55 @@
    }
 
    private boolean readPacket() {
-      boolean var1 = false;
+      boolean flag = false;
 
       try {
-         Packet var2 = Packet.readPacket(this.socketInputStream, this.theNetHandler.isServerHandler(), this.networkSocket);
-         if(var2 != null) {
-            if(var2 instanceof Packet252SharedKey && !this.isInputBeingDecrypted) {
+         Packet exception = Packet.readPacket(this.socketInputStream, this.theNetHandler.isServerHandler(), this.networkSocket);
+         if(exception != null) {
+            if(exception instanceof Packet252SharedKey && !this.isInputBeingDecrypted) {
                if(this.theNetHandler.isServerHandler()) {
-                  this.sharedKeyForEncryption = ((Packet252SharedKey)var2).func_73303_a(this.field_74463_A);
+                  this.sharedKeyForEncryption = ((Packet252SharedKey)exception).func_73303_a(this.field_74463_A);
                }
 
                this.decryptInputStream();
             }
 
-            int[] var10000 = field_74470_c;
-            int var10001 = var2.getPacketId();
-            var10000[var10001] += var2.getPacketSize() + 1;
+            int[] aint = field_74470_c;
+            int i = exception.getPacketId();
+            aint[i] += exception.getPacketSize() + 1;
             if(!this.isServerTerminating) {
-               if(var2.isWritePacket() && this.theNetHandler.canProcessPackets()) {
+               if(exception.isWritePacket() && this.theNetHandler.canProcessPackets()) {
                   this.field_74490_x = 0;
-                  var2.processPacket(this.theNetHandler);
+                  exception.processPacket(this.theNetHandler);
                } else {
-                  this.readPackets.add(var2);
+                  this.readPackets.add(exception);
                }
             }
 
-            var1 = true;
+            flag = true;
          } else {
             this.networkShutdown("disconnect.endOfStream", new Object[0]);
          }
 
-         return var1;
-      } catch (Exception var3) {
+         return flag;
+      } catch (Exception var5) {
          if(!this.isTerminating) {
-            this.onNetworkError(var3);
+            this.onNetworkError(var5);
          }
 
          return false;
       }
    }
 
-   private void onNetworkError(Exception var1) {
-      var1.printStackTrace();
-      this.networkShutdown("disconnect.genericReason", new Object[]{"Internal exception: " + var1.toString()});
+   private void onNetworkError(Exception exception) {
+      this.networkShutdown("disconnect.genericReason", new Object[]{"Internal exception: " + exception.toString()});
    }
 
-   public void networkShutdown(String var1, Object ... var2) {
+   public void networkShutdown(String s, Object ... aobject) {
       if(this.isRunning) {
          this.isTerminating = true;
-         this.terminationReason = var1;
-         this.field_74480_w = var2;
+         this.terminationReason = s;
+         this.field_74480_w = aobject;
          this.isRunning = false;
          (new TcpMasterThread(this)).start();
 
@@ -263,6 +268,7 @@
          this.socketOutputStream = null;
          this.networkSocket = null;
       }
+
    }
 
    public void processReadPackets() {
@@ -278,11 +284,19 @@
          this.field_74490_x = 0;
       }
 
-      int var1 = 1000;
+      int i = 1000;
 
-      while(!this.readPackets.isEmpty() && var1-- >= 0) {
-         Packet var2 = (Packet)this.readPackets.remove(0);
-         var2.processPacket(this.theNetHandler);
+      while(!this.readPackets.isEmpty() && i-- >= 0) {
+         Packet packet = (Packet)this.readPackets.poll();
+         if(this.theNetHandler instanceof NetLoginHandler) {
+            if(((NetLoginHandler)this.theNetHandler).finishedProcessing) {
+               continue;
+            }
+         } else if(((NetServerHandler)this.theNetHandler).connectionClosed) {
+            continue;
+         }
+
+         packet.processPacket(this.theNetHandler);
       }
 
       this.wakeThreads();
@@ -303,19 +317,20 @@
          this.readThread.interrupt();
          (new TcpMonitorThread(this)).start();
       }
+
    }
 
-   private void decryptInputStream() {
+   private void decryptInputStream() throws IOException {
       this.isInputBeingDecrypted = true;
-      InputStream var1 = this.networkSocket.getInputStream();
-      this.socketInputStream = new DataInputStream(CryptManager.decryptInputStream(this.sharedKeyForEncryption, var1));
+      InputStream inputstream = this.networkSocket.getInputStream();
+      this.socketInputStream = new DataInputStream(CryptManager.decryptInputStream(this.sharedKeyForEncryption, inputstream));
    }
 
-   private void encryptOuputStream() {
+   private void encryptOuputStream() throws IOException {
       this.socketOutputStream.flush();
       this.isOutputEncrypted = true;
-      BufferedOutputStream var1 = new BufferedOutputStream(CryptManager.encryptOuputStream(this.sharedKeyForEncryption, this.networkSocket.getOutputStream()), 5120);
-      this.socketOutputStream = new DataOutputStream(var1);
+      BufferedOutputStream bufferedoutputstream = new BufferedOutputStream(CryptManager.encryptOuputStream(this.sharedKeyForEncryption, this.networkSocket.getOutputStream()), 5120);
+      this.socketOutputStream = new DataOutputStream(bufferedoutputstream);
    }
 
    public int getNumChunkDataPackets() {
@@ -326,49 +341,40 @@
       return this.networkSocket;
    }
 
-   // $FF: synthetic method
-   static boolean isRunning(TcpConnection var0) {
-      return var0.isRunning;
+   static boolean isRunning(TcpConnection networkmanager) {
+      return networkmanager.isRunning;
    }
 
-   // $FF: synthetic method
-   static boolean isServerTerminating(TcpConnection var0) {
-      return var0.isServerTerminating;
+   static boolean isServerTerminating(TcpConnection networkmanager) {
+      return networkmanager.isServerTerminating;
    }
 
-   // $FF: synthetic method
-   static boolean readNetworkPacket(TcpConnection var0) {
-      return var0.readPacket();
+   static boolean readNetworkPacket(TcpConnection networkmanager) {
+      return networkmanager.readPacket();
    }
 
-   // $FF: synthetic method
-   static boolean sendNetworkPacket(TcpConnection var0) {
-      return var0.sendPacket();
+   static boolean sendNetworkPacket(TcpConnection networkmanager) {
+      return networkmanager.sendPacket();
    }
 
-   // $FF: synthetic method
-   static DataOutputStream getOutputStream(TcpConnection var0) {
-      return var0.socketOutputStream;
+   static DataOutputStream getOutputStream(TcpConnection networkmanager) {
+      return networkmanager.socketOutputStream;
    }
 
-   // $FF: synthetic method
-   static boolean isTerminating(TcpConnection var0) {
-      return var0.isTerminating;
+   static boolean isTerminating(TcpConnection networkmanager) {
+      return networkmanager.isTerminating;
    }
 
-   // $FF: synthetic method
-   static void sendError(TcpConnection var0, Exception var1) {
-      var0.onNetworkError(var1);
+   static void sendError(TcpConnection networkmanager, Exception exception) {
+      networkmanager.onNetworkError(exception);
    }
 
-   // $FF: synthetic method
-   static Thread getReadThread(TcpConnection var0) {
-      return var0.readThread;
+   static Thread getReadThread(TcpConnection networkmanager) {
+      return networkmanager.readThread;
    }
 
-   // $FF: synthetic method
-   static Thread getWriteThread(TcpConnection var0) {
-      return var0.writeThread;
+   static Thread getWriteThread(TcpConnection networkmanager) {
+      return networkmanager.writeThread;
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/TcpWriterThread.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TcpWriterThread.class differ
diff -ur mcp-mcdev/net/minecraft/src/TcpWriterThread.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TcpWriterThread.java
--- mcp-mcdev/net/minecraft/src/TcpWriterThread.java	2012-11-29 21:14:26.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TcpWriterThread.java	2012-11-29 20:43:37.000000000 -0800
@@ -5,13 +5,12 @@
 
 class TcpWriterThread extends Thread {
 
-   // $FF: synthetic field
    final TcpConnection theTcpConnection;
 
 
-   TcpWriterThread(TcpConnection var1, String var2) {
-      super(var2);
-      this.theTcpConnection = var1;
+   TcpWriterThread(TcpConnection networkmanager, String s) {
+      super(s);
+      this.theTcpConnection = networkmanager;
    }
 
    public void run() {
@@ -19,21 +18,19 @@
 
       try {
          while(TcpConnection.isRunning(this.theTcpConnection)) {
-            boolean var1;
-            for(var1 = false; TcpConnection.sendNetworkPacket(this.theTcpConnection); var1 = true) {
+            boolean flag;
+            for(flag = false; TcpConnection.sendNetworkPacket(this.theTcpConnection); flag = true) {
                ;
             }
 
             try {
-               if(var1 && TcpConnection.getOutputStream(this.theTcpConnection) != null) {
+               if(flag && TcpConnection.getOutputStream(this.theTcpConnection) != null) {
                   TcpConnection.getOutputStream(this.theTcpConnection).flush();
                }
             } catch (IOException var8) {
                if(!TcpConnection.isTerminating(this.theTcpConnection)) {
                   TcpConnection.sendError(this.theTcpConnection, var8);
                }
-
-               var8.printStackTrace();
             }
 
             try {
Binary files mcp-mcdev/net/minecraft/src/Teleporter.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Teleporter.class differ
diff -ur mcp-mcdev/net/minecraft/src/Teleporter.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Teleporter.java
--- mcp-mcdev/net/minecraft/src/Teleporter.java	2012-11-29 21:14:26.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Teleporter.java	2012-11-29 20:43:37.000000000 -0800
@@ -21,81 +21,84 @@
    private final List field_85190_d = new ArrayList();
 
 
-   public Teleporter(WorldServer var1) {
-      this.field_85192_a = var1;
-      this.random = new Random(var1.getSeed());
+   public Teleporter(WorldServer worldserver) {
+      this.field_85192_a = worldserver;
+      this.random = new Random(worldserver.getSeed());
    }
 
-   public void placeInPortal(Entity var1, double var2, double var4, double var6, float var8) {
+   public void placeInPortal(Entity entity, double d0, double d1, double d2, float f) {
       if(this.field_85192_a.provider.dimensionId != 1) {
-         if(!this.placeInExistingPortal(var1, var2, var4, var6, var8)) {
-            this.func_85188_a(var1);
-            this.placeInExistingPortal(var1, var2, var4, var6, var8);
+         if(!this.placeInExistingPortal(entity, d0, d1, d2, f)) {
+            this.func_85188_a(entity);
+            this.placeInExistingPortal(entity, d0, d1, d2, f);
          }
       } else {
-         int var9 = MathHelper.floor_double(var1.posX);
-         int var10 = MathHelper.floor_double(var1.posY) - 1;
-         int var11 = MathHelper.floor_double(var1.posZ);
-         byte var12 = 1;
-         byte var13 = 0;
-
-         for(int var14 = -2; var14 <= 2; ++var14) {
-            for(int var15 = -2; var15 <= 2; ++var15) {
-               for(int var16 = -1; var16 < 3; ++var16) {
-                  int var17 = var9 + var15 * var12 + var14 * var13;
-                  int var18 = var10 + var16;
-                  int var19 = var11 + var15 * var13 - var14 * var12;
-                  boolean var20 = var16 < 0;
-                  this.field_85192_a.setBlockWithNotify(var17, var18, var19, var20?Block.obsidian.blockID:0);
+         int i = MathHelper.floor_double(entity.posX);
+         int j = MathHelper.floor_double(entity.posY) - 1;
+         int k = MathHelper.floor_double(entity.posZ);
+         byte b0 = 1;
+         byte b1 = 0;
+
+         for(int l = -2; l <= 2; ++l) {
+            for(int i1 = -2; i1 <= 2; ++i1) {
+               for(int j1 = -1; j1 < 3; ++j1) {
+                  int k1 = i + i1 * b0 + l * b1;
+                  int l1 = j + j1;
+                  int i2 = k + i1 * b1 - l * b0;
+                  boolean flag = j1 < 0;
+                  this.field_85192_a.setBlockWithNotify(k1, l1, i2, flag?Block.obsidian.blockID:0);
                }
             }
          }
 
-         var1.setLocationAndAngles((double)var9, (double)var10, (double)var11, var1.rotationYaw, 0.0F);
-         var1.motionX = var1.motionY = var1.motionZ = 0.0D;
+         entity.setLocationAndAngles((double)i, (double)j, (double)k, entity.rotationYaw, 0.0F);
+         entity.motionX = entity.motionY = entity.motionZ = 0.0D;
       }
+
    }
 
-   public boolean placeInExistingPortal(Entity var1, double var2, double var4, double var6, float var8) {
-      short var9 = 128;
-      double var10 = -1.0D;
-      int var12 = 0;
-      int var13 = 0;
-      int var14 = 0;
-      int var15 = MathHelper.floor_double(var1.posX);
-      int var16 = MathHelper.floor_double(var1.posZ);
-      long var17 = ChunkCoordIntPair.chunkXZ2Int(var15, var16);
-      boolean var19 = true;
-      double var27;
-      int var56;
-      if(this.field_85191_c.containsItem(var17)) {
-         PortalPosition var20 = (PortalPosition)this.field_85191_c.getValueByKey(var17);
-         var10 = 0.0D;
-         var12 = var20.posX;
-         var13 = var20.posY;
-         var14 = var20.posZ;
-         var20.field_85087_d = this.field_85192_a.getTotalWorldTime();
-         var19 = false;
+   public boolean placeInExistingPortal(Entity entity, double d0, double d1, double d2, float f) {
+      short short1 = 128;
+      double d3 = -1.0D;
+      int i = 0;
+      int j = 0;
+      int k = 0;
+      int l = MathHelper.floor_double(entity.posX);
+      int i1 = MathHelper.floor_double(entity.posZ);
+      long j1 = ChunkCoordIntPair.chunkXZ2Int(l, i1);
+      boolean flag = true;
+      int k1;
+      double d8;
+      int k2;
+      double d4;
+      if(this.field_85191_c.containsItem(j1)) {
+         PortalPosition chunkcoordinatesportal = (PortalPosition)this.field_85191_c.getValueByKey(j1);
+         d3 = 0.0D;
+         i = chunkcoordinatesportal.posX;
+         j = chunkcoordinatesportal.posY;
+         k = chunkcoordinatesportal.posZ;
+         chunkcoordinatesportal.field_85087_d = this.field_85192_a.getTotalWorldTime();
+         flag = false;
       } else {
-         for(var56 = var15 - var9; var56 <= var15 + var9; ++var56) {
-            double var21 = (double)var56 + 0.5D - var1.posX;
+         for(k1 = l - short1; k1 <= l + short1; ++k1) {
+            d8 = (double)k1 + 0.5D - entity.posX;
 
-            for(int var23 = var16 - var9; var23 <= var16 + var9; ++var23) {
-               double var24 = (double)var23 + 0.5D - var1.posZ;
+            for(int l1 = i1 - short1; l1 <= i1 + short1; ++l1) {
+               double d6 = (double)l1 + 0.5D - entity.posZ;
 
-               for(int var26 = this.field_85192_a.getActualHeight() - 1; var26 >= 0; --var26) {
-                  if(this.field_85192_a.getBlockId(var56, var26, var23) == Block.portal.blockID) {
-                     while(this.field_85192_a.getBlockId(var56, var26 - 1, var23) == Block.portal.blockID) {
-                        --var26;
+               for(k2 = this.field_85192_a.getActualHeight() - 1; k2 >= 0; --k2) {
+                  if(this.field_85192_a.getBlockId(k1, k2, l1) == Block.portal.blockID) {
+                     while(this.field_85192_a.getBlockId(k1, k2 - 1, l1) == Block.portal.blockID) {
+                        --k2;
                      }
 
-                     var27 = (double)var26 + 0.5D - var1.posY;
-                     double var29 = var21 * var21 + var27 * var27 + var24 * var24;
-                     if(var10 < 0.0D || var29 < var10) {
-                        var10 = var29;
-                        var12 = var56;
-                        var13 = var26;
-                        var14 = var23;
+                     d4 = (double)k2 + 0.5D - entity.posY;
+                     double d7 = d8 * d8 + d4 * d4 + d6 * d6;
+                     if(d3 < 0.0D || d7 < d3) {
+                        d3 = d7;
+                        i = k1;
+                        j = k2;
+                        k = l1;
                      }
                   }
                }
@@ -103,171 +106,172 @@
          }
       }
 
-      if(var10 >= 0.0D) {
-         if(var19) {
-            this.field_85191_c.add(var17, new PortalPosition(this, var12, var13, var14, this.field_85192_a.getTotalWorldTime()));
-            this.field_85190_d.add(Long.valueOf(var17));
-         }
-
-         double var33 = (double)var12 + 0.5D;
-         double var35 = (double)var13 + 0.5D;
-         var27 = (double)var14 + 0.5D;
-         int var37 = -1;
-         if(this.field_85192_a.getBlockId(var12 - 1, var13, var14) == Block.portal.blockID) {
-            var37 = 2;
-         }
-
-         if(this.field_85192_a.getBlockId(var12 + 1, var13, var14) == Block.portal.blockID) {
-            var37 = 0;
-         }
-
-         if(this.field_85192_a.getBlockId(var12, var13, var14 - 1) == Block.portal.blockID) {
-            var37 = 3;
-         }
-
-         if(this.field_85192_a.getBlockId(var12, var13, var14 + 1) == Block.portal.blockID) {
-            var37 = 1;
-         }
-
-         int var38 = var1.func_82148_at();
-         if(var37 > -1) {
-            int var39 = Direction.field_71578_g[var37];
-            int var40 = Direction.offsetX[var37];
-            int var41 = Direction.offsetZ[var37];
-            int var42 = Direction.offsetX[var39];
-            int var43 = Direction.offsetZ[var39];
-            boolean var44 = !this.field_85192_a.isAirBlock(var12 + var40 + var42, var13, var14 + var41 + var43) || !this.field_85192_a.isAirBlock(var12 + var40 + var42, var13 + 1, var14 + var41 + var43);
-            boolean var45 = !this.field_85192_a.isAirBlock(var12 + var40, var13, var14 + var41) || !this.field_85192_a.isAirBlock(var12 + var40, var13 + 1, var14 + var41);
-            if(var44 && var45) {
-               var37 = Direction.footInvisibleFaceRemap[var37];
-               var39 = Direction.footInvisibleFaceRemap[var39];
-               var40 = Direction.offsetX[var37];
-               var41 = Direction.offsetZ[var37];
-               var42 = Direction.offsetX[var39];
-               var43 = Direction.offsetZ[var39];
-               var56 = var12 - var42;
-               var33 -= (double)var42;
-               int var32 = var14 - var43;
-               var27 -= (double)var43;
-               var44 = !this.field_85192_a.isAirBlock(var56 + var40 + var42, var13, var32 + var41 + var43) || !this.field_85192_a.isAirBlock(var56 + var40 + var42, var13 + 1, var32 + var41 + var43);
-               var45 = !this.field_85192_a.isAirBlock(var56 + var40, var13, var32 + var41) || !this.field_85192_a.isAirBlock(var56 + var40, var13 + 1, var32 + var41);
-            }
-
-            float var46 = 0.5F;
-            float var47 = 0.5F;
-            if(!var44 && var45) {
-               var46 = 1.0F;
-            } else if(var44 && !var45) {
-               var46 = 0.0F;
-            } else if(var44 && var45) {
-               var47 = 0.0F;
-            }
-
-            var33 += (double)((float)var42 * var46 + var47 * (float)var40);
-            var27 += (double)((float)var43 * var46 + var47 * (float)var41);
-            float var48 = 0.0F;
-            float var49 = 0.0F;
-            float var50 = 0.0F;
-            float var51 = 0.0F;
-            if(var37 == var38) {
-               var48 = 1.0F;
-               var49 = 1.0F;
-            } else if(var37 == Direction.footInvisibleFaceRemap[var38]) {
-               var48 = -1.0F;
-               var49 = -1.0F;
-            } else if(var37 == Direction.enderEyeMetaToDirection[var38]) {
-               var50 = 1.0F;
-               var51 = -1.0F;
+      if(d3 >= 0.0D) {
+         if(flag) {
+            this.field_85191_c.add(j1, new PortalPosition(this, i, j, k, this.field_85192_a.getTotalWorldTime()));
+            this.field_85190_d.add(Long.valueOf(j1));
+         }
+
+         d8 = (double)i + 0.5D;
+         double d9 = (double)j + 0.5D;
+         d4 = (double)k + 0.5D;
+         int j2 = -1;
+         if(this.field_85192_a.getBlockId(i - 1, j, k) == Block.portal.blockID) {
+            j2 = 2;
+         }
+
+         if(this.field_85192_a.getBlockId(i + 1, j, k) == Block.portal.blockID) {
+            j2 = 0;
+         }
+
+         if(this.field_85192_a.getBlockId(i, j, k - 1) == Block.portal.blockID) {
+            j2 = 3;
+         }
+
+         if(this.field_85192_a.getBlockId(i, j, k + 1) == Block.portal.blockID) {
+            j2 = 1;
+         }
+
+         k2 = entity.func_82148_at();
+         if(j2 > -1) {
+            int l2 = Direction.field_71578_g[j2];
+            int i3 = Direction.offsetX[j2];
+            int j3 = Direction.offsetZ[j2];
+            int k3 = Direction.offsetX[l2];
+            int l3 = Direction.offsetZ[l2];
+            boolean flag1 = !this.field_85192_a.isAirBlock(i + i3 + k3, j, k + j3 + l3) || !this.field_85192_a.isAirBlock(i + i3 + k3, j + 1, k + j3 + l3);
+            boolean flag2 = !this.field_85192_a.isAirBlock(i + i3, j, k + j3) || !this.field_85192_a.isAirBlock(i + i3, j + 1, k + j3);
+            if(flag1 && flag2) {
+               j2 = Direction.footInvisibleFaceRemap[j2];
+               l2 = Direction.footInvisibleFaceRemap[l2];
+               i3 = Direction.offsetX[j2];
+               j3 = Direction.offsetZ[j2];
+               k3 = Direction.offsetX[l2];
+               l3 = Direction.offsetZ[l2];
+               k1 = i - k3;
+               d8 -= (double)k3;
+               int f1 = k - l3;
+               d4 -= (double)l3;
+               flag1 = !this.field_85192_a.isAirBlock(k1 + i3 + k3, j, f1 + j3 + l3) || !this.field_85192_a.isAirBlock(k1 + i3 + k3, j + 1, f1 + j3 + l3);
+               flag2 = !this.field_85192_a.isAirBlock(k1 + i3, j, f1 + j3) || !this.field_85192_a.isAirBlock(k1 + i3, j + 1, f1 + j3);
+            }
+
+            float var52 = 0.5F;
+            float f2 = 0.5F;
+            if(!flag1 && flag2) {
+               var52 = 1.0F;
+            } else if(flag1 && !flag2) {
+               var52 = 0.0F;
+            } else if(flag1 && flag2) {
+               f2 = 0.0F;
+            }
+
+            d8 += (double)((float)k3 * var52 + f2 * (float)i3);
+            d4 += (double)((float)l3 * var52 + f2 * (float)j3);
+            float f3 = 0.0F;
+            float f4 = 0.0F;
+            float f5 = 0.0F;
+            float f6 = 0.0F;
+            if(j2 == k2) {
+               f3 = 1.0F;
+               f4 = 1.0F;
+            } else if(j2 == Direction.footInvisibleFaceRemap[k2]) {
+               f3 = -1.0F;
+               f4 = -1.0F;
+            } else if(j2 == Direction.enderEyeMetaToDirection[k2]) {
+               f5 = 1.0F;
+               f6 = -1.0F;
             } else {
-               var50 = -1.0F;
-               var51 = 1.0F;
+               f5 = -1.0F;
+               f6 = 1.0F;
             }
 
-            double var52 = var1.motionX;
-            double var54 = var1.motionZ;
-            var1.motionX = var52 * (double)var48 + var54 * (double)var51;
-            var1.motionZ = var52 * (double)var50 + var54 * (double)var49;
-            var1.rotationYaw = var8 - (float)(var38 * 90) + (float)(var37 * 90);
+            double d10 = entity.motionX;
+            double d11 = entity.motionZ;
+            entity.motionX = d10 * (double)f3 + d11 * (double)f6;
+            entity.motionZ = d10 * (double)f5 + d11 * (double)f4;
+            entity.rotationYaw = f - (float)(k2 * 90) + (float)(j2 * 90);
          } else {
-            var1.motionX = var1.motionY = var1.motionZ = 0.0D;
+            entity.motionX = entity.motionY = entity.motionZ = 0.0D;
          }
 
-         var1.setLocationAndAngles(var33, var35, var27, var1.rotationYaw, var1.rotationPitch);
+         entity.setLocationAndAngles(d8, d9, d4, entity.rotationYaw, entity.rotationPitch);
          return true;
       } else {
          return false;
       }
    }
 
-   public boolean func_85188_a(Entity var1) {
-      byte var2 = 16;
-      double var3 = -1.0D;
-      int var5 = MathHelper.floor_double(var1.posX);
-      int var6 = MathHelper.floor_double(var1.posY);
-      int var7 = MathHelper.floor_double(var1.posZ);
-      int var8 = var5;
-      int var9 = var6;
-      int var10 = var7;
-      int var11 = 0;
-      int var12 = this.random.nextInt(4);
-
-      int var13;
-      double var14;
-      double var17;
-      int var16;
-      int var19;
-      int var21;
-      int var20;
-      int var23;
-      int var22;
-      int var25;
-      int var24;
-      int var27;
-      int var26;
-      double var29;
-      double var31;
-      for(var13 = var5 - var2; var13 <= var5 + var2; ++var13) {
-         var14 = (double)var13 + 0.5D - var1.posX;
-
-         for(var16 = var7 - var2; var16 <= var7 + var2; ++var16) {
-            var17 = (double)var16 + 0.5D - var1.posZ;
-
-            label274:
-            for(var19 = this.field_85192_a.getActualHeight() - 1; var19 >= 0; --var19) {
-               if(this.field_85192_a.isAirBlock(var13, var19, var16)) {
-                  while(var19 > 0 && this.field_85192_a.isAirBlock(var13, var19 - 1, var16)) {
-                     --var19;
+   public boolean func_85188_a(Entity entity) {
+      byte b0 = 16;
+      double d0 = -1.0D;
+      int i = MathHelper.floor_double(entity.posX);
+      int j = MathHelper.floor_double(entity.posY);
+      int k = MathHelper.floor_double(entity.posZ);
+      int l = i;
+      int i1 = j;
+      int j1 = k;
+      int k1 = 0;
+      int l1 = this.random.nextInt(4);
+
+      int i2;
+      double d1;
+      double d2;
+      int j2;
+      int k2;
+      int l2;
+      int i3;
+      int j3;
+      int k3;
+      int l3;
+      int i4;
+      int j4;
+      int k4;
+      double d3;
+      int i5;
+      double d4;
+      for(i2 = i - b0; i2 <= i + b0; ++i2) {
+         d1 = (double)i2 + 0.5D - entity.posX;
+
+         for(j2 = k - b0; j2 <= k + b0; ++j2) {
+            d2 = (double)j2 + 0.5D - entity.posZ;
+
+            label272:
+            for(k2 = this.field_85192_a.getActualHeight() - 1; k2 >= 0; --k2) {
+               if(this.field_85192_a.isAirBlock(i2, k2, j2)) {
+                  while(k2 > 0 && this.field_85192_a.isAirBlock(i2, k2 - 1, j2)) {
+                     --k2;
                   }
 
-                  for(var20 = var12; var20 < var12 + 4; ++var20) {
-                     var21 = var20 % 2;
-                     var22 = 1 - var21;
-                     if(var20 % 4 >= 2) {
-                        var21 = -var21;
-                        var22 = -var22;
+                  for(i3 = l1; i3 < l1 + 4; ++i3) {
+                     l2 = i3 % 2;
+                     k3 = 1 - l2;
+                     if(i3 % 4 >= 2) {
+                        l2 = -l2;
+                        k3 = -k3;
                      }
 
-                     for(var23 = 0; var23 < 3; ++var23) {
-                        for(var24 = 0; var24 < 4; ++var24) {
-                           for(var25 = -1; var25 < 4; ++var25) {
-                              var26 = var13 + (var24 - 1) * var21 + var23 * var22;
-                              var27 = var19 + var25;
-                              int var28 = var16 + (var24 - 1) * var22 - var23 * var21;
-                              if(var25 < 0 && !this.field_85192_a.getBlockMaterial(var26, var27, var28).isSolid() || var25 >= 0 && !this.field_85192_a.isAirBlock(var26, var27, var28)) {
-                                 continue label274;
+                     for(j3 = 0; j3 < 3; ++j3) {
+                        for(i4 = 0; i4 < 4; ++i4) {
+                           for(l3 = -1; l3 < 4; ++l3) {
+                              k4 = i2 + (i4 - 1) * l2 + j3 * k3;
+                              j4 = k2 + l3;
+                              i5 = j2 + (i4 - 1) * k3 - j3 * l2;
+                              if(l3 < 0 && !this.field_85192_a.getBlockMaterial(k4, j4, i5).isSolid() || l3 >= 0 && !this.field_85192_a.isAirBlock(k4, j4, i5)) {
+                                 continue label272;
                               }
                            }
                         }
                      }
 
-                     var29 = (double)var19 + 0.5D - var1.posY;
-                     var31 = var14 * var14 + var29 * var29 + var17 * var17;
-                     if(var3 < 0.0D || var31 < var3) {
-                        var3 = var31;
-                        var8 = var13;
-                        var9 = var19;
-                        var10 = var16;
-                        var11 = var20 % 4;
+                     d3 = (double)k2 + 0.5D - entity.posY;
+                     d4 = d1 * d1 + d3 * d3 + d2 * d2;
+                     if(d0 < 0.0D || d4 < d0) {
+                        d0 = d4;
+                        l = i2;
+                        i1 = k2;
+                        j1 = j2;
+                        k1 = i3 % 4;
                      }
                   }
                }
@@ -275,43 +279,43 @@
          }
       }
 
-      if(var3 < 0.0D) {
-         for(var13 = var5 - var2; var13 <= var5 + var2; ++var13) {
-            var14 = (double)var13 + 0.5D - var1.posX;
-
-            for(var16 = var7 - var2; var16 <= var7 + var2; ++var16) {
-               var17 = (double)var16 + 0.5D - var1.posZ;
-
-               label222:
-               for(var19 = this.field_85192_a.getActualHeight() - 1; var19 >= 0; --var19) {
-                  if(this.field_85192_a.isAirBlock(var13, var19, var16)) {
-                     while(var19 > 0 && this.field_85192_a.isAirBlock(var13, var19 - 1, var16)) {
-                        --var19;
+      if(d0 < 0.0D) {
+         for(i2 = i - b0; i2 <= i + b0; ++i2) {
+            d1 = (double)i2 + 0.5D - entity.posX;
+
+            for(j2 = k - b0; j2 <= k + b0; ++j2) {
+               d2 = (double)j2 + 0.5D - entity.posZ;
+
+               label220:
+               for(k2 = this.field_85192_a.getActualHeight() - 1; k2 >= 0; --k2) {
+                  if(this.field_85192_a.isAirBlock(i2, k2, j2)) {
+                     while(k2 > 0 && this.field_85192_a.isAirBlock(i2, k2 - 1, j2)) {
+                        --k2;
                      }
 
-                     for(var20 = var12; var20 < var12 + 2; ++var20) {
-                        var21 = var20 % 2;
-                        var22 = 1 - var21;
-
-                        for(var23 = 0; var23 < 4; ++var23) {
-                           for(var24 = -1; var24 < 4; ++var24) {
-                              var25 = var13 + (var23 - 1) * var21;
-                              var26 = var19 + var24;
-                              var27 = var16 + (var23 - 1) * var22;
-                              if(var24 < 0 && !this.field_85192_a.getBlockMaterial(var25, var26, var27).isSolid() || var24 >= 0 && !this.field_85192_a.isAirBlock(var25, var26, var27)) {
-                                 continue label222;
+                     for(i3 = l1; i3 < l1 + 2; ++i3) {
+                        l2 = i3 % 2;
+                        k3 = 1 - l2;
+
+                        for(j3 = 0; j3 < 4; ++j3) {
+                           for(i4 = -1; i4 < 4; ++i4) {
+                              l3 = i2 + (j3 - 1) * l2;
+                              k4 = k2 + i4;
+                              j4 = j2 + (j3 - 1) * k3;
+                              if(i4 < 0 && !this.field_85192_a.getBlockMaterial(l3, k4, j4).isSolid() || i4 >= 0 && !this.field_85192_a.isAirBlock(l3, k4, j4)) {
+                                 continue label220;
                               }
                            }
                         }
 
-                        var29 = (double)var19 + 0.5D - var1.posY;
-                        var31 = var14 * var14 + var29 * var29 + var17 * var17;
-                        if(var3 < 0.0D || var31 < var3) {
-                           var3 = var31;
-                           var8 = var13;
-                           var9 = var19;
-                           var10 = var16;
-                           var11 = var20 % 2;
+                        d3 = (double)k2 + 0.5D - entity.posY;
+                        d4 = d1 * d1 + d3 * d3 + d2 * d2;
+                        if(d0 < 0.0D || d4 < d0) {
+                           d0 = d4;
+                           l = i2;
+                           i1 = k2;
+                           j1 = j2;
+                           k1 = i3 % 2;
                         }
                      }
                   }
@@ -320,62 +324,62 @@
          }
       }
 
-      int var33 = var8;
-      int var34 = var9;
-      var16 = var10;
-      int var35 = var11 % 2;
-      int var36 = 1 - var35;
-      if(var11 % 4 >= 2) {
-         var35 = -var35;
-         var36 = -var36;
+      i5 = l;
+      int j5 = i1;
+      j2 = j1;
+      int k5 = k1 % 2;
+      int l5 = 1 - k5;
+      if(k1 % 4 >= 2) {
+         k5 = -k5;
+         l5 = -l5;
       }
 
-      boolean var37;
-      if(var3 < 0.0D) {
-         if(var9 < 70) {
-            var9 = 70;
-         }
-
-         if(var9 > this.field_85192_a.getActualHeight() - 10) {
-            var9 = this.field_85192_a.getActualHeight() - 10;
-         }
-
-         var34 = var9;
-
-         for(var19 = -1; var19 <= 1; ++var19) {
-            for(var20 = 1; var20 < 3; ++var20) {
-               for(var21 = -1; var21 < 3; ++var21) {
-                  var22 = var33 + (var20 - 1) * var35 + var19 * var36;
-                  var23 = var34 + var21;
-                  var24 = var16 + (var20 - 1) * var36 - var19 * var35;
-                  var37 = var21 < 0;
-                  this.field_85192_a.setBlockWithNotify(var22, var23, var24, var37?Block.obsidian.blockID:0);
+      boolean flag;
+      if(d0 < 0.0D) {
+         if(i1 < 70) {
+            i1 = 70;
+         }
+
+         if(i1 > this.field_85192_a.getActualHeight() - 10) {
+            i1 = this.field_85192_a.getActualHeight() - 10;
+         }
+
+         j5 = i1;
+
+         for(k2 = -1; k2 <= 1; ++k2) {
+            for(i3 = 1; i3 < 3; ++i3) {
+               for(l2 = -1; l2 < 3; ++l2) {
+                  k3 = i5 + (i3 - 1) * k5 + k2 * l5;
+                  j3 = j5 + l2;
+                  i4 = j2 + (i3 - 1) * l5 - k2 * k5;
+                  flag = l2 < 0;
+                  this.field_85192_a.setBlockWithNotify(k3, j3, i4, flag?Block.obsidian.blockID:0);
                }
             }
          }
       }
 
-      for(var19 = 0; var19 < 4; ++var19) {
+      for(k2 = 0; k2 < 4; ++k2) {
          this.field_85192_a.editingBlocks = true;
 
-         for(var20 = 0; var20 < 4; ++var20) {
-            for(var21 = -1; var21 < 4; ++var21) {
-               var22 = var33 + (var20 - 1) * var35;
-               var23 = var34 + var21;
-               var24 = var16 + (var20 - 1) * var36;
-               var37 = var20 == 0 || var20 == 3 || var21 == -1 || var21 == 3;
-               this.field_85192_a.setBlockWithNotify(var22, var23, var24, var37?Block.obsidian.blockID:Block.portal.blockID);
+         for(i3 = 0; i3 < 4; ++i3) {
+            for(l2 = -1; l2 < 4; ++l2) {
+               k3 = i5 + (i3 - 1) * k5;
+               j3 = j5 + l2;
+               i4 = j2 + (i3 - 1) * l5;
+               flag = i3 == 0 || i3 == 3 || l2 == -1 || l2 == 3;
+               this.field_85192_a.setBlockWithNotify(k3, j3, i4, flag?Block.obsidian.blockID:Block.portal.blockID);
             }
          }
 
          this.field_85192_a.editingBlocks = false;
 
-         for(var20 = 0; var20 < 4; ++var20) {
-            for(var21 = -1; var21 < 4; ++var21) {
-               var22 = var33 + (var20 - 1) * var35;
-               var23 = var34 + var21;
-               var24 = var16 + (var20 - 1) * var36;
-               this.field_85192_a.notifyBlocksOfNeighborChange(var22, var23, var24, this.field_85192_a.getBlockId(var22, var23, var24));
+         for(i3 = 0; i3 < 4; ++i3) {
+            for(l2 = -1; l2 < 4; ++l2) {
+               k3 = i5 + (i3 - 1) * k5;
+               j3 = j5 + l2;
+               i4 = j2 + (i3 - 1) * l5;
+               this.field_85192_a.notifyBlocksOfNeighborChange(k3, j3, i4, this.field_85192_a.getBlockId(k3, j3, i4));
             }
          }
       }
@@ -383,17 +387,17 @@
       return true;
    }
 
-   public void func_85189_a(long var1) {
-      if(var1 % 100L == 0L) {
-         Iterator var3 = this.field_85190_d.iterator();
-         long var4 = var1 - 600L;
-
-         while(var3.hasNext()) {
-            Long var6 = (Long)var3.next();
-            PortalPosition var7 = (PortalPosition)this.field_85191_c.getValueByKey(var6.longValue());
-            if(var7 == null || var7.field_85087_d < var4) {
-               var3.remove();
-               this.field_85191_c.remove(var6.longValue());
+   public void func_85189_a(long i) {
+      if(i % 100L == 0L) {
+         Iterator iterator = this.field_85190_d.iterator();
+         long j = i - 600L;
+
+         while(iterator.hasNext()) {
+            Long olong = (Long)iterator.next();
+            PortalPosition chunkcoordinatesportal = (PortalPosition)this.field_85191_c.getValueByKey(olong.longValue());
+            if(chunkcoordinatesportal == null || chunkcoordinatesportal.field_85087_d < j) {
+               iterator.remove();
+               this.field_85191_c.remove(olong.longValue());
             }
          }
       }
Only in mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src: ThreadLoginVerifier$1.class
Binary files mcp-mcdev/net/minecraft/src/ThreadLoginVerifier.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/ThreadLoginVerifier.class differ
Only in mcp-mcdev/net/minecraft/src: ThreadLoginVerifier.java
Binary files mcp-mcdev/net/minecraft/src/TileEntity.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntity.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntity.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntity.java
--- mcp-mcdev/net/minecraft/src/TileEntity.java	2012-11-29 21:14:23.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntity.java	2012-11-29 20:43:35.000000000 -0800
@@ -23,12 +23,14 @@
 import net.minecraft.src.TileEntitySign;
 import net.minecraft.src.TileEntitySkull;
 import net.minecraft.src.World;
+import org.bukkit.block.BlockState;
+import org.bukkit.inventory.InventoryHolder;
 
 public class TileEntity {
 
    private static Map nameToClassMap = new HashMap();
    private static Map classToNameMap = new HashMap();
-   protected World worldObj;
+   public World worldObj;
    public int xCoord;
    public int yCoord;
    public int zCoord;
@@ -37,62 +39,62 @@
    public Block blockType;
 
 
-   private static void addMapping(Class var0, String var1) {
-      if(nameToClassMap.containsKey(var1)) {
-         throw new IllegalArgumentException("Duplicate id: " + var1);
+   private static void addMapping(Class oclass, String s) {
+      if(nameToClassMap.containsKey(s)) {
+         throw new IllegalArgumentException("Duplicate id: " + s);
       } else {
-         nameToClassMap.put(var1, var0);
-         classToNameMap.put(var0, var1);
+         nameToClassMap.put(s, oclass);
+         classToNameMap.put(oclass, s);
       }
    }
 
-   public void setWorldObj(World var1) {
-      this.worldObj = var1;
+   public void setWorldObj(World world) {
+      this.worldObj = world;
    }
 
    public boolean func_70309_m() {
       return this.worldObj != null;
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      this.xCoord = var1.getInteger("x");
-      this.yCoord = var1.getInteger("y");
-      this.zCoord = var1.getInteger("z");
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      this.xCoord = nbttagcompound.getInteger("x");
+      this.yCoord = nbttagcompound.getInteger("y");
+      this.zCoord = nbttagcompound.getInteger("z");
    }
 
-   public void writeToNBT(NBTTagCompound var1) {
-      String var2 = (String)classToNameMap.get(this.getClass());
-      if(var2 == null) {
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      String s = (String)classToNameMap.get(this.getClass());
+      if(s == null) {
          throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
       } else {
-         var1.setString("id", var2);
-         var1.setInteger("x", this.xCoord);
-         var1.setInteger("y", this.yCoord);
-         var1.setInteger("z", this.zCoord);
+         nbttagcompound.setString("id", s);
+         nbttagcompound.setInteger("x", this.xCoord);
+         nbttagcompound.setInteger("y", this.yCoord);
+         nbttagcompound.setInteger("z", this.zCoord);
       }
    }
 
    public void updateEntity() {}
 
-   public static TileEntity createAndLoadEntity(NBTTagCompound var0) {
-      TileEntity var1 = null;
+   public static TileEntity createAndLoadEntity(NBTTagCompound nbttagcompound) {
+      TileEntity tileentity = null;
 
       try {
-         Class var2 = (Class)nameToClassMap.get(var0.getString("id"));
-         if(var2 != null) {
-            var1 = (TileEntity)var2.newInstance();
+         Class exception = (Class)nameToClassMap.get(nbttagcompound.getString("id"));
+         if(exception != null) {
+            tileentity = (TileEntity)exception.newInstance();
          }
       } catch (Exception var3) {
          var3.printStackTrace();
       }
 
-      if(var1 != null) {
-         var1.readFromNBT(var0);
+      if(tileentity != null) {
+         tileentity.readFromNBT(nbttagcompound);
       } else {
-         System.out.println("Skipping TileEntity with id " + var0.getString("id"));
+         System.out.println("Skipping TileEntity with id " + nbttagcompound.getString("id"));
       }
 
-      return var1;
+      return tileentity;
    }
 
    public int getBlockMetadata() {
@@ -135,23 +137,27 @@
       this.tileEntityInvalid = false;
    }
 
-   public void receiveClientEvent(int var1, int var2) {}
+   public void receiveClientEvent(int i, int j) {}
 
    public void updateContainingBlockInfo() {
       this.blockType = null;
       this.blockMetadata = -1;
    }
 
-   public void func_85027_a(CrashReportCategory var1) {
-      var1.addCrashSectionCallable("Name", new CallableTileEntityName(this));
-      CrashReportCategory.func_85068_a(var1, this.xCoord, this.yCoord, this.zCoord, this.blockType.blockID, this.blockMetadata);
+   public void func_85027_a(CrashReportCategory crashreportsystemdetails) {
+      crashreportsystemdetails.addCrashSectionCallable("Name", new CallableTileEntityName(this));
+      CrashReportCategory.func_85068_a(crashreportsystemdetails, this.xCoord, this.yCoord, this.zCoord, this.blockType.blockID, this.blockMetadata);
    }
 
-   // $FF: synthetic method
    static Map func_85028_t() {
       return classToNameMap;
    }
 
+   public InventoryHolder getOwner() {
+      BlockState state = this.worldObj.getWorld().getBlockAt(this.xCoord, this.yCoord, this.zCoord).getState();
+      return state instanceof InventoryHolder?(InventoryHolder)state:null;
+   }
+
    static {
       addMapping(TileEntityFurnace.class, "Furnace");
       addMapping(TileEntityChest.class, "Chest");
Binary files mcp-mcdev/net/minecraft/src/TileEntityBeacon.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityBeacon.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntityBeacon.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityBeacon.java
--- mcp-mcdev/net/minecraft/src/TileEntityBeacon.java	2012-11-29 21:14:23.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityBeacon.java	2012-11-29 20:43:35.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.src.AxisAlignedBB;
@@ -13,6 +14,7 @@
 import net.minecraft.src.Potion;
 import net.minecraft.src.PotionEffect;
 import net.minecraft.src.TileEntity;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 
 public class TileEntityBeacon extends TileEntity implements IInventory {
 
@@ -22,8 +24,30 @@
    private int primaryEffect;
    private int secondaryEffect;
    private ItemStack payment;
+   public List transaction = new ArrayList();
+   private int maxStack = 64;
 
 
+   public ItemStack[] getContents() {
+      return null;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
    public void updateEntity() {
       if(this.worldObj.getTotalWorldTime() % 80L == 0L) {
          this.func_82131_u();
@@ -34,28 +58,28 @@
 
    private void func_82124_t() {
       if(this.field_82135_d && this.levels > 0 && !this.worldObj.isRemote && this.primaryEffect > 0) {
-         double var1 = (double)(this.levels * 8 + 8);
-         byte var3 = 0;
+         double d0 = (double)(this.levels * 8 + 8);
+         byte b0 = 0;
          if(this.levels >= 4 && this.primaryEffect == this.secondaryEffect) {
-            var3 = 1;
+            b0 = 1;
          }
 
-         AxisAlignedBB var4 = AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)this.xCoord, (double)this.yCoord, (double)this.zCoord, (double)(this.xCoord + 1), (double)(this.yCoord + 1), (double)(this.zCoord + 1)).expand(var1, var1, var1);
-         List var5 = this.worldObj.getEntitiesWithinAABB(EntityPlayer.class, var4);
-         Iterator var6 = var5.iterator();
+         AxisAlignedBB axisalignedbb = AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)this.xCoord, (double)this.yCoord, (double)this.zCoord, (double)(this.xCoord + 1), (double)(this.yCoord + 1), (double)(this.zCoord + 1)).expand(d0, d0, d0);
+         List list = this.worldObj.getEntitiesWithinAABB(EntityPlayer.class, axisalignedbb);
+         Iterator iterator = list.iterator();
 
-         EntityPlayer var7;
-         while(var6.hasNext()) {
-            var7 = (EntityPlayer)var6.next();
-            var7.addPotionEffect(new PotionEffect(this.primaryEffect, 180, var3, true));
+         EntityPlayer entityhuman;
+         while(iterator.hasNext()) {
+            entityhuman = (EntityPlayer)iterator.next();
+            entityhuman.addPotionEffect(new PotionEffect(this.primaryEffect, 180, b0, true));
          }
 
          if(this.levels >= 4 && this.primaryEffect != this.secondaryEffect && this.secondaryEffect > 0) {
-            var6 = var5.iterator();
+            iterator = list.iterator();
 
-            while(var6.hasNext()) {
-               var7 = (EntityPlayer)var6.next();
-               var7.addPotionEffect(new PotionEffect(this.secondaryEffect, 180, 0, true));
+            while(iterator.hasNext()) {
+               entityhuman = (EntityPlayer)iterator.next();
+               entityhuman.addPotionEffect(new PotionEffect(this.secondaryEffect, 180, 0, true));
             }
          }
       }
@@ -70,25 +94,25 @@
          this.field_82135_d = true;
          this.levels = 0;
 
-         for(int var1 = 1; var1 <= 4; this.levels = var1++) {
-            int var2 = this.yCoord - var1;
-            if(var2 < 1) {
+         for(int i = 1; i <= 4; this.levels = i++) {
+            int j = this.yCoord - i;
+            if(j < 1) {
                break;
             }
 
-            boolean var3 = true;
+            boolean flag = true;
 
-            for(int var4 = this.xCoord - var1; var4 <= this.xCoord + var1 && var3; ++var4) {
-               for(int var5 = this.zCoord - var1; var5 <= this.zCoord + var1; ++var5) {
-                  int var6 = this.worldObj.getBlockId(var4, var2, var5);
-                  if(var6 != Block.blockEmerald.blockID && var6 != Block.blockGold.blockID && var6 != Block.blockDiamond.blockID && var6 != Block.blockSteel.blockID) {
-                     var3 = false;
+            for(int k = this.xCoord - i; k <= this.xCoord + i && flag; ++k) {
+               for(int l = this.zCoord - i; l <= this.zCoord + i; ++l) {
+                  int i1 = this.worldObj.getBlockId(k, j, l);
+                  if(i1 != Block.blockEmerald.blockID && i1 != Block.blockGold.blockID && i1 != Block.blockDiamond.blockID && i1 != Block.blockSteel.blockID) {
+                     flag = false;
                      break;
                   }
                }
             }
 
-            if(!var3) {
+            if(!flag) {
                break;
             }
          }
@@ -112,17 +136,17 @@
       return this.levels;
    }
 
-   public void func_82128_d(int var1) {
+   public void func_82128_d(int i) {
       this.primaryEffect = 0;
 
-      for(int var2 = 0; var2 < this.levels && var2 < 3; ++var2) {
-         Potion[] var3 = effectsList[var2];
-         int var4 = var3.length;
-
-         for(int var5 = 0; var5 < var4; ++var5) {
-            Potion var6 = var3[var5];
-            if(var6.id == var1) {
-               this.primaryEffect = var1;
+      for(int j = 0; j < this.levels && j < 3; ++j) {
+         Potion[] amobeffectlist = effectsList[j];
+         int k = amobeffectlist.length;
+
+         for(int l = 0; l < k; ++l) {
+            Potion mobeffectlist = amobeffectlist[l];
+            if(mobeffectlist.id == i) {
+               this.primaryEffect = i;
                return;
             }
          }
@@ -130,17 +154,17 @@
 
    }
 
-   public void func_82127_e(int var1) {
+   public void func_82127_e(int i) {
       this.secondaryEffect = 0;
       if(this.levels >= 4) {
-         for(int var2 = 0; var2 < 4; ++var2) {
-            Potion[] var3 = effectsList[var2];
-            int var4 = var3.length;
-
-            for(int var5 = 0; var5 < var4; ++var5) {
-               Potion var6 = var3[var5];
-               if(var6.id == var1) {
-                  this.secondaryEffect = var1;
+         for(int j = 0; j < 4; ++j) {
+            Potion[] amobeffectlist = effectsList[j];
+            int k = amobeffectlist.length;
+
+            for(int l = 0; l < k; ++l) {
+               Potion mobeffectlist = amobeffectlist[l];
+               if(mobeffectlist.id == i) {
+                  this.secondaryEffect = i;
                   return;
                }
             }
@@ -150,61 +174,61 @@
    }
 
    public Packet getDescriptionPacket() {
-      NBTTagCompound var1 = new NBTTagCompound();
-      this.writeToNBT(var1);
-      return new Packet132TileEntityData(this.xCoord, this.yCoord, this.zCoord, 3, var1);
-   }
-
-   public void readFromNBT(NBTTagCompound var1) {
-      super.readFromNBT(var1);
-      this.primaryEffect = var1.getInteger("Primary");
-      this.secondaryEffect = var1.getInteger("Secondary");
-      this.levels = var1.getInteger("Levels");
-   }
-
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      var1.setInteger("Primary", this.primaryEffect);
-      var1.setInteger("Secondary", this.secondaryEffect);
-      var1.setInteger("Levels", this.levels);
+      NBTTagCompound nbttagcompound = new NBTTagCompound();
+      this.writeToNBT(nbttagcompound);
+      return new Packet132TileEntityData(this.xCoord, this.yCoord, this.zCoord, 3, nbttagcompound);
+   }
+
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      super.readFromNBT(nbttagcompound);
+      this.primaryEffect = nbttagcompound.getInteger("Primary");
+      this.secondaryEffect = nbttagcompound.getInteger("Secondary");
+      this.levels = nbttagcompound.getInteger("Levels");
+   }
+
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      nbttagcompound.setInteger("Primary", this.primaryEffect);
+      nbttagcompound.setInteger("Secondary", this.secondaryEffect);
+      nbttagcompound.setInteger("Levels", this.levels);
    }
 
    public int getSizeInventory() {
       return 1;
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      return var1 == 0?this.payment:null;
+   public ItemStack getStackInSlot(int i) {
+      return i == 0?this.payment:null;
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      if(var1 == 0 && this.payment != null) {
-         if(var2 >= this.payment.stackSize) {
-            ItemStack var3 = this.payment;
+   public ItemStack decrStackSize(int i, int j) {
+      if(i == 0 && this.payment != null) {
+         if(j >= this.payment.stackSize) {
+            ItemStack itemstack = this.payment;
             this.payment = null;
-            return var3;
+            return itemstack;
          } else {
-            this.payment.stackSize -= var2;
-            return new ItemStack(this.payment.itemID, var2, this.payment.getItemDamage());
+            this.payment.stackSize -= j;
+            return new ItemStack(this.payment.itemID, j, this.payment.getItemDamage());
          }
       } else {
          return null;
       }
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      if(var1 == 0 && this.payment != null) {
-         ItemStack var2 = this.payment;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      if(i == 0 && this.payment != null) {
+         ItemStack itemstack = this.payment;
          this.payment = null;
-         return var2;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      if(var1 == 0) {
-         this.payment = var2;
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      if(i == 0) {
+         this.payment = itemstack;
       }
 
    }
@@ -214,11 +238,11 @@
    }
 
    public int getInventoryStackLimit() {
-      return 1;
+      return this.maxStack;
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:var1.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:entityhuman.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
    }
 
    public void openChest() {}
Binary files mcp-mcdev/net/minecraft/src/TileEntityBrewingStand.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityBrewingStand.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntityBrewingStand.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityBrewingStand.java
--- mcp-mcdev/net/minecraft/src/TileEntityBrewingStand.java	2012-11-29 21:14:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityBrewingStand.java	2012-11-29 20:43:35.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IInventory;
@@ -10,15 +11,41 @@
 import net.minecraft.src.NBTTagList;
 import net.minecraft.src.PotionHelper;
 import net.minecraft.src.TileEntity;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.event.inventory.BrewEvent;
+import org.bukkit.inventory.BrewerInventory;
 
 public class TileEntityBrewingStand extends TileEntity implements IInventory {
 
-   private ItemStack[] brewingItemStacks = new ItemStack[4];
-   private int brewTime;
+   public ItemStack[] brewingItemStacks = new ItemStack[4];
+   public int brewTime;
    private int filledSlots;
    private int ingredientID;
+   public List transaction = new ArrayList();
+   private int maxStack = 1;
 
 
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public ItemStack[] getContents() {
+      return this.brewingItemStacks;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
    public String getInvName() {
       return "container.brewing";
    }
@@ -45,10 +72,10 @@
          this.ingredientID = this.brewingItemStacks[3].itemID;
       }
 
-      int var1 = this.getFilledSlots();
-      if(var1 != this.filledSlots) {
-         this.filledSlots = var1;
-         this.worldObj.setBlockMetadataWithNotify(this.xCoord, this.yCoord, this.zCoord, var1);
+      int i = this.getFilledSlots();
+      if(i != this.filledSlots) {
+         this.filledSlots = i;
+         this.worldObj.setBlockMetadataWithNotify(this.xCoord, this.yCoord, this.zCoord, i);
       }
 
       super.updateEntity();
@@ -60,31 +87,31 @@
 
    private boolean canBrew() {
       if(this.brewingItemStacks[3] != null && this.brewingItemStacks[3].stackSize > 0) {
-         ItemStack var1 = this.brewingItemStacks[3];
-         if(!Item.itemsList[var1.itemID].isPotionIngredient()) {
+         ItemStack itemstack = this.brewingItemStacks[3];
+         if(!Item.itemsList[itemstack.itemID].isPotionIngredient()) {
             return false;
          } else {
-            boolean var2 = false;
+            boolean flag = false;
 
-            for(int var3 = 0; var3 < 3; ++var3) {
-               if(this.brewingItemStacks[var3] != null && this.brewingItemStacks[var3].itemID == Item.potion.shiftedIndex) {
-                  int var4 = this.brewingItemStacks[var3].getItemDamage();
-                  int var5 = this.getPotionResult(var4, var1);
-                  if(!ItemPotion.isSplash(var4) && ItemPotion.isSplash(var5)) {
-                     var2 = true;
+            for(int i = 0; i < 3; ++i) {
+               if(this.brewingItemStacks[i] != null && this.brewingItemStacks[i].itemID == Item.potion.shiftedIndex) {
+                  int j = this.brewingItemStacks[i].getItemDamage();
+                  int k = this.getPotionResult(j, itemstack);
+                  if(!ItemPotion.isSplash(j) && ItemPotion.isSplash(k)) {
+                     flag = true;
                      break;
                   }
 
-                  List var6 = Item.potion.getEffects(var4);
-                  List var7 = Item.potion.getEffects(var5);
-                  if((var4 <= 0 || var6 != var7) && (var6 == null || !var6.equals(var7) && var7 != null) && var4 != var5) {
-                     var2 = true;
+                  List list = Item.potion.getEffects(j);
+                  List list1 = Item.potion.getEffects(k);
+                  if((j <= 0 || list != list1) && (list == null || !list.equals(list1) && list1 != null) && j != k) {
+                     flag = true;
                      break;
                   }
                }
             }
 
-            return var2;
+            return flag;
          }
       } else {
          return false;
@@ -93,110 +120,117 @@
 
    private void brewPotions() {
       if(this.canBrew()) {
-         ItemStack var1 = this.brewingItemStacks[3];
+         ItemStack itemstack = this.brewingItemStacks[3];
+         if(this.getOwner() != null) {
+            BrewEvent i = new BrewEvent(this.worldObj.getWorld().getBlockAt(this.xCoord, this.yCoord, this.zCoord), (BrewerInventory)this.getOwner().getInventory());
+            Bukkit.getPluginManager().callEvent(i);
+            if(i.isCancelled()) {
+               return;
+            }
+         }
 
-         for(int var2 = 0; var2 < 3; ++var2) {
-            if(this.brewingItemStacks[var2] != null && this.brewingItemStacks[var2].itemID == Item.potion.shiftedIndex) {
-               int var3 = this.brewingItemStacks[var2].getItemDamage();
-               int var4 = this.getPotionResult(var3, var1);
-               List var5 = Item.potion.getEffects(var3);
-               List var6 = Item.potion.getEffects(var4);
-               if((var3 <= 0 || var5 != var6) && (var5 == null || !var5.equals(var6) && var6 != null)) {
-                  if(var3 != var4) {
-                     this.brewingItemStacks[var2].setItemDamage(var4);
+         for(int var7 = 0; var7 < 3; ++var7) {
+            if(this.brewingItemStacks[var7] != null && this.brewingItemStacks[var7].itemID == Item.potion.shiftedIndex) {
+               int j = this.brewingItemStacks[var7].getItemDamage();
+               int k = this.getPotionResult(j, itemstack);
+               List list = Item.potion.getEffects(j);
+               List list1 = Item.potion.getEffects(k);
+               if((j <= 0 || list != list1) && (list == null || !list.equals(list1) && list1 != null)) {
+                  if(j != k) {
+                     this.brewingItemStacks[var7].setItemDamage(k);
                   }
-               } else if(!ItemPotion.isSplash(var3) && ItemPotion.isSplash(var4)) {
-                  this.brewingItemStacks[var2].setItemDamage(var4);
+               } else if(!ItemPotion.isSplash(j) && ItemPotion.isSplash(k)) {
+                  this.brewingItemStacks[var7].setItemDamage(k);
                }
             }
          }
 
-         if(Item.itemsList[var1.itemID].hasContainerItem()) {
-            this.brewingItemStacks[3] = new ItemStack(Item.itemsList[var1.itemID].getContainerItem());
+         if(Item.itemsList[itemstack.itemID].hasContainerItem()) {
+            this.brewingItemStacks[3] = new ItemStack(Item.itemsList[itemstack.itemID].getContainerItem());
          } else {
             --this.brewingItemStacks[3].stackSize;
             if(this.brewingItemStacks[3].stackSize <= 0) {
                this.brewingItemStacks[3] = null;
             }
          }
-
       }
+
    }
 
-   private int getPotionResult(int var1, ItemStack var2) {
-      return var2 == null?var1:(Item.itemsList[var2.itemID].isPotionIngredient()?PotionHelper.applyIngredient(var1, Item.itemsList[var2.itemID].getPotionEffect()):var1);
+   private int getPotionResult(int i, ItemStack itemstack) {
+      return itemstack == null?i:(Item.itemsList[itemstack.itemID].isPotionIngredient()?PotionHelper.applyIngredient(i, Item.itemsList[itemstack.itemID].getPotionEffect()):i);
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      super.readFromNBT(var1);
-      NBTTagList var2 = var1.getTagList("Items");
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      super.readFromNBT(nbttagcompound);
+      NBTTagList nbttaglist = nbttagcompound.getTagList("Items");
       this.brewingItemStacks = new ItemStack[this.getSizeInventory()];
 
-      for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-         NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-         byte var5 = var4.getByte("Slot");
-         if(var5 >= 0 && var5 < this.brewingItemStacks.length) {
-            this.brewingItemStacks[var5] = ItemStack.loadItemStackFromNBT(var4);
+      for(int i = 0; i < nbttaglist.tagCount(); ++i) {
+         NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbttaglist.tagAt(i);
+         byte b0 = nbttagcompound1.getByte("Slot");
+         if(b0 >= 0 && b0 < this.brewingItemStacks.length) {
+            this.brewingItemStacks[b0] = ItemStack.loadItemStackFromNBT(nbttagcompound1);
          }
       }
 
-      this.brewTime = var1.getShort("BrewTime");
+      this.brewTime = nbttagcompound.getShort("BrewTime");
    }
 
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      var1.setShort("BrewTime", (short)this.brewTime);
-      NBTTagList var2 = new NBTTagList();
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      nbttagcompound.setShort("BrewTime", (short)this.brewTime);
+      NBTTagList nbttaglist = new NBTTagList();
 
-      for(int var3 = 0; var3 < this.brewingItemStacks.length; ++var3) {
-         if(this.brewingItemStacks[var3] != null) {
-            NBTTagCompound var4 = new NBTTagCompound();
-            var4.setByte("Slot", (byte)var3);
-            this.brewingItemStacks[var3].writeToNBT(var4);
-            var2.appendTag(var4);
+      for(int i = 0; i < this.brewingItemStacks.length; ++i) {
+         if(this.brewingItemStacks[i] != null) {
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+            nbttagcompound1.setByte("Slot", (byte)i);
+            this.brewingItemStacks[i].writeToNBT(nbttagcompound1);
+            nbttaglist.appendTag(nbttagcompound1);
          }
       }
 
-      var1.setTag("Items", var2);
+      nbttagcompound.setTag("Items", nbttaglist);
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      return var1 >= 0 && var1 < this.brewingItemStacks.length?this.brewingItemStacks[var1]:null;
+   public ItemStack getStackInSlot(int i) {
+      return i >= 0 && i < this.brewingItemStacks.length?this.brewingItemStacks[i]:null;
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      if(var1 >= 0 && var1 < this.brewingItemStacks.length) {
-         ItemStack var3 = this.brewingItemStacks[var1];
-         this.brewingItemStacks[var1] = null;
-         return var3;
+   public ItemStack decrStackSize(int i, int j) {
+      if(i >= 0 && i < this.brewingItemStacks.length) {
+         ItemStack itemstack = this.brewingItemStacks[i];
+         this.brewingItemStacks[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      if(var1 >= 0 && var1 < this.brewingItemStacks.length) {
-         ItemStack var2 = this.brewingItemStacks[var1];
-         this.brewingItemStacks[var1] = null;
-         return var2;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      if(i >= 0 && i < this.brewingItemStacks.length) {
+         ItemStack itemstack = this.brewingItemStacks[i];
+         this.brewingItemStacks[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      if(var1 >= 0 && var1 < this.brewingItemStacks.length) {
-         this.brewingItemStacks[var1] = var2;
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      if(i >= 0 && i < this.brewingItemStacks.length) {
+         this.brewingItemStacks[i] = itemstack;
       }
 
    }
 
    public int getInventoryStackLimit() {
-      return 1;
+      return this.maxStack;
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:var1.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:entityhuman.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
    }
 
    public void openChest() {}
@@ -204,14 +238,14 @@
    public void closeChest() {}
 
    public int getFilledSlots() {
-      int var1 = 0;
+      int i = 0;
 
-      for(int var2 = 0; var2 < 3; ++var2) {
-         if(this.brewingItemStacks[var2] != null) {
-            var1 |= 1 << var2;
+      for(int j = 0; j < 3; ++j) {
+         if(this.brewingItemStacks[j] != null) {
+            i |= 1 << j;
          }
       }
 
-      return var1;
+      return i;
    }
 }
Binary files mcp-mcdev/net/minecraft/src/TileEntityChest.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityChest.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntityChest.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityChest.java
--- mcp-mcdev/net/minecraft/src/TileEntityChest.java	2012-11-29 21:14:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityChest.java	2012-11-29 20:43:34.000000000 -0800
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.src.AxisAlignedBB;
@@ -12,10 +13,11 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.NBTTagList;
 import net.minecraft.src.TileEntity;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 
 public class TileEntityChest extends TileEntity implements IInventory {
 
-   private ItemStack[] chestContents = new ItemStack[36];
+   private ItemStack[] chestContents = new ItemStack[27];
    public boolean adjacentChestChecked = false;
    public TileEntityChest adjacentChestZNeg;
    public TileEntityChest adjacentChestXPos;
@@ -25,52 +27,74 @@
    public float prevLidAngle;
    public int numUsingPlayers;
    private int ticksSinceSync;
+   public List transaction = new ArrayList();
+   private int maxStack = 64;
 
 
+   public ItemStack[] getContents() {
+      return this.chestContents;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
    public int getSizeInventory() {
       return 27;
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      return this.chestContents[var1];
+   public ItemStack getStackInSlot(int i) {
+      return this.chestContents[i];
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      if(this.chestContents[var1] != null) {
-         ItemStack var3;
-         if(this.chestContents[var1].stackSize <= var2) {
-            var3 = this.chestContents[var1];
-            this.chestContents[var1] = null;
+   public ItemStack decrStackSize(int i, int j) {
+      if(this.chestContents[i] != null) {
+         ItemStack itemstack;
+         if(this.chestContents[i].stackSize <= j) {
+            itemstack = this.chestContents[i];
+            this.chestContents[i] = null;
             this.onInventoryChanged();
-            return var3;
+            return itemstack;
          } else {
-            var3 = this.chestContents[var1].splitStack(var2);
-            if(this.chestContents[var1].stackSize == 0) {
-               this.chestContents[var1] = null;
+            itemstack = this.chestContents[i].splitStack(j);
+            if(this.chestContents[i].stackSize == 0) {
+               this.chestContents[i] = null;
             }
 
             this.onInventoryChanged();
-            return var3;
+            return itemstack;
          }
       } else {
          return null;
       }
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      if(this.chestContents[var1] != null) {
-         ItemStack var2 = this.chestContents[var1];
-         this.chestContents[var1] = null;
-         return var2;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      if(this.chestContents[i] != null) {
+         ItemStack itemstack = this.chestContents[i];
+         this.chestContents[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      this.chestContents[var1] = var2;
-      if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-         var2.stackSize = this.getInventoryStackLimit();
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      this.chestContents[i] = itemstack;
+      if(itemstack != null && itemstack.stackSize > this.getInventoryStackLimit()) {
+         itemstack.stackSize = this.getInventoryStackLimit();
       }
 
       this.onInventoryChanged();
@@ -80,43 +104,43 @@
       return "container.chest";
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      super.readFromNBT(var1);
-      NBTTagList var2 = var1.getTagList("Items");
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      super.readFromNBT(nbttagcompound);
+      NBTTagList nbttaglist = nbttagcompound.getTagList("Items");
       this.chestContents = new ItemStack[this.getSizeInventory()];
 
-      for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-         NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-         int var5 = var4.getByte("Slot") & 255;
-         if(var5 >= 0 && var5 < this.chestContents.length) {
-            this.chestContents[var5] = ItemStack.loadItemStackFromNBT(var4);
+      for(int i = 0; i < nbttaglist.tagCount(); ++i) {
+         NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbttaglist.tagAt(i);
+         int j = nbttagcompound1.getByte("Slot") & 255;
+         if(j >= 0 && j < this.chestContents.length) {
+            this.chestContents[j] = ItemStack.loadItemStackFromNBT(nbttagcompound1);
          }
       }
 
    }
 
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      NBTTagList var2 = new NBTTagList();
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      NBTTagList nbttaglist = new NBTTagList();
 
-      for(int var3 = 0; var3 < this.chestContents.length; ++var3) {
-         if(this.chestContents[var3] != null) {
-            NBTTagCompound var4 = new NBTTagCompound();
-            var4.setByte("Slot", (byte)var3);
-            this.chestContents[var3].writeToNBT(var4);
-            var2.appendTag(var4);
+      for(int i = 0; i < this.chestContents.length; ++i) {
+         if(this.chestContents[i] != null) {
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+            nbttagcompound1.setByte("Slot", (byte)i);
+            this.chestContents[i].writeToNBT(nbttagcompound1);
+            nbttaglist.appendTag(nbttagcompound1);
          }
       }
 
-      var1.setTag("Items", var2);
+      nbttagcompound.setTag("Items", nbttaglist);
    }
 
    public int getInventoryStackLimit() {
-      return 64;
+      return this.maxStack;
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:var1.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.worldObj == null?true:(this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:entityhuman.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D);
    }
 
    public void updateContainingBlockInfo() {
@@ -124,28 +148,28 @@
       this.adjacentChestChecked = false;
    }
 
-   private void func_90009_a(TileEntityChest var1, int var2) {
-      if(var1.isInvalid()) {
+   private void func_90009_a(TileEntityChest tileentitychest, int i) {
+      if(tileentitychest.isInvalid()) {
          this.adjacentChestChecked = false;
       } else if(this.adjacentChestChecked) {
-         switch(var2) {
+         switch(i) {
          case 0:
-            if(this.adjacentChestZPosition != var1) {
+            if(this.adjacentChestZPosition != tileentitychest) {
                this.adjacentChestChecked = false;
             }
             break;
          case 1:
-            if(this.adjacentChestXNeg != var1) {
+            if(this.adjacentChestXNeg != tileentitychest) {
                this.adjacentChestChecked = false;
             }
             break;
          case 2:
-            if(this.adjacentChestZNeg != var1) {
+            if(this.adjacentChestZNeg != tileentitychest) {
                this.adjacentChestChecked = false;
             }
             break;
          case 3:
-            if(this.adjacentChestXPos != var1) {
+            if(this.adjacentChestXPos != tileentitychest) {
                this.adjacentChestChecked = false;
             }
          }
@@ -181,108 +205,114 @@
          }
 
          if(this.adjacentChestZPosition != null) {
-            this.adjacentChestZPosition.func_90009_a(this, 2);
+            this.adjacentChestZPosition.func_90009_a(this, 1);
          }
 
          if(this.adjacentChestXPos != null) {
-            this.adjacentChestXPos.func_90009_a(this, 1);
+            this.adjacentChestXPos.func_90009_a(this, 2);
          }
 
          if(this.adjacentChestXNeg != null) {
             this.adjacentChestXNeg.func_90009_a(this, 3);
          }
-
       }
+
    }
 
    public void updateEntity() {
       super.updateEntity();
-      this.checkForAdjacentChests();
-      ++this.ticksSinceSync;
-      float var1;
-      if(!this.worldObj.isRemote && this.numUsingPlayers != 0 && (this.ticksSinceSync + this.xCoord + this.yCoord + this.zCoord) % 200 == 0) {
-         this.numUsingPlayers = 0;
-         var1 = 5.0F;
-         List var2 = this.worldObj.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)this.xCoord - var1), (double)((float)this.yCoord - var1), (double)((float)this.zCoord - var1), (double)((float)(this.xCoord + 1) + var1), (double)((float)(this.yCoord + 1) + var1), (double)((float)(this.zCoord + 1) + var1)));
-         Iterator var3 = var2.iterator();
-
-         while(var3.hasNext()) {
-            EntityPlayer var4 = (EntityPlayer)var3.next();
-            if(var4.openContainer instanceof ContainerChest) {
-               IInventory var5 = ((ContainerChest)var4.openContainer).func_85151_d();
-               if(var5 == this || var5 instanceof InventoryLargeChest && ((InventoryLargeChest)var5).func_90010_a(this)) {
-                  ++this.numUsingPlayers;
+      if(this.worldObj != null) {
+         this.checkForAdjacentChests();
+         ++this.ticksSinceSync;
+         float f;
+         if(!this.worldObj.isRemote && this.numUsingPlayers != 0 && (this.ticksSinceSync + this.xCoord + this.yCoord + this.zCoord) % 200 == 0) {
+            this.numUsingPlayers = 0;
+            f = 5.0F;
+            List list = this.worldObj.getEntitiesWithinAABB(EntityPlayer.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)((float)this.xCoord - f), (double)((float)this.yCoord - f), (double)((float)this.zCoord - f), (double)((float)(this.xCoord + 1) + f), (double)((float)(this.yCoord + 1) + f), (double)((float)(this.zCoord + 1) + f)));
+            Iterator iterator = list.iterator();
+
+            while(iterator.hasNext()) {
+               EntityPlayer f1 = (EntityPlayer)iterator.next();
+               if(f1.openContainer instanceof ContainerChest) {
+                  IInventory f2 = ((ContainerChest)f1.openContainer).func_85151_d();
+                  if(f2 == this || f2 instanceof InventoryLargeChest && ((InventoryLargeChest)f2).func_90010_a(this)) {
+                     ++this.numUsingPlayers;
+                  }
                }
             }
          }
-      }
 
-      this.prevLidAngle = this.lidAngle;
-      var1 = 0.1F;
-      double var8;
-      if(this.numUsingPlayers > 0 && this.lidAngle == 0.0F && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null) {
-         double var6 = (double)this.xCoord + 0.5D;
-         var8 = (double)this.zCoord + 0.5D;
-         if(this.adjacentChestZPosition != null) {
-            var8 += 0.5D;
-         }
-
-         if(this.adjacentChestXPos != null) {
-            var6 += 0.5D;
-         }
+         this.prevLidAngle = this.lidAngle;
+         f = 0.1F;
+         double d0;
+         if(this.numUsingPlayers > 0 && this.lidAngle == 0.0F && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null) {
+            double d1 = (double)this.xCoord + 0.5D;
+            d0 = (double)this.zCoord + 0.5D;
+            if(this.adjacentChestZPosition != null) {
+               d0 += 0.5D;
+            }
 
-         this.worldObj.playSoundEffect(var6, (double)this.yCoord + 0.5D, var8, "random.chestopen", 0.5F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
-      }
+            if(this.adjacentChestXPos != null) {
+               d1 += 0.5D;
+            }
 
-      if(this.numUsingPlayers == 0 && this.lidAngle > 0.0F || this.numUsingPlayers > 0 && this.lidAngle < 1.0F) {
-         float var12 = this.lidAngle;
-         if(this.numUsingPlayers > 0) {
-            this.lidAngle += var1;
-         } else {
-            this.lidAngle -= var1;
+            this.worldObj.playSoundEffect(d1, (double)this.yCoord + 0.5D, d0, "random.chestopen", 0.5F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
          }
 
-         if(this.lidAngle > 1.0F) {
-            this.lidAngle = 1.0F;
-         }
+         if(this.numUsingPlayers == 0 && this.lidAngle > 0.0F || this.numUsingPlayers > 0 && this.lidAngle < 1.0F) {
+            float var12 = this.lidAngle;
+            if(this.numUsingPlayers > 0) {
+               this.lidAngle += f;
+            } else {
+               this.lidAngle -= f;
+            }
 
-         float var13 = 0.5F;
-         if(this.lidAngle < var13 && var12 >= var13 && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null) {
-            var8 = (double)this.xCoord + 0.5D;
-            double var10 = (double)this.zCoord + 0.5D;
-            if(this.adjacentChestZPosition != null) {
-               var10 += 0.5D;
+            if(this.lidAngle > 1.0F) {
+               this.lidAngle = 1.0F;
             }
 
-            if(this.adjacentChestXPos != null) {
-               var8 += 0.5D;
+            float var13 = 0.5F;
+            if(this.lidAngle < var13 && var12 >= var13 && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null) {
+               d0 = (double)this.xCoord + 0.5D;
+               double d2 = (double)this.zCoord + 0.5D;
+               if(this.adjacentChestZPosition != null) {
+                  d2 += 0.5D;
+               }
+
+               if(this.adjacentChestXPos != null) {
+                  d0 += 0.5D;
+               }
+
+               this.worldObj.playSoundEffect(d0, (double)this.yCoord + 0.5D, d2, "random.chestclosed", 0.5F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
             }
 
-            this.worldObj.playSoundEffect(var8, (double)this.yCoord + 0.5D, var10, "random.chestclosed", 0.5F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
+            if(this.lidAngle < 0.0F) {
+               this.lidAngle = 0.0F;
+            }
          }
 
-         if(this.lidAngle < 0.0F) {
-            this.lidAngle = 0.0F;
-         }
       }
-
    }
 
-   public void receiveClientEvent(int var1, int var2) {
-      if(var1 == 1) {
-         this.numUsingPlayers = var2;
+   public void receiveClientEvent(int i, int j) {
+      if(i == 1) {
+         this.numUsingPlayers = j;
       }
 
    }
 
    public void openChest() {
       ++this.numUsingPlayers;
-      this.worldObj.addBlockEvent(this.xCoord, this.yCoord, this.zCoord, Block.chest.blockID, 1, this.numUsingPlayers);
+      if(this.worldObj != null) {
+         this.worldObj.addBlockEvent(this.xCoord, this.yCoord, this.zCoord, Block.chest.blockID, 1, this.numUsingPlayers);
+      }
    }
 
    public void closeChest() {
       --this.numUsingPlayers;
-      this.worldObj.addBlockEvent(this.xCoord, this.yCoord, this.zCoord, Block.chest.blockID, 1, this.numUsingPlayers);
+      if(this.worldObj != null) {
+         this.worldObj.addBlockEvent(this.xCoord, this.yCoord, this.zCoord, Block.chest.blockID, 1, this.numUsingPlayers);
+      }
    }
 
    public void invalidate() {
Binary files mcp-mcdev/net/minecraft/src/TileEntityCommandBlock.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityCommandBlock.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntityCommandBlock.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityCommandBlock.java
--- mcp-mcdev/net/minecraft/src/TileEntityCommandBlock.java	2012-11-29 21:14:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityCommandBlock.java	2012-11-29 20:43:33.000000000 -0800
@@ -1,58 +1,119 @@
 package net.minecraft.src;
 
+import com.google.common.base.Joiner;
+import java.util.ArrayList;
+import java.util.Arrays;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.ChunkCoordinates;
-import net.minecraft.src.ICommandManager;
+import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.ICommandSender;
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.Packet;
 import net.minecraft.src.Packet132TileEntityData;
+import net.minecraft.src.PlayerSelector;
 import net.minecraft.src.TileEntity;
 import net.minecraft.src.World;
+import org.bukkit.command.BlockCommandSender;
+import org.bukkit.command.SimpleCommandMap;
+import org.bukkit.craftbukkit.command.CraftBlockCommandSender;
 
 public class TileEntityCommandBlock extends TileEntity implements ICommandSender {
 
    private String command = "";
+   private final BlockCommandSender sender = new CraftBlockCommandSender(this);
 
 
-   public void setCommand(String var1) {
-      this.command = var1;
+   public void setCommand(String s) {
+      this.command = s;
       this.onInventoryChanged();
    }
 
-   public void executeCommandOnPowered(World var1) {
-      if(!var1.isRemote) {
-         MinecraftServer var2 = MinecraftServer.getServer();
-         if(var2 != null && var2.isCommandBlockEnabled()) {
-            ICommandManager var3 = var2.getCommandManager();
-            var3.executeCommand(this, this.command);
+   public void executeCommandOnPowered(World world) {
+      if(!world.isRemote) {
+         MinecraftServer minecraftserver = MinecraftServer.getServer();
+         if(minecraftserver != null && minecraftserver.isCommandBlockEnabled()) {
+            SimpleCommandMap commandMap = minecraftserver.server.getCommandMap();
+            Joiner joiner = Joiner.on(" ");
+            String command = this.command;
+            if(this.command.startsWith("/")) {
+               command = this.command.substring(1);
+            }
+
+            String[] args = command.split(" ");
+            ArrayList commands = new ArrayList();
+            if(args[0].equalsIgnoreCase("stop") || args[0].equalsIgnoreCase("kick") || args[0].equalsIgnoreCase("op") || args[0].equalsIgnoreCase("deop") || args[0].equalsIgnoreCase("ban") || args[0].equalsIgnoreCase("ban-ip") || args[0].equalsIgnoreCase("pardon") || args[0].equalsIgnoreCase("pardon-ip") || args[0].equalsIgnoreCase("reload")) {
+               return;
+            }
+
+            if(commandMap.getCommand(args[0]) == null) {
+               return;
+            }
+
+            commands.add(args);
+            ArrayList newCommands = new ArrayList();
+
+            int i;
+            for(i = 0; i < args.length; ++i) {
+               if(PlayerSelector.func_82378_b(args[i])) {
+                  for(int temp = 0; temp < commands.size(); ++temp) {
+                     newCommands.addAll(this.buildCommands((String[])commands.get(temp), i));
+                  }
+
+                  ArrayList var11 = commands;
+                  commands = newCommands;
+                  newCommands = var11;
+                  var11.clear();
+               }
+            }
+
+            for(i = 0; i < commands.size(); ++i) {
+               commandMap.dispatch(this.sender, joiner.join(Arrays.asList((Object[])commands.get(i))));
+            }
          }
+      }
+
+   }
+
+   private ArrayList buildCommands(String[] args, int pos) {
+      ArrayList commands = new ArrayList();
+      EntityPlayerMP[] players = PlayerSelector.func_82380_c(this, args[pos]);
+      if(players != null) {
+         EntityPlayerMP[] arr$ = players;
+         int len$ = players.length;
 
+         for(int i$ = 0; i$ < len$; ++i$) {
+            EntityPlayerMP player = arr$[i$];
+            String[] command = (String[])args.clone();
+            command[pos] = player.getEntityName();
+            commands.add(command);
+         }
       }
+
+      return commands;
    }
 
    public String getCommandSenderName() {
       return "@";
    }
 
-   public void sendChatToPlayer(String var1) {}
+   public void sendChatToPlayer(String s) {}
 
-   public boolean canCommandSenderUseCommand(int var1, String var2) {
-      return var1 <= 2;
+   public boolean canCommandSenderUseCommand(int i, String s) {
+      return i <= 2;
    }
 
-   public String translateString(String var1, Object ... var2) {
-      return var1;
+   public String translateString(String s, Object ... aobject) {
+      return s;
    }
 
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      var1.setString("Command", this.command);
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      nbttagcompound.setString("Command", this.command);
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      super.readFromNBT(var1);
-      this.command = var1.getString("Command");
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      super.readFromNBT(nbttagcompound);
+      this.command = nbttagcompound.getString("Command");
    }
 
    public ChunkCoordinates getCommandSenderPosition() {
@@ -60,8 +121,8 @@
    }
 
    public Packet getDescriptionPacket() {
-      NBTTagCompound var1 = new NBTTagCompound();
-      this.writeToNBT(var1);
-      return new Packet132TileEntityData(this.xCoord, this.yCoord, this.zCoord, 2, var1);
+      NBTTagCompound nbttagcompound = new NBTTagCompound();
+      this.writeToNBT(nbttagcompound);
+      return new Packet132TileEntityData(this.xCoord, this.yCoord, this.zCoord, 2, nbttagcompound);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/TileEntityDispenser.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityDispenser.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntityDispenser.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityDispenser.java
--- mcp-mcdev/net/minecraft/src/TileEntityDispenser.java	2012-11-29 21:14:22.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityDispenser.java	2012-11-29 20:43:33.000000000 -0800
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Random;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IInventory;
@@ -7,80 +9,103 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.NBTTagList;
 import net.minecraft.src.TileEntity;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 
 public class TileEntityDispenser extends TileEntity implements IInventory {
 
    private ItemStack[] dispenserContents = new ItemStack[9];
    private Random dispenserRandom = new Random();
+   public List transaction = new ArrayList();
+   private int maxStack = 64;
 
 
+   public ItemStack[] getContents() {
+      return this.dispenserContents;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
    public int getSizeInventory() {
       return 9;
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      return this.dispenserContents[var1];
+   public ItemStack getStackInSlot(int i) {
+      return this.dispenserContents[i];
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      if(this.dispenserContents[var1] != null) {
-         ItemStack var3;
-         if(this.dispenserContents[var1].stackSize <= var2) {
-            var3 = this.dispenserContents[var1];
-            this.dispenserContents[var1] = null;
+   public ItemStack decrStackSize(int i, int j) {
+      if(this.dispenserContents[i] != null) {
+         ItemStack itemstack;
+         if(this.dispenserContents[i].stackSize <= j) {
+            itemstack = this.dispenserContents[i];
+            this.dispenserContents[i] = null;
             this.onInventoryChanged();
-            return var3;
+            return itemstack;
          } else {
-            var3 = this.dispenserContents[var1].splitStack(var2);
-            if(this.dispenserContents[var1].stackSize == 0) {
-               this.dispenserContents[var1] = null;
+            itemstack = this.dispenserContents[i].splitStack(j);
+            if(this.dispenserContents[i].stackSize == 0) {
+               this.dispenserContents[i] = null;
             }
 
             this.onInventoryChanged();
-            return var3;
+            return itemstack;
          }
       } else {
          return null;
       }
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      if(this.dispenserContents[var1] != null) {
-         ItemStack var2 = this.dispenserContents[var1];
-         this.dispenserContents[var1] = null;
-         return var2;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      if(this.dispenserContents[i] != null) {
+         ItemStack itemstack = this.dispenserContents[i];
+         this.dispenserContents[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
    public int getRandomStackFromInventory() {
-      int var1 = -1;
-      int var2 = 1;
+      int i = -1;
+      int j = 1;
 
-      for(int var3 = 0; var3 < this.dispenserContents.length; ++var3) {
-         if(this.dispenserContents[var3] != null && this.dispenserRandom.nextInt(var2++) == 0) {
-            var1 = var3;
+      for(int k = 0; k < this.dispenserContents.length; ++k) {
+         if(this.dispenserContents[k] != null && this.dispenserRandom.nextInt(j++) == 0 && this.dispenserContents[k].stackSize != 0) {
+            i = k;
          }
       }
 
-      return var1;
+      return i;
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      this.dispenserContents[var1] = var2;
-      if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-         var2.stackSize = this.getInventoryStackLimit();
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      this.dispenserContents[i] = itemstack;
+      if(itemstack != null && itemstack.stackSize > this.getInventoryStackLimit()) {
+         itemstack.stackSize = this.getInventoryStackLimit();
       }
 
       this.onInventoryChanged();
    }
 
-   public int func_70360_a(ItemStack var1) {
-      for(int var2 = 0; var2 < this.dispenserContents.length; ++var2) {
-         if(this.dispenserContents[var2] == null || this.dispenserContents[var2].itemID == 0) {
-            this.dispenserContents[var2] = var1;
-            return var2;
+   public int func_70360_a(ItemStack itemstack) {
+      for(int i = 0; i < this.dispenserContents.length; ++i) {
+         if(this.dispenserContents[i] == null || this.dispenserContents[i].itemID == 0) {
+            this.dispenserContents[i] = itemstack;
+            return i;
          }
       }
 
@@ -91,43 +116,43 @@
       return "container.dispenser";
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      super.readFromNBT(var1);
-      NBTTagList var2 = var1.getTagList("Items");
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      super.readFromNBT(nbttagcompound);
+      NBTTagList nbttaglist = nbttagcompound.getTagList("Items");
       this.dispenserContents = new ItemStack[this.getSizeInventory()];
 
-      for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-         NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-         int var5 = var4.getByte("Slot") & 255;
-         if(var5 >= 0 && var5 < this.dispenserContents.length) {
-            this.dispenserContents[var5] = ItemStack.loadItemStackFromNBT(var4);
+      for(int i = 0; i < nbttaglist.tagCount(); ++i) {
+         NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbttaglist.tagAt(i);
+         int j = nbttagcompound1.getByte("Slot") & 255;
+         if(j >= 0 && j < this.dispenserContents.length) {
+            this.dispenserContents[j] = ItemStack.loadItemStackFromNBT(nbttagcompound1);
          }
       }
 
    }
 
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      NBTTagList var2 = new NBTTagList();
-
-      for(int var3 = 0; var3 < this.dispenserContents.length; ++var3) {
-         if(this.dispenserContents[var3] != null) {
-            NBTTagCompound var4 = new NBTTagCompound();
-            var4.setByte("Slot", (byte)var3);
-            this.dispenserContents[var3].writeToNBT(var4);
-            var2.appendTag(var4);
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      NBTTagList nbttaglist = new NBTTagList();
+
+      for(int i = 0; i < this.dispenserContents.length; ++i) {
+         if(this.dispenserContents[i] != null) {
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+            nbttagcompound1.setByte("Slot", (byte)i);
+            this.dispenserContents[i].writeToNBT(nbttagcompound1);
+            nbttaglist.appendTag(nbttagcompound1);
          }
       }
 
-      var1.setTag("Items", var2);
+      nbttagcompound.setTag("Items", nbttaglist);
    }
 
    public int getInventoryStackLimit() {
-      return 64;
+      return this.maxStack;
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:var1.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:entityhuman.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
    }
 
    public void openChest() {}
Binary files mcp-mcdev/net/minecraft/src/TileEntityFurnace.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityFurnace.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntityFurnace.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityFurnace.java
--- mcp-mcdev/net/minecraft/src/TileEntityFurnace.java	2012-11-29 21:14:21.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityFurnace.java	2012-11-29 20:43:33.000000000 -0800
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.src.Block;
 import net.minecraft.src.BlockFurnace;
 import net.minecraft.src.EntityPlayer;
@@ -14,6 +16,10 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.NBTTagList;
 import net.minecraft.src.TileEntity;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
 
 public class TileEntityFurnace extends TileEntity implements IInventory {
 
@@ -21,50 +27,73 @@
    public int furnaceBurnTime = 0;
    public int currentItemBurnTime = 0;
    public int furnaceCookTime = 0;
+   private int lastTick = (int)(System.currentTimeMillis() / 50L);
+   private int maxStack = 64;
+   public List transaction = new ArrayList();
 
 
+   public ItemStack[] getContents() {
+      return this.furnaceItemStacks;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      this.transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      this.transaction.remove(who);
+   }
+
+   public List getViewers() {
+      return this.transaction;
+   }
+
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
    public int getSizeInventory() {
       return this.furnaceItemStacks.length;
    }
 
-   public ItemStack getStackInSlot(int var1) {
-      return this.furnaceItemStacks[var1];
+   public ItemStack getStackInSlot(int i) {
+      return this.furnaceItemStacks[i];
    }
 
-   public ItemStack decrStackSize(int var1, int var2) {
-      if(this.furnaceItemStacks[var1] != null) {
-         ItemStack var3;
-         if(this.furnaceItemStacks[var1].stackSize <= var2) {
-            var3 = this.furnaceItemStacks[var1];
-            this.furnaceItemStacks[var1] = null;
-            return var3;
+   public ItemStack decrStackSize(int i, int j) {
+      if(this.furnaceItemStacks[i] != null) {
+         ItemStack itemstack;
+         if(this.furnaceItemStacks[i].stackSize <= j) {
+            itemstack = this.furnaceItemStacks[i];
+            this.furnaceItemStacks[i] = null;
+            return itemstack;
          } else {
-            var3 = this.furnaceItemStacks[var1].splitStack(var2);
-            if(this.furnaceItemStacks[var1].stackSize == 0) {
-               this.furnaceItemStacks[var1] = null;
+            itemstack = this.furnaceItemStacks[i].splitStack(j);
+            if(this.furnaceItemStacks[i].stackSize == 0) {
+               this.furnaceItemStacks[i] = null;
             }
 
-            return var3;
+            return itemstack;
          }
       } else {
          return null;
       }
    }
 
-   public ItemStack getStackInSlotOnClosing(int var1) {
-      if(this.furnaceItemStacks[var1] != null) {
-         ItemStack var2 = this.furnaceItemStacks[var1];
-         this.furnaceItemStacks[var1] = null;
-         return var2;
+   public ItemStack getStackInSlotOnClosing(int i) {
+      if(this.furnaceItemStacks[i] != null) {
+         ItemStack itemstack = this.furnaceItemStacks[i];
+         this.furnaceItemStacks[i] = null;
+         return itemstack;
       } else {
          return null;
       }
    }
 
-   public void setInventorySlotContents(int var1, ItemStack var2) {
-      this.furnaceItemStacks[var1] = var2;
-      if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-         var2.stackSize = this.getInventoryStackLimit();
+   public void setInventorySlotContents(int i, ItemStack itemstack) {
+      this.furnaceItemStacks[i] = itemstack;
+      if(itemstack != null && itemstack.stackSize > this.getInventoryStackLimit()) {
+         itemstack.stackSize = this.getInventoryStackLimit();
       }
 
    }
@@ -73,44 +102,44 @@
       return "container.furnace";
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      super.readFromNBT(var1);
-      NBTTagList var2 = var1.getTagList("Items");
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      super.readFromNBT(nbttagcompound);
+      NBTTagList nbttaglist = nbttagcompound.getTagList("Items");
       this.furnaceItemStacks = new ItemStack[this.getSizeInventory()];
 
-      for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-         NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-         byte var5 = var4.getByte("Slot");
-         if(var5 >= 0 && var5 < this.furnaceItemStacks.length) {
-            this.furnaceItemStacks[var5] = ItemStack.loadItemStackFromNBT(var4);
+      for(int i = 0; i < nbttaglist.tagCount(); ++i) {
+         NBTTagCompound nbttagcompound1 = (NBTTagCompound)nbttaglist.tagAt(i);
+         byte b0 = nbttagcompound1.getByte("Slot");
+         if(b0 >= 0 && b0 < this.furnaceItemStacks.length) {
+            this.furnaceItemStacks[b0] = ItemStack.loadItemStackFromNBT(nbttagcompound1);
          }
       }
 
-      this.furnaceBurnTime = var1.getShort("BurnTime");
-      this.furnaceCookTime = var1.getShort("CookTime");
+      this.furnaceBurnTime = nbttagcompound.getShort("BurnTime");
+      this.furnaceCookTime = nbttagcompound.getShort("CookTime");
       this.currentItemBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
    }
 
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      var1.setShort("BurnTime", (short)this.furnaceBurnTime);
-      var1.setShort("CookTime", (short)this.furnaceCookTime);
-      NBTTagList var2 = new NBTTagList();
-
-      for(int var3 = 0; var3 < this.furnaceItemStacks.length; ++var3) {
-         if(this.furnaceItemStacks[var3] != null) {
-            NBTTagCompound var4 = new NBTTagCompound();
-            var4.setByte("Slot", (byte)var3);
-            this.furnaceItemStacks[var3].writeToNBT(var4);
-            var2.appendTag(var4);
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      nbttagcompound.setShort("BurnTime", (short)this.furnaceBurnTime);
+      nbttagcompound.setShort("CookTime", (short)this.furnaceCookTime);
+      NBTTagList nbttaglist = new NBTTagList();
+
+      for(int i = 0; i < this.furnaceItemStacks.length; ++i) {
+         if(this.furnaceItemStacks[i] != null) {
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+            nbttagcompound1.setByte("Slot", (byte)i);
+            this.furnaceItemStacks[i].writeToNBT(nbttagcompound1);
+            nbttaglist.appendTag(nbttagcompound1);
          }
       }
 
-      var1.setTag("Items", var2);
+      nbttagcompound.setTag("Items", nbttaglist);
    }
 
    public int getInventoryStackLimit() {
-      return 64;
+      return this.maxStack;
    }
 
    public boolean isBurning() {
@@ -118,45 +147,56 @@
    }
 
    public void updateEntity() {
-      boolean var1 = this.furnaceBurnTime > 0;
-      boolean var2 = false;
+      boolean flag = this.furnaceBurnTime > 0;
+      boolean flag1 = false;
+      int currentTick = (int)(System.currentTimeMillis() / 50L);
+      int elapsedTicks = currentTick - this.lastTick;
+      this.lastTick = currentTick;
+      if(this.isBurning() && this.canSmelt()) {
+         this.furnaceCookTime += elapsedTicks;
+         if(this.furnaceCookTime >= 200) {
+            this.furnaceCookTime %= 200;
+            this.smeltItem();
+            flag1 = true;
+         }
+      } else {
+         this.furnaceCookTime = 0;
+      }
+
       if(this.furnaceBurnTime > 0) {
-         --this.furnaceBurnTime;
+         this.furnaceBurnTime -= elapsedTicks;
       }
 
       if(!this.worldObj.isRemote) {
-         if(this.furnaceBurnTime == 0 && this.canSmelt()) {
-            this.currentItemBurnTime = this.furnaceBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
-            if(this.furnaceBurnTime > 0) {
-               var2 = true;
+         if(this.furnaceBurnTime <= 0 && this.canSmelt() && this.furnaceItemStacks[1] != null) {
+            CraftItemStack fuel = new CraftItemStack(this.furnaceItemStacks[1]);
+            FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(this.worldObj.getWorld().getBlockAt(this.xCoord, this.yCoord, this.zCoord), fuel, getItemBurnTime(this.furnaceItemStacks[1]));
+            this.worldObj.getServer().getPluginManager().callEvent(furnaceBurnEvent);
+            if(furnaceBurnEvent.isCancelled()) {
+               return;
+            }
+
+            this.currentItemBurnTime = furnaceBurnEvent.getBurnTime();
+            this.furnaceBurnTime += this.currentItemBurnTime;
+            if(this.furnaceBurnTime > 0 && furnaceBurnEvent.isBurning()) {
+               flag1 = true;
                if(this.furnaceItemStacks[1] != null) {
                   --this.furnaceItemStacks[1].stackSize;
                   if(this.furnaceItemStacks[1].stackSize == 0) {
-                     Item var3 = this.furnaceItemStacks[1].getItem().getContainerItem();
-                     this.furnaceItemStacks[1] = var3 != null?new ItemStack(var3):null;
+                     Item item = this.furnaceItemStacks[1].getItem().getContainerItem();
+                     this.furnaceItemStacks[1] = item != null?new ItemStack(item):null;
                   }
                }
             }
          }
 
-         if(this.isBurning() && this.canSmelt()) {
-            ++this.furnaceCookTime;
-            if(this.furnaceCookTime == 200) {
-               this.furnaceCookTime = 0;
-               this.smeltItem();
-               var2 = true;
-            }
-         } else {
-            this.furnaceCookTime = 0;
-         }
-
-         if(var1 != this.furnaceBurnTime > 0) {
-            var2 = true;
+         if(flag != this.furnaceBurnTime > 0) {
+            flag1 = true;
             BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
          }
       }
 
-      if(var2) {
+      if(flag1) {
          this.onInventoryChanged();
       }
 
@@ -166,55 +206,64 @@
       if(this.furnaceItemStacks[0] == null) {
          return false;
       } else {
-         ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
-         return var1 == null?false:(this.furnaceItemStacks[2] == null?true:(!this.furnaceItemStacks[2].isItemEqual(var1)?false:(this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize()?true:this.furnaceItemStacks[2].stackSize < var1.getMaxStackSize())));
+         ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
+         return itemstack == null?false:(this.furnaceItemStacks[2] == null?true:(!this.furnaceItemStacks[2].isItemEqual(itemstack)?false:(this.furnaceItemStacks[2].stackSize + itemstack.stackSize <= this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize()?true:this.furnaceItemStacks[2].stackSize + itemstack.stackSize <= itemstack.getMaxStackSize())));
       }
    }
 
    public void smeltItem() {
       if(this.canSmelt()) {
-         ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
+         ItemStack itemstack = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
+         CraftItemStack source = new CraftItemStack(this.furnaceItemStacks[0]);
+         CraftItemStack result = new CraftItemStack(itemstack.copy());
+         FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(this.worldObj.getWorld().getBlockAt(this.xCoord, this.yCoord, this.zCoord), source, result);
+         this.worldObj.getServer().getPluginManager().callEvent(furnaceSmeltEvent);
+         if(furnaceSmeltEvent.isCancelled()) {
+            return;
+         }
+
+         itemstack = CraftItemStack.createNMSItemStack(furnaceSmeltEvent.getResult());
          if(this.furnaceItemStacks[2] == null) {
-            this.furnaceItemStacks[2] = var1.copy();
-         } else if(this.furnaceItemStacks[2].itemID == var1.itemID) {
-            ++this.furnaceItemStacks[2].stackSize;
+            this.furnaceItemStacks[2] = itemstack.copy();
+         } else if(this.furnaceItemStacks[2].itemID == itemstack.itemID && this.furnaceItemStacks[2].getItemDamage() == itemstack.getItemDamage()) {
+            this.furnaceItemStacks[2].stackSize += itemstack.stackSize;
          }
 
          --this.furnaceItemStacks[0].stackSize;
          if(this.furnaceItemStacks[0].stackSize <= 0) {
             this.furnaceItemStacks[0] = null;
          }
-
       }
+
    }
 
-   public static int getItemBurnTime(ItemStack var0) {
-      if(var0 == null) {
+   public static int getItemBurnTime(ItemStack itemstack) {
+      if(itemstack == null) {
          return 0;
       } else {
-         int var1 = var0.getItem().shiftedIndex;
-         Item var2 = var0.getItem();
-         if(var1 < 256 && Block.blocksList[var1] != null) {
-            Block var3 = Block.blocksList[var1];
-            if(var3 == Block.woodSingleSlab) {
+         int i = itemstack.getItem().shiftedIndex;
+         Item item = itemstack.getItem();
+         if(i < 256 && Block.blocksList[i] != null) {
+            Block block = Block.blocksList[i];
+            if(block == Block.woodSingleSlab) {
                return 150;
             }
 
-            if(var3.blockMaterial == Material.wood) {
+            if(block.blockMaterial == Material.wood) {
                return 300;
             }
          }
 
-         return var2 instanceof ItemTool && ((ItemTool)var2).getToolMaterialName().equals("WOOD")?200:(var2 instanceof ItemSword && ((ItemSword)var2).func_77825_f().equals("WOOD")?200:(var2 instanceof ItemHoe && ((ItemHoe)var2).func_77842_f().equals("WOOD")?200:(var1 == Item.stick.shiftedIndex?100:(var1 == Item.coal.shiftedIndex?1600:(var1 == Item.bucketLava.shiftedIndex?20000:(var1 == Block.sapling.blockID?100:(var1 == Item.blazeRod.shiftedIndex?2400:0)))))));
+         return item instanceof ItemTool && ((ItemTool)item).getToolMaterialName().equals("WOOD")?200:(item instanceof ItemSword && ((ItemSword)item).func_77825_f().equals("WOOD")?200:(item instanceof ItemHoe && ((ItemHoe)item).func_77842_f().equals("WOOD")?200:(i == Item.stick.shiftedIndex?100:(i == Item.coal.shiftedIndex?1600:(i == Item.bucketLava.shiftedIndex?20000:(i == Block.sapling.blockID?100:(i == Item.blazeRod.shiftedIndex?2400:0)))))));
       }
    }
 
-   public static boolean isItemFuel(ItemStack var0) {
-      return getItemBurnTime(var0) > 0;
+   public static boolean isItemFuel(ItemStack itemstack) {
+      return getItemBurnTime(itemstack) > 0;
    }
 
-   public boolean isUseableByPlayer(EntityPlayer var1) {
-      return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:var1.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
+   public boolean isUseableByPlayer(EntityPlayer entityhuman) {
+      return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this?false:entityhuman.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
    }
 
    public void openChest() {}
Binary files mcp-mcdev/net/minecraft/src/TileEntityMobSpawner.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityMobSpawner.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntityMobSpawner.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityMobSpawner.java
--- mcp-mcdev/net/minecraft/src/TileEntityMobSpawner.java	2012-11-29 21:14:21.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityMobSpawner.java	2012-11-29 20:43:32.000000000 -0800
@@ -10,11 +10,12 @@
 import net.minecraft.src.Packet;
 import net.minecraft.src.Packet132TileEntityData;
 import net.minecraft.src.TileEntity;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public class TileEntityMobSpawner extends TileEntity {
 
    public int delay = -1;
-   private String mobID = "Pig";
+   public String mobID = "Pig";
    private NBTTagCompound spawnerTags = null;
    public double yaw;
    public double yaw2 = 0.0D;
@@ -30,8 +31,8 @@
       this.delay = 20;
    }
 
-   public void setMobID(String var1) {
-      this.mobID = var1;
+   public void setMobID(String s) {
+      this.mobID = s;
    }
 
    public boolean anyPlayerInRange() {
@@ -41,11 +42,11 @@
    public void updateEntity() {
       if(this.anyPlayerInRange()) {
          if(this.worldObj.isRemote) {
-            double var1 = (double)((float)this.xCoord + this.worldObj.rand.nextFloat());
-            double var3 = (double)((float)this.yCoord + this.worldObj.rand.nextFloat());
-            double var5 = (double)((float)this.zCoord + this.worldObj.rand.nextFloat());
-            this.worldObj.spawnParticle("smoke", var1, var3, var5, 0.0D, 0.0D, 0.0D);
-            this.worldObj.spawnParticle("flame", var1, var3, var5, 0.0D, 0.0D, 0.0D);
+            double d0 = (double)((float)this.xCoord + this.worldObj.rand.nextFloat());
+            double d1 = (double)((float)this.yCoord + this.worldObj.rand.nextFloat());
+            double d2 = (double)((float)this.zCoord + this.worldObj.rand.nextFloat());
+            this.worldObj.spawnParticle("smoke", d0, d1, d2, 0.0D, 0.0D, 0.0D);
+            this.worldObj.spawnParticle("flame", d0, d1, d2, 0.0D, 0.0D, 0.0D);
             if(this.delay > 0) {
                --this.delay;
             }
@@ -62,30 +63,30 @@
                return;
             }
 
-            for(int var7 = 0; var7 < this.spawnCount; ++var7) {
-               Entity var8 = EntityList.createEntityByName(this.mobID, this.worldObj);
-               if(var8 == null) {
+            for(int i = 0; i < this.spawnCount; ++i) {
+               Entity entity = EntityList.createEntityByName(this.mobID, this.worldObj);
+               if(entity == null) {
                   return;
                }
 
-               int var9 = this.worldObj.getEntitiesWithinAABB(var8.getClass(), AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)this.xCoord, (double)this.yCoord, (double)this.zCoord, (double)(this.xCoord + 1), (double)(this.yCoord + 1), (double)(this.zCoord + 1)).expand((double)(this.field_82348_s * 2), 4.0D, (double)(this.field_82348_s * 2))).size();
-               if(var9 >= this.field_82350_j) {
+               int j = this.worldObj.getEntitiesWithinAABB(entity.getClass(), AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)this.xCoord, (double)this.yCoord, (double)this.zCoord, (double)(this.xCoord + 1), (double)(this.yCoord + 1), (double)(this.zCoord + 1)).expand((double)(this.field_82348_s * 2), 4.0D, (double)(this.field_82348_s * 2))).size();
+               if(j >= this.field_82350_j) {
                   this.updateDelay();
                   return;
                }
 
-               if(var8 != null) {
-                  double var10 = (double)this.xCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * (double)this.field_82348_s;
-                  double var12 = (double)(this.yCoord + this.worldObj.rand.nextInt(3) - 1);
-                  double var14 = (double)this.zCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * (double)this.field_82348_s;
-                  EntityLiving var16 = var8 instanceof EntityLiving?(EntityLiving)var8:null;
-                  var8.setLocationAndAngles(var10, var12, var14, this.worldObj.rand.nextFloat() * 360.0F, 0.0F);
-                  if(var16 == null || var16.getCanSpawnHere()) {
-                     this.writeNBTTagsTo(var8);
-                     this.worldObj.spawnEntityInWorld(var8);
+               if(entity != null) {
+                  double d3 = (double)this.xCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * (double)this.field_82348_s;
+                  double d4 = (double)(this.yCoord + this.worldObj.rand.nextInt(3) - 1);
+                  double d5 = (double)this.zCoord + (this.worldObj.rand.nextDouble() - this.worldObj.rand.nextDouble()) * (double)this.field_82348_s;
+                  EntityLiving entityliving = entity instanceof EntityLiving?(EntityLiving)entity:null;
+                  entity.setLocationAndAngles(d3, d4, d5, this.worldObj.rand.nextFloat() * 360.0F, 0.0F);
+                  if(entityliving == null || entityliving.getCanSpawnHere()) {
+                     this.writeNBTTagsTo(entity);
+                     this.worldObj.addEntity(entity, SpawnReason.SPAWNER);
                      this.worldObj.playAuxSFX(2004, this.xCoord, this.yCoord, this.zCoord, 0);
-                     if(var16 != null) {
-                        var16.spawnExplosionParticle();
+                     if(entityliving != null) {
+                        entityliving.spawnExplosionParticle();
                      }
 
                      this.updateDelay();
@@ -96,22 +97,23 @@
 
          super.updateEntity();
       }
+
    }
 
-   public void writeNBTTagsTo(Entity var1) {
+   public void writeNBTTagsTo(Entity entity) {
       if(this.spawnerTags != null) {
-         NBTTagCompound var2 = new NBTTagCompound();
-         var1.addEntityID(var2);
-         Iterator var3 = this.spawnerTags.getTags().iterator();
-
-         while(var3.hasNext()) {
-            NBTBase var4 = (NBTBase)var3.next();
-            var2.setTag(var4.getName(), var4.copy());
+         NBTTagCompound nbttagcompound = new NBTTagCompound();
+         entity.addEntityID(nbttagcompound);
+         Iterator iterator = this.spawnerTags.getTags().iterator();
+
+         while(iterator.hasNext()) {
+            NBTBase nbtbase = (NBTBase)iterator.next();
+            nbttagcompound.setTag(nbtbase.getName(), nbtbase.copy());
          }
 
-         var1.readFromNBT(var2);
-      } else if(var1 instanceof EntityLiving && var1.worldObj != null) {
-         ((EntityLiving)var1).initCreature();
+         entity.readFromNBT(nbttagcompound);
+      } else if(entity instanceof EntityLiving && entity.worldObj != null) {
+         ((EntityLiving)entity).initCreature();
       }
 
    }
@@ -126,57 +128,57 @@
       this.worldObj.addBlockEvent(this.xCoord, this.yCoord, this.zCoord, this.getBlockType().blockID, 1, 0);
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      super.readFromNBT(var1);
-      this.mobID = var1.getString("EntityId");
-      this.delay = var1.getShort("Delay");
-      if(var1.hasKey("SpawnData")) {
-         this.spawnerTags = var1.getCompoundTag("SpawnData");
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      super.readFromNBT(nbttagcompound);
+      this.mobID = nbttagcompound.getString("EntityId");
+      this.delay = nbttagcompound.getShort("Delay");
+      if(nbttagcompound.hasKey("SpawnData")) {
+         this.spawnerTags = nbttagcompound.getCompoundTag("SpawnData");
       } else {
          this.spawnerTags = null;
       }
 
-      if(var1.hasKey("MinSpawnDelay")) {
-         this.minSpawnDelay = var1.getShort("MinSpawnDelay");
-         this.maxSpawnDelay = var1.getShort("MaxSpawnDelay");
-         this.spawnCount = var1.getShort("SpawnCount");
+      if(nbttagcompound.hasKey("MinSpawnDelay")) {
+         this.minSpawnDelay = nbttagcompound.getShort("MinSpawnDelay");
+         this.maxSpawnDelay = nbttagcompound.getShort("MaxSpawnDelay");
+         this.spawnCount = nbttagcompound.getShort("SpawnCount");
       }
 
-      if(var1.hasKey("MaxNearbyEntities")) {
-         this.field_82350_j = var1.getShort("MaxNearbyEntities");
-         this.field_82349_r = var1.getShort("RequiredPlayerRange");
+      if(nbttagcompound.hasKey("MaxNearbyEntities")) {
+         this.field_82350_j = nbttagcompound.getShort("MaxNearbyEntities");
+         this.field_82349_r = nbttagcompound.getShort("RequiredPlayerRange");
       }
 
-      if(var1.hasKey("SpawnRange")) {
-         this.field_82348_s = var1.getShort("SpawnRange");
+      if(nbttagcompound.hasKey("SpawnRange")) {
+         this.field_82348_s = nbttagcompound.getShort("SpawnRange");
       }
 
    }
 
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      var1.setString("EntityId", this.mobID);
-      var1.setShort("Delay", (short)this.delay);
-      var1.setShort("MinSpawnDelay", (short)this.minSpawnDelay);
-      var1.setShort("MaxSpawnDelay", (short)this.maxSpawnDelay);
-      var1.setShort("SpawnCount", (short)this.spawnCount);
-      var1.setShort("MaxNearbyEntities", (short)this.field_82350_j);
-      var1.setShort("RequiredPlayerRange", (short)this.field_82349_r);
-      var1.setShort("SpawnRange", (short)this.field_82348_s);
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      nbttagcompound.setString("EntityId", this.mobID);
+      nbttagcompound.setShort("Delay", (short)this.delay);
+      nbttagcompound.setShort("MinSpawnDelay", (short)this.minSpawnDelay);
+      nbttagcompound.setShort("MaxSpawnDelay", (short)this.maxSpawnDelay);
+      nbttagcompound.setShort("SpawnCount", (short)this.spawnCount);
+      nbttagcompound.setShort("MaxNearbyEntities", (short)this.field_82350_j);
+      nbttagcompound.setShort("RequiredPlayerRange", (short)this.field_82349_r);
+      nbttagcompound.setShort("SpawnRange", (short)this.field_82348_s);
       if(this.spawnerTags != null) {
-         var1.setCompoundTag("SpawnData", this.spawnerTags);
+         nbttagcompound.setCompoundTag("SpawnData", this.spawnerTags);
       }
 
    }
 
    public Packet getDescriptionPacket() {
-      NBTTagCompound var1 = new NBTTagCompound();
-      this.writeToNBT(var1);
-      return new Packet132TileEntityData(this.xCoord, this.yCoord, this.zCoord, 1, var1);
+      NBTTagCompound nbttagcompound = new NBTTagCompound();
+      this.writeToNBT(nbttagcompound);
+      return new Packet132TileEntityData(this.xCoord, this.yCoord, this.zCoord, 1, nbttagcompound);
    }
 
-   public void receiveClientEvent(int var1, int var2) {
-      if(var1 == 1 && this.worldObj.isRemote) {
+   public void receiveClientEvent(int i, int j) {
+      if(i == 1 && this.worldObj.isRemote) {
          this.delay = this.minSpawnDelay;
       }
 
Binary files mcp-mcdev/net/minecraft/src/TileEntityNote.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityNote.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntityNote.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityNote.java
--- mcp-mcdev/net/minecraft/src/TileEntityNote.java	2012-11-29 21:14:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityNote.java	2012-11-29 20:43:32.000000000 -0800
@@ -5,6 +5,8 @@
 import net.minecraft.src.NBTTagCompound;
 import net.minecraft.src.TileEntity;
 import net.minecraft.src.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.NotePlayEvent;
 
 public class TileEntityNote extends TileEntity {
 
@@ -12,14 +14,14 @@
    public boolean previousRedstoneState = false;
 
 
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      var1.setByte("note", this.note);
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      nbttagcompound.setByte("note", this.note);
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      super.readFromNBT(var1);
-      this.note = var1.getByte("note");
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      super.readFromNBT(nbttagcompound);
+      this.note = nbttagcompound.getByte("note");
       if(this.note < 0) {
          this.note = 0;
       }
@@ -35,27 +37,31 @@
       this.onInventoryChanged();
    }
 
-   public void triggerNote(World var1, int var2, int var3, int var4) {
-      if(var1.getBlockMaterial(var2, var3 + 1, var4) == Material.air) {
-         Material var5 = var1.getBlockMaterial(var2, var3 - 1, var4);
-         byte var6 = 0;
-         if(var5 == Material.rock) {
-            var6 = 1;
+   public void triggerNote(World world, int i, int j, int k) {
+      if(world.getBlockMaterial(i, j + 1, k) == Material.air) {
+         Material material = world.getBlockMaterial(i, j - 1, k);
+         byte b0 = 0;
+         if(material == Material.rock) {
+            b0 = 1;
          }
 
-         if(var5 == Material.sand) {
-            var6 = 2;
+         if(material == Material.sand) {
+            b0 = 2;
          }
 
-         if(var5 == Material.glass) {
-            var6 = 3;
+         if(material == Material.glass) {
+            b0 = 3;
          }
 
-         if(var5 == Material.wood) {
-            var6 = 4;
+         if(material == Material.wood) {
+            b0 = 4;
          }
 
-         var1.addBlockEvent(var2, var3, var4, Block.music.blockID, var6, this.note);
+         NotePlayEvent event = CraftEventFactory.callNotePlayEvent(this.worldObj, i, j, k, b0, this.note);
+         if(!event.isCancelled()) {
+            this.worldObj.addBlockEvent(i, j, k, Block.music.blockID, event.getInstrument().getType(), event.getNote().getId());
+         }
       }
+
    }
 }
Binary files mcp-mcdev/net/minecraft/src/TileEntityPiston.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityPiston.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntityPiston.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityPiston.java
--- mcp-mcdev/net/minecraft/src/TileEntityPiston.java	2012-11-29 21:14:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntityPiston.java	2012-11-29 20:43:32.000000000 -0800
@@ -24,12 +24,12 @@
 
    public TileEntityPiston() {}
 
-   public TileEntityPiston(int var1, int var2, int var3, boolean var4, boolean var5) {
-      this.storedBlockID = var1;
-      this.storedMetadata = var2;
-      this.storedOrientation = var3;
-      this.extending = var4;
-      this.shouldHeadBeRendered = var5;
+   public TileEntityPiston(int i, int j, int k, boolean flag, boolean flag1) {
+      this.storedBlockID = i;
+      this.storedMetadata = j;
+      this.storedOrientation = k;
+      this.extending = flag;
+      this.shouldHeadBeRendered = flag1;
    }
 
    public int getStoredBlockID() {
@@ -48,31 +48,31 @@
       return this.storedOrientation;
    }
 
-   public float getProgress(float var1) {
-      if(var1 > 1.0F) {
-         var1 = 1.0F;
+   public float getProgress(float f) {
+      if(f > 1.0F) {
+         f = 1.0F;
       }
 
-      return this.lastProgress + (this.progress - this.lastProgress) * var1;
+      return this.lastProgress + (this.progress - this.lastProgress) * f;
    }
 
-   private void updatePushedObjects(float var1, float var2) {
+   private void updatePushedObjects(float f, float f1) {
       if(this.extending) {
-         var1 = 1.0F - var1;
+         f = 1.0F - f;
       } else {
-         --var1;
+         --f;
       }
 
-      AxisAlignedBB var3 = Block.pistonMoving.getAxisAlignedBB(this.worldObj, this.xCoord, this.yCoord, this.zCoord, this.storedBlockID, var1, this.storedOrientation);
-      if(var3 != null) {
-         List var4 = this.worldObj.getEntitiesWithinAABBExcludingEntity((Entity)null, var3);
-         if(!var4.isEmpty()) {
-            this.pushedObjects.addAll(var4);
-            Iterator var5 = this.pushedObjects.iterator();
-
-            while(var5.hasNext()) {
-               Entity var6 = (Entity)var5.next();
-               var6.moveEntity((double)(var2 * (float)Facing.offsetsXForSide[this.storedOrientation]), (double)(var2 * (float)Facing.offsetsYForSide[this.storedOrientation]), (double)(var2 * (float)Facing.offsetsZForSide[this.storedOrientation]));
+      AxisAlignedBB axisalignedbb = Block.pistonMoving.getAxisAlignedBB(this.worldObj, this.xCoord, this.yCoord, this.zCoord, this.storedBlockID, f, this.storedOrientation);
+      if(axisalignedbb != null) {
+         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity((Entity)null, axisalignedbb);
+         if(!list.isEmpty()) {
+            this.pushedObjects.addAll(list);
+            Iterator iterator = this.pushedObjects.iterator();
+
+            while(iterator.hasNext()) {
+               Entity entity = (Entity)iterator.next();
+               entity.moveEntity((double)(f1 * (float)Facing.offsetsXForSide[this.storedOrientation]), (double)(f1 * (float)Facing.offsetsYForSide[this.storedOrientation]), (double)(f1 * (float)Facing.offsetsZForSide[this.storedOrientation]));
             }
 
             this.pushedObjects.clear();
@@ -94,43 +94,44 @@
    }
 
    public void updateEntity() {
-      this.lastProgress = this.progress;
-      if(this.lastProgress >= 1.0F) {
-         this.updatePushedObjects(1.0F, 0.25F);
-         this.worldObj.removeBlockTileEntity(this.xCoord, this.yCoord, this.zCoord);
-         this.invalidate();
-         if(this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord) == Block.pistonMoving.blockID) {
-            this.worldObj.setBlockAndMetadataWithNotify(this.xCoord, this.yCoord, this.zCoord, this.storedBlockID, this.storedMetadata);
-         }
-
-      } else {
-         this.progress += 0.5F;
-         if(this.progress >= 1.0F) {
-            this.progress = 1.0F;
-         }
+      if(this.worldObj != null) {
+         this.lastProgress = this.progress;
+         if(this.lastProgress >= 1.0F) {
+            this.updatePushedObjects(1.0F, 0.25F);
+            this.worldObj.removeBlockTileEntity(this.xCoord, this.yCoord, this.zCoord);
+            this.invalidate();
+            if(this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord) == Block.pistonMoving.blockID) {
+               this.worldObj.setBlockAndMetadataWithNotify(this.xCoord, this.yCoord, this.zCoord, this.storedBlockID, this.storedMetadata);
+            }
+         } else {
+            this.progress += 0.5F;
+            if(this.progress >= 1.0F) {
+               this.progress = 1.0F;
+            }
 
-         if(this.extending) {
-            this.updatePushedObjects(this.progress, this.progress - this.lastProgress + 0.0625F);
+            if(this.extending) {
+               this.updatePushedObjects(this.progress, this.progress - this.lastProgress + 0.0625F);
+            }
          }
 
       }
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
-      super.readFromNBT(var1);
-      this.storedBlockID = var1.getInteger("blockId");
-      this.storedMetadata = var1.getInteger("blockData");
-      this.storedOrientation = var1.getInteger("facing");
-      this.lastProgress = this.progress = var1.getFloat("progress");
-      this.extending = var1.getBoolean("extending");
-   }
-
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      var1.setInteger("blockId", this.storedBlockID);
-      var1.setInteger("blockData", this.storedMetadata);
-      var1.setInteger("facing", this.storedOrientation);
-      var1.setFloat("progress", this.lastProgress);
-      var1.setBoolean("extending", this.extending);
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
+      super.readFromNBT(nbttagcompound);
+      this.storedBlockID = nbttagcompound.getInteger("blockId");
+      this.storedMetadata = nbttagcompound.getInteger("blockData");
+      this.storedOrientation = nbttagcompound.getInteger("facing");
+      this.lastProgress = this.progress = nbttagcompound.getFloat("progress");
+      this.extending = nbttagcompound.getBoolean("extending");
+   }
+
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      nbttagcompound.setInteger("blockId", this.storedBlockID);
+      nbttagcompound.setInteger("blockData", this.storedMetadata);
+      nbttagcompound.setInteger("facing", this.storedOrientation);
+      nbttagcompound.setFloat("progress", this.lastProgress);
+      nbttagcompound.setBoolean("extending", this.extending);
    }
 }
Binary files mcp-mcdev/net/minecraft/src/TileEntitySign.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntitySign.class differ
diff -ur mcp-mcdev/net/minecraft/src/TileEntitySign.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntitySign.java
--- mcp-mcdev/net/minecraft/src/TileEntitySign.java	2012-11-29 21:14:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/TileEntitySign.java	2012-11-29 20:43:32.000000000 -0800
@@ -9,34 +9,41 @@
 
    public String[] signText = new String[]{"", "", "", ""};
    public int lineBeingEdited = -1;
-   private boolean isEditable = true;
+   public boolean isEditable = true;
 
 
-   public void writeToNBT(NBTTagCompound var1) {
-      super.writeToNBT(var1);
-      var1.setString("Text1", this.signText[0]);
-      var1.setString("Text2", this.signText[1]);
-      var1.setString("Text3", this.signText[2]);
-      var1.setString("Text4", this.signText[3]);
+   public void writeToNBT(NBTTagCompound nbttagcompound) {
+      super.writeToNBT(nbttagcompound);
+      nbttagcompound.setString("Text1", this.signText[0]);
+      nbttagcompound.setString("Text2", this.signText[1]);
+      nbttagcompound.setString("Text3", this.signText[2]);
+      nbttagcompound.setString("Text4", this.signText[3]);
    }
 
-   public void readFromNBT(NBTTagCompound var1) {
+   public void readFromNBT(NBTTagCompound nbttagcompound) {
       this.isEditable = false;
-      super.readFromNBT(var1);
+      super.readFromNBT(nbttagcompound);
 
-      for(int var2 = 0; var2 < 4; ++var2) {
-         this.signText[var2] = var1.getString("Text" + (var2 + 1));
-         if(this.signText[var2].length() > 15) {
-            this.signText[var2] = this.signText[var2].substring(0, 15);
+      for(int i = 0; i < 4; ++i) {
+         this.signText[i] = nbttagcompound.getString("Text" + (i + 1));
+         if(this.signText[i].length() > 15) {
+            this.signText[i] = this.signText[i].substring(0, 15);
          }
       }
 
    }
 
    public Packet getDescriptionPacket() {
-      String[] var1 = new String[4];
-      System.arraycopy(this.signText, 0, var1, 0, 4);
-      return new Packet130UpdateSign(this.xCoord, this.yCoord, this.zCoord, var1);
+      String[] astring = new String[4];
+
+      for(int i = 0; i < 4; ++i) {
+         astring[i] = this.signText[i];
+         if(this.signText[i].length() > 15) {
+            astring[i] = this.signText[i].substring(0, 15);
+         }
+      }
+
+      return new Packet130UpdateSign(this.xCoord, this.yCoord, this.zCoord, astring);
    }
 
    public boolean isEditable() {
Binary files mcp-mcdev/net/minecraft/src/Vec3.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Vec3.class differ
diff -ur mcp-mcdev/net/minecraft/src/Vec3.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Vec3.java
--- mcp-mcdev/net/minecraft/src/Vec3.java	2012-11-29 21:14:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Vec3.java	2012-11-29 20:43:31.000000000 -0800
@@ -10,109 +10,110 @@
    public double xCoord;
    public double yCoord;
    public double zCoord;
+   public Vec3 next;
 
 
-   public static Vec3 createVectorHelper(double var0, double var2, double var4) {
-      return new Vec3(vec3dPool, var0, var2, var4);
+   public static Vec3 createVectorHelper(double d0, double d1, double d2) {
+      return new Vec3(vec3dPool, d0, d1, d2);
    }
 
-   protected Vec3(Vec3Pool var1, double var2, double var4, double var6) {
-      if(var2 == -0.0D) {
-         var2 = 0.0D;
+   protected Vec3(Vec3Pool vec3dpool, double d0, double d1, double d2) {
+      if(d0 == -0.0D) {
+         d0 = 0.0D;
       }
 
-      if(var4 == -0.0D) {
-         var4 = 0.0D;
+      if(d1 == -0.0D) {
+         d1 = 0.0D;
       }
 
-      if(var6 == -0.0D) {
-         var6 = 0.0D;
+      if(d2 == -0.0D) {
+         d2 = 0.0D;
       }
 
-      this.xCoord = var2;
-      this.yCoord = var4;
-      this.zCoord = var6;
-      this.myVec3LocalPool = var1;
+      this.xCoord = d0;
+      this.yCoord = d1;
+      this.zCoord = d2;
+      this.myVec3LocalPool = vec3dpool;
    }
 
-   protected Vec3 setComponents(double var1, double var3, double var5) {
-      this.xCoord = var1;
-      this.yCoord = var3;
-      this.zCoord = var5;
+   protected Vec3 setComponents(double d0, double d1, double d2) {
+      this.xCoord = d0;
+      this.yCoord = d1;
+      this.zCoord = d2;
       return this;
    }
 
    public Vec3 normalize() {
-      double var1 = (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
-      return var1 < 1.0E-4D?this.myVec3LocalPool.getVecFromPool(0.0D, 0.0D, 0.0D):this.myVec3LocalPool.getVecFromPool(this.xCoord / var1, this.yCoord / var1, this.zCoord / var1);
+      double d0 = (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
+      return d0 < 1.0E-4D?this.myVec3LocalPool.getVecFromPool(0.0D, 0.0D, 0.0D):this.myVec3LocalPool.getVecFromPool(this.xCoord / d0, this.yCoord / d0, this.zCoord / d0);
    }
 
-   public double dotProduct(Vec3 var1) {
-      return this.xCoord * var1.xCoord + this.yCoord * var1.yCoord + this.zCoord * var1.zCoord;
+   public double dotProduct(Vec3 vec3d) {
+      return this.xCoord * vec3d.xCoord + this.yCoord * vec3d.yCoord + this.zCoord * vec3d.zCoord;
    }
 
-   public Vec3 addVector(double var1, double var3, double var5) {
-      return this.myVec3LocalPool.getVecFromPool(this.xCoord + var1, this.yCoord + var3, this.zCoord + var5);
+   public Vec3 addVector(double d0, double d1, double d2) {
+      return this.myVec3LocalPool.getVecFromPool(this.xCoord + d0, this.yCoord + d1, this.zCoord + d2);
    }
 
-   public double distanceTo(Vec3 var1) {
-      double var2 = var1.xCoord - this.xCoord;
-      double var4 = var1.yCoord - this.yCoord;
-      double var6 = var1.zCoord - this.zCoord;
-      return (double)MathHelper.sqrt_double(var2 * var2 + var4 * var4 + var6 * var6);
+   public double distanceTo(Vec3 vec3d) {
+      double d0 = vec3d.xCoord - this.xCoord;
+      double d1 = vec3d.yCoord - this.yCoord;
+      double d2 = vec3d.zCoord - this.zCoord;
+      return (double)MathHelper.sqrt_double(d0 * d0 + d1 * d1 + d2 * d2);
    }
 
-   public double squareDistanceTo(Vec3 var1) {
-      double var2 = var1.xCoord - this.xCoord;
-      double var4 = var1.yCoord - this.yCoord;
-      double var6 = var1.zCoord - this.zCoord;
-      return var2 * var2 + var4 * var4 + var6 * var6;
+   public double squareDistanceTo(Vec3 vec3d) {
+      double d0 = vec3d.xCoord - this.xCoord;
+      double d1 = vec3d.yCoord - this.yCoord;
+      double d2 = vec3d.zCoord - this.zCoord;
+      return d0 * d0 + d1 * d1 + d2 * d2;
    }
 
-   public double squareDistanceTo(double var1, double var3, double var5) {
-      double var7 = var1 - this.xCoord;
-      double var9 = var3 - this.yCoord;
-      double var11 = var5 - this.zCoord;
-      return var7 * var7 + var9 * var9 + var11 * var11;
+   public double squareDistanceTo(double d0, double d1, double d2) {
+      double d3 = d0 - this.xCoord;
+      double d4 = d1 - this.yCoord;
+      double d5 = d2 - this.zCoord;
+      return d3 * d3 + d4 * d4 + d5 * d5;
    }
 
    public double lengthVector() {
       return (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
    }
 
-   public Vec3 getIntermediateWithXValue(Vec3 var1, double var2) {
-      double var4 = var1.xCoord - this.xCoord;
-      double var6 = var1.yCoord - this.yCoord;
-      double var8 = var1.zCoord - this.zCoord;
-      if(var4 * var4 < 1.0000000116860974E-7D) {
+   public Vec3 getIntermediateWithXValue(Vec3 vec3d, double d0) {
+      double d1 = vec3d.xCoord - this.xCoord;
+      double d2 = vec3d.yCoord - this.yCoord;
+      double d3 = vec3d.zCoord - this.zCoord;
+      if(d1 * d1 < 1.0000000116860974E-7D) {
          return null;
       } else {
-         double var10 = (var2 - this.xCoord) / var4;
-         return var10 >= 0.0D && var10 <= 1.0D?this.myVec3LocalPool.getVecFromPool(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10):null;
+         double d4 = (d0 - this.xCoord) / d1;
+         return d4 >= 0.0D && d4 <= 1.0D?this.myVec3LocalPool.getVecFromPool(this.xCoord + d1 * d4, this.yCoord + d2 * d4, this.zCoord + d3 * d4):null;
       }
    }
 
-   public Vec3 getIntermediateWithYValue(Vec3 var1, double var2) {
-      double var4 = var1.xCoord - this.xCoord;
-      double var6 = var1.yCoord - this.yCoord;
-      double var8 = var1.zCoord - this.zCoord;
-      if(var6 * var6 < 1.0000000116860974E-7D) {
+   public Vec3 getIntermediateWithYValue(Vec3 vec3d, double d0) {
+      double d1 = vec3d.xCoord - this.xCoord;
+      double d2 = vec3d.yCoord - this.yCoord;
+      double d3 = vec3d.zCoord - this.zCoord;
+      if(d2 * d2 < 1.0000000116860974E-7D) {
          return null;
       } else {
-         double var10 = (var2 - this.yCoord) / var6;
-         return var10 >= 0.0D && var10 <= 1.0D?this.myVec3LocalPool.getVecFromPool(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10):null;
+         double d4 = (d0 - this.yCoord) / d2;
+         return d4 >= 0.0D && d4 <= 1.0D?this.myVec3LocalPool.getVecFromPool(this.xCoord + d1 * d4, this.yCoord + d2 * d4, this.zCoord + d3 * d4):null;
       }
    }
 
-   public Vec3 getIntermediateWithZValue(Vec3 var1, double var2) {
-      double var4 = var1.xCoord - this.xCoord;
-      double var6 = var1.yCoord - this.yCoord;
-      double var8 = var1.zCoord - this.zCoord;
-      if(var8 * var8 < 1.0000000116860974E-7D) {
+   public Vec3 getIntermediateWithZValue(Vec3 vec3d, double d0) {
+      double d1 = vec3d.xCoord - this.xCoord;
+      double d2 = vec3d.yCoord - this.yCoord;
+      double d3 = vec3d.zCoord - this.zCoord;
+      if(d3 * d3 < 1.0000000116860974E-7D) {
          return null;
       } else {
-         double var10 = (var2 - this.zCoord) / var8;
-         return var10 >= 0.0D && var10 <= 1.0D?this.myVec3LocalPool.getVecFromPool(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10):null;
+         double d4 = (d0 - this.zCoord) / d3;
+         return d4 >= 0.0D && d4 <= 1.0D?this.myVec3LocalPool.getVecFromPool(this.xCoord + d1 * d4, this.yCoord + d2 * d4, this.zCoord + d3 * d4):null;
       }
    }
 
@@ -120,26 +121,26 @@
       return "(" + this.xCoord + ", " + this.yCoord + ", " + this.zCoord + ")";
    }
 
-   public void rotateAroundX(float var1) {
-      float var2 = MathHelper.cos(var1);
-      float var3 = MathHelper.sin(var1);
-      double var4 = this.xCoord;
-      double var6 = this.yCoord * (double)var2 + this.zCoord * (double)var3;
-      double var8 = this.zCoord * (double)var2 - this.yCoord * (double)var3;
-      this.xCoord = var4;
-      this.yCoord = var6;
-      this.zCoord = var8;
-   }
-
-   public void rotateAroundY(float var1) {
-      float var2 = MathHelper.cos(var1);
-      float var3 = MathHelper.sin(var1);
-      double var4 = this.xCoord * (double)var2 + this.zCoord * (double)var3;
-      double var6 = this.yCoord;
-      double var8 = this.zCoord * (double)var2 - this.xCoord * (double)var3;
-      this.xCoord = var4;
-      this.yCoord = var6;
-      this.zCoord = var8;
+   public void rotateAroundX(float f) {
+      float f1 = MathHelper.cos(f);
+      float f2 = MathHelper.sin(f);
+      double d0 = this.xCoord;
+      double d1 = this.yCoord * (double)f1 + this.zCoord * (double)f2;
+      double d2 = this.zCoord * (double)f1 - this.yCoord * (double)f2;
+      this.xCoord = d0;
+      this.yCoord = d1;
+      this.zCoord = d2;
+   }
+
+   public void rotateAroundY(float f) {
+      float f1 = MathHelper.cos(f);
+      float f2 = MathHelper.sin(f);
+      double d0 = this.xCoord * (double)f1 + this.zCoord * (double)f2;
+      double d1 = this.yCoord;
+      double d2 = this.zCoord * (double)f1 - this.xCoord * (double)f2;
+      this.xCoord = d0;
+      this.yCoord = d1;
+      this.zCoord = d2;
    }
 
 }
Binary files mcp-mcdev/net/minecraft/src/Vec3Pool.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Vec3Pool.class differ
diff -ur mcp-mcdev/net/minecraft/src/Vec3Pool.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Vec3Pool.java
--- mcp-mcdev/net/minecraft/src/Vec3Pool.java	2012-11-29 21:14:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Vec3Pool.java	2012-11-29 20:43:31.000000000 -0800
@@ -1,65 +1,101 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
-import java.util.List;
 import net.minecraft.src.Vec3;
 
 public class Vec3Pool {
 
    private final int truncateArrayResetThreshold;
    private final int minimumSize;
-   private final List vec3Cache = new ArrayList();
+   private Vec3 freelist = null;
+   private Vec3 alloclist = null;
+   private Vec3 freelisthead = null;
+   private Vec3 alloclisthead = null;
+   private int total_size = 0;
    private int nextFreeSpace = 0;
    private int maximumSizeSinceLastTruncation = 0;
    private int resetCount = 0;
 
 
-   public Vec3Pool(int var1, int var2) {
-      this.truncateArrayResetThreshold = var1;
-      this.minimumSize = var2;
+   public Vec3Pool(int i, int j) {
+      this.truncateArrayResetThreshold = i;
+      this.minimumSize = j;
    }
 
-   public Vec3 getVecFromPool(double var1, double var3, double var5) {
-      if(this.func_82589_e()) {
-         return new Vec3(this, var1, var3, var5);
+   public final Vec3 getVecFromPool(double d0, double d1, double d2) {
+      if(this.resetCount == 0) {
+         return Vec3.createVectorHelper(d0, d1, d2);
       } else {
-         Vec3 var7;
-         if(this.nextFreeSpace >= this.vec3Cache.size()) {
-            var7 = new Vec3(this, var1, var3, var5);
-            this.vec3Cache.add(var7);
+         Vec3 vec3d;
+         if(this.freelist == null) {
+            vec3d = new Vec3(this, d0, d1, d2);
+            ++this.total_size;
          } else {
-            var7 = (Vec3)this.vec3Cache.get(this.nextFreeSpace);
-            var7.setComponents(var1, var3, var5);
+            vec3d = this.freelist;
+            this.freelist = vec3d.next;
+            vec3d.setComponents(d0, d1, d2);
          }
 
+         if(this.alloclist == null) {
+            this.alloclisthead = vec3d;
+         }
+
+         vec3d.next = this.alloclist;
+         this.alloclist = vec3d;
          ++this.nextFreeSpace;
-         return var7;
+         return vec3d;
       }
    }
 
+   public void release(Vec3 v) {
+      if(this.alloclist == v) {
+         this.alloclist = v.next;
+         if(this.freelist == null) {
+            this.freelisthead = v;
+         }
+
+         v.next = this.freelist;
+         this.freelist = v;
+         --this.nextFreeSpace;
+      }
+
+   }
+
    public void clear() {
-      if(!this.func_82589_e()) {
-         if(this.nextFreeSpace > this.maximumSizeSinceLastTruncation) {
-            this.maximumSizeSinceLastTruncation = this.nextFreeSpace;
+      if(this.nextFreeSpace > this.maximumSizeSinceLastTruncation) {
+         this.maximumSizeSinceLastTruncation = this.nextFreeSpace;
+      }
+
+      if(this.alloclist != null) {
+         if(this.freelist == null) {
+            this.freelist = this.alloclist;
+            this.freelisthead = this.alloclisthead;
+         } else {
+            this.alloclisthead.next = this.freelist;
+            this.freelist = this.alloclist;
+            this.freelisthead = this.alloclisthead;
          }
 
-         if(this.resetCount++ == this.truncateArrayResetThreshold) {
-            int var1 = Math.max(this.maximumSizeSinceLastTruncation, this.vec3Cache.size() - this.minimumSize);
+         this.alloclist = null;
+      }
 
-            while(this.vec3Cache.size() > var1) {
-               this.vec3Cache.remove(var1);
+      if((this.resetCount++ & 255) == 0) {
+         int newSize = this.total_size - (this.total_size >> 3);
+         if(newSize > this.maximumSizeSinceLastTruncation) {
+            for(int i = this.total_size; i > newSize; --i) {
+               this.freelist = this.freelist.next;
             }
 
-            this.maximumSizeSinceLastTruncation = 0;
-            this.resetCount = 0;
+            this.total_size = newSize;
          }
 
-         this.nextFreeSpace = 0;
+         this.maximumSizeSinceLastTruncation = 0;
       }
+
+      this.nextFreeSpace = 0;
    }
 
    public int getPoolSize() {
-      return this.vec3Cache.size();
+      return this.total_size;
    }
 
    public int func_82590_d() {
Binary files mcp-mcdev/net/minecraft/src/Village.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Village.class differ
diff -ur mcp-mcdev/net/minecraft/src/Village.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Village.java
--- mcp-mcdev/net/minecraft/src/Village.java	2012-11-29 21:14:20.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/Village.java	2012-11-29 20:43:31.000000000 -0800
@@ -18,6 +18,7 @@
 import net.minecraft.src.VillageAgressor;
 import net.minecraft.src.VillageDoorInfo;
 import net.minecraft.src.World;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public class Village {
 
@@ -37,63 +38,63 @@
 
    public Village() {}
 
-   public Village(World var1) {
-      this.worldObj = var1;
+   public Village(World world) {
+      this.worldObj = world;
    }
 
-   public void func_82691_a(World var1) {
-      this.worldObj = var1;
+   public void func_82691_a(World world) {
+      this.worldObj = world;
    }
 
-   public void tick(int var1) {
-      this.tickCounter = var1;
+   public void tick(int i) {
+      this.tickCounter = i;
       this.removeDeadAndOutOfRangeDoors();
       this.removeDeadAndOldAgressors();
-      if(var1 % 20 == 0) {
+      if(i % 20 == 0) {
          this.updateNumVillagers();
       }
 
-      if(var1 % 30 == 0) {
+      if(i % 30 == 0) {
          this.updateNumIronGolems();
       }
 
-      int var2 = this.numVillagers / 10;
-      if(this.numIronGolems < var2 && this.villageDoorInfoList.size() > 20 && this.worldObj.rand.nextInt(7000) == 0) {
-         Vec3 var3 = this.tryGetIronGolemSpawningLocation(MathHelper.floor_float((float)this.center.posX), MathHelper.floor_float((float)this.center.posY), MathHelper.floor_float((float)this.center.posZ), 2, 4, 2);
-         if(var3 != null) {
-            EntityIronGolem var4 = new EntityIronGolem(this.worldObj);
-            var4.setPosition(var3.xCoord, var3.yCoord, var3.zCoord);
-            this.worldObj.spawnEntityInWorld(var4);
+      int j = this.numVillagers / 10;
+      if(this.numIronGolems < j && this.villageDoorInfoList.size() > 20 && this.worldObj.rand.nextInt(7000) == 0) {
+         Vec3 vec3d = this.tryGetIronGolemSpawningLocation(MathHelper.floor_float((float)this.center.posX), MathHelper.floor_float((float)this.center.posY), MathHelper.floor_float((float)this.center.posZ), 2, 4, 2);
+         if(vec3d != null) {
+            EntityIronGolem entityirongolem = new EntityIronGolem(this.worldObj);
+            entityirongolem.setPosition(vec3d.xCoord, vec3d.yCoord, vec3d.zCoord);
+            this.worldObj.addEntity(entityirongolem, SpawnReason.VILLAGE_DEFENSE);
             ++this.numIronGolems;
          }
       }
 
    }
 
-   private Vec3 tryGetIronGolemSpawningLocation(int var1, int var2, int var3, int var4, int var5, int var6) {
-      for(int var7 = 0; var7 < 10; ++var7) {
-         int var8 = var1 + this.worldObj.rand.nextInt(16) - 8;
-         int var9 = var2 + this.worldObj.rand.nextInt(6) - 3;
-         int var10 = var3 + this.worldObj.rand.nextInt(16) - 8;
-         if(this.isInRange(var8, var9, var10) && this.isValidIronGolemSpawningLocation(var8, var9, var10, var4, var5, var6)) {
-            return this.worldObj.getWorldVec3Pool().getVecFromPool((double)var8, (double)var9, (double)var10);
+   private Vec3 tryGetIronGolemSpawningLocation(int i, int j, int k, int l, int i1, int j1) {
+      for(int k1 = 0; k1 < 10; ++k1) {
+         int l1 = i + this.worldObj.rand.nextInt(16) - 8;
+         int i2 = j + this.worldObj.rand.nextInt(6) - 3;
+         int j2 = k + this.worldObj.rand.nextInt(16) - 8;
+         if(this.isInRange(l1, i2, j2) && this.isValidIronGolemSpawningLocation(l1, i2, j2, l, i1, j1)) {
+            return this.worldObj.getWorldVec3Pool().getVecFromPool((double)l1, (double)i2, (double)j2);
          }
       }
 
       return null;
    }
 
-   private boolean isValidIronGolemSpawningLocation(int var1, int var2, int var3, int var4, int var5, int var6) {
-      if(!this.worldObj.doesBlockHaveSolidTopSurface(var1, var2 - 1, var3)) {
+   private boolean isValidIronGolemSpawningLocation(int i, int j, int k, int l, int i1, int j1) {
+      if(!this.worldObj.doesBlockHaveSolidTopSurface(i, j - 1, k)) {
          return false;
       } else {
-         int var7 = var1 - var4 / 2;
-         int var8 = var3 - var6 / 2;
+         int k1 = i - l / 2;
+         int l1 = k - j1 / 2;
 
-         for(int var9 = var7; var9 < var7 + var4; ++var9) {
-            for(int var10 = var2; var10 < var2 + var5; ++var10) {
-               for(int var11 = var8; var11 < var8 + var6; ++var11) {
-                  if(this.worldObj.isBlockNormalCube(var9, var10, var11)) {
+         for(int i2 = k1; i2 < k1 + l; ++i2) {
+            for(int j2 = j; j2 < j + i1; ++j2) {
+               for(int k2 = l1; k2 < l1 + j1; ++k2) {
+                  if(this.worldObj.isBlockNormalCube(i2, j2, k2)) {
                      return false;
                   }
                }
@@ -105,13 +106,13 @@
    }
 
    private void updateNumIronGolems() {
-      List var1 = this.worldObj.getEntitiesWithinAABB(EntityIronGolem.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)(this.center.posX - this.villageRadius), (double)(this.center.posY - 4), (double)(this.center.posZ - this.villageRadius), (double)(this.center.posX + this.villageRadius), (double)(this.center.posY + 4), (double)(this.center.posZ + this.villageRadius)));
-      this.numIronGolems = var1.size();
+      List list = this.worldObj.getEntitiesWithinAABB(EntityIronGolem.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)(this.center.posX - this.villageRadius), (double)(this.center.posY - 4), (double)(this.center.posZ - this.villageRadius), (double)(this.center.posX + this.villageRadius), (double)(this.center.posY + 4), (double)(this.center.posZ + this.villageRadius)));
+      this.numIronGolems = list.size();
    }
 
    private void updateNumVillagers() {
-      List var1 = this.worldObj.getEntitiesWithinAABB(EntityVillager.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)(this.center.posX - this.villageRadius), (double)(this.center.posY - 4), (double)(this.center.posZ - this.villageRadius), (double)(this.center.posX + this.villageRadius), (double)(this.center.posY + 4), (double)(this.center.posZ + this.villageRadius)));
-      this.numVillagers = var1.size();
+      List list = this.worldObj.getEntitiesWithinAABB(EntityVillager.class, AxisAlignedBB.getAABBPool().addOrModifyAABBInPool((double)(this.center.posX - this.villageRadius), (double)(this.center.posY - 4), (double)(this.center.posZ - this.villageRadius), (double)(this.center.posX + this.villageRadius), (double)(this.center.posY + 4), (double)(this.center.posZ + this.villageRadius)));
+      this.numVillagers = list.size();
       if(this.numVillagers == 0) {
          this.playerReputation.clear();
       }
@@ -138,240 +139,239 @@
       return this.numVillagers;
    }
 
-   public boolean isInRange(int var1, int var2, int var3) {
-      return this.center.getDistanceSquared(var1, var2, var3) < (float)(this.villageRadius * this.villageRadius);
+   public boolean isInRange(int i, int j, int k) {
+      return this.center.getDistanceSquared(i, j, k) < (float)(this.villageRadius * this.villageRadius);
    }
 
    public List getVillageDoorInfoList() {
       return this.villageDoorInfoList;
    }
 
-   public VillageDoorInfo findNearestDoor(int var1, int var2, int var3) {
-      VillageDoorInfo var4 = null;
-      int var5 = Integer.MAX_VALUE;
-      Iterator var6 = this.villageDoorInfoList.iterator();
+   public VillageDoorInfo findNearestDoor(int i, int j, int k) {
+      VillageDoorInfo villagedoor = null;
+      int l = Integer.MAX_VALUE;
+      Iterator iterator = this.villageDoorInfoList.iterator();
 
-      while(var6.hasNext()) {
-         VillageDoorInfo var7 = (VillageDoorInfo)var6.next();
-         int var8 = var7.getDistanceSquared(var1, var2, var3);
-         if(var8 < var5) {
-            var4 = var7;
-            var5 = var8;
+      while(iterator.hasNext()) {
+         VillageDoorInfo villagedoor1 = (VillageDoorInfo)iterator.next();
+         int i1 = villagedoor1.getDistanceSquared(i, j, k);
+         if(i1 < l) {
+            villagedoor = villagedoor1;
+            l = i1;
          }
       }
 
-      return var4;
+      return villagedoor;
    }
 
-   public VillageDoorInfo findNearestDoorUnrestricted(int var1, int var2, int var3) {
-      VillageDoorInfo var4 = null;
-      int var5 = Integer.MAX_VALUE;
-      Iterator var6 = this.villageDoorInfoList.iterator();
+   public VillageDoorInfo findNearestDoorUnrestricted(int i, int j, int k) {
+      VillageDoorInfo villagedoor = null;
+      int l = Integer.MAX_VALUE;
+      Iterator iterator = this.villageDoorInfoList.iterator();
 
-      while(var6.hasNext()) {
-         VillageDoorInfo var7 = (VillageDoorInfo)var6.next();
-         int var8 = var7.getDistanceSquared(var1, var2, var3);
-         if(var8 > 256) {
-            var8 *= 1000;
+      while(iterator.hasNext()) {
+         VillageDoorInfo villagedoor1 = (VillageDoorInfo)iterator.next();
+         int i1 = villagedoor1.getDistanceSquared(i, j, k);
+         if(i1 > 256) {
+            i1 *= 1000;
          } else {
-            var8 = var7.getDoorOpeningRestrictionCounter();
+            i1 = villagedoor1.getDoorOpeningRestrictionCounter();
          }
 
-         if(var8 < var5) {
-            var4 = var7;
-            var5 = var8;
+         if(i1 < l) {
+            villagedoor = villagedoor1;
+            l = i1;
          }
       }
 
-      return var4;
+      return villagedoor;
    }
 
-   public VillageDoorInfo getVillageDoorAt(int var1, int var2, int var3) {
-      if(this.center.getDistanceSquared(var1, var2, var3) > (float)(this.villageRadius * this.villageRadius)) {
+   public VillageDoorInfo getVillageDoorAt(int i, int j, int k) {
+      if(this.center.getDistanceSquared(i, j, k) > (float)(this.villageRadius * this.villageRadius)) {
          return null;
       } else {
-         Iterator var4 = this.villageDoorInfoList.iterator();
+         Iterator iterator = this.villageDoorInfoList.iterator();
 
-         VillageDoorInfo var5;
+         VillageDoorInfo villagedoor;
          do {
-            if(!var4.hasNext()) {
+            if(!iterator.hasNext()) {
                return null;
             }
 
-            var5 = (VillageDoorInfo)var4.next();
-         } while(var5.posX != var1 || var5.posZ != var3 || Math.abs(var5.posY - var2) > 1);
+            villagedoor = (VillageDoorInfo)iterator.next();
+         } while(villagedoor.posX != i || villagedoor.posZ != k || Math.abs(villagedoor.posY - j) > 1);
 
-         return var5;
+         return villagedoor;
       }
    }
 
-   public void addVillageDoorInfo(VillageDoorInfo var1) {
-      this.villageDoorInfoList.add(var1);
-      this.centerHelper.posX += var1.posX;
-      this.centerHelper.posY += var1.posY;
-      this.centerHelper.posZ += var1.posZ;
+   public void addVillageDoorInfo(VillageDoorInfo villagedoor) {
+      this.villageDoorInfoList.add(villagedoor);
+      this.centerHelper.posX += villagedoor.posX;
+      this.centerHelper.posY += villagedoor.posY;
+      this.centerHelper.posZ += villagedoor.posZ;
       this.updateVillageRadiusAndCenter();
-      this.lastAddDoorTimestamp = var1.lastActivityTimestamp;
+      this.lastAddDoorTimestamp = villagedoor.lastActivityTimestamp;
    }
 
    public boolean isAnnihilated() {
       return this.villageDoorInfoList.isEmpty();
    }
 
-   public void addOrRenewAgressor(EntityLiving var1) {
-      Iterator var2 = this.villageAgressors.iterator();
+   public void addOrRenewAgressor(EntityLiving entityliving) {
+      Iterator iterator = this.villageAgressors.iterator();
 
-      VillageAgressor var3;
-      do {
-         if(!var2.hasNext()) {
-            this.villageAgressors.add(new VillageAgressor(this, var1, this.tickCounter));
+      while(iterator.hasNext()) {
+         VillageAgressor villageaggressor = (VillageAgressor)iterator.next();
+         if(villageaggressor.agressor == entityliving) {
+            villageaggressor.agressionTime = this.tickCounter;
             return;
          }
+      }
 
-         var3 = (VillageAgressor)var2.next();
-      } while(var3.agressor != var1);
-
-      var3.agressionTime = this.tickCounter;
+      this.villageAgressors.add(new VillageAgressor(this, entityliving, this.tickCounter));
    }
 
-   public EntityLiving findNearestVillageAggressor(EntityLiving var1) {
-      double var2 = Double.MAX_VALUE;
-      VillageAgressor var4 = null;
+   public EntityLiving findNearestVillageAggressor(EntityLiving entityliving) {
+      double d0 = Double.MAX_VALUE;
+      VillageAgressor villageaggressor = null;
 
-      for(int var5 = 0; var5 < this.villageAgressors.size(); ++var5) {
-         VillageAgressor var6 = (VillageAgressor)this.villageAgressors.get(var5);
-         double var7 = var6.agressor.getDistanceSqToEntity(var1);
-         if(var7 <= var2) {
-            var4 = var6;
-            var2 = var7;
+      for(int i = 0; i < this.villageAgressors.size(); ++i) {
+         VillageAgressor villageaggressor1 = (VillageAgressor)this.villageAgressors.get(i);
+         double d1 = villageaggressor1.agressor.getDistanceSqToEntity(entityliving);
+         if(d1 <= d0) {
+            villageaggressor = villageaggressor1;
+            d0 = d1;
          }
       }
 
-      return var4 != null?var4.agressor:null;
+      return villageaggressor != null?villageaggressor.agressor:null;
    }
 
-   public EntityPlayer func_82685_c(EntityLiving var1) {
-      double var2 = Double.MAX_VALUE;
-      EntityPlayer var4 = null;
-      Iterator var5 = this.playerReputation.keySet().iterator();
+   public EntityPlayer func_82685_c(EntityLiving entityliving) {
+      double d0 = Double.MAX_VALUE;
+      EntityPlayer entityhuman = null;
+      Iterator iterator = this.playerReputation.keySet().iterator();
 
-      while(var5.hasNext()) {
-         String var6 = (String)var5.next();
-         if(this.isPlayerReputationTooLow(var6)) {
-            EntityPlayer var7 = this.worldObj.getPlayerEntityByName(var6);
-            if(var7 != null) {
-               double var8 = var7.getDistanceSqToEntity(var1);
-               if(var8 <= var2) {
-                  var4 = var7;
-                  var2 = var8;
+      while(iterator.hasNext()) {
+         String s = (String)iterator.next();
+         if(this.isPlayerReputationTooLow(s)) {
+            EntityPlayer entityhuman1 = this.worldObj.getPlayerEntityByName(s);
+            if(entityhuman1 != null) {
+               double d1 = entityhuman1.getDistanceSqToEntity(entityliving);
+               if(d1 <= d0) {
+                  entityhuman = entityhuman1;
+                  d0 = d1;
                }
             }
          }
       }
 
-      return var4;
+      return entityhuman;
    }
 
    private void removeDeadAndOldAgressors() {
-      Iterator var1 = this.villageAgressors.iterator();
+      Iterator iterator = this.villageAgressors.iterator();
 
-      while(var1.hasNext()) {
-         VillageAgressor var2 = (VillageAgressor)var1.next();
-         if(!var2.agressor.isEntityAlive() || Math.abs(this.tickCounter - var2.agressionTime) > 300) {
-            var1.remove();
+      while(iterator.hasNext()) {
+         VillageAgressor villageaggressor = (VillageAgressor)iterator.next();
+         if(!villageaggressor.agressor.isEntityAlive() || Math.abs(this.tickCounter - villageaggressor.agressionTime) > 300) {
+            iterator.remove();
          }
       }
 
    }
 
    private void removeDeadAndOutOfRangeDoors() {
-      boolean var1 = false;
-      boolean var2 = this.worldObj.rand.nextInt(50) == 0;
-      Iterator var3 = this.villageDoorInfoList.iterator();
+      boolean flag = false;
+      boolean flag1 = this.worldObj.rand.nextInt(50) == 0;
+      Iterator iterator = this.villageDoorInfoList.iterator();
 
-      while(var3.hasNext()) {
-         VillageDoorInfo var4 = (VillageDoorInfo)var3.next();
-         if(var2) {
-            var4.resetDoorOpeningRestrictionCounter();
+      while(iterator.hasNext()) {
+         VillageDoorInfo villagedoor = (VillageDoorInfo)iterator.next();
+         if(flag1) {
+            villagedoor.resetDoorOpeningRestrictionCounter();
          }
 
-         if(!this.isBlockDoor(var4.posX, var4.posY, var4.posZ) || Math.abs(this.tickCounter - var4.lastActivityTimestamp) > 1200) {
-            this.centerHelper.posX -= var4.posX;
-            this.centerHelper.posY -= var4.posY;
-            this.centerHelper.posZ -= var4.posZ;
-            var1 = true;
-            var4.isDetachedFromVillageFlag = true;
-            var3.remove();
+         if(!this.isBlockDoor(villagedoor.posX, villagedoor.posY, villagedoor.posZ) || Math.abs(this.tickCounter - villagedoor.lastActivityTimestamp) > 1200) {
+            this.centerHelper.posX -= villagedoor.posX;
+            this.centerHelper.posY -= villagedoor.posY;
+            this.centerHelper.posZ -= villagedoor.posZ;
+            flag = true;
+            villagedoor.isDetachedFromVillageFlag = true;
+            iterator.remove();
          }
       }
 
-      if(var1) {
+      if(flag) {
          this.updateVillageRadiusAndCenter();
       }
 
    }
 
-   private boolean isBlockDoor(int var1, int var2, int var3) {
-      int var4 = this.worldObj.getBlockId(var1, var2, var3);
-      return var4 <= 0?false:var4 == Block.doorWood.blockID;
+   private boolean isBlockDoor(int i, int j, int k) {
+      int l = this.worldObj.getBlockId(i, j, k);
+      return l <= 0?false:l == Block.doorWood.blockID;
    }
 
    private void updateVillageRadiusAndCenter() {
-      int var1 = this.villageDoorInfoList.size();
-      if(var1 == 0) {
+      int i = this.villageDoorInfoList.size();
+      if(i == 0) {
          this.center.set(0, 0, 0);
          this.villageRadius = 0;
       } else {
-         this.center.set(this.centerHelper.posX / var1, this.centerHelper.posY / var1, this.centerHelper.posZ / var1);
-         int var2 = 0;
+         this.center.set(this.centerHelper.posX / i, this.centerHelper.posY / i, this.centerHelper.posZ / i);
+         int j = 0;
 
-         VillageDoorInfo var4;
-         for(Iterator var3 = this.villageDoorInfoList.iterator(); var3.hasNext(); var2 = Math.max(var4.getDistanceSquared(this.center.posX, this.center.posY, this.center.posZ), var2)) {
-            var4 = (VillageDoorInfo)var3.next();
+         VillageDoorInfo villagedoor;
+         for(Iterator iterator = this.villageDoorInfoList.iterator(); iterator.hasNext(); j = Math.max(villagedoor.getDistanceSquared(this.center.posX, this.center.posY, this.center.posZ), j)) {
+            villagedoor = (VillageDoorInfo)iterator.next();
          }
 
-         this.villageRadius = Math.max(32, (int)Math.sqrt((double)var2) + 1);
+         this.villageRadius = Math.max(32, (int)Math.sqrt((double)j) + 1);
       }
+
    }
 
-   public int getReputationForPlayer(String var1) {
-      Integer var2 = (Integer)this.playerReputation.get(var1);
-      return var2 != null?var2.intValue():0;
+   public int getReputationForPlayer(String s) {
+      Integer integer = (Integer)this.playerReputation.get(s);
+      return integer != null?integer.intValue():0;
    }
 
-   public int setReputationForPlayer(String var1, int var2) {
-      int var3 = this.getReputationForPlayer(var1);
-      int var4 = MathHelper.clamp_int(var3 + var2, -30, 10);
-      this.playerReputation.put(var1, Integer.valueOf(var4));
-      return var4;
+   public int setReputationForPlayer(String s, int i) {
+      int j = this.getReputationForPlayer(s);
+      int k = MathHelper.clamp_int(j + i, -30, 10);
+      this.playerReputation.put(s, Integer.valueOf(k));
+      return k;
    }
 
-   public boolean isPlayerReputationTooLow(String var1) {
-      return this.getReputationForPlayer(var1) <= -15;
+   public boolean isPlayerReputationTooLow(String s) {
+      return this.getReputationForPlayer(s) <= -15;
    }
 
-   public void readVillageDataFromNBT(NBTTagCompound var1) {
-      this.numVillagers = var1.getInteger("PopSize");
-      this.villageRadius = var1.getInteger("Radius");
-      this.numIronGolems = var1.getInteger("Golems");
-      this.lastAddDoorTimestamp = var1.getInteger("Stable");
-      this.tickCounter = var1.getInteger("Tick");
-      this.field_82694_i = var1.getInteger("MTick");
-      this.center.posX = var1.getInteger("CX");
-      this.center.posY = var1.getInteger("CY");
-      this.center.posZ = var1.getInteger("CZ");
-      this.centerHelper.posX = var1.getInteger("ACX");
-      this.centerHelper.posY = var1.getInteger("ACY");
-      this.centerHelper.posZ = var1.getInteger("ACZ");
-      NBTTagList var2 = var1.getTagList("Doors");
+   public void readVillageDataFromNBT(NBTTagCompound nbttagcompound) {
+      this.numVillagers = nbttagcompound.getInteger("PopSize");
+      this.villageRadius = nbttagcompound.getInteger("Radius");
+      this.numIronGolems = nbttagcompound.getInteger("Golems");
+      this.lastAddDoorTimestamp = nbttagcompound.getInteger("Stable");
+      this.tickCounter = nbttagcompound.getInteger("Tick");
+      this.field_82694_i = nbttagcompound.getInteger("MTick");
+      this.center.posX = nbttagcompound.getInteger("CX");
+      this.center.posY = nbttagcompound.getInteger("CY");
+      this.center.posZ = nbttagcompound.getInteger("CZ");
+      this.centerHelper.posX = nbttagcompound.getInteger("ACX");
+      this.centerHelper.posY = nbttagcompound.getInteger("ACY");
+      this.centerHelper.posZ = nbttagcompound.getInteger("ACZ");
+      NBTTagList nbttaglist = nbttagcompound.getTagList("Doors");
 
-      for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-         NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-         VillageDoorInfo var5 = new VillageDoorInfo(var4.getInteger("X"), var4.getInteger("Y"), var4.getInteger("Z"), var4.getInteger("IDX"), var4.getInteger("IDZ"), var4.getInteger("TS"));
-         this.villageDoorInfoList.add(var5);
+      for(int nbttaglist1 = 0; nbttaglist1 < nbttaglist.tagCount(); ++nbttaglist1) {
+         NBTTagCompound j = (NBTTagCompound)nbttaglist.tagAt(nbttaglist1);
+         VillageDoorInfo nbttagcompound2 = new VillageDoorInfo(j.getInteger("X"), j.getInteger("Y"), j.getInteger("Z"), j.getInteger("IDX"), j.getInteger("IDZ"), j.getInteger("TS"));
+         this.villageDoorInfoList.add(nbttagcompound2);
       }
 
-      NBTTagList var6 = var1.getTagList("Players");
+      NBTTagList var6 = nbttagcompound.getTagList("Players");
 
       for(int var7 = 0; var7 < var6.tagCount(); ++var7) {
          NBTTagCompound var8 = (NBTTagCompound)var6.tagAt(var7);
@@ -380,47 +380,47 @@
 
    }
 
-   public void writeVillageDataToNBT(NBTTagCompound var1) {
-      var1.setInteger("PopSize", this.numVillagers);
-      var1.setInteger("Radius", this.villageRadius);
-      var1.setInteger("Golems", this.numIronGolems);
-      var1.setInteger("Stable", this.lastAddDoorTimestamp);
-      var1.setInteger("Tick", this.tickCounter);
-      var1.setInteger("MTick", this.field_82694_i);
-      var1.setInteger("CX", this.center.posX);
-      var1.setInteger("CY", this.center.posY);
-      var1.setInteger("CZ", this.center.posZ);
-      var1.setInteger("ACX", this.centerHelper.posX);
-      var1.setInteger("ACY", this.centerHelper.posY);
-      var1.setInteger("ACZ", this.centerHelper.posZ);
-      NBTTagList var2 = new NBTTagList("Doors");
-      Iterator var3 = this.villageDoorInfoList.iterator();
-
-      while(var3.hasNext()) {
-         VillageDoorInfo var4 = (VillageDoorInfo)var3.next();
-         NBTTagCompound var5 = new NBTTagCompound("Door");
-         var5.setInteger("X", var4.posX);
-         var5.setInteger("Y", var4.posY);
-         var5.setInteger("Z", var4.posZ);
-         var5.setInteger("IDX", var4.insideDirectionX);
-         var5.setInteger("IDZ", var4.insideDirectionZ);
-         var5.setInteger("TS", var4.lastActivityTimestamp);
-         var2.appendTag(var5);
-      }
-
-      var1.setTag("Doors", var2);
-      NBTTagList var7 = new NBTTagList("Players");
-      Iterator var8 = this.playerReputation.keySet().iterator();
-
-      while(var8.hasNext()) {
-         String var9 = (String)var8.next();
-         NBTTagCompound var6 = new NBTTagCompound(var9);
-         var6.setString("Name", var9);
-         var6.setInteger("S", ((Integer)this.playerReputation.get(var9)).intValue());
-         var7.appendTag(var6);
+   public void writeVillageDataToNBT(NBTTagCompound nbttagcompound) {
+      nbttagcompound.setInteger("PopSize", this.numVillagers);
+      nbttagcompound.setInteger("Radius", this.villageRadius);
+      nbttagcompound.setInteger("Golems", this.numIronGolems);
+      nbttagcompound.setInteger("Stable", this.lastAddDoorTimestamp);
+      nbttagcompound.setInteger("Tick", this.tickCounter);
+      nbttagcompound.setInteger("MTick", this.field_82694_i);
+      nbttagcompound.setInteger("CX", this.center.posX);
+      nbttagcompound.setInteger("CY", this.center.posY);
+      nbttagcompound.setInteger("CZ", this.center.posZ);
+      nbttagcompound.setInteger("ACX", this.centerHelper.posX);
+      nbttagcompound.setInteger("ACY", this.centerHelper.posY);
+      nbttagcompound.setInteger("ACZ", this.centerHelper.posZ);
+      NBTTagList nbttaglist = new NBTTagList("Doors");
+      Iterator iterator = this.villageDoorInfoList.iterator();
+
+      while(iterator.hasNext()) {
+         VillageDoorInfo nbttaglist1 = (VillageDoorInfo)iterator.next();
+         NBTTagCompound iterator1 = new NBTTagCompound("Door");
+         iterator1.setInteger("X", nbttaglist1.posX);
+         iterator1.setInteger("Y", nbttaglist1.posY);
+         iterator1.setInteger("Z", nbttaglist1.posZ);
+         iterator1.setInteger("IDX", nbttaglist1.insideDirectionX);
+         iterator1.setInteger("IDZ", nbttaglist1.insideDirectionZ);
+         iterator1.setInteger("TS", nbttaglist1.lastActivityTimestamp);
+         nbttaglist.appendTag(iterator1);
+      }
+
+      nbttagcompound.setTag("Doors", nbttaglist);
+      NBTTagList nbttaglist11 = new NBTTagList("Players");
+      Iterator iterator11 = this.playerReputation.keySet().iterator();
+
+      while(iterator11.hasNext()) {
+         String s = (String)iterator11.next();
+         NBTTagCompound nbttagcompound2 = new NBTTagCompound(s);
+         nbttagcompound2.setString("Name", s);
+         nbttagcompound2.setInteger("S", ((Integer)this.playerReputation.get(s)).intValue());
+         nbttaglist11.appendTag(nbttagcompound2);
       }
 
-      var1.setTag("Players", var7);
+      nbttagcompound.setTag("Players", nbttaglist11);
    }
 
    public void func_82692_h() {
@@ -431,12 +431,12 @@
       return this.field_82694_i == 0 || this.tickCounter - this.field_82694_i >= 3600;
    }
 
-   public void func_82683_b(int var1) {
-      Iterator var2 = this.playerReputation.keySet().iterator();
+   public void func_82683_b(int i) {
+      Iterator iterator = this.playerReputation.keySet().iterator();
 
-      while(var2.hasNext()) {
-         String var3 = (String)var2.next();
-         this.setReputationForPlayer(var3, var1);
+      while(iterator.hasNext()) {
+         String s = (String)iterator.next();
+         this.setReputationForPlayer(s, i);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/VillageSiege.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/VillageSiege.class differ
diff -ur mcp-mcdev/net/minecraft/src/VillageSiege.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/VillageSiege.java
--- mcp-mcdev/net/minecraft/src/VillageSiege.java	2012-11-29 21:14:19.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/VillageSiege.java	2012-11-29 20:43:30.000000000 -0800
@@ -11,6 +11,7 @@
 import net.minecraft.src.Vec3;
 import net.minecraft.src.Village;
 import net.minecraft.src.World;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 
 public class VillageSiege {
 
@@ -25,13 +26,13 @@
    private int field_75539_i;
 
 
-   public VillageSiege(World var1) {
-      this.worldObj = var1;
+   public VillageSiege(World world) {
+      this.worldObj = world;
    }
 
    public void tick() {
-      boolean var1 = false;
-      if(var1) {
+      boolean flag = false;
+      if(flag) {
          if(this.field_75536_c == 2) {
             this.field_75533_d = 100;
             return;
@@ -47,8 +48,8 @@
          }
 
          if(this.field_75536_c == 0) {
-            float var2 = this.worldObj.getCelestialAngle(0.0F);
-            if((double)var2 < 0.5D || (double)var2 > 0.501D) {
+            float f = this.worldObj.getCelestialAngle(0.0F);
+            if((double)f < 0.5D || (double)f > 0.501D) {
                return;
             }
 
@@ -78,46 +79,46 @@
          } else {
             this.field_75536_c = 2;
          }
-
       }
+
    }
 
    private boolean func_75529_b() {
-      List var1 = this.worldObj.playerEntities;
-      Iterator var2 = var1.iterator();
+      List list = this.worldObj.playerEntities;
+      Iterator iterator = list.iterator();
 
-      while(var2.hasNext()) {
-         EntityPlayer var3 = (EntityPlayer)var2.next();
-         this.theVillage = this.worldObj.villageCollectionObj.findNearestVillage((int)var3.posX, (int)var3.posY, (int)var3.posZ, 1);
+      while(iterator.hasNext()) {
+         EntityPlayer entityhuman = (EntityPlayer)iterator.next();
+         this.theVillage = this.worldObj.villageCollectionObj.findNearestVillage((int)entityhuman.posX, (int)entityhuman.posY, (int)entityhuman.posZ, 1);
          if(this.theVillage != null && this.theVillage.getNumVillageDoors() >= 10 && this.theVillage.getTicksSinceLastDoorAdding() >= 20 && this.theVillage.getNumVillagers() >= 20) {
-            ChunkCoordinates var4 = this.theVillage.getCenter();
-            float var5 = (float)this.theVillage.getVillageRadius();
-            boolean var6 = false;
-            int var7 = 0;
+            ChunkCoordinates chunkcoordinates = this.theVillage.getCenter();
+            float f = (float)this.theVillage.getVillageRadius();
+            boolean flag = false;
+            int i = 0;
 
             while(true) {
-               if(var7 < 10) {
-                  this.field_75532_g = var4.posX + (int)((double)(MathHelper.cos(this.worldObj.rand.nextFloat() * 3.1415927F * 2.0F) * var5) * 0.9D);
-                  this.field_75538_h = var4.posY;
-                  this.field_75539_i = var4.posZ + (int)((double)(MathHelper.sin(this.worldObj.rand.nextFloat() * 3.1415927F * 2.0F) * var5) * 0.9D);
-                  var6 = false;
-                  Iterator var8 = this.worldObj.villageCollectionObj.getVillageList().iterator();
-
-                  while(var8.hasNext()) {
-                     Village var9 = (Village)var8.next();
-                     if(var9 != this.theVillage && var9.isInRange(this.field_75532_g, this.field_75538_h, this.field_75539_i)) {
-                        var6 = true;
+               if(i < 10) {
+                  this.field_75532_g = chunkcoordinates.posX + (int)((double)(MathHelper.cos(this.worldObj.rand.nextFloat() * 3.1415927F * 2.0F) * f) * 0.9D);
+                  this.field_75538_h = chunkcoordinates.posY;
+                  this.field_75539_i = chunkcoordinates.posZ + (int)((double)(MathHelper.sin(this.worldObj.rand.nextFloat() * 3.1415927F * 2.0F) * f) * 0.9D);
+                  flag = false;
+                  Iterator vec3d = this.worldObj.villageCollectionObj.getVillageList().iterator();
+
+                  while(vec3d.hasNext()) {
+                     Village village = (Village)vec3d.next();
+                     if(village != this.theVillage && village.isInRange(this.field_75532_g, this.field_75538_h, this.field_75539_i)) {
+                        flag = true;
                         break;
                      }
                   }
 
-                  if(var6) {
-                     ++var7;
+                  if(flag) {
+                     ++i;
                      continue;
                   }
                }
 
-               if(var6) {
+               if(flag) {
                   return false;
                }
 
@@ -136,35 +137,35 @@
    }
 
    private boolean spawnZombie() {
-      Vec3 var1 = this.func_75527_a(this.field_75532_g, this.field_75538_h, this.field_75539_i);
-      if(var1 == null) {
+      Vec3 vec3d = this.func_75527_a(this.field_75532_g, this.field_75538_h, this.field_75539_i);
+      if(vec3d == null) {
          return false;
       } else {
-         EntityZombie var2;
+         EntityZombie entityzombie;
          try {
-            var2 = new EntityZombie(this.worldObj);
-            var2.initCreature();
-            var2.setVillager(false);
+            entityzombie = new EntityZombie(this.worldObj);
+            entityzombie.initCreature();
+            entityzombie.setVillager(false);
          } catch (Exception var4) {
             var4.printStackTrace();
             return false;
          }
 
-         var2.setLocationAndAngles(var1.xCoord, var1.yCoord, var1.zCoord, this.worldObj.rand.nextFloat() * 360.0F, 0.0F);
-         this.worldObj.spawnEntityInWorld(var2);
-         ChunkCoordinates var3 = this.theVillage.getCenter();
-         var2.setHomeArea(var3.posX, var3.posY, var3.posZ, this.theVillage.getVillageRadius());
+         entityzombie.setLocationAndAngles(vec3d.xCoord, vec3d.yCoord, vec3d.zCoord, this.worldObj.rand.nextFloat() * 360.0F, 0.0F);
+         this.worldObj.addEntity(entityzombie, SpawnReason.VILLAGE_INVASION);
+         ChunkCoordinates chunkcoordinates = this.theVillage.getCenter();
+         entityzombie.setHomeArea(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, this.theVillage.getVillageRadius());
          return true;
       }
    }
 
-   private Vec3 func_75527_a(int var1, int var2, int var3) {
-      for(int var4 = 0; var4 < 10; ++var4) {
-         int var5 = var1 + this.worldObj.rand.nextInt(16) - 8;
-         int var6 = var2 + this.worldObj.rand.nextInt(6) - 3;
-         int var7 = var3 + this.worldObj.rand.nextInt(16) - 8;
-         if(this.theVillage.isInRange(var5, var6, var7) && SpawnerAnimals.canCreatureTypeSpawnAtLocation(EnumCreatureType.monster, this.worldObj, var5, var6, var7)) {
-            this.worldObj.getWorldVec3Pool().getVecFromPool((double)var5, (double)var6, (double)var7);
+   private Vec3 func_75527_a(int i, int j, int k) {
+      for(int l = 0; l < 10; ++l) {
+         int i1 = i + this.worldObj.rand.nextInt(16) - 8;
+         int j1 = j + this.worldObj.rand.nextInt(6) - 3;
+         int k1 = k + this.worldObj.rand.nextInt(16) - 8;
+         if(this.theVillage.isInRange(i1, j1, k1) && SpawnerAnimals.canCreatureTypeSpawnAtLocation(EnumCreatureType.monster, this.worldObj, i1, j1, k1)) {
+            return this.worldObj.getWorldVec3Pool().getVecFromPool((double)i1, (double)j1, (double)k1);
          }
       }
 
Binary files mcp-mcdev/net/minecraft/src/World.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/World.class differ
diff -ur mcp-mcdev/net/minecraft/src/World.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/World.java
--- mcp-mcdev/net/minecraft/src/World.java	2012-11-29 21:14:18.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/World.java	2012-11-29 20:43:29.000000000 -0800
@@ -3,11 +3,9 @@
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collection;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
-import java.util.Set;
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.BiomeGenBase;
 import net.minecraft.src.Block;
@@ -19,14 +17,23 @@
 import net.minecraft.src.CallableLvl3;
 import net.minecraft.src.Chunk;
 import net.minecraft.src.ChunkCache;
-import net.minecraft.src.ChunkCoordIntPair;
 import net.minecraft.src.ChunkCoordinates;
 import net.minecraft.src.ChunkPosition;
+import net.minecraft.src.ChunkProviderServer;
 import net.minecraft.src.CrashReport;
 import net.minecraft.src.CrashReportCategory;
 import net.minecraft.src.Entity;
+import net.minecraft.src.EntityAnimal;
+import net.minecraft.src.EntityGhast;
+import net.minecraft.src.EntityGolem;
+import net.minecraft.src.EntityItem;
+import net.minecraft.src.EntityLiving;
 import net.minecraft.src.EntityMinecart;
+import net.minecraft.src.EntityMob;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerMP;
+import net.minecraft.src.EntitySlime;
+import net.minecraft.src.EntityWaterMob;
 import net.minecraft.src.EnumSkyBlock;
 import net.minecraft.src.Explosion;
 import net.minecraft.src.GameRules;
@@ -39,6 +46,7 @@
 import net.minecraft.src.MapStorage;
 import net.minecraft.src.Material;
 import net.minecraft.src.MathHelper;
+import net.minecraft.src.MinecraftException;
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.PathEntity;
 import net.minecraft.src.PathFinder;
@@ -53,7 +61,24 @@
 import net.minecraft.src.WorldInfo;
 import net.minecraft.src.WorldProvider;
 import net.minecraft.src.WorldSavedData;
+import net.minecraft.src.WorldServer;
 import net.minecraft.src.WorldSettings;
+import org.bukkit.Bukkit;
+import org.bukkit.World.Environment;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.craftbukkit.util.LongHashSet;
+import org.bukkit.craftbukkit.util.UnsafeList;
+import org.bukkit.entity.Projectile;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.block.BlockCanBuildEvent;
+import org.bukkit.event.block.BlockPhysicsEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.event.weather.ThunderChangeEvent;
+import org.bukkit.event.weather.WeatherChangeEvent;
+import org.bukkit.generator.ChunkGenerator;
 
 public abstract class World implements IBlockAccess {
 
@@ -78,11 +103,11 @@
    public boolean editingBlocks = false;
    public int difficultySetting;
    public Random rand = new Random();
-   public final WorldProvider provider;
+   public WorldProvider provider;
    protected List worldAccesses = new ArrayList();
-   protected IChunkProvider chunkProvider;
+   public IChunkProvider chunkProvider;
    protected final ISaveHandler saveHandler;
-   protected WorldInfo worldInfo;
+   public WorldInfo worldInfo;
    public boolean findingSpawnPoint;
    public MapStorage mapStorage;
    public final VillageCollection villageCollectionObj;
@@ -90,43 +115,65 @@
    public final Profiler theProfiler;
    private final Vec3Pool vecPool = new Vec3Pool(300, 2000);
    private final Calendar theCalendar = Calendar.getInstance();
-   private ArrayList collidingBoundingBoxes = new ArrayList();
+   private UnsafeList collidingBoundingBoxes = new UnsafeList();
    private boolean scanningTileEntities;
-   protected boolean spawnHostileMobs = true;
-   protected boolean spawnPeacefulMobs = true;
-   protected Set activeChunkSet = new HashSet();
+   public boolean spawnHostileMobs = true;
+   public boolean spawnPeacefulMobs = true;
+   protected LongHashSet activeChunkSet = new LongHashSet();
+   public long ticksPerAnimalSpawns;
+   public long ticksPerMonsterSpawns;
    private int ambientTickCountdown;
    int[] lightUpdateBlockList;
    private List entitiesWithinAABBExcludingEntity;
    public boolean isRemote;
+   private final CraftWorld world;
+   public boolean pvpMode;
+   public boolean keepSpawnInMemory = true;
+   public ChunkGenerator generator;
+   Chunk lastChunkAccessed;
+   int lastXAccessed = Integer.MIN_VALUE;
+   int lastZAccessed = Integer.MIN_VALUE;
+   final Object chunkLock = new Object();
 
 
-   public BiomeGenBase getBiomeGenForCoords(int var1, int var2) {
-      if(this.blockExists(var1, 0, var2)) {
-         Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-         if(var3 != null) {
-            return var3.getBiomeGenForWorldCoords(var1 & 15, var2 & 15, this.provider.worldChunkMgr);
+   public BiomeGenBase getBiomeGenForCoords(int i, int j) {
+      if(this.blockExists(i, 0, j)) {
+         Chunk chunk = this.getChunkFromBlockCoords(i, j);
+         if(chunk != null) {
+            return chunk.getBiomeGenForWorldCoords(i & 15, j & 15, this.provider.worldChunkMgr);
          }
       }
 
-      return this.provider.worldChunkMgr.getBiomeGenAt(var1, var2);
+      return this.provider.worldChunkMgr.getBiomeGenAt(i, j);
    }
 
    public WorldChunkManager getWorldChunkManager() {
       return this.provider.worldChunkMgr;
    }
 
-   public World(ISaveHandler var1, String var2, WorldSettings var3, WorldProvider var4, Profiler var5) {
+   public CraftWorld getWorld() {
+      return this.world;
+   }
+
+   public CraftServer getServer() {
+      return (CraftServer)Bukkit.getServer();
+   }
+
+   public World(ISaveHandler idatamanager, String s, WorldSettings worldsettings, WorldProvider worldprovider, Profiler methodprofiler, ChunkGenerator gen, Environment env) {
+      this.generator = gen;
+      this.world = new CraftWorld((WorldServer)this, gen, env);
+      this.ticksPerAnimalSpawns = (long)this.getServer().getTicksPerAnimalSpawns();
+      this.ticksPerMonsterSpawns = (long)this.getServer().getTicksPerMonsterSpawns();
       this.ambientTickCountdown = this.rand.nextInt(12000);
       this.lightUpdateBlockList = new int['\u8000'];
-      this.entitiesWithinAABBExcludingEntity = new ArrayList();
+      this.entitiesWithinAABBExcludingEntity = new UnsafeList();
       this.isRemote = false;
-      this.saveHandler = var1;
-      this.theProfiler = var5;
-      this.mapStorage = new MapStorage(var1);
-      this.worldInfo = var1.loadWorldInfo();
-      if(var4 != null) {
-         this.provider = var4;
+      this.saveHandler = idatamanager;
+      this.theProfiler = methodprofiler;
+      this.mapStorage = new MapStorage(idatamanager);
+      this.worldInfo = idatamanager.loadWorldInfo();
+      if(worldprovider != null) {
+         this.provider = worldprovider;
       } else if(this.worldInfo != null && this.worldInfo.getDimension() != 0) {
          this.provider = WorldProvider.getProviderForDimension(this.worldInfo.getDimension());
       } else {
@@ -134,77 +181,78 @@
       }
 
       if(this.worldInfo == null) {
-         this.worldInfo = new WorldInfo(var3, var2);
+         this.worldInfo = new WorldInfo(worldsettings, s);
       } else {
-         this.worldInfo.setWorldName(var2);
+         this.worldInfo.setWorldName(s);
       }
 
       this.provider.registerWorld(this);
       this.chunkProvider = this.createChunkProvider();
       if(!this.worldInfo.isInitialized()) {
          try {
-            this.initialize(var3);
-         } catch (Throwable var10) {
-            CrashReport var7 = CrashReport.func_85055_a(var10, "Exception initializing level");
+            this.initialize(worldsettings);
+         } catch (Throwable var12) {
+            CrashReport crashreport = CrashReport.func_85055_a(var12, "Exception initializing level");
 
             try {
-               this.addWorldInfoToCrashReport(var7);
-            } catch (Throwable var9) {
+               this.addWorldInfoToCrashReport(crashreport);
+            } catch (Throwable var11) {
                ;
             }
 
-            throw new ReportedException(var7);
+            throw new ReportedException(crashreport);
          }
 
          this.worldInfo.setServerInitialized(true);
       }
 
-      VillageCollection var6 = (VillageCollection)this.mapStorage.loadData(VillageCollection.class, "villages");
-      if(var6 == null) {
+      VillageCollection villagecollection = (VillageCollection)this.mapStorage.loadData(VillageCollection.class, "villages");
+      if(villagecollection == null) {
          this.villageCollectionObj = new VillageCollection(this);
          this.mapStorage.setData("villages", this.villageCollectionObj);
       } else {
-         this.villageCollectionObj = var6;
+         this.villageCollectionObj = villagecollection;
          this.villageCollectionObj.func_82566_a(this);
       }
 
       this.calculateInitialSkylight();
       this.calculateInitialWeather();
+      this.getServer().addWorld(this.world);
    }
 
    protected abstract IChunkProvider createChunkProvider();
 
-   protected void initialize(WorldSettings var1) {
+   protected void initialize(WorldSettings worldsettings) {
       this.worldInfo.setServerInitialized(true);
    }
 
-   public int getFirstUncoveredBlock(int var1, int var2) {
-      int var3;
-      for(var3 = 63; !this.isAirBlock(var1, var3 + 1, var2); ++var3) {
+   public int getFirstUncoveredBlock(int i, int j) {
+      int k;
+      for(k = 63; !this.isAirBlock(i, k + 1, j); ++k) {
          ;
       }
 
-      return this.getBlockId(var1, var3, var2);
+      return this.getBlockId(i, k, j);
    }
 
-   public int getBlockId(int var1, int var2, int var3) {
-      if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
-         if(var2 < 0) {
+   public int getBlockId(int i, int j, int k) {
+      if(i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000) {
+         if(j < 0) {
             return 0;
-         } else if(var2 >= 256) {
+         } else if(j >= 256) {
             return 0;
          } else {
-            Chunk var4 = null;
+            Chunk chunk = null;
 
             try {
-               var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-               return var4.getBlockID(var1 & 15, var2, var3 & 15);
+               chunk = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+               return chunk.getBlockID(i & 15, j, k & 15);
             } catch (Throwable var8) {
-               CrashReport var6 = CrashReport.func_85055_a(var8, "Exception getting block type in world");
-               CrashReportCategory var7 = var6.func_85058_a("Requested block coordinates");
-               var7.addCrashSection("Found chunk", Boolean.valueOf(var4 == null));
-               var7.addCrashSection("Location", CrashReportCategory.func_85071_a(var1, var2, var3));
-               throw new ReportedException(var6);
+               CrashReport crashreport = CrashReport.func_85055_a(var8, "Exception getting block type in world");
+               CrashReportCategory crashreportsystemdetails = crashreport.func_85058_a("Requested block coordinates");
+               crashreportsystemdetails.addCrashSection("Found chunk", Boolean.valueOf(chunk == null));
+               crashreportsystemdetails.addCrashSection("Location", CrashReportCategory.func_85071_a(i, j, k));
+               throw new ReportedException(crashreport);
             }
          }
       } else {
@@ -212,42 +260,42 @@
       }
    }
 
-   public int getBlockLightOpacity(int var1, int var2, int var3) {
-      return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000?(var2 < 0?0:(var2 >= 256?0:this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockLightOpacity(var1 & 15, var2, var3 & 15))):0;
+   public int getBlockLightOpacity(int i, int j, int k) {
+      return i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000?(j < 0?0:(j >= 256?0:this.getChunkFromChunkCoords(i >> 4, k >> 4).getBlockLightOpacity(i & 15, j, k & 15))):0;
    }
 
-   public boolean isAirBlock(int var1, int var2, int var3) {
-      return this.getBlockId(var1, var2, var3) == 0;
+   public boolean isAirBlock(int i, int j, int k) {
+      return this.getBlockId(i, j, k) == 0;
    }
 
-   public boolean blockHasTileEntity(int var1, int var2, int var3) {
-      int var4 = this.getBlockId(var1, var2, var3);
-      return Block.blocksList[var4] != null && Block.blocksList[var4].hasTileEntity();
+   public boolean blockHasTileEntity(int i, int j, int k) {
+      int l = this.getBlockId(i, j, k);
+      return Block.blocksList[l] != null && Block.blocksList[l].hasTileEntity();
    }
 
-   public int func_85175_e(int var1, int var2, int var3) {
-      int var4 = this.getBlockId(var1, var2, var3);
-      return Block.blocksList[var4] != null?Block.blocksList[var4].getRenderType():-1;
+   public int func_85175_e(int i, int j, int k) {
+      int l = this.getBlockId(i, j, k);
+      return Block.blocksList[l] != null?Block.blocksList[l].getRenderType():-1;
    }
 
-   public boolean blockExists(int var1, int var2, int var3) {
-      return var2 >= 0 && var2 < 256?this.chunkExists(var1 >> 4, var3 >> 4):false;
+   public boolean blockExists(int i, int j, int k) {
+      return j >= 0 && j < 256?this.chunkExists(i >> 4, k >> 4):false;
    }
 
-   public boolean doChunksNearChunkExist(int var1, int var2, int var3, int var4) {
-      return this.checkChunksExist(var1 - var4, var2 - var4, var3 - var4, var1 + var4, var2 + var4, var3 + var4);
+   public boolean doChunksNearChunkExist(int i, int j, int k, int l) {
+      return this.checkChunksExist(i - l, j - l, k - l, i + l, j + l, k + l);
    }
 
-   public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-      if(var5 >= 0 && var2 < 256) {
-         var1 >>= 4;
-         var3 >>= 4;
-         var4 >>= 4;
-         var6 >>= 4;
+   public boolean checkChunksExist(int i, int j, int k, int l, int i1, int j1) {
+      if(i1 >= 0 && j < 256) {
+         i >>= 4;
+         k >>= 4;
+         l >>= 4;
+         j1 >>= 4;
 
-         for(int var7 = var1; var7 <= var4; ++var7) {
-            for(int var8 = var3; var8 <= var6; ++var8) {
-               if(!this.chunkExists(var7, var8)) {
+         for(int k1 = i; k1 <= l; ++k1) {
+            for(int l1 = k; l1 <= j1; ++l1) {
+               if(!this.chunkExists(k1, l1) || ((WorldServer)this).theChunkProviderServer.droppedChunksSet.contains(k1, l1)) {
                   return false;
                }
             }
@@ -259,510 +307,525 @@
       }
    }
 
-   protected boolean chunkExists(int var1, int var2) {
-      return this.chunkProvider.chunkExists(var1, var2);
+   protected boolean chunkExists(int i, int j) {
+      return this.chunkProvider.chunkExists(i, j);
    }
 
-   public Chunk getChunkFromBlockCoords(int var1, int var2) {
-      return this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
+   public Chunk getChunkFromBlockCoords(int i, int j) {
+      return this.getChunkFromChunkCoords(i >> 4, j >> 4);
    }
 
-   public Chunk getChunkFromChunkCoords(int var1, int var2) {
-      return this.chunkProvider.provideChunk(var1, var2);
+   public Chunk getChunkFromChunkCoords(int i, int j) {
+      Chunk result = null;
+      Object var4 = this.chunkLock;
+      synchronized(this.chunkLock) {
+         if(this.lastChunkAccessed == null || this.lastXAccessed != i || this.lastZAccessed != j) {
+            this.lastChunkAccessed = this.chunkProvider.provideChunk(i, j);
+            this.lastXAccessed = i;
+            this.lastZAccessed = j;
+         }
+
+         result = this.lastChunkAccessed;
+         return result;
+      }
    }
 
-   public boolean setBlockAndMetadata(int var1, int var2, int var3, int var4, int var5) {
-      return this.setBlockAndMetadataWithUpdate(var1, var2, var3, var4, var5, true);
+   public boolean setBlockAndMetadata(int i, int j, int k, int l, int i1) {
+      return this.setBlockAndMetadataWithUpdate(i, j, k, l, i1, true);
    }
 
-   public boolean setBlockAndMetadataWithUpdate(int var1, int var2, int var3, int var4, int var5, boolean var6) {
-      if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
-         if(var2 < 0) {
+   public boolean setBlockAndMetadataWithUpdate(int i, int j, int k, int l, int i1, boolean flag) {
+      if(i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000) {
+         if(j < 0) {
             return false;
-         } else if(var2 >= 256) {
+         } else if(j >= 256) {
             return false;
          } else {
-            Chunk var7 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-            boolean var8 = var7.setBlockIDWithMetadata(var1 & 15, var2, var3 & 15, var4, var5);
+            Chunk chunk = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+            boolean flag1 = chunk.setBlockIDWithMetadata(i & 15, j, k & 15, l, i1);
             this.theProfiler.startSection("checkLight");
-            this.updateAllLightTypes(var1, var2, var3);
+            this.updateAllLightTypes(i, j, k);
             this.theProfiler.endSection();
-            if(var6 && var8 && (this.isRemote || var7.deferRender)) {
-               this.markBlockForUpdate(var1, var2, var3);
+            if(flag && flag1 && (this.isRemote || chunk.deferRender)) {
+               this.markBlockForUpdate(i, j, k);
             }
 
-            return var8;
+            return flag1;
          }
       } else {
          return false;
       }
    }
 
-   public boolean setBlock(int var1, int var2, int var3, int var4) {
-      if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
-         if(var2 < 0) {
+   public boolean setBlock(int i, int j, int k, int l) {
+      if(i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000) {
+         if(j < 0) {
             return false;
-         } else if(var2 >= 256) {
+         } else if(j >= 256) {
             return false;
          } else {
-            Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-            boolean var6 = var5.setBlockID(var1 & 15, var2, var3 & 15, var4);
+            Chunk chunk = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+            boolean flag = chunk.setBlockID(i & 15, j, k & 15, l);
             this.theProfiler.startSection("checkLight");
-            this.updateAllLightTypes(var1, var2, var3);
+            this.updateAllLightTypes(i, j, k);
             this.theProfiler.endSection();
-            if(var6 && (this.isRemote || var5.deferRender)) {
-               this.markBlockForUpdate(var1, var2, var3);
+            if(flag && (this.isRemote || chunk.deferRender)) {
+               this.markBlockForUpdate(i, j, k);
             }
 
-            return var6;
+            return flag;
          }
       } else {
          return false;
       }
    }
 
-   public Material getBlockMaterial(int var1, int var2, int var3) {
-      int var4 = this.getBlockId(var1, var2, var3);
-      return var4 == 0?Material.air:Block.blocksList[var4].blockMaterial;
+   public Material getBlockMaterial(int i, int j, int k) {
+      int l = this.getBlockId(i, j, k);
+      return l == 0?Material.air:Block.blocksList[l].blockMaterial;
    }
 
-   public int getBlockMetadata(int var1, int var2, int var3) {
-      if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
-         if(var2 < 0) {
+   public int getBlockMetadata(int i, int j, int k) {
+      if(i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000) {
+         if(j < 0) {
             return 0;
-         } else if(var2 >= 256) {
+         } else if(j >= 256) {
             return 0;
          } else {
-            Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-            var1 &= 15;
-            var3 &= 15;
-            return var4.getBlockMetadata(var1, var2, var3);
+            Chunk chunk = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+            i &= 15;
+            k &= 15;
+            return chunk.getBlockMetadata(i, j, k);
          }
       } else {
          return 0;
       }
    }
 
-   public void setBlockMetadataWithNotify(int var1, int var2, int var3, int var4) {
-      if(this.setBlockMetadata(var1, var2, var3, var4)) {
-         this.notifyBlockChange(var1, var2, var3, this.getBlockId(var1, var2, var3));
+   public void setBlockMetadataWithNotify(int i, int j, int k, int l) {
+      if(this.setBlockMetadata(i, j, k, l)) {
+         this.notifyBlockChange(i, j, k, this.getBlockId(i, j, k));
       }
 
    }
 
-   public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
-      if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
-         if(var2 < 0) {
+   public boolean setBlockMetadata(int i, int j, int k, int l) {
+      if(i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000) {
+         if(j < 0) {
             return false;
-         } else if(var2 >= 256) {
+         } else if(j >= 256) {
             return false;
          } else {
-            Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-            int var6 = var1 & 15;
-            int var7 = var3 & 15;
-            boolean var8 = var5.setBlockMetadata(var6, var2, var7, var4);
-            if(var8 && (this.isRemote || var5.deferRender && Block.requiresSelfNotify[var5.getBlockID(var6, var2, var7) & 4095])) {
-               this.markBlockForUpdate(var1, var2, var3);
+            Chunk chunk = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+            int i1 = i & 15;
+            int j1 = k & 15;
+            boolean flag = chunk.setBlockMetadata(i1, j, j1, l);
+            if(flag && (this.isRemote || chunk.deferRender && Block.requiresSelfNotify[chunk.getBlockID(i1, j, j1) & 4095])) {
+               this.markBlockForUpdate(i, j, k);
             }
 
-            return var8;
+            return flag;
          }
       } else {
          return false;
       }
    }
 
-   public boolean setBlockWithNotify(int var1, int var2, int var3, int var4) {
-      if(this.setBlock(var1, var2, var3, var4)) {
-         this.notifyBlockChange(var1, var2, var3, var4);
+   public boolean setBlockWithNotify(int i, int j, int k, int l) {
+      int old = this.getBlockId(i, j, k);
+      if(this.setBlock(i, j, k, l)) {
+         this.notifyBlockChange(i, j, k, l == 0?old:l);
          return true;
       } else {
          return false;
       }
    }
 
-   public boolean setBlockAndMetadataWithNotify(int var1, int var2, int var3, int var4, int var5) {
-      if(this.setBlockAndMetadata(var1, var2, var3, var4, var5)) {
-         this.notifyBlockChange(var1, var2, var3, var4);
+   public boolean setBlockAndMetadataWithNotify(int i, int j, int k, int l, int i1) {
+      if(this.setBlockAndMetadata(i, j, k, l, i1)) {
+         this.notifyBlockChange(i, j, k, l);
          return true;
       } else {
          return false;
       }
    }
 
-   public void markBlockForUpdate(int var1, int var2, int var3) {
-      for(int var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
-         ((IWorldAccess)this.worldAccesses.get(var4)).markBlockForUpdate(var1, var2, var3);
+   public void markBlockForUpdate(int i, int j, int k) {
+      for(int l = 0; l < this.worldAccesses.size(); ++l) {
+         ((IWorldAccess)this.worldAccesses.get(l)).markBlockForUpdate(i, j, k);
       }
 
    }
 
-   public void notifyBlockChange(int var1, int var2, int var3, int var4) {
-      this.notifyBlocksOfNeighborChange(var1, var2, var3, var4);
+   public void notifyBlockChange(int i, int j, int k, int l) {
+      this.notifyBlocksOfNeighborChange(i, j, k, l);
    }
 
-   public void markBlocksDirtyVertical(int var1, int var2, int var3, int var4) {
-      int var5;
-      if(var3 > var4) {
-         var5 = var4;
-         var4 = var3;
-         var3 = var5;
+   public void markBlocksDirtyVertical(int i, int j, int k, int l) {
+      int i1;
+      if(k > l) {
+         i1 = l;
+         l = k;
+         k = i1;
       }
 
       if(!this.provider.hasNoSky) {
-         for(var5 = var3; var5 <= var4; ++var5) {
-            this.updateLightByType(EnumSkyBlock.Sky, var1, var5, var2);
+         for(i1 = k; i1 <= l; ++i1) {
+            this.updateLightByType(EnumSkyBlock.Sky, i, i1, j);
          }
       }
 
-      this.markBlockRangeForRenderUpdate(var1, var3, var2, var1, var4, var2);
+      this.markBlockRangeForRenderUpdate(i, k, j, i, l, j);
    }
 
-   public void markBlockForRenderUpdate2(int var1, int var2, int var3) {
-      for(int var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
-         ((IWorldAccess)this.worldAccesses.get(var4)).markBlockRangeForRenderUpdate(var1, var2, var3, var1, var2, var3);
+   public void markBlockForRenderUpdate2(int i, int j, int k) {
+      for(int l = 0; l < this.worldAccesses.size(); ++l) {
+         ((IWorldAccess)this.worldAccesses.get(l)).markBlockRangeForRenderUpdate(i, j, k, i, j, k);
       }
 
    }
 
-   public void markBlockRangeForRenderUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
-      for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-         ((IWorldAccess)this.worldAccesses.get(var7)).markBlockRangeForRenderUpdate(var1, var2, var3, var4, var5, var6);
+   public void markBlockRangeForRenderUpdate(int i, int j, int k, int l, int i1, int j1) {
+      for(int k1 = 0; k1 < this.worldAccesses.size(); ++k1) {
+         ((IWorldAccess)this.worldAccesses.get(k1)).markBlockRangeForRenderUpdate(i, j, k, l, i1, j1);
       }
 
    }
 
-   public void notifyBlocksOfNeighborChange(int var1, int var2, int var3, int var4) {
-      this.notifyBlockOfNeighborChange(var1 - 1, var2, var3, var4);
-      this.notifyBlockOfNeighborChange(var1 + 1, var2, var3, var4);
-      this.notifyBlockOfNeighborChange(var1, var2 - 1, var3, var4);
-      this.notifyBlockOfNeighborChange(var1, var2 + 1, var3, var4);
-      this.notifyBlockOfNeighborChange(var1, var2, var3 - 1, var4);
-      this.notifyBlockOfNeighborChange(var1, var2, var3 + 1, var4);
+   public void notifyBlocksOfNeighborChange(int i, int j, int k, int l) {
+      this.notifyBlockOfNeighborChange(i - 1, j, k, l);
+      this.notifyBlockOfNeighborChange(i + 1, j, k, l);
+      this.notifyBlockOfNeighborChange(i, j - 1, k, l);
+      this.notifyBlockOfNeighborChange(i, j + 1, k, l);
+      this.notifyBlockOfNeighborChange(i, j, k - 1, l);
+      this.notifyBlockOfNeighborChange(i, j, k + 1, l);
    }
 
-   private void notifyBlockOfNeighborChange(int var1, int var2, int var3, int var4) {
+   private void notifyBlockOfNeighborChange(int i, int j, int k, int l) {
       if(!this.editingBlocks && !this.isRemote) {
-         int var5 = this.getBlockId(var1, var2, var3);
-         Block var6 = Block.blocksList[var5];
-         if(var6 != null) {
+         int i1 = this.getBlockId(i, j, k);
+         Block block = Block.blocksList[i1];
+         if(block != null) {
             try {
-               var6.onNeighborBlockChange(this, var1, var2, var3, var4);
+               CraftWorld throwable = ((WorldServer)this).getWorld();
+               if(throwable != null) {
+                  BlockPhysicsEvent crashreport1 = new BlockPhysicsEvent(throwable.getBlockAt(i, j, k), l);
+                  this.getServer().getPluginManager().callEvent(crashreport1);
+                  if(crashreport1.isCancelled()) {
+                     return;
+                  }
+               }
+
+               block.onNeighborBlockChange(this, i, j, k, l);
             } catch (Throwable var13) {
-               CrashReport var8 = CrashReport.func_85055_a(var13, "Exception while updating neighbours");
-               CrashReportCategory var9 = var8.func_85058_a("Block being updated");
+               CrashReport crashreport = CrashReport.func_85055_a(var13, "Exception while updating neighbours");
+               CrashReportCategory crashreportsystemdetails = crashreport.func_85058_a("Block being updated");
 
-               int var10;
+               int j1;
                try {
-                  var10 = this.getBlockMetadata(var1, var2, var3);
+                  j1 = this.getBlockMetadata(i, j, k);
                } catch (Throwable var12) {
-                  var10 = -1;
+                  j1 = -1;
                }
 
-               var9.addCrashSectionCallable("Source block type", new CallableLvl1(this, var4));
-               CrashReportCategory.func_85068_a(var9, var1, var2, var3, var5, var10);
-               throw new ReportedException(var8);
+               crashreportsystemdetails.addCrashSectionCallable("Source block type", new CallableLvl1(this, l));
+               CrashReportCategory.func_85068_a(crashreportsystemdetails, i, j, k, i1, j1);
+               throw new ReportedException(crashreport);
             }
          }
-
       }
+
    }
 
-   public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-      return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).canBlockSeeTheSky(var1 & 15, var2, var3 & 15);
+   public boolean canBlockSeeTheSky(int i, int j, int k) {
+      return this.getChunkFromChunkCoords(i >> 4, k >> 4).canBlockSeeTheSky(i & 15, j, k & 15);
    }
 
-   public int getFullBlockLightValue(int var1, int var2, int var3) {
-      if(var2 < 0) {
+   public int getFullBlockLightValue(int i, int j, int k) {
+      if(j < 0) {
          return 0;
       } else {
-         if(var2 >= 256) {
-            var2 = 255;
+         if(j >= 256) {
+            j = 255;
          }
 
-         return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockLightValue(var1 & 15, var2, var3 & 15, 0);
+         return this.getChunkFromChunkCoords(i >> 4, k >> 4).getBlockLightValue(i & 15, j, k & 15, 0);
       }
    }
 
-   public int getBlockLightValue(int var1, int var2, int var3) {
-      return this.getBlockLightValue_do(var1, var2, var3, true);
+   public int getBlockLightValue(int i, int j, int k) {
+      return this.getBlockLightValue_do(i, j, k, true);
    }
 
-   public int getBlockLightValue_do(int var1, int var2, int var3, boolean var4) {
-      if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
-         if(var4) {
-            int var5 = this.getBlockId(var1, var2, var3);
-            if(var5 == Block.stoneSingleSlab.blockID || var5 == Block.woodSingleSlab.blockID || var5 == Block.tilledField.blockID || var5 == Block.stairCompactCobblestone.blockID || var5 == Block.stairCompactPlanks.blockID) {
-               int var6 = this.getBlockLightValue_do(var1, var2 + 1, var3, false);
-               int var7 = this.getBlockLightValue_do(var1 + 1, var2, var3, false);
-               int var8 = this.getBlockLightValue_do(var1 - 1, var2, var3, false);
-               int var9 = this.getBlockLightValue_do(var1, var2, var3 + 1, false);
-               int var10 = this.getBlockLightValue_do(var1, var2, var3 - 1, false);
-               if(var7 > var6) {
-                  var6 = var7;
+   public int getBlockLightValue_do(int i, int j, int k, boolean flag) {
+      if(i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000) {
+         if(flag) {
+            int chunk = this.getBlockId(i, j, k);
+            if(chunk == Block.stoneSingleSlab.blockID || chunk == Block.woodSingleSlab.blockID || chunk == Block.tilledField.blockID || chunk == Block.stairCompactCobblestone.blockID || chunk == Block.stairCompactPlanks.blockID) {
+               int i1 = this.getBlockLightValue_do(i, j + 1, k, false);
+               int j1 = this.getBlockLightValue_do(i + 1, j, k, false);
+               int k1 = this.getBlockLightValue_do(i - 1, j, k, false);
+               int l1 = this.getBlockLightValue_do(i, j, k + 1, false);
+               int i2 = this.getBlockLightValue_do(i, j, k - 1, false);
+               if(j1 > i1) {
+                  i1 = j1;
                }
 
-               if(var8 > var6) {
-                  var6 = var8;
+               if(k1 > i1) {
+                  i1 = k1;
                }
 
-               if(var9 > var6) {
-                  var6 = var9;
+               if(l1 > i1) {
+                  i1 = l1;
                }
 
-               if(var10 > var6) {
-                  var6 = var10;
+               if(i2 > i1) {
+                  i1 = i2;
                }
 
-               return var6;
+               return i1;
             }
          }
 
-         if(var2 < 0) {
+         if(j < 0) {
             return 0;
          } else {
-            if(var2 >= 256) {
-               var2 = 255;
+            if(j >= 256) {
+               j = 255;
             }
 
-            Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-            var1 &= 15;
-            var3 &= 15;
-            return var11.getBlockLightValue(var1, var2, var3, this.skylightSubtracted);
+            Chunk chunk1 = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+            i &= 15;
+            k &= 15;
+            return chunk1.getBlockLightValue(i, j, k, this.skylightSubtracted);
          }
       } else {
          return 15;
       }
    }
 
-   public int getHeightValue(int var1, int var2) {
-      if(var1 >= -30000000 && var2 >= -30000000 && var1 < 30000000 && var2 < 30000000) {
-         if(!this.chunkExists(var1 >> 4, var2 >> 4)) {
+   public int getHeightValue(int i, int j) {
+      if(i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
+         if(!this.chunkExists(i >> 4, j >> 4)) {
             return 0;
          } else {
-            Chunk var3 = this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-            return var3.getHeightValue(var1 & 15, var2 & 15);
+            Chunk chunk = this.getChunkFromChunkCoords(i >> 4, j >> 4);
+            return chunk.getHeightValue(i & 15, j & 15);
          }
       } else {
          return 0;
       }
    }
 
-   public int func_82734_g(int var1, int var2) {
-      if(var1 >= -30000000 && var2 >= -30000000 && var1 < 30000000 && var2 < 30000000) {
-         if(!this.chunkExists(var1 >> 4, var2 >> 4)) {
+   public int func_82734_g(int i, int j) {
+      if(i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
+         if(!this.chunkExists(i >> 4, j >> 4)) {
             return 0;
          } else {
-            Chunk var3 = this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-            return var3.field_82912_p;
+            Chunk chunk = this.getChunkFromChunkCoords(i >> 4, j >> 4);
+            return chunk.field_82912_p;
          }
       } else {
          return 0;
       }
    }
 
-   public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-      if(var3 < 0) {
-         var3 = 0;
+   public int getSavedLightValue(EnumSkyBlock enumskyblock, int i, int j, int k) {
+      if(j < 0) {
+         j = 0;
       }
 
-      if(var3 >= 256) {
-         var3 = 255;
+      if(j >= 256) {
+         j = 255;
       }
 
-      if(var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
-         int var5 = var2 >> 4;
-         int var6 = var4 >> 4;
-         if(!this.chunkExists(var5, var6)) {
-            return var1.defaultLightValue;
+      if(i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000) {
+         int l = i >> 4;
+         int i1 = k >> 4;
+         if(!this.chunkExists(l, i1)) {
+            return enumskyblock.defaultLightValue;
          } else {
-            Chunk var7 = this.getChunkFromChunkCoords(var5, var6);
-            return var7.getSavedLightValue(var1, var2 & 15, var3, var4 & 15);
+            Chunk chunk = this.getChunkFromChunkCoords(l, i1);
+            return chunk.getSavedLightValue(enumskyblock, i & 15, j, k & 15);
          }
       } else {
-         return var1.defaultLightValue;
+         return enumskyblock.defaultLightValue;
       }
    }
 
-   public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-      if(var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
-         if(var3 >= 0) {
-            if(var3 < 256) {
-               if(this.chunkExists(var2 >> 4, var4 >> 4)) {
-                  Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
-                  var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
-
-                  for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-                     ((IWorldAccess)this.worldAccesses.get(var7)).markBlockForRenderUpdate(var2, var3, var4);
-                  }
+   public void setLightValue(EnumSkyBlock enumskyblock, int i, int j, int k, int l) {
+      if(i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000 && j >= 0 && j < 256 && this.chunkExists(i >> 4, k >> 4)) {
+         Chunk chunk = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+         chunk.setLightValue(enumskyblock, i & 15, j, k & 15, l);
 
-               }
-            }
+         for(int i1 = 0; i1 < this.worldAccesses.size(); ++i1) {
+            ((IWorldAccess)this.worldAccesses.get(i1)).markBlockForRenderUpdate(i, j, k);
          }
       }
+
    }
 
-   public void markBlockForRenderUpdate(int var1, int var2, int var3) {
-      for(int var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
-         ((IWorldAccess)this.worldAccesses.get(var4)).markBlockForRenderUpdate(var1, var2, var3);
+   public void markBlockForRenderUpdate(int i, int j, int k) {
+      for(int l = 0; l < this.worldAccesses.size(); ++l) {
+         ((IWorldAccess)this.worldAccesses.get(l)).markBlockForRenderUpdate(i, j, k);
       }
 
    }
 
-   public float getLightBrightness(int var1, int var2, int var3) {
-      return this.provider.lightBrightnessTable[this.getBlockLightValue(var1, var2, var3)];
+   public float getLightBrightness(int i, int j, int k) {
+      return this.provider.lightBrightnessTable[this.getBlockLightValue(i, j, k)];
    }
 
    public boolean isDaytime() {
       return this.skylightSubtracted < 4;
    }
 
-   public MovingObjectPosition rayTraceBlocks(Vec3 var1, Vec3 var2) {
-      return this.rayTraceBlocks_do_do(var1, var2, false, false);
+   public MovingObjectPosition rayTraceBlocks(Vec3 vec3d, Vec3 vec3d1) {
+      return this.rayTraceBlocks_do_do(vec3d, vec3d1, false, false);
    }
 
-   public MovingObjectPosition rayTraceBlocks_do(Vec3 var1, Vec3 var2, boolean var3) {
-      return this.rayTraceBlocks_do_do(var1, var2, var3, false);
+   public MovingObjectPosition rayTraceBlocks_do(Vec3 vec3d, Vec3 vec3d1, boolean flag) {
+      return this.rayTraceBlocks_do_do(vec3d, vec3d1, flag, false);
    }
 
-   public MovingObjectPosition rayTraceBlocks_do_do(Vec3 var1, Vec3 var2, boolean var3, boolean var4) {
-      if(!Double.isNaN(var1.xCoord) && !Double.isNaN(var1.yCoord) && !Double.isNaN(var1.zCoord)) {
-         if(!Double.isNaN(var2.xCoord) && !Double.isNaN(var2.yCoord) && !Double.isNaN(var2.zCoord)) {
-            int var5 = MathHelper.floor_double(var2.xCoord);
-            int var6 = MathHelper.floor_double(var2.yCoord);
-            int var7 = MathHelper.floor_double(var2.zCoord);
-            int var8 = MathHelper.floor_double(var1.xCoord);
-            int var9 = MathHelper.floor_double(var1.yCoord);
-            int var10 = MathHelper.floor_double(var1.zCoord);
-            int var11 = this.getBlockId(var8, var9, var10);
-            int var12 = this.getBlockMetadata(var8, var9, var10);
-            Block var13 = Block.blocksList[var11];
-            if((!var4 || var13 == null || var13.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) && var11 > 0 && var13.canCollideCheck(var12, var3)) {
-               MovingObjectPosition var14 = var13.collisionRayTrace(this, var8, var9, var10, var1, var2);
-               if(var14 != null) {
-                  return var14;
+   public MovingObjectPosition rayTraceBlocks_do_do(Vec3 vec3d, Vec3 vec3d1, boolean flag, boolean flag1) {
+      if(!Double.isNaN(vec3d.xCoord) && !Double.isNaN(vec3d.yCoord) && !Double.isNaN(vec3d.zCoord)) {
+         if(!Double.isNaN(vec3d1.xCoord) && !Double.isNaN(vec3d1.yCoord) && !Double.isNaN(vec3d1.zCoord)) {
+            int i = MathHelper.floor_double(vec3d1.xCoord);
+            int j = MathHelper.floor_double(vec3d1.yCoord);
+            int k = MathHelper.floor_double(vec3d1.zCoord);
+            int l = MathHelper.floor_double(vec3d.xCoord);
+            int i1 = MathHelper.floor_double(vec3d.yCoord);
+            int j1 = MathHelper.floor_double(vec3d.zCoord);
+            int k1 = this.getBlockId(l, i1, j1);
+            int l1 = this.getBlockMetadata(l, i1, j1);
+            Block block = Block.blocksList[k1];
+            if((!flag1 || block == null || block.getCollisionBoundingBoxFromPool(this, l, i1, j1) != null) && k1 > 0 && block.canCollideCheck(l1, flag)) {
+               MovingObjectPosition flag2 = block.collisionRayTrace(this, l, i1, j1, vec3d, vec3d1);
+               if(flag2 != null) {
+                  return flag2;
                }
             }
 
-            var11 = 200;
-
-            while(var11-- >= 0) {
-               if(Double.isNaN(var1.xCoord) || Double.isNaN(var1.yCoord) || Double.isNaN(var1.zCoord)) {
+            Vec3 vec3d2;
+            for(k1 = 200; k1-- >= 0; vec3d2.myVec3LocalPool.release(vec3d2)) {
+               if(Double.isNaN(vec3d.xCoord) || Double.isNaN(vec3d.yCoord) || Double.isNaN(vec3d.zCoord)) {
                   return null;
                }
 
-               if(var8 == var5 && var9 == var6 && var10 == var7) {
+               if(l == i && i1 == j && j1 == k) {
                   return null;
                }
 
-               boolean var39 = true;
-               boolean var40 = true;
-               boolean var41 = true;
-               double var15 = 999.0D;
-               double var17 = 999.0D;
-               double var19 = 999.0D;
-               if(var5 > var8) {
-                  var15 = (double)var8 + 1.0D;
-               } else if(var5 < var8) {
-                  var15 = (double)var8 + 0.0D;
+               boolean var42 = true;
+               boolean flag3 = true;
+               boolean flag4 = true;
+               double d0 = 999.0D;
+               double d1 = 999.0D;
+               double d2 = 999.0D;
+               if(i > l) {
+                  d0 = (double)l + 1.0D;
+               } else if(i < l) {
+                  d0 = (double)l + 0.0D;
                } else {
-                  var39 = false;
+                  var42 = false;
                }
 
-               if(var6 > var9) {
-                  var17 = (double)var9 + 1.0D;
-               } else if(var6 < var9) {
-                  var17 = (double)var9 + 0.0D;
+               if(j > i1) {
+                  d1 = (double)i1 + 1.0D;
+               } else if(j < i1) {
+                  d1 = (double)i1 + 0.0D;
                } else {
-                  var40 = false;
+                  flag3 = false;
                }
 
-               if(var7 > var10) {
-                  var19 = (double)var10 + 1.0D;
-               } else if(var7 < var10) {
-                  var19 = (double)var10 + 0.0D;
+               if(k > j1) {
+                  d2 = (double)j1 + 1.0D;
+               } else if(k < j1) {
+                  d2 = (double)j1 + 0.0D;
                } else {
-                  var41 = false;
+                  flag4 = false;
                }
 
-               double var21 = 999.0D;
-               double var23 = 999.0D;
-               double var25 = 999.0D;
-               double var27 = var2.xCoord - var1.xCoord;
-               double var29 = var2.yCoord - var1.yCoord;
-               double var31 = var2.zCoord - var1.zCoord;
-               if(var39) {
-                  var21 = (var15 - var1.xCoord) / var27;
+               double d3 = 999.0D;
+               double d4 = 999.0D;
+               double d5 = 999.0D;
+               double d6 = vec3d1.xCoord - vec3d.xCoord;
+               double d7 = vec3d1.yCoord - vec3d.yCoord;
+               double d8 = vec3d1.zCoord - vec3d.zCoord;
+               if(var42) {
+                  d3 = (d0 - vec3d.xCoord) / d6;
                }
 
-               if(var40) {
-                  var23 = (var17 - var1.yCoord) / var29;
+               if(flag3) {
+                  d4 = (d1 - vec3d.yCoord) / d7;
                }
 
-               if(var41) {
-                  var25 = (var19 - var1.zCoord) / var31;
+               if(flag4) {
+                  d5 = (d2 - vec3d.zCoord) / d8;
                }
 
-               boolean var33 = false;
-               byte var42;
-               if(var21 < var23 && var21 < var25) {
-                  if(var5 > var8) {
-                     var42 = 4;
+               boolean flag5 = false;
+               byte b0;
+               if(d3 < d4 && d3 < d5) {
+                  if(i > l) {
+                     b0 = 4;
                   } else {
-                     var42 = 5;
+                     b0 = 5;
                   }
 
-                  var1.xCoord = var15;
-                  var1.yCoord += var29 * var21;
-                  var1.zCoord += var31 * var21;
-               } else if(var23 < var25) {
-                  if(var6 > var9) {
-                     var42 = 0;
+                  vec3d.xCoord = d0;
+                  vec3d.yCoord += d7 * d3;
+                  vec3d.zCoord += d8 * d3;
+               } else if(d4 < d5) {
+                  if(j > i1) {
+                     b0 = 0;
                   } else {
-                     var42 = 1;
+                     b0 = 1;
                   }
 
-                  var1.xCoord += var27 * var23;
-                  var1.yCoord = var17;
-                  var1.zCoord += var31 * var23;
+                  vec3d.xCoord += d6 * d4;
+                  vec3d.yCoord = d1;
+                  vec3d.zCoord += d8 * d4;
                } else {
-                  if(var7 > var10) {
-                     var42 = 2;
+                  if(k > j1) {
+                     b0 = 2;
                   } else {
-                     var42 = 3;
+                     b0 = 3;
                   }
 
-                  var1.xCoord += var27 * var25;
-                  var1.yCoord += var29 * var25;
-                  var1.zCoord = var19;
-               }
-
-               Vec3 var34 = this.getWorldVec3Pool().getVecFromPool(var1.xCoord, var1.yCoord, var1.zCoord);
-               var8 = (int)(var34.xCoord = (double)MathHelper.floor_double(var1.xCoord));
-               if(var42 == 5) {
-                  --var8;
-                  ++var34.xCoord;
-               }
-
-               var9 = (int)(var34.yCoord = (double)MathHelper.floor_double(var1.yCoord));
-               if(var42 == 1) {
-                  --var9;
-                  ++var34.yCoord;
-               }
-
-               var10 = (int)(var34.zCoord = (double)MathHelper.floor_double(var1.zCoord));
-               if(var42 == 3) {
-                  --var10;
-                  ++var34.zCoord;
-               }
-
-               int var35 = this.getBlockId(var8, var9, var10);
-               int var36 = this.getBlockMetadata(var8, var9, var10);
-               Block var37 = Block.blocksList[var35];
-               if((!var4 || var37 == null || var37.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) && var35 > 0 && var37.canCollideCheck(var36, var3)) {
-                  MovingObjectPosition var38 = var37.collisionRayTrace(this, var8, var9, var10, var1, var2);
-                  if(var38 != null) {
-                     return var38;
+                  vec3d.xCoord += d6 * d5;
+                  vec3d.yCoord += d7 * d5;
+                  vec3d.zCoord = d2;
+               }
+
+               vec3d2 = this.getWorldVec3Pool().getVecFromPool(vec3d.xCoord, vec3d.yCoord, vec3d.zCoord);
+               l = (int)(vec3d2.xCoord = (double)MathHelper.floor_double(vec3d.xCoord));
+               if(b0 == 5) {
+                  --l;
+                  ++vec3d2.xCoord;
+               }
+
+               i1 = (int)(vec3d2.yCoord = (double)MathHelper.floor_double(vec3d.yCoord));
+               if(b0 == 1) {
+                  --i1;
+                  ++vec3d2.yCoord;
+               }
+
+               j1 = (int)(vec3d2.zCoord = (double)MathHelper.floor_double(vec3d.zCoord));
+               if(b0 == 3) {
+                  --j1;
+                  ++vec3d2.zCoord;
+               }
+
+               int i2 = this.getBlockId(l, i1, j1);
+               int j2 = this.getBlockMetadata(l, i1, j1);
+               Block block1 = Block.blocksList[i2];
+               if((!flag1 || block1 == null || block1.getCollisionBoundingBoxFromPool(this, l, i1, j1) != null) && i2 > 0 && block1.canCollideCheck(j2, flag)) {
+                  MovingObjectPosition movingobjectposition1 = block1.collisionRayTrace(this, l, i1, j1, vec3d, vec3d1);
+                  if(movingobjectposition1 != null) {
+                     vec3d2.myVec3LocalPool.release(vec3d2);
+                     return movingobjectposition1;
                   }
                }
             }
@@ -776,186 +839,216 @@
       }
    }
 
-   public void playSoundAtEntity(Entity var1, String var2, float var3, float var4) {
-      if(var1 != null && var2 != null) {
-         for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-            ((IWorldAccess)this.worldAccesses.get(var5)).playSound(var2, var1.posX, var1.posY - (double)var1.yOffset, var1.posZ, var3, var4);
+   public void playSoundAtEntity(Entity entity, String s, float f, float f1) {
+      if(entity != null && s != null) {
+         for(int i = 0; i < this.worldAccesses.size(); ++i) {
+            ((IWorldAccess)this.worldAccesses.get(i)).playSound(s, entity.posX, entity.posY - (double)entity.yOffset, entity.posZ, f, f1);
          }
-
       }
+
    }
 
-   public void func_85173_a(EntityPlayer var1, String var2, float var3, float var4) {
-      if(var1 != null && var2 != null) {
-         for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-            ((IWorldAccess)this.worldAccesses.get(var5)).func_85102_a(var1, var2, var1.posX, var1.posY - (double)var1.yOffset, var1.posZ, var3, var4);
+   public void func_85173_a(EntityPlayer entityhuman, String s, float f, float f1) {
+      if(entityhuman != null && s != null) {
+         for(int i = 0; i < this.worldAccesses.size(); ++i) {
+            ((IWorldAccess)this.worldAccesses.get(i)).func_85102_a(entityhuman, s, entityhuman.posX, entityhuman.posY - (double)entityhuman.yOffset, entityhuman.posZ, f, f1);
          }
-
       }
+
    }
 
-   public void playSoundEffect(double var1, double var3, double var5, String var7, float var8, float var9) {
-      if(var7 != null) {
-         for(int var10 = 0; var10 < this.worldAccesses.size(); ++var10) {
-            ((IWorldAccess)this.worldAccesses.get(var10)).playSound(var7, var1, var3, var5, var8, var9);
+   public void playSoundEffect(double d0, double d1, double d2, String s, float f, float f1) {
+      if(s != null) {
+         for(int i = 0; i < this.worldAccesses.size(); ++i) {
+            ((IWorldAccess)this.worldAccesses.get(i)).playSound(s, d0, d1, d2, f, f1);
          }
-
       }
+
    }
 
-   public void playSound(double var1, double var3, double var5, String var7, float var8, float var9) {}
+   public void playSound(double d0, double d1, double d2, String s, float f, float f1) {}
 
-   public void playRecord(String var1, int var2, int var3, int var4) {
-      for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-         ((IWorldAccess)this.worldAccesses.get(var5)).playRecord(var1, var2, var3, var4);
+   public void playRecord(String s, int i, int j, int k) {
+      for(int l = 0; l < this.worldAccesses.size(); ++l) {
+         ((IWorldAccess)this.worldAccesses.get(l)).playRecord(s, i, j, k);
       }
 
    }
 
-   public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-      for(int var14 = 0; var14 < this.worldAccesses.size(); ++var14) {
-         ((IWorldAccess)this.worldAccesses.get(var14)).spawnParticle(var1, var2, var4, var6, var8, var10, var12);
+   public void spawnParticle(String s, double d0, double d1, double d2, double d3, double d4, double d5) {
+      for(int i = 0; i < this.worldAccesses.size(); ++i) {
+         ((IWorldAccess)this.worldAccesses.get(i)).spawnParticle(s, d0, d1, d2, d3, d4, d5);
       }
 
    }
 
-   public boolean addWeatherEffect(Entity var1) {
-      this.weatherEffects.add(var1);
+   public boolean addWeatherEffect(Entity entity) {
+      this.weatherEffects.add(entity);
       return true;
    }
 
-   public boolean spawnEntityInWorld(Entity var1) {
-      int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-      int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-      boolean var4 = false;
-      if(var1 instanceof EntityPlayer) {
-         var4 = true;
-      }
-
-      if(!var4 && !this.chunkExists(var2, var3)) {
+   public boolean spawnEntityInWorld(Entity entity) {
+      return this.addEntity(entity, SpawnReason.DEFAULT);
+   }
+
+   public boolean addEntity(Entity entity, SpawnReason spawnReason) {
+      if(entity == null) {
          return false;
       } else {
-         if(var1 instanceof EntityPlayer) {
-            EntityPlayer var5 = (EntityPlayer)var1;
-            this.playerEntities.add(var5);
-            this.updateAllPlayersSleepingFlag();
+         int i = MathHelper.floor_double(entity.posX / 16.0D);
+         int j = MathHelper.floor_double(entity.posZ / 16.0D);
+         boolean flag = false;
+         if(entity instanceof EntityPlayer) {
+            flag = true;
+         }
+
+         Object event = null;
+         if(entity instanceof EntityLiving && !(entity instanceof EntityPlayerMP)) {
+            boolean entityhuman = entity instanceof EntityAnimal || entity instanceof EntityWaterMob || entity instanceof EntityGolem;
+            boolean isMonster = entity instanceof EntityMob || entity instanceof EntityGhast || entity instanceof EntitySlime;
+            if(spawnReason != SpawnReason.CUSTOM && (entityhuman && !this.spawnPeacefulMobs || isMonster && !this.spawnHostileMobs)) {
+               entity.isDead = true;
+               return false;
+            }
+
+            event = CraftEventFactory.callCreatureSpawnEvent((EntityLiving)entity, spawnReason);
+         } else if(entity instanceof EntityItem) {
+            event = CraftEventFactory.callItemSpawnEvent((EntityItem)entity);
+         } else if(entity.getBukkitEntity() instanceof Projectile) {
+            event = CraftEventFactory.callProjectileLaunchEvent(entity);
          }
 
-         this.getChunkFromChunkCoords(var2, var3).addEntity(var1);
-         this.loadedEntityList.add(var1);
-         this.obtainEntitySkin(var1);
-         return true;
+         if(event != null && (((Cancellable)event).isCancelled() || entity.isDead)) {
+            entity.isDead = true;
+            return false;
+         } else if(!flag && !this.chunkExists(i, j)) {
+            entity.isDead = true;
+            return false;
+         } else {
+            if(entity instanceof EntityPlayer) {
+               EntityPlayer entityhuman1 = (EntityPlayer)entity;
+               this.playerEntities.add(entityhuman1);
+               this.updateAllPlayersSleepingFlag();
+            }
+
+            this.getChunkFromChunkCoords(i, j).addEntity(entity);
+            this.loadedEntityList.add(entity);
+            this.obtainEntitySkin(entity);
+            return true;
+         }
       }
    }
 
-   protected void obtainEntitySkin(Entity var1) {
-      for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-         ((IWorldAccess)this.worldAccesses.get(var2)).obtainEntitySkin(var1);
+   protected void obtainEntitySkin(Entity entity) {
+      for(int i = 0; i < this.worldAccesses.size(); ++i) {
+         ((IWorldAccess)this.worldAccesses.get(i)).obtainEntitySkin(entity);
       }
 
+      entity.valid = true;
    }
 
-   protected void releaseEntitySkin(Entity var1) {
-      for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-         ((IWorldAccess)this.worldAccesses.get(var2)).releaseEntitySkin(var1);
+   protected void releaseEntitySkin(Entity entity) {
+      for(int i = 0; i < this.worldAccesses.size(); ++i) {
+         ((IWorldAccess)this.worldAccesses.get(i)).releaseEntitySkin(entity);
       }
 
+      entity.valid = false;
    }
 
-   public void setEntityDead(Entity var1) {
-      if(var1.riddenByEntity != null) {
-         var1.riddenByEntity.mountEntity((Entity)null);
+   public void setEntityDead(Entity entity) {
+      if(entity.riddenByEntity != null) {
+         entity.riddenByEntity.mountEntity((Entity)null);
       }
 
-      if(var1.ridingEntity != null) {
-         var1.mountEntity((Entity)null);
+      if(entity.ridingEntity != null) {
+         entity.mountEntity((Entity)null);
       }
 
-      var1.setDead();
-      if(var1 instanceof EntityPlayer) {
-         this.playerEntities.remove(var1);
+      entity.setDead();
+      if(entity instanceof EntityPlayer) {
+         this.playerEntities.remove(entity);
          this.updateAllPlayersSleepingFlag();
       }
 
    }
 
-   public void removeEntity(Entity var1) {
-      var1.setDead();
-      if(var1 instanceof EntityPlayer) {
-         this.playerEntities.remove(var1);
+   public void removeEntity(Entity entity) {
+      entity.setDead();
+      if(entity instanceof EntityPlayer) {
+         this.playerEntities.remove(entity);
          this.updateAllPlayersSleepingFlag();
       }
 
-      int var2 = var1.chunkCoordX;
-      int var3 = var1.chunkCoordZ;
-      if(var1.addedToChunk && this.chunkExists(var2, var3)) {
-         this.getChunkFromChunkCoords(var2, var3).removeEntity(var1);
+      int i = entity.chunkCoordX;
+      int j = entity.chunkCoordZ;
+      if(entity.addedToChunk && this.chunkExists(i, j)) {
+         this.getChunkFromChunkCoords(i, j).removeEntity(entity);
       }
 
-      this.loadedEntityList.remove(var1);
-      this.releaseEntitySkin(var1);
+      this.loadedEntityList.remove(entity);
+      this.releaseEntitySkin(entity);
    }
 
-   public void addWorldAccess(IWorldAccess var1) {
-      this.worldAccesses.add(var1);
+   public void addWorldAccess(IWorldAccess iworldaccess) {
+      this.worldAccesses.add(iworldaccess);
    }
 
-   public List getCollidingBoundingBoxes(Entity var1, AxisAlignedBB var2) {
+   public List getCollidingBoundingBoxes(Entity entity, AxisAlignedBB axisalignedbb) {
       this.collidingBoundingBoxes.clear();
-      int var3 = MathHelper.floor_double(var2.minX);
-      int var4 = MathHelper.floor_double(var2.maxX + 1.0D);
-      int var5 = MathHelper.floor_double(var2.minY);
-      int var6 = MathHelper.floor_double(var2.maxY + 1.0D);
-      int var7 = MathHelper.floor_double(var2.minZ);
-      int var8 = MathHelper.floor_double(var2.maxZ + 1.0D);
-
-      for(int var9 = var3; var9 < var4; ++var9) {
-         for(int var10 = var7; var10 < var8; ++var10) {
-            if(this.blockExists(var9, 64, var10)) {
-               for(int var11 = var5 - 1; var11 < var6; ++var11) {
-                  Block var12 = Block.blocksList[this.getBlockId(var9, var11, var10)];
-                  if(var12 != null) {
-                     var12.addCollidingBlockToList(this, var9, var11, var10, var2, this.collidingBoundingBoxes, var1);
+      int i = MathHelper.floor_double(axisalignedbb.minX);
+      int j = MathHelper.floor_double(axisalignedbb.maxX + 1.0D);
+      int k = MathHelper.floor_double(axisalignedbb.minY);
+      int l = MathHelper.floor_double(axisalignedbb.maxY + 1.0D);
+      int i1 = MathHelper.floor_double(axisalignedbb.minZ);
+      int j1 = MathHelper.floor_double(axisalignedbb.maxZ + 1.0D);
+
+      for(int k1 = i; k1 < j; ++k1) {
+         for(int l1 = i1; l1 < j1; ++l1) {
+            if(this.blockExists(k1, 64, l1)) {
+               for(int list = k - 1; list < l; ++list) {
+                  Block j2 = Block.blocksList[this.getBlockId(k1, list, l1)];
+                  if(j2 != null) {
+                     j2.addCollidingBlockToList(this, k1, list, l1, axisalignedbb, this.collidingBoundingBoxes, entity);
                   }
                }
             }
          }
       }
 
-      double var13 = 0.25D;
-      List var17 = this.getEntitiesWithinAABBExcludingEntity(var1, var2.expand(var13, var13, var13));
+      double d0 = 0.25D;
+      List var17 = this.getEntitiesWithinAABBExcludingEntity(entity, axisalignedbb.expand(d0, d0, d0));
 
       for(int var16 = 0; var16 < var17.size(); ++var16) {
-         AxisAlignedBB var15 = ((Entity)var17.get(var16)).getBoundingBox();
-         if(var15 != null && var15.intersectsWith(var2)) {
-            this.collidingBoundingBoxes.add(var15);
+         AxisAlignedBB axisalignedbb1 = ((Entity)var17.get(var16)).getBoundingBox();
+         if(axisalignedbb1 != null && axisalignedbb1.intersectsWith(axisalignedbb)) {
+            this.collidingBoundingBoxes.add(axisalignedbb1);
          }
 
-         var15 = var1.getCollisionBox((Entity)var17.get(var16));
-         if(var15 != null && var15.intersectsWith(var2)) {
-            this.collidingBoundingBoxes.add(var15);
+         axisalignedbb1 = entity.getCollisionBox((Entity)var17.get(var16));
+         if(axisalignedbb1 != null && axisalignedbb1.intersectsWith(axisalignedbb)) {
+            this.collidingBoundingBoxes.add(axisalignedbb1);
          }
       }
 
       return this.collidingBoundingBoxes;
    }
 
-   public List getAllCollidingBoundingBoxes(AxisAlignedBB var1) {
+   public List getAllCollidingBoundingBoxes(AxisAlignedBB axisalignedbb) {
       this.collidingBoundingBoxes.clear();
-      int var2 = MathHelper.floor_double(var1.minX);
-      int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-      int var4 = MathHelper.floor_double(var1.minY);
-      int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-      int var6 = MathHelper.floor_double(var1.minZ);
-      int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-      for(int var8 = var2; var8 < var3; ++var8) {
-         for(int var9 = var6; var9 < var7; ++var9) {
-            if(this.blockExists(var8, 64, var9)) {
-               for(int var10 = var4 - 1; var10 < var5; ++var10) {
-                  Block var11 = Block.blocksList[this.getBlockId(var8, var10, var9)];
-                  if(var11 != null) {
-                     var11.addCollidingBlockToList(this, var8, var10, var9, var1, this.collidingBoundingBoxes, (Entity)null);
+      int i = MathHelper.floor_double(axisalignedbb.minX);
+      int j = MathHelper.floor_double(axisalignedbb.maxX + 1.0D);
+      int k = MathHelper.floor_double(axisalignedbb.minY);
+      int l = MathHelper.floor_double(axisalignedbb.maxY + 1.0D);
+      int i1 = MathHelper.floor_double(axisalignedbb.minZ);
+      int j1 = MathHelper.floor_double(axisalignedbb.maxZ + 1.0D);
+
+      for(int k1 = i; k1 < j; ++k1) {
+         for(int l1 = i1; l1 < j1; ++l1) {
+            if(this.blockExists(k1, 64, l1)) {
+               for(int i2 = k - 1; i2 < l; ++i2) {
+                  Block block = Block.blocksList[this.getBlockId(k1, i2, l1)];
+                  if(block != null) {
+                     block.addCollidingBlockToList(this, k1, i2, l1, axisalignedbb, this.collidingBoundingBoxes, (Entity)null);
                   }
                }
             }
@@ -965,176 +1058,187 @@
       return this.collidingBoundingBoxes;
    }
 
-   public int calculateSkylightSubtracted(float var1) {
-      float var2 = this.getCelestialAngle(var1);
-      float var3 = 1.0F - (MathHelper.cos(var2 * 3.1415927F * 2.0F) * 2.0F + 0.5F);
-      if(var3 < 0.0F) {
-         var3 = 0.0F;
+   public int calculateSkylightSubtracted(float f) {
+      float f1 = this.getCelestialAngle(f);
+      float f2 = 1.0F - (MathHelper.cos(f1 * 3.1415927F * 2.0F) * 2.0F + 0.5F);
+      if(f2 < 0.0F) {
+         f2 = 0.0F;
       }
 
-      if(var3 > 1.0F) {
-         var3 = 1.0F;
+      if(f2 > 1.0F) {
+         f2 = 1.0F;
       }
 
-      var3 = 1.0F - var3;
-      var3 = (float)((double)var3 * (1.0D - (double)(this.getRainStrength(var1) * 5.0F) / 16.0D));
-      var3 = (float)((double)var3 * (1.0D - (double)(this.getWeightedThunderStrength(var1) * 5.0F) / 16.0D));
-      var3 = 1.0F - var3;
-      return (int)(var3 * 11.0F);
+      f2 = 1.0F - f2;
+      f2 = (float)((double)f2 * (1.0D - (double)(this.getRainStrength(f) * 5.0F) / 16.0D));
+      f2 = (float)((double)f2 * (1.0D - (double)(this.getWeightedThunderStrength(f) * 5.0F) / 16.0D));
+      f2 = 1.0F - f2;
+      return (int)(f2 * 11.0F);
    }
 
-   public float getCelestialAngle(float var1) {
-      return this.provider.calculateCelestialAngle(this.worldInfo.getWorldTime(), var1);
+   public float getCelestialAngle(float f) {
+      return this.provider.calculateCelestialAngle(this.worldInfo.getWorldTime(), f);
    }
 
-   public int getPrecipitationHeight(int var1, int var2) {
-      return this.getChunkFromBlockCoords(var1, var2).getPrecipitationHeight(var1 & 15, var2 & 15);
+   public int getPrecipitationHeight(int i, int j) {
+      return this.getChunkFromBlockCoords(i, j).getPrecipitationHeight(i & 15, j & 15);
    }
 
-   public int getTopSolidOrLiquidBlock(int var1, int var2) {
-      Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-      int var4 = var3.getTopFilledSegment() + 15;
-      var1 &= 15;
+   public int getTopSolidOrLiquidBlock(int i, int j) {
+      Chunk chunk = this.getChunkFromBlockCoords(i, j);
+      int k = chunk.getTopFilledSegment() + 15;
+      i &= 15;
 
-      for(var2 &= 15; var4 > 0; --var4) {
-         int var5 = var3.getBlockID(var1, var4, var2);
-         if(var5 != 0 && Block.blocksList[var5].blockMaterial.blocksMovement() && Block.blocksList[var5].blockMaterial != Material.leaves) {
-            return var4 + 1;
+      for(j &= 15; k > 0; --k) {
+         int l = chunk.getBlockID(i, k, j);
+         if(l != 0 && Block.blocksList[l].blockMaterial.blocksMovement() && Block.blocksList[l].blockMaterial != Material.leaves) {
+            return k + 1;
          }
       }
 
       return -1;
    }
 
-   public void scheduleBlockUpdate(int var1, int var2, int var3, int var4, int var5) {}
+   public void scheduleBlockUpdate(int i, int j, int k, int l, int i1) {}
 
-   public void func_82740_a(int var1, int var2, int var3, int var4, int var5, int var6) {}
+   public void func_82740_a(int i, int j, int k, int l, int i1, int j1) {}
 
-   public void scheduleBlockUpdateFromLoad(int var1, int var2, int var3, int var4, int var5) {}
+   public void scheduleBlockUpdateFromLoad(int i, int j, int k, int l, int i1) {}
 
    public void updateEntities() {
       this.theProfiler.startSection("entities");
       this.theProfiler.startSection("global");
 
-      int var1;
-      Entity var2;
-      CrashReport var4;
-      CrashReportCategory var5;
-      for(var1 = 0; var1 < this.weatherEffects.size(); ++var1) {
-         var2 = (Entity)this.weatherEffects.get(var1);
-
-         try {
-            var2.onUpdate();
-         } catch (Throwable var7) {
-            var4 = CrashReport.func_85055_a(var7, "Ticking entity");
-            var5 = var4.func_85058_a("Entity being ticked");
-            if(var2 == null) {
-               var5.addCrashSection("Entity", "~~NULL~~");
-            } else {
-               var2.func_85029_a(var5);
-            }
+      int i;
+      Entity entity;
+      CrashReport crashreport;
+      CrashReportCategory crashreportsystemdetails;
+      for(i = 0; i < this.weatherEffects.size(); ++i) {
+         entity = (Entity)this.weatherEffects.get(i);
+         if(entity != null) {
+            ChunkProviderServer j = ((WorldServer)this).theChunkProviderServer;
+            if(!j.droppedChunksSet.contains(MathHelper.floor_double(entity.posX) >> 4, MathHelper.floor_double(entity.posZ) >> 4)) {
+               try {
+                  entity.onUpdate();
+               } catch (Throwable var11) {
+                  crashreport = CrashReport.func_85055_a(var11, "Ticking entity");
+                  crashreportsystemdetails = crashreport.func_85058_a("Entity being ticked");
+                  if(entity == null) {
+                     crashreportsystemdetails.addCrashSection("Entity", "~~NULL~~");
+                  } else {
+                     entity.func_85029_a(crashreportsystemdetails);
+                  }
 
-            throw new ReportedException(var4);
-         }
+                  throw new ReportedException(crashreport);
+               }
 
-         if(var2.isDead) {
-            this.weatherEffects.remove(var1--);
+               if(entity.isDead) {
+                  this.weatherEffects.remove(i--);
+               }
+            }
          }
       }
 
       this.theProfiler.endStartSection("remove");
       this.loadedEntityList.removeAll(this.unloadedEntityList);
 
-      int var3;
-      int var13;
-      for(var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
-         var2 = (Entity)this.unloadedEntityList.get(var1);
-         var3 = var2.chunkCoordX;
-         var13 = var2.chunkCoordZ;
-         if(var2.addedToChunk && this.chunkExists(var3, var13)) {
-            this.getChunkFromChunkCoords(var3, var13).removeEntity(var2);
+      int k;
+      int var14;
+      for(i = 0; i < this.unloadedEntityList.size(); ++i) {
+         entity = (Entity)this.unloadedEntityList.get(i);
+         var14 = entity.chunkCoordX;
+         k = entity.chunkCoordZ;
+         if(entity.addedToChunk && this.chunkExists(var14, k)) {
+            this.getChunkFromChunkCoords(var14, k).removeEntity(entity);
          }
       }
 
-      for(var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
-         this.releaseEntitySkin((Entity)this.unloadedEntityList.get(var1));
+      for(i = 0; i < this.unloadedEntityList.size(); ++i) {
+         this.releaseEntitySkin((Entity)this.unloadedEntityList.get(i));
       }
 
       this.unloadedEntityList.clear();
       this.theProfiler.endStartSection("regular");
 
-      for(var1 = 0; var1 < this.loadedEntityList.size(); ++var1) {
-         var2 = (Entity)this.loadedEntityList.get(var1);
-         if(var2.ridingEntity != null) {
-            if(!var2.ridingEntity.isDead && var2.ridingEntity.riddenByEntity == var2) {
-               continue;
+      for(i = 0; i < this.loadedEntityList.size(); ++i) {
+         entity = (Entity)this.loadedEntityList.get(i);
+         ChunkProviderServer iterator = ((WorldServer)this).theChunkProviderServer;
+         if(!iterator.droppedChunksSet.contains(MathHelper.floor_double(entity.posX) >> 4, MathHelper.floor_double(entity.posZ) >> 4)) {
+            if(entity.ridingEntity != null) {
+               if(!entity.ridingEntity.isDead && entity.ridingEntity.riddenByEntity == entity) {
+                  continue;
+               }
+
+               entity.ridingEntity.riddenByEntity = null;
+               entity.ridingEntity = null;
             }
 
-            var2.ridingEntity.riddenByEntity = null;
-            var2.ridingEntity = null;
-         }
+            this.theProfiler.startSection("tick");
+            if(!entity.isDead) {
+               try {
+                  this.updateEntity(entity);
+               } catch (Throwable var12) {
+                  crashreport = CrashReport.func_85055_a(var12, "Ticking entity");
+                  crashreportsystemdetails = crashreport.func_85058_a("Entity being ticked");
+                  if(entity == null) {
+                     crashreportsystemdetails.addCrashSection("Entity", "~~NULL~~");
+                  } else {
+                     entity.func_85029_a(crashreportsystemdetails);
+                  }
 
-         this.theProfiler.startSection("tick");
-         if(!var2.isDead) {
-            try {
-               this.updateEntity(var2);
-            } catch (Throwable var8) {
-               var4 = CrashReport.func_85055_a(var8, "Ticking entity");
-               var5 = var4.func_85058_a("Entity being ticked");
-               if(var2 == null) {
-                  var5.addCrashSection("Entity", "~~NULL~~");
-               } else {
-                  var2.func_85029_a(var5);
+                  throw new ReportedException(crashreport);
                }
-
-               throw new ReportedException(var4);
             }
-         }
 
-         this.theProfiler.endSection();
-         this.theProfiler.startSection("remove");
-         if(var2.isDead) {
-            var3 = var2.chunkCoordX;
-            var13 = var2.chunkCoordZ;
-            if(var2.addedToChunk && this.chunkExists(var3, var13)) {
-               this.getChunkFromChunkCoords(var3, var13).removeEntity(var2);
+            this.theProfiler.endSection();
+            this.theProfiler.startSection("remove");
+            if(entity.isDead) {
+               var14 = entity.chunkCoordX;
+               k = entity.chunkCoordZ;
+               if(entity.addedToChunk && this.chunkExists(var14, k)) {
+                  this.getChunkFromChunkCoords(var14, k).removeEntity(entity);
+               }
+
+               this.loadedEntityList.remove(i--);
+               this.releaseEntitySkin(entity);
             }
 
-            this.loadedEntityList.remove(var1--);
-            this.releaseEntitySkin(var2);
+            this.theProfiler.endSection();
          }
-
-         this.theProfiler.endSection();
       }
 
       this.theProfiler.endStartSection("tileEntities");
       this.scanningTileEntities = true;
-      Iterator var14 = this.loadedTileEntityList.iterator();
+      Iterator var15 = this.loadedTileEntityList.iterator();
 
-      while(var14.hasNext()) {
-         TileEntity var9 = (TileEntity)var14.next();
-         if(!var9.isInvalid() && var9.func_70309_m() && this.blockExists(var9.xCoord, var9.yCoord, var9.zCoord)) {
-            try {
-               var9.updateEntity();
-            } catch (Throwable var6) {
-               var4 = CrashReport.func_85055_a(var6, "Ticking tile entity");
-               var5 = var4.func_85058_a("Tile entity being ticked");
-               if(var9 == null) {
-                  var5.addCrashSection("Tile entity", "~~NULL~~");
-               } else {
-                  var9.func_85027_a(var5);
-               }
+      Chunk chunk1;
+      while(var15.hasNext()) {
+         TileEntity l = (TileEntity)var15.next();
+         ChunkProviderServer tileentity1 = ((WorldServer)this).theChunkProviderServer;
+         if(!tileentity1.droppedChunksSet.contains(l.xCoord >> 4, l.zCoord >> 4)) {
+            if(!l.isInvalid() && l.func_70309_m() && this.blockExists(l.xCoord, l.yCoord, l.zCoord)) {
+               try {
+                  l.updateEntity();
+               } catch (Throwable var13) {
+                  crashreport = CrashReport.func_85055_a(var13, "Ticking tile entity");
+                  crashreportsystemdetails = crashreport.func_85058_a("Tile entity being ticked");
+                  if(l == null) {
+                     crashreportsystemdetails.addCrashSection("Tile entity", "~~NULL~~");
+                  } else {
+                     l.func_85027_a(crashreportsystemdetails);
+                  }
 
-               throw new ReportedException(var4);
+                  throw new ReportedException(crashreport);
+               }
             }
-         }
 
-         if(var9.isInvalid()) {
-            var14.remove();
-            if(this.chunkExists(var9.xCoord >> 4, var9.zCoord >> 4)) {
-               Chunk var11 = this.getChunkFromChunkCoords(var9.xCoord >> 4, var9.zCoord >> 4);
-               if(var11 != null) {
-                  var11.removeChunkBlockTileEntity(var9.xCoord & 15, var9.yCoord, var9.zCoord & 15);
+            if(l.isInvalid()) {
+               var15.remove();
+               if(this.chunkExists(l.xCoord >> 4, l.zCoord >> 4)) {
+                  chunk1 = this.getChunkFromChunkCoords(l.xCoord >> 4, l.zCoord >> 4);
+                  if(chunk1 != null) {
+                     chunk1.removeChunkBlockTileEntity(l.xCoord & 15, l.yCoord, l.zCoord & 15);
+                  }
                }
             }
          }
@@ -1148,21 +1252,20 @@
 
       this.theProfiler.endStartSection("pendingTileEntities");
       if(!this.addedTileEntityList.isEmpty()) {
-         for(int var10 = 0; var10 < this.addedTileEntityList.size(); ++var10) {
-            TileEntity var12 = (TileEntity)this.addedTileEntityList.get(var10);
-            if(!var12.isInvalid()) {
-               if(!this.loadedTileEntityList.contains(var12)) {
-                  this.loadedTileEntityList.add(var12);
-               }
-
-               if(this.chunkExists(var12.xCoord >> 4, var12.zCoord >> 4)) {
-                  Chunk var15 = this.getChunkFromChunkCoords(var12.xCoord >> 4, var12.zCoord >> 4);
-                  if(var15 != null) {
-                     var15.setChunkBlockTileEntity(var12.xCoord & 15, var12.yCoord, var12.zCoord & 15, var12);
+         for(int var16 = 0; var16 < this.addedTileEntityList.size(); ++var16) {
+            TileEntity var17 = (TileEntity)this.addedTileEntityList.get(var16);
+            if(!var17.isInvalid()) {
+               if(this.chunkExists(var17.xCoord >> 4, var17.zCoord >> 4)) {
+                  chunk1 = this.getChunkFromChunkCoords(var17.xCoord >> 4, var17.zCoord >> 4);
+                  if(chunk1 != null) {
+                     chunk1.setChunkBlockTileEntity(var17.xCoord & 15, var17.yCoord, var17.zCoord & 15, var17);
+                     if(!this.loadedTileEntityList.contains(var17)) {
+                        this.loadedTileEntityList.add(var17);
+                     }
                   }
                }
 
-               this.markBlockForUpdate(var12.xCoord, var12.yCoord, var12.zCoord);
+               this.markBlockForUpdate(var17.xCoord, var17.yCoord, var17.zCoord);
             }
          }
 
@@ -1173,97 +1276,97 @@
       this.theProfiler.endSection();
    }
 
-   public void addTileEntity(Collection var1) {
+   public void addTileEntity(Collection collection) {
       if(this.scanningTileEntities) {
-         this.addedTileEntityList.addAll(var1);
+         this.addedTileEntityList.addAll(collection);
       } else {
-         this.loadedTileEntityList.addAll(var1);
+         this.loadedTileEntityList.addAll(collection);
       }
 
    }
 
-   public void updateEntity(Entity var1) {
-      this.updateEntityWithOptionalForce(var1, true);
+   public void updateEntity(Entity entity) {
+      this.updateEntityWithOptionalForce(entity, true);
    }
 
-   public void updateEntityWithOptionalForce(Entity var1, boolean var2) {
-      int var3 = MathHelper.floor_double(var1.posX);
-      int var4 = MathHelper.floor_double(var1.posZ);
-      byte var5 = 32;
-      if(!var2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5)) {
-         var1.lastTickPosX = var1.posX;
-         var1.lastTickPosY = var1.posY;
-         var1.lastTickPosZ = var1.posZ;
-         var1.prevRotationYaw = var1.rotationYaw;
-         var1.prevRotationPitch = var1.rotationPitch;
-         if(var2 && var1.addedToChunk) {
-            if(var1.ridingEntity != null) {
-               var1.updateRidden();
+   public void updateEntityWithOptionalForce(Entity entity, boolean flag) {
+      int i = MathHelper.floor_double(entity.posX);
+      int j = MathHelper.floor_double(entity.posZ);
+      byte b0 = 32;
+      if(!flag || this.checkChunksExist(i - b0, 0, j - b0, i + b0, 0, j + b0)) {
+         entity.lastTickPosX = entity.posX;
+         entity.lastTickPosY = entity.posY;
+         entity.lastTickPosZ = entity.posZ;
+         entity.prevRotationYaw = entity.rotationYaw;
+         entity.prevRotationPitch = entity.rotationPitch;
+         if(flag && entity.addedToChunk) {
+            if(entity.ridingEntity != null) {
+               entity.updateRidden();
             } else {
-               var1.onUpdate();
+               entity.onUpdate();
             }
          }
 
          this.theProfiler.startSection("chunkCheck");
-         if(Double.isNaN(var1.posX) || Double.isInfinite(var1.posX)) {
-            var1.posX = var1.lastTickPosX;
+         if(Double.isNaN(entity.posX) || Double.isInfinite(entity.posX)) {
+            entity.posX = entity.lastTickPosX;
          }
 
-         if(Double.isNaN(var1.posY) || Double.isInfinite(var1.posY)) {
-            var1.posY = var1.lastTickPosY;
+         if(Double.isNaN(entity.posY) || Double.isInfinite(entity.posY)) {
+            entity.posY = entity.lastTickPosY;
          }
 
-         if(Double.isNaN(var1.posZ) || Double.isInfinite(var1.posZ)) {
-            var1.posZ = var1.lastTickPosZ;
+         if(Double.isNaN(entity.posZ) || Double.isInfinite(entity.posZ)) {
+            entity.posZ = entity.lastTickPosZ;
          }
 
-         if(Double.isNaN((double)var1.rotationPitch) || Double.isInfinite((double)var1.rotationPitch)) {
-            var1.rotationPitch = var1.prevRotationPitch;
+         if(Double.isNaN((double)entity.rotationPitch) || Double.isInfinite((double)entity.rotationPitch)) {
+            entity.rotationPitch = entity.prevRotationPitch;
          }
 
-         if(Double.isNaN((double)var1.rotationYaw) || Double.isInfinite((double)var1.rotationYaw)) {
-            var1.rotationYaw = var1.prevRotationYaw;
+         if(Double.isNaN((double)entity.rotationYaw) || Double.isInfinite((double)entity.rotationYaw)) {
+            entity.rotationYaw = entity.prevRotationYaw;
          }
 
-         int var6 = MathHelper.floor_double(var1.posX / 16.0D);
-         int var7 = MathHelper.floor_double(var1.posY / 16.0D);
-         int var8 = MathHelper.floor_double(var1.posZ / 16.0D);
-         if(!var1.addedToChunk || var1.chunkCoordX != var6 || var1.chunkCoordY != var7 || var1.chunkCoordZ != var8) {
-            if(var1.addedToChunk && this.chunkExists(var1.chunkCoordX, var1.chunkCoordZ)) {
-               this.getChunkFromChunkCoords(var1.chunkCoordX, var1.chunkCoordZ).removeEntityAtIndex(var1, var1.chunkCoordY);
+         int k = MathHelper.floor_double(entity.posX / 16.0D);
+         int l = MathHelper.floor_double(entity.posY / 16.0D);
+         int i1 = MathHelper.floor_double(entity.posZ / 16.0D);
+         if(!entity.addedToChunk || entity.chunkCoordX != k || entity.chunkCoordY != l || entity.chunkCoordZ != i1) {
+            if(entity.addedToChunk && this.chunkExists(entity.chunkCoordX, entity.chunkCoordZ)) {
+               this.getChunkFromChunkCoords(entity.chunkCoordX, entity.chunkCoordZ).removeEntityAtIndex(entity, entity.chunkCoordY);
             }
 
-            if(this.chunkExists(var6, var8)) {
-               var1.addedToChunk = true;
-               this.getChunkFromChunkCoords(var6, var8).addEntity(var1);
+            if(this.chunkExists(k, i1)) {
+               entity.addedToChunk = true;
+               this.getChunkFromChunkCoords(k, i1).addEntity(entity);
             } else {
-               var1.addedToChunk = false;
+               entity.addedToChunk = false;
             }
          }
 
          this.theProfiler.endSection();
-         if(var2 && var1.addedToChunk && var1.riddenByEntity != null) {
-            if(!var1.riddenByEntity.isDead && var1.riddenByEntity.ridingEntity == var1) {
-               this.updateEntity(var1.riddenByEntity);
+         if(flag && entity.addedToChunk && entity.riddenByEntity != null) {
+            if(!entity.riddenByEntity.isDead && entity.riddenByEntity.ridingEntity == entity) {
+               this.updateEntity(entity.riddenByEntity);
             } else {
-               var1.riddenByEntity.ridingEntity = null;
-               var1.riddenByEntity = null;
+               entity.riddenByEntity.ridingEntity = null;
+               entity.riddenByEntity = null;
             }
          }
-
       }
+
    }
 
-   public boolean checkIfAABBIsClear(AxisAlignedBB var1) {
-      return this.checkIfAABBIsClearExcludingEntity(var1, (Entity)null);
+   public boolean checkIfAABBIsClear(AxisAlignedBB axisalignedbb) {
+      return this.checkIfAABBIsClearExcludingEntity(axisalignedbb, (Entity)null);
    }
 
-   public boolean checkIfAABBIsClearExcludingEntity(AxisAlignedBB var1, Entity var2) {
-      List var3 = this.getEntitiesWithinAABBExcludingEntity((Entity)null, var1);
+   public boolean checkIfAABBIsClearExcludingEntity(AxisAlignedBB axisalignedbb, Entity entity) {
+      List list = this.getEntitiesWithinAABBExcludingEntity((Entity)null, axisalignedbb);
 
-      for(int var4 = 0; var4 < var3.size(); ++var4) {
-         Entity var5 = (Entity)var3.get(var4);
-         if(!var5.isDead && var5.preventEntitySpawning && var5 != var2) {
+      for(int i = 0; i < list.size(); ++i) {
+         Entity entity1 = (Entity)list.get(i);
+         if(!entity1.isDead && entity1.preventEntitySpawning && entity1 != entity) {
             return false;
          }
       }
@@ -1271,30 +1374,30 @@
       return true;
    }
 
-   public boolean isAABBNonEmpty(AxisAlignedBB var1) {
-      int var2 = MathHelper.floor_double(var1.minX);
-      int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-      int var4 = MathHelper.floor_double(var1.minY);
-      int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-      int var6 = MathHelper.floor_double(var1.minZ);
-      int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-      if(var1.minX < 0.0D) {
-         --var2;
-      }
-
-      if(var1.minY < 0.0D) {
-         --var4;
-      }
-
-      if(var1.minZ < 0.0D) {
-         --var6;
-      }
-
-      for(int var8 = var2; var8 < var3; ++var8) {
-         for(int var9 = var4; var9 < var5; ++var9) {
-            for(int var10 = var6; var10 < var7; ++var10) {
-               Block var11 = Block.blocksList[this.getBlockId(var8, var9, var10)];
-               if(var11 != null) {
+   public boolean isAABBNonEmpty(AxisAlignedBB axisalignedbb) {
+      int i = MathHelper.floor_double(axisalignedbb.minX);
+      int j = MathHelper.floor_double(axisalignedbb.maxX + 1.0D);
+      int k = MathHelper.floor_double(axisalignedbb.minY);
+      int l = MathHelper.floor_double(axisalignedbb.maxY + 1.0D);
+      int i1 = MathHelper.floor_double(axisalignedbb.minZ);
+      int j1 = MathHelper.floor_double(axisalignedbb.maxZ + 1.0D);
+      if(axisalignedbb.minX < 0.0D) {
+         --i;
+      }
+
+      if(axisalignedbb.minY < 0.0D) {
+         --k;
+      }
+
+      if(axisalignedbb.minZ < 0.0D) {
+         --i1;
+      }
+
+      for(int k1 = i; k1 < j; ++k1) {
+         for(int l1 = k; l1 < l; ++l1) {
+            for(int i2 = i1; i2 < j1; ++i2) {
+               Block block = Block.blocksList[this.getBlockId(k1, l1, i2)];
+               if(block != null) {
                   return true;
                }
             }
@@ -1304,30 +1407,30 @@
       return false;
    }
 
-   public boolean isAnyLiquid(AxisAlignedBB var1) {
-      int var2 = MathHelper.floor_double(var1.minX);
-      int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-      int var4 = MathHelper.floor_double(var1.minY);
-      int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-      int var6 = MathHelper.floor_double(var1.minZ);
-      int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-      if(var1.minX < 0.0D) {
-         --var2;
-      }
-
-      if(var1.minY < 0.0D) {
-         --var4;
-      }
-
-      if(var1.minZ < 0.0D) {
-         --var6;
-      }
-
-      for(int var8 = var2; var8 < var3; ++var8) {
-         for(int var9 = var4; var9 < var5; ++var9) {
-            for(int var10 = var6; var10 < var7; ++var10) {
-               Block var11 = Block.blocksList[this.getBlockId(var8, var9, var10)];
-               if(var11 != null && var11.blockMaterial.isLiquid()) {
+   public boolean isAnyLiquid(AxisAlignedBB axisalignedbb) {
+      int i = MathHelper.floor_double(axisalignedbb.minX);
+      int j = MathHelper.floor_double(axisalignedbb.maxX + 1.0D);
+      int k = MathHelper.floor_double(axisalignedbb.minY);
+      int l = MathHelper.floor_double(axisalignedbb.maxY + 1.0D);
+      int i1 = MathHelper.floor_double(axisalignedbb.minZ);
+      int j1 = MathHelper.floor_double(axisalignedbb.maxZ + 1.0D);
+      if(axisalignedbb.minX < 0.0D) {
+         --i;
+      }
+
+      if(axisalignedbb.minY < 0.0D) {
+         --k;
+      }
+
+      if(axisalignedbb.minZ < 0.0D) {
+         --i1;
+      }
+
+      for(int k1 = i; k1 < j; ++k1) {
+         for(int l1 = k; l1 < l; ++l1) {
+            for(int i2 = i1; i2 < j1; ++i2) {
+               Block block = Block.blocksList[this.getBlockId(k1, l1, i2)];
+               if(block != null && block.blockMaterial.isLiquid()) {
                   return true;
                }
             }
@@ -1337,19 +1440,19 @@
       return false;
    }
 
-   public boolean isBoundingBoxBurning(AxisAlignedBB var1) {
-      int var2 = MathHelper.floor_double(var1.minX);
-      int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-      int var4 = MathHelper.floor_double(var1.minY);
-      int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-      int var6 = MathHelper.floor_double(var1.minZ);
-      int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-      if(this.checkChunksExist(var2, var4, var6, var3, var5, var7)) {
-         for(int var8 = var2; var8 < var3; ++var8) {
-            for(int var9 = var4; var9 < var5; ++var9) {
-               for(int var10 = var6; var10 < var7; ++var10) {
-                  int var11 = this.getBlockId(var8, var9, var10);
-                  if(var11 == Block.fire.blockID || var11 == Block.lavaMoving.blockID || var11 == Block.lavaStill.blockID) {
+   public boolean isBoundingBoxBurning(AxisAlignedBB axisalignedbb) {
+      int i = MathHelper.floor_double(axisalignedbb.minX);
+      int j = MathHelper.floor_double(axisalignedbb.maxX + 1.0D);
+      int k = MathHelper.floor_double(axisalignedbb.minY);
+      int l = MathHelper.floor_double(axisalignedbb.maxY + 1.0D);
+      int i1 = MathHelper.floor_double(axisalignedbb.minZ);
+      int j1 = MathHelper.floor_double(axisalignedbb.maxZ + 1.0D);
+      if(this.checkChunksExist(i, k, i1, j, l, j1)) {
+         for(int k1 = i; k1 < j; ++k1) {
+            for(int l1 = k; l1 < l; ++l1) {
+               for(int i2 = i1; i2 < j1; ++i2) {
+                  int j2 = this.getBlockId(k1, l1, i2);
+                  if(j2 == Block.fire.blockID || j2 == Block.lavaMoving.blockID || j2 == Block.lavaStill.blockID) {
                      return true;
                   }
                }
@@ -1360,59 +1463,60 @@
       return false;
    }
 
-   public boolean handleMaterialAcceleration(AxisAlignedBB var1, Material var2, Entity var3) {
-      int var4 = MathHelper.floor_double(var1.minX);
-      int var5 = MathHelper.floor_double(var1.maxX + 1.0D);
-      int var6 = MathHelper.floor_double(var1.minY);
-      int var7 = MathHelper.floor_double(var1.maxY + 1.0D);
-      int var8 = MathHelper.floor_double(var1.minZ);
-      int var9 = MathHelper.floor_double(var1.maxZ + 1.0D);
-      if(!this.checkChunksExist(var4, var6, var8, var5, var7, var9)) {
+   public boolean handleMaterialAcceleration(AxisAlignedBB axisalignedbb, Material material, Entity entity) {
+      int i = MathHelper.floor_double(axisalignedbb.minX);
+      int j = MathHelper.floor_double(axisalignedbb.maxX + 1.0D);
+      int k = MathHelper.floor_double(axisalignedbb.minY);
+      int l = MathHelper.floor_double(axisalignedbb.maxY + 1.0D);
+      int i1 = MathHelper.floor_double(axisalignedbb.minZ);
+      int j1 = MathHelper.floor_double(axisalignedbb.maxZ + 1.0D);
+      if(!this.checkChunksExist(i, k, i1, j, l, j1)) {
          return false;
       } else {
-         boolean var10 = false;
-         Vec3 var11 = this.getWorldVec3Pool().getVecFromPool(0.0D, 0.0D, 0.0D);
+         boolean flag = false;
+         Vec3 vec3d = this.getWorldVec3Pool().getVecFromPool(0.0D, 0.0D, 0.0D);
 
-         for(int var12 = var4; var12 < var5; ++var12) {
-            for(int var13 = var6; var13 < var7; ++var13) {
-               for(int var14 = var8; var14 < var9; ++var14) {
-                  Block var15 = Block.blocksList[this.getBlockId(var12, var13, var14)];
-                  if(var15 != null && var15.blockMaterial == var2) {
-                     double var16 = (double)((float)(var13 + 1) - BlockFluid.getFluidHeightPercent(this.getBlockMetadata(var12, var13, var14)));
-                     if((double)var7 >= var16) {
-                        var10 = true;
-                        var15.velocityToAddToEntity(this, var12, var13, var14, var3, var11);
+         for(int k1 = i; k1 < j; ++k1) {
+            for(int l1 = k; l1 < l; ++l1) {
+               for(int i2 = i1; i2 < j1; ++i2) {
+                  Block block = Block.blocksList[this.getBlockId(k1, l1, i2)];
+                  if(block != null && block.blockMaterial == material) {
+                     double d0 = (double)((float)(l1 + 1) - BlockFluid.getFluidHeightPercent(this.getBlockMetadata(k1, l1, i2)));
+                     if((double)l >= d0) {
+                        flag = true;
+                        block.velocityToAddToEntity(this, k1, l1, i2, entity, vec3d);
                      }
                   }
                }
             }
          }
 
-         if(var11.lengthVector() > 0.0D) {
-            var11 = var11.normalize();
-            double var18 = 0.014D;
-            var3.motionX += var11.xCoord * var18;
-            var3.motionY += var11.yCoord * var18;
-            var3.motionZ += var11.zCoord * var18;
-         }
-
-         return var10;
+         if(vec3d.lengthVector() > 0.0D) {
+            vec3d = vec3d.normalize();
+            double d1 = 0.014D;
+            entity.motionX += vec3d.xCoord * d1;
+            entity.motionY += vec3d.yCoord * d1;
+            entity.motionZ += vec3d.zCoord * d1;
+         }
+
+         vec3d.myVec3LocalPool.release(vec3d);
+         return flag;
       }
    }
 
-   public boolean isMaterialInBB(AxisAlignedBB var1, Material var2) {
-      int var3 = MathHelper.floor_double(var1.minX);
-      int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-      int var5 = MathHelper.floor_double(var1.minY);
-      int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-      int var7 = MathHelper.floor_double(var1.minZ);
-      int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-      for(int var9 = var3; var9 < var4; ++var9) {
-         for(int var10 = var5; var10 < var6; ++var10) {
-            for(int var11 = var7; var11 < var8; ++var11) {
-               Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-               if(var12 != null && var12.blockMaterial == var2) {
+   public boolean isMaterialInBB(AxisAlignedBB axisalignedbb, Material material) {
+      int i = MathHelper.floor_double(axisalignedbb.minX);
+      int j = MathHelper.floor_double(axisalignedbb.maxX + 1.0D);
+      int k = MathHelper.floor_double(axisalignedbb.minY);
+      int l = MathHelper.floor_double(axisalignedbb.maxY + 1.0D);
+      int i1 = MathHelper.floor_double(axisalignedbb.minZ);
+      int j1 = MathHelper.floor_double(axisalignedbb.maxZ + 1.0D);
+
+      for(int k1 = i; k1 < j; ++k1) {
+         for(int l1 = k; l1 < l; ++l1) {
+            for(int i2 = i1; i2 < j1; ++i2) {
+               Block block = Block.blocksList[this.getBlockId(k1, l1, i2)];
+               if(block != null && block.blockMaterial == material) {
                   return true;
                }
             }
@@ -1422,26 +1526,26 @@
       return false;
    }
 
-   public boolean isAABBInMaterial(AxisAlignedBB var1, Material var2) {
-      int var3 = MathHelper.floor_double(var1.minX);
-      int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-      int var5 = MathHelper.floor_double(var1.minY);
-      int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-      int var7 = MathHelper.floor_double(var1.minZ);
-      int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-      for(int var9 = var3; var9 < var4; ++var9) {
-         for(int var10 = var5; var10 < var6; ++var10) {
-            for(int var11 = var7; var11 < var8; ++var11) {
-               Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-               if(var12 != null && var12.blockMaterial == var2) {
-                  int var13 = this.getBlockMetadata(var9, var10, var11);
-                  double var14 = (double)(var10 + 1);
-                  if(var13 < 8) {
-                     var14 = (double)(var10 + 1) - (double)var13 / 8.0D;
+   public boolean isAABBInMaterial(AxisAlignedBB axisalignedbb, Material material) {
+      int i = MathHelper.floor_double(axisalignedbb.minX);
+      int j = MathHelper.floor_double(axisalignedbb.maxX + 1.0D);
+      int k = MathHelper.floor_double(axisalignedbb.minY);
+      int l = MathHelper.floor_double(axisalignedbb.maxY + 1.0D);
+      int i1 = MathHelper.floor_double(axisalignedbb.minZ);
+      int j1 = MathHelper.floor_double(axisalignedbb.maxZ + 1.0D);
+
+      for(int k1 = i; k1 < j; ++k1) {
+         for(int l1 = k; l1 < l; ++l1) {
+            for(int i2 = i1; i2 < j1; ++i2) {
+               Block block = Block.blocksList[this.getBlockId(k1, l1, i2)];
+               if(block != null && block.blockMaterial == material) {
+                  int j2 = this.getBlockMetadata(k1, l1, i2);
+                  double d0 = (double)(l1 + 1);
+                  if(j2 < 8) {
+                     d0 = (double)(l1 + 1) - (double)j2 / 8.0D;
                   }
 
-                  if(var14 >= var1.minY) {
+                  if(d0 >= axisalignedbb.minY) {
                      return true;
                   }
                }
@@ -1452,192 +1556,194 @@
       return false;
    }
 
-   public Explosion createExplosion(Entity var1, double var2, double var4, double var6, float var8, boolean var9) {
-      return this.newExplosion(var1, var2, var4, var6, var8, false, var9);
+   public Explosion createExplosion(Entity entity, double d0, double d1, double d2, float f, boolean flag) {
+      return this.newExplosion(entity, d0, d1, d2, f, false, flag);
    }
 
-   public Explosion newExplosion(Entity var1, double var2, double var4, double var6, float var8, boolean var9, boolean var10) {
-      Explosion var11 = new Explosion(this, var1, var2, var4, var6, var8);
-      var11.isFlaming = var9;
-      var11.isSmoking = var10;
-      var11.doExplosionA();
-      var11.doExplosionB(true);
-      return var11;
+   public Explosion newExplosion(Entity entity, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
+      Explosion explosion = new Explosion(this, entity, d0, d1, d2, f);
+      explosion.isFlaming = flag;
+      explosion.isSmoking = flag1;
+      explosion.doExplosionA();
+      explosion.doExplosionB(true);
+      return explosion;
    }
 
-   public float getBlockDensity(Vec3 var1, AxisAlignedBB var2) {
-      double var3 = 1.0D / ((var2.maxX - var2.minX) * 2.0D + 1.0D);
-      double var5 = 1.0D / ((var2.maxY - var2.minY) * 2.0D + 1.0D);
-      double var7 = 1.0D / ((var2.maxZ - var2.minZ) * 2.0D + 1.0D);
-      int var9 = 0;
-      int var10 = 0;
+   public float getBlockDensity(Vec3 vec3d, AxisAlignedBB axisalignedbb) {
+      double d0 = 1.0D / ((axisalignedbb.maxX - axisalignedbb.minX) * 2.0D + 1.0D);
+      double d1 = 1.0D / ((axisalignedbb.maxY - axisalignedbb.minY) * 2.0D + 1.0D);
+      double d2 = 1.0D / ((axisalignedbb.maxZ - axisalignedbb.minZ) * 2.0D + 1.0D);
+      int i = 0;
+      int j = 0;
+      Vec3 vec3d2 = vec3d.myVec3LocalPool.getVecFromPool(0.0D, 0.0D, 0.0D);
 
-      for(float var11 = 0.0F; var11 <= 1.0F; var11 = (float)((double)var11 + var3)) {
-         for(float var12 = 0.0F; var12 <= 1.0F; var12 = (float)((double)var12 + var5)) {
-            for(float var13 = 0.0F; var13 <= 1.0F; var13 = (float)((double)var13 + var7)) {
-               double var14 = var2.minX + (var2.maxX - var2.minX) * (double)var11;
-               double var16 = var2.minY + (var2.maxY - var2.minY) * (double)var12;
-               double var18 = var2.minZ + (var2.maxZ - var2.minZ) * (double)var13;
-               if(this.rayTraceBlocks(this.getWorldVec3Pool().getVecFromPool(var14, var16, var18), var1) == null) {
-                  ++var9;
+      for(float f = 0.0F; f <= 1.0F; f = (float)((double)f + d0)) {
+         for(float f1 = 0.0F; f1 <= 1.0F; f1 = (float)((double)f1 + d1)) {
+            for(float f2 = 0.0F; f2 <= 1.0F; f2 = (float)((double)f2 + d2)) {
+               double d3 = axisalignedbb.minX + (axisalignedbb.maxX - axisalignedbb.minX) * (double)f;
+               double d4 = axisalignedbb.minY + (axisalignedbb.maxY - axisalignedbb.minY) * (double)f1;
+               double d5 = axisalignedbb.minZ + (axisalignedbb.maxZ - axisalignedbb.minZ) * (double)f2;
+               if(this.rayTraceBlocks(vec3d2.setComponents(d3, d4, d5), vec3d) == null) {
+                  ++i;
                }
 
-               ++var10;
+               ++j;
             }
          }
       }
 
-      return (float)var9 / (float)var10;
+      vec3d2.myVec3LocalPool.release(vec3d2);
+      return (float)i / (float)j;
    }
 
-   public boolean extinguishFire(EntityPlayer var1, int var2, int var3, int var4, int var5) {
-      if(var5 == 0) {
-         --var3;
+   public boolean extinguishFire(EntityPlayer entityhuman, int i, int j, int k, int l) {
+      if(l == 0) {
+         --j;
       }
 
-      if(var5 == 1) {
-         ++var3;
+      if(l == 1) {
+         ++j;
       }
 
-      if(var5 == 2) {
-         --var4;
+      if(l == 2) {
+         --k;
       }
 
-      if(var5 == 3) {
-         ++var4;
+      if(l == 3) {
+         ++k;
       }
 
-      if(var5 == 4) {
-         --var2;
+      if(l == 4) {
+         --i;
       }
 
-      if(var5 == 5) {
-         ++var2;
+      if(l == 5) {
+         ++i;
       }
 
-      if(this.getBlockId(var2, var3, var4) == Block.fire.blockID) {
-         this.playAuxSFXAtEntity(var1, 1004, var2, var3, var4, 0);
-         this.setBlockWithNotify(var2, var3, var4, 0);
+      if(this.getBlockId(i, j, k) == Block.fire.blockID) {
+         this.playAuxSFXAtEntity(entityhuman, 1004, i, j, k, 0);
+         this.setBlockWithNotify(i, j, k, 0);
          return true;
       } else {
          return false;
       }
    }
 
-   public TileEntity getBlockTileEntity(int var1, int var2, int var3) {
-      if(var2 >= 256) {
+   public TileEntity getBlockTileEntity(int i, int j, int k) {
+      if(j >= 256) {
          return null;
       } else {
-         Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-         if(var4 == null) {
+         Chunk chunk = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+         if(chunk == null) {
             return null;
          } else {
-            TileEntity var5 = var4.getChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
-            if(var5 == null) {
-               for(int var6 = 0; var6 < this.addedTileEntityList.size(); ++var6) {
-                  TileEntity var7 = (TileEntity)this.addedTileEntityList.get(var6);
-                  if(!var7.isInvalid() && var7.xCoord == var1 && var7.yCoord == var2 && var7.zCoord == var3) {
-                     var5 = var7;
+            TileEntity tileentity = chunk.getChunkBlockTileEntity(i & 15, j, k & 15);
+            if(tileentity == null) {
+               for(int l = 0; l < this.addedTileEntityList.size(); ++l) {
+                  TileEntity tileentity1 = (TileEntity)this.addedTileEntityList.get(l);
+                  if(!tileentity1.isInvalid() && tileentity1.xCoord == i && tileentity1.yCoord == j && tileentity1.zCoord == k) {
+                     tileentity = tileentity1;
                      break;
                   }
                }
             }
 
-            return var5;
+            return tileentity;
          }
       }
    }
 
-   public void setBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-      if(var4 != null && !var4.isInvalid()) {
+   public void setBlockTileEntity(int i, int j, int k, TileEntity tileentity) {
+      if(tileentity != null && !tileentity.isInvalid()) {
          if(this.scanningTileEntities) {
-            var4.xCoord = var1;
-            var4.yCoord = var2;
-            var4.zCoord = var3;
-            this.addedTileEntityList.add(var4);
+            tileentity.xCoord = i;
+            tileentity.yCoord = j;
+            tileentity.zCoord = k;
+            this.addedTileEntityList.add(tileentity);
          } else {
-            this.loadedTileEntityList.add(var4);
-            Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-            if(var5 != null) {
-               var5.setChunkBlockTileEntity(var1 & 15, var2, var3 & 15, var4);
+            this.loadedTileEntityList.add(tileentity);
+            Chunk chunk = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+            if(chunk != null) {
+               chunk.setChunkBlockTileEntity(i & 15, j, k & 15, tileentity);
             }
          }
       }
 
    }
 
-   public void removeBlockTileEntity(int var1, int var2, int var3) {
-      TileEntity var4 = this.getBlockTileEntity(var1, var2, var3);
-      if(var4 != null && this.scanningTileEntities) {
-         var4.invalidate();
-         this.addedTileEntityList.remove(var4);
+   public void removeBlockTileEntity(int i, int j, int k) {
+      TileEntity tileentity = this.getBlockTileEntity(i, j, k);
+      if(tileentity != null && this.scanningTileEntities) {
+         tileentity.invalidate();
+         this.addedTileEntityList.remove(tileentity);
       } else {
-         if(var4 != null) {
-            this.addedTileEntityList.remove(var4);
-            this.loadedTileEntityList.remove(var4);
+         if(tileentity != null) {
+            this.addedTileEntityList.remove(tileentity);
+            this.loadedTileEntityList.remove(tileentity);
          }
 
-         Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-         if(var5 != null) {
-            var5.removeChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
+         Chunk chunk = this.getChunkFromChunkCoords(i >> 4, k >> 4);
+         if(chunk != null) {
+            chunk.removeChunkBlockTileEntity(i & 15, j, k & 15);
          }
       }
 
    }
 
-   public void markTileEntityForDespawn(TileEntity var1) {
-      this.entityRemoval.add(var1);
+   public void markTileEntityForDespawn(TileEntity tileentity) {
+      this.entityRemoval.add(tileentity);
    }
 
-   public boolean isBlockOpaqueCube(int var1, int var2, int var3) {
-      Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-      return var4 == null?false:var4.isOpaqueCube();
+   public boolean isBlockOpaqueCube(int i, int j, int k) {
+      Block block = Block.blocksList[this.getBlockId(i, j, k)];
+      return block == null?false:block.isOpaqueCube();
    }
 
-   public boolean isBlockNormalCube(int var1, int var2, int var3) {
-      return Block.isNormalCube(this.getBlockId(var1, var2, var3));
+   public boolean isBlockNormalCube(int i, int j, int k) {
+      return Block.isNormalCube(this.getBlockId(i, j, k));
    }
 
-   public boolean func_85174_u(int var1, int var2, int var3) {
-      int var4 = this.getBlockId(var1, var2, var3);
-      if(var4 != 0 && Block.blocksList[var4] != null) {
-         AxisAlignedBB var5 = Block.blocksList[var4].getCollisionBoundingBoxFromPool(this, var1, var2, var3);
-         return var5 != null && var5.getAverageEdgeLength() >= 1.0D;
+   public boolean func_85174_u(int i, int j, int k) {
+      int l = this.getBlockId(i, j, k);
+      if(l != 0 && Block.blocksList[l] != null) {
+         AxisAlignedBB axisalignedbb = Block.blocksList[l].getCollisionBoundingBoxFromPool(this, i, j, k);
+         return axisalignedbb != null && axisalignedbb.getAverageEdgeLength() >= 1.0D;
       } else {
          return false;
       }
    }
 
-   public boolean doesBlockHaveSolidTopSurface(int var1, int var2, int var3) {
-      Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-      return var4 == null?false:(var4.blockMaterial.isOpaque() && var4.renderAsNormalBlock()?true:(var4 instanceof BlockStairs?(this.getBlockMetadata(var1, var2, var3) & 4) == 4:(var4 instanceof BlockHalfSlab?(this.getBlockMetadata(var1, var2, var3) & 8) == 8:false)));
+   public boolean doesBlockHaveSolidTopSurface(int i, int j, int k) {
+      Block block = Block.blocksList[this.getBlockId(i, j, k)];
+      return block == null?false:(block.blockMaterial.isOpaque() && block.renderAsNormalBlock()?true:(block instanceof BlockStairs?(this.getBlockMetadata(i, j, k) & 4) == 4:(block instanceof BlockHalfSlab?(this.getBlockMetadata(i, j, k) & 8) == 8:false)));
    }
 
-   public boolean isBlockNormalCubeDefault(int var1, int var2, int var3, boolean var4) {
-      if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
-         Chunk var5 = this.chunkProvider.provideChunk(var1 >> 4, var3 >> 4);
-         if(var5 != null && !var5.isEmpty()) {
-            Block var6 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-            return var6 == null?false:var6.blockMaterial.isOpaque() && var6.renderAsNormalBlock();
+   public boolean isBlockNormalCubeDefault(int i, int j, int k, boolean flag) {
+      if(i >= -30000000 && k >= -30000000 && i < 30000000 && k < 30000000) {
+         Chunk chunk = this.chunkProvider.provideChunk(i >> 4, k >> 4);
+         if(chunk != null && !chunk.isEmpty()) {
+            Block block = Block.blocksList[this.getBlockId(i, j, k)];
+            return block == null?false:block.blockMaterial.isOpaque() && block.renderAsNormalBlock();
          } else {
-            return var4;
+            return flag;
          }
       } else {
-         return var4;
+         return flag;
       }
    }
 
    public void calculateInitialSkylight() {
-      int var1 = this.calculateSkylightSubtracted(1.0F);
-      if(var1 != this.skylightSubtracted) {
-         this.skylightSubtracted = var1;
+      int i = this.calculateSkylightSubtracted(1.0F);
+      if(i != this.skylightSubtracted) {
+         this.skylightSubtracted = i;
       }
 
    }
 
-   public void setAllowedSpawnTypes(boolean var1, boolean var2) {
-      this.spawnHostileMobs = var1;
-      this.spawnPeacefulMobs = var2;
+   public void setAllowedSpawnTypes(boolean flag, boolean flag1) {
+      this.spawnHostileMobs = flag;
+      this.spawnPeacefulMobs = flag1;
    }
 
    public void tick() {
@@ -1660,33 +1766,41 @@
             --this.lastLightningBolt;
          }
 
-         int var1 = this.worldInfo.getThunderTime();
-         if(var1 <= 0) {
+         int i = this.worldInfo.getThunderTime();
+         if(i <= 0) {
             if(this.worldInfo.isThundering()) {
                this.worldInfo.setThunderTime(this.rand.nextInt(12000) + 3600);
             } else {
                this.worldInfo.setThunderTime(this.rand.nextInt(168000) + 12000);
             }
          } else {
-            --var1;
-            this.worldInfo.setThunderTime(var1);
-            if(var1 <= 0) {
-               this.worldInfo.setThundering(!this.worldInfo.isThundering());
+            --i;
+            this.worldInfo.setThunderTime(i);
+            if(i <= 0) {
+               ThunderChangeEvent j = new ThunderChangeEvent(this.getWorld(), !this.worldInfo.isThundering());
+               this.getServer().getPluginManager().callEvent(j);
+               if(!j.isCancelled()) {
+                  this.worldInfo.setThundering(!this.worldInfo.isThundering());
+               }
             }
          }
 
-         int var2 = this.worldInfo.getRainTime();
-         if(var2 <= 0) {
+         int var4 = this.worldInfo.getRainTime();
+         if(var4 <= 0) {
             if(this.worldInfo.isRaining()) {
                this.worldInfo.setRainTime(this.rand.nextInt(12000) + 12000);
             } else {
                this.worldInfo.setRainTime(this.rand.nextInt(168000) + 12000);
             }
          } else {
-            --var2;
-            this.worldInfo.setRainTime(var2);
-            if(var2 <= 0) {
-               this.worldInfo.setRaining(!this.worldInfo.isRaining());
+            --var4;
+            this.worldInfo.setRainTime(var4);
+            if(var4 <= 0) {
+               WeatherChangeEvent weather = new WeatherChangeEvent(this.getWorld(), !this.worldInfo.isRaining());
+               this.getServer().getPluginManager().callEvent(weather);
+               if(!weather.isCancelled()) {
+                  this.worldInfo.setRaining(!this.worldInfo.isRaining());
+               }
             }
          }
 
@@ -1719,8 +1833,8 @@
          if(this.thunderingStrength > 1.0F) {
             this.thunderingStrength = 1.0F;
          }
-
       }
+
    }
 
    public void commandToggleDownfall() {
@@ -1728,22 +1842,24 @@
    }
 
    protected void setActivePlayerChunksAndCheckLight() {
-      this.activeChunkSet.clear();
       this.theProfiler.startSection("buildList");
 
-      int var1;
-      EntityPlayer var2;
-      int var3;
-      int var4;
-      for(var1 = 0; var1 < this.playerEntities.size(); ++var1) {
-         var2 = (EntityPlayer)this.playerEntities.get(var1);
-         var3 = MathHelper.floor_double(var2.posX / 16.0D);
-         var4 = MathHelper.floor_double(var2.posZ / 16.0D);
-         byte var5 = 7;
-
-         for(int var6 = -var5; var6 <= var5; ++var6) {
-            for(int var7 = -var5; var7 <= var5; ++var7) {
-               this.activeChunkSet.add(new ChunkCoordIntPair(var6 + var3, var7 + var4));
+      int i;
+      EntityPlayer entityhuman;
+      int j;
+      int k;
+      for(i = 0; i < this.playerEntities.size(); ++i) {
+         entityhuman = (EntityPlayer)this.playerEntities.get(i);
+         j = MathHelper.floor_double(entityhuman.posX / 16.0D);
+         k = MathHelper.floor_double(entityhuman.posZ / 16.0D);
+         byte j1 = 7;
+
+         for(int l = -j1; l <= j1; ++l) {
+            for(int i1 = -j1; i1 <= j1; ++i1) {
+               ChunkProviderServer chunkProviderServer = ((WorldServer)entityhuman.worldObj).theChunkProviderServer;
+               if(!chunkProviderServer.droppedChunksSet.contains(l + j, i1 + k)) {
+                  this.activeChunkSet.add(LongHash.toLong(l + j, i1 + k));
+               }
             }
          }
       }
@@ -1755,84 +1871,84 @@
 
       this.theProfiler.startSection("playerCheckLight");
       if(!this.playerEntities.isEmpty()) {
-         var1 = this.rand.nextInt(this.playerEntities.size());
-         var2 = (EntityPlayer)this.playerEntities.get(var1);
-         var3 = MathHelper.floor_double(var2.posX) + this.rand.nextInt(11) - 5;
-         var4 = MathHelper.floor_double(var2.posY) + this.rand.nextInt(11) - 5;
-         int var8 = MathHelper.floor_double(var2.posZ) + this.rand.nextInt(11) - 5;
-         this.updateAllLightTypes(var3, var4, var8);
+         i = this.rand.nextInt(this.playerEntities.size());
+         entityhuman = (EntityPlayer)this.playerEntities.get(i);
+         j = MathHelper.floor_double(entityhuman.posX) + this.rand.nextInt(11) - 5;
+         k = MathHelper.floor_double(entityhuman.posY) + this.rand.nextInt(11) - 5;
+         int var9 = MathHelper.floor_double(entityhuman.posZ) + this.rand.nextInt(11) - 5;
+         this.updateAllLightTypes(j, k, var9);
       }
 
       this.theProfiler.endSection();
    }
 
-   protected void moodSoundAndLightCheck(int var1, int var2, Chunk var3) {
+   protected void moodSoundAndLightCheck(int i, int j, Chunk chunk) {
       this.theProfiler.endStartSection("moodSound");
       if(this.ambientTickCountdown == 0 && !this.isRemote) {
          this.updateLCG = this.updateLCG * 3 + 1013904223;
-         int var4 = this.updateLCG >> 2;
-         int var5 = var4 & 15;
-         int var6 = var4 >> 8 & 15;
-         int var7 = var4 >> 16 & 127;
-         int var8 = var3.getBlockID(var5, var7, var6);
-         var5 += var1;
-         var6 += var2;
-         if(var8 == 0 && this.getFullBlockLightValue(var5, var7, var6) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, var5, var7, var6) <= 0) {
-            EntityPlayer var9 = this.getClosestPlayer((double)var5 + 0.5D, (double)var7 + 0.5D, (double)var6 + 0.5D, 8.0D);
-            if(var9 != null && var9.getDistanceSq((double)var5 + 0.5D, (double)var7 + 0.5D, (double)var6 + 0.5D) > 4.0D) {
-               this.playSoundEffect((double)var5 + 0.5D, (double)var7 + 0.5D, (double)var6 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
+         int k = this.updateLCG >> 2;
+         int l = k & 15;
+         int i1 = k >> 8 & 15;
+         int j1 = k >> 16 & 255;
+         int k1 = chunk.getBlockID(l, j1, i1);
+         l += i;
+         i1 += j;
+         if(k1 == 0 && this.getFullBlockLightValue(l, j1, i1) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, l, j1, i1) <= 0) {
+            EntityPlayer entityhuman = this.getClosestPlayer((double)l + 0.5D, (double)j1 + 0.5D, (double)i1 + 0.5D, 8.0D);
+            if(entityhuman != null && entityhuman.getDistanceSq((double)l + 0.5D, (double)j1 + 0.5D, (double)i1 + 0.5D) > 4.0D) {
+               this.playSoundEffect((double)l + 0.5D, (double)j1 + 0.5D, (double)i1 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
                this.ambientTickCountdown = this.rand.nextInt(12000) + 6000;
             }
          }
       }
 
       this.theProfiler.endStartSection("checkLight");
-      var3.enqueueRelightChecks();
+      chunk.enqueueRelightChecks();
    }
 
    protected void tickBlocksAndAmbiance() {
       this.setActivePlayerChunksAndCheckLight();
    }
 
-   public boolean isBlockFreezable(int var1, int var2, int var3) {
-      return this.canBlockFreeze(var1, var2, var3, false);
+   public boolean isBlockFreezable(int i, int j, int k) {
+      return this.canBlockFreeze(i, j, k, false);
    }
 
-   public boolean isBlockFreezableNaturally(int var1, int var2, int var3) {
-      return this.canBlockFreeze(var1, var2, var3, true);
+   public boolean isBlockFreezableNaturally(int i, int j, int k) {
+      return this.canBlockFreeze(i, j, k, true);
    }
 
-   public boolean canBlockFreeze(int var1, int var2, int var3, boolean var4) {
-      BiomeGenBase var5 = this.getBiomeGenForCoords(var1, var3);
-      float var6 = var5.getFloatTemperature();
-      if(var6 > 0.15F) {
+   public boolean canBlockFreeze(int i, int j, int k, boolean flag) {
+      BiomeGenBase biomebase = this.getBiomeGenForCoords(i, k);
+      float f = biomebase.getFloatTemperature();
+      if(f > 0.15F) {
          return false;
       } else {
-         if(var2 >= 0 && var2 < 256 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
-            int var7 = this.getBlockId(var1, var2, var3);
-            if((var7 == Block.waterStill.blockID || var7 == Block.waterMoving.blockID) && this.getBlockMetadata(var1, var2, var3) == 0) {
-               if(!var4) {
+         if(j >= 0 && j < 256 && this.getSavedLightValue(EnumSkyBlock.Block, i, j, k) < 10) {
+            int l = this.getBlockId(i, j, k);
+            if((l == Block.waterStill.blockID || l == Block.waterMoving.blockID) && this.getBlockMetadata(i, j, k) == 0) {
+               if(!flag) {
                   return true;
                }
 
-               boolean var8 = true;
-               if(var8 && this.getBlockMaterial(var1 - 1, var2, var3) != Material.water) {
-                  var8 = false;
+               boolean flag1 = true;
+               if(flag1 && this.getBlockMaterial(i - 1, j, k) != Material.water) {
+                  flag1 = false;
                }
 
-               if(var8 && this.getBlockMaterial(var1 + 1, var2, var3) != Material.water) {
-                  var8 = false;
+               if(flag1 && this.getBlockMaterial(i + 1, j, k) != Material.water) {
+                  flag1 = false;
                }
 
-               if(var8 && this.getBlockMaterial(var1, var2, var3 - 1) != Material.water) {
-                  var8 = false;
+               if(flag1 && this.getBlockMaterial(i, j, k - 1) != Material.water) {
+                  flag1 = false;
                }
 
-               if(var8 && this.getBlockMaterial(var1, var2, var3 + 1) != Material.water) {
-                  var8 = false;
+               if(flag1 && this.getBlockMaterial(i, j, k + 1) != Material.water) {
+                  flag1 = false;
                }
 
-               if(!var8) {
+               if(!flag1) {
                   return true;
                }
             }
@@ -1842,16 +1958,16 @@
       }
    }
 
-   public boolean canSnowAt(int var1, int var2, int var3) {
-      BiomeGenBase var4 = this.getBiomeGenForCoords(var1, var3);
-      float var5 = var4.getFloatTemperature();
-      if(var5 > 0.15F) {
+   public boolean canSnowAt(int i, int j, int k) {
+      BiomeGenBase biomebase = this.getBiomeGenForCoords(i, k);
+      float f = biomebase.getFloatTemperature();
+      if(f > 0.15F) {
          return false;
       } else {
-         if(var2 >= 0 && var2 < 256 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
-            int var6 = this.getBlockId(var1, var2 - 1, var3);
-            int var7 = this.getBlockId(var1, var2, var3);
-            if(var7 == 0 && Block.snow.canPlaceBlockAt(this, var1, var2, var3) && var6 != 0 && var6 != Block.ice.blockID && Block.blocksList[var6].blockMaterial.blocksMovement()) {
+         if(j >= 0 && j < 256 && this.getSavedLightValue(EnumSkyBlock.Block, i, j, k) < 10) {
+            int l = this.getBlockId(i, j - 1, k);
+            int i1 = this.getBlockId(i, j, k);
+            if(i1 == 0 && Block.snow.canPlaceBlockAt(this, i, j, k) && l != 0 && l != Block.ice.blockID && Block.blocksList[l].blockMaterial.blocksMovement()) {
                return true;
             }
          }
@@ -1860,169 +1976,169 @@
       }
    }
 
-   public void updateAllLightTypes(int var1, int var2, int var3) {
+   public void updateAllLightTypes(int i, int j, int k) {
       if(!this.provider.hasNoSky) {
-         this.updateLightByType(EnumSkyBlock.Sky, var1, var2, var3);
+         this.updateLightByType(EnumSkyBlock.Sky, i, j, k);
       }
 
-      this.updateLightByType(EnumSkyBlock.Block, var1, var2, var3);
+      this.updateLightByType(EnumSkyBlock.Block, i, j, k);
    }
 
-   private int computeSkyLightValue(int var1, int var2, int var3, int var4, int var5, int var6) {
-      int var7 = 0;
-      if(this.canBlockSeeTheSky(var2, var3, var4)) {
-         var7 = 15;
+   private int computeSkyLightValue(int i, int j, int k, int l, int i1, int j1) {
+      int k1 = 0;
+      if(this.canBlockSeeTheSky(j, k, l)) {
+         k1 = 15;
       } else {
-         if(var6 == 0) {
-            var6 = 1;
+         if(j1 == 0) {
+            j1 = 1;
          }
 
-         int var8 = this.getSavedLightValue(EnumSkyBlock.Sky, var2 - 1, var3, var4) - var6;
-         int var9 = this.getSavedLightValue(EnumSkyBlock.Sky, var2 + 1, var3, var4) - var6;
-         int var10 = this.getSavedLightValue(EnumSkyBlock.Sky, var2, var3 - 1, var4) - var6;
-         int var11 = this.getSavedLightValue(EnumSkyBlock.Sky, var2, var3 + 1, var4) - var6;
-         int var12 = this.getSavedLightValue(EnumSkyBlock.Sky, var2, var3, var4 - 1) - var6;
-         int var13 = this.getSavedLightValue(EnumSkyBlock.Sky, var2, var3, var4 + 1) - var6;
-         if(var8 > var7) {
-            var7 = var8;
+         int l1 = this.getSavedLightValue(EnumSkyBlock.Sky, j - 1, k, l) - j1;
+         int i2 = this.getSavedLightValue(EnumSkyBlock.Sky, j + 1, k, l) - j1;
+         int j2 = this.getSavedLightValue(EnumSkyBlock.Sky, j, k - 1, l) - j1;
+         int k2 = this.getSavedLightValue(EnumSkyBlock.Sky, j, k + 1, l) - j1;
+         int l2 = this.getSavedLightValue(EnumSkyBlock.Sky, j, k, l - 1) - j1;
+         int i3 = this.getSavedLightValue(EnumSkyBlock.Sky, j, k, l + 1) - j1;
+         if(l1 > k1) {
+            k1 = l1;
          }
 
-         if(var9 > var7) {
-            var7 = var9;
+         if(i2 > k1) {
+            k1 = i2;
          }
 
-         if(var10 > var7) {
-            var7 = var10;
+         if(j2 > k1) {
+            k1 = j2;
          }
 
-         if(var11 > var7) {
-            var7 = var11;
+         if(k2 > k1) {
+            k1 = k2;
          }
 
-         if(var12 > var7) {
-            var7 = var12;
+         if(l2 > k1) {
+            k1 = l2;
          }
 
-         if(var13 > var7) {
-            var7 = var13;
+         if(i3 > k1) {
+            k1 = i3;
          }
       }
 
-      return var7;
+      return k1;
    }
 
-   private int computeBlockLightValue(int var1, int var2, int var3, int var4, int var5, int var6) {
-      int var7 = Block.lightValue[var5];
-      int var8 = this.getSavedLightValue(EnumSkyBlock.Block, var2 - 1, var3, var4) - var6;
-      int var9 = this.getSavedLightValue(EnumSkyBlock.Block, var2 + 1, var3, var4) - var6;
-      int var10 = this.getSavedLightValue(EnumSkyBlock.Block, var2, var3 - 1, var4) - var6;
-      int var11 = this.getSavedLightValue(EnumSkyBlock.Block, var2, var3 + 1, var4) - var6;
-      int var12 = this.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4 - 1) - var6;
-      int var13 = this.getSavedLightValue(EnumSkyBlock.Block, var2, var3, var4 + 1) - var6;
-      if(var8 > var7) {
-         var7 = var8;
+   private int computeBlockLightValue(int i, int j, int k, int l, int i1, int j1) {
+      int k1 = Block.lightValue[i1];
+      int l1 = this.getSavedLightValue(EnumSkyBlock.Block, j - 1, k, l) - j1;
+      int i2 = this.getSavedLightValue(EnumSkyBlock.Block, j + 1, k, l) - j1;
+      int j2 = this.getSavedLightValue(EnumSkyBlock.Block, j, k - 1, l) - j1;
+      int k2 = this.getSavedLightValue(EnumSkyBlock.Block, j, k + 1, l) - j1;
+      int l2 = this.getSavedLightValue(EnumSkyBlock.Block, j, k, l - 1) - j1;
+      int i3 = this.getSavedLightValue(EnumSkyBlock.Block, j, k, l + 1) - j1;
+      if(l1 > k1) {
+         k1 = l1;
       }
 
-      if(var9 > var7) {
-         var7 = var9;
+      if(i2 > k1) {
+         k1 = i2;
       }
 
-      if(var10 > var7) {
-         var7 = var10;
+      if(j2 > k1) {
+         k1 = j2;
       }
 
-      if(var11 > var7) {
-         var7 = var11;
+      if(k2 > k1) {
+         k1 = k2;
       }
 
-      if(var12 > var7) {
-         var7 = var12;
+      if(l2 > k1) {
+         k1 = l2;
       }
 
-      if(var13 > var7) {
-         var7 = var13;
+      if(i3 > k1) {
+         k1 = i3;
       }
 
-      return var7;
+      return k1;
    }
 
-   public void updateLightByType(EnumSkyBlock var1, int var2, int var3, int var4) {
-      if(this.doChunksNearChunkExist(var2, var3, var4, 17)) {
-         int var5 = 0;
-         int var6 = 0;
+   public void updateLightByType(EnumSkyBlock enumskyblock, int i, int j, int k) {
+      if(this.doChunksNearChunkExist(i, j, k, 17)) {
+         int l = 0;
+         int i1 = 0;
          this.theProfiler.startSection("getBrightness");
-         int var7 = this.getSavedLightValue(var1, var2, var3, var4);
-         boolean var8 = false;
-         int var9 = this.getBlockId(var2, var3, var4);
-         int var10 = this.getBlockLightOpacity(var2, var3, var4);
-         if(var10 == 0) {
-            var10 = 1;
+         int j1 = this.getSavedLightValue(enumskyblock, i, j, k);
+         boolean flag = false;
+         int k1 = this.getBlockId(i, j, k);
+         int l1 = this.getBlockLightOpacity(i, j, k);
+         if(l1 == 0) {
+            l1 = 1;
          }
 
-         boolean var11 = false;
-         int var24;
-         if(var1 == EnumSkyBlock.Sky) {
-            var24 = this.computeSkyLightValue(var7, var2, var3, var4, var9, var10);
+         boolean flag1 = false;
+         int i2;
+         if(enumskyblock == EnumSkyBlock.Sky) {
+            i2 = this.computeSkyLightValue(j1, i, j, k, k1, l1);
          } else {
-            var24 = this.computeBlockLightValue(var7, var2, var3, var4, var9, var10);
+            i2 = this.computeBlockLightValue(j1, i, j, k, k1, l1);
          }
 
-         int var12;
-         int var13;
-         int var14;
-         int var15;
-         int var17;
-         int var16;
-         int var19;
-         int var18;
-         if(var24 > var7) {
-            this.lightUpdateBlockList[var6++] = 133152;
-         } else if(var24 < var7) {
-            if(var1 != EnumSkyBlock.Block) {
+         int j2;
+         int k2;
+         int l2;
+         int k3;
+         int i3;
+         int i4;
+         int j3;
+         int l3;
+         if(i2 > j1) {
+            this.lightUpdateBlockList[i1++] = 133152;
+         } else if(i2 < j1) {
+            if(enumskyblock != EnumSkyBlock.Block) {
                ;
             }
 
-            this.lightUpdateBlockList[var6++] = 133152 + (var7 << 18);
+            this.lightUpdateBlockList[i1++] = 133152 + (j1 << 18);
 
-            while(var5 < var6) {
-               var9 = this.lightUpdateBlockList[var5++];
-               var10 = (var9 & 63) - 32 + var2;
-               var24 = (var9 >> 6 & 63) - 32 + var3;
-               var12 = (var9 >> 12 & 63) - 32 + var4;
-               var13 = var9 >> 18 & 15;
-               var14 = this.getSavedLightValue(var1, var10, var24, var12);
-               if(var14 == var13) {
-                  this.setLightValue(var1, var10, var24, var12, 0);
-                  if(var13 > 0) {
-                     var15 = var10 - var2;
-                     var16 = var24 - var3;
-                     var17 = var12 - var4;
-                     if(var15 < 0) {
-                        var15 = -var15;
+            while(l < i1) {
+               k1 = this.lightUpdateBlockList[l++];
+               l1 = (k1 & 63) - 32 + i;
+               i2 = (k1 >> 6 & 63) - 32 + j;
+               j2 = (k1 >> 12 & 63) - 32 + k;
+               k2 = k1 >> 18 & 15;
+               l2 = this.getSavedLightValue(enumskyblock, l1, i2, j2);
+               if(l2 == k2) {
+                  this.setLightValue(enumskyblock, l1, i2, j2, 0);
+                  if(k2 > 0) {
+                     i3 = l1 - i;
+                     k3 = i2 - j;
+                     j3 = j2 - k;
+                     if(i3 < 0) {
+                        i3 = -i3;
                      }
 
-                     if(var16 < 0) {
-                        var16 = -var16;
+                     if(k3 < 0) {
+                        k3 = -k3;
                      }
 
-                     if(var17 < 0) {
-                        var17 = -var17;
+                     if(j3 < 0) {
+                        j3 = -j3;
                      }
 
-                     if(var15 + var16 + var17 < 17) {
-                        for(var18 = 0; var18 < 6; ++var18) {
-                           var19 = var18 % 2 * 2 - 1;
-                           int var20 = var10 + var18 / 2 % 3 / 2 * var19;
-                           int var21 = var24 + (var18 / 2 + 1) % 3 / 2 * var19;
-                           int var22 = var12 + (var18 / 2 + 2) % 3 / 2 * var19;
-                           var14 = this.getSavedLightValue(var1, var20, var21, var22);
-                           int var23 = Block.lightOpacity[this.getBlockId(var20, var21, var22)];
-                           if(var23 == 0) {
-                              var23 = 1;
+                     if(i3 + k3 + j3 < 17) {
+                        for(i4 = 0; i4 < 6; ++i4) {
+                           l3 = i4 % 2 * 2 - 1;
+                           int flag2 = l1 + i4 / 2 % 3 / 2 * l3;
+                           int k4 = i2 + (i4 / 2 + 1) % 3 / 2 * l3;
+                           int l4 = j2 + (i4 / 2 + 2) % 3 / 2 * l3;
+                           l2 = this.getSavedLightValue(enumskyblock, flag2, k4, l4);
+                           int i5 = Block.lightOpacity[this.getBlockId(flag2, k4, l4)];
+                           if(i5 == 0) {
+                              i5 = 1;
                            }
 
-                           if(var14 == var13 - var23 && var6 < this.lightUpdateBlockList.length) {
-                              this.lightUpdateBlockList[var6++] = var20 - var2 + 32 + (var21 - var3 + 32 << 6) + (var22 - var4 + 32 << 12) + (var13 - var23 << 18);
+                           if(l2 == k2 - i5 && i1 < this.lightUpdateBlockList.length) {
+                              this.lightUpdateBlockList[i1++] = flag2 - i + 32 + (k4 - j + 32 << 6) + (l4 - k + 32 << 12) + (k2 - i5 << 18);
                            }
                         }
                      }
@@ -2030,72 +2146,72 @@
                }
             }
 
-            var5 = 0;
+            l = 0;
          }
 
          this.theProfiler.endSection();
          this.theProfiler.startSection("checkedPosition < toCheckCount");
 
-         while(var5 < var6) {
-            var9 = this.lightUpdateBlockList[var5++];
-            var10 = (var9 & 63) - 32 + var2;
-            var24 = (var9 >> 6 & 63) - 32 + var3;
-            var12 = (var9 >> 12 & 63) - 32 + var4;
-            var13 = this.getSavedLightValue(var1, var10, var24, var12);
-            var14 = this.getBlockId(var10, var24, var12);
-            var15 = Block.lightOpacity[var14];
-            if(var15 == 0) {
-               var15 = 1;
+         while(l < i1) {
+            k1 = this.lightUpdateBlockList[l++];
+            l1 = (k1 & 63) - 32 + i;
+            i2 = (k1 >> 6 & 63) - 32 + j;
+            j2 = (k1 >> 12 & 63) - 32 + k;
+            k2 = this.getSavedLightValue(enumskyblock, l1, i2, j2);
+            l2 = this.getBlockId(l1, i2, j2);
+            i3 = Block.lightOpacity[l2];
+            if(i3 == 0) {
+               i3 = 1;
             }
 
             boolean var25 = false;
-            if(var1 == EnumSkyBlock.Sky) {
-               var16 = this.computeSkyLightValue(var13, var10, var24, var12, var14, var15);
+            if(enumskyblock == EnumSkyBlock.Sky) {
+               k3 = this.computeSkyLightValue(k2, l1, i2, j2, l2, i3);
             } else {
-               var16 = this.computeBlockLightValue(var13, var10, var24, var12, var14, var15);
+               k3 = this.computeBlockLightValue(k2, l1, i2, j2, l2, i3);
             }
 
-            if(var16 != var13) {
-               this.setLightValue(var1, var10, var24, var12, var16);
-               if(var16 > var13) {
-                  var17 = var10 - var2;
-                  var18 = var24 - var3;
-                  var19 = var12 - var4;
-                  if(var17 < 0) {
-                     var17 = -var17;
+            if(k3 != k2) {
+               this.setLightValue(enumskyblock, l1, i2, j2, k3);
+               if(k3 > k2) {
+                  j3 = l1 - i;
+                  i4 = i2 - j;
+                  l3 = j2 - k;
+                  if(j3 < 0) {
+                     j3 = -j3;
                   }
 
-                  if(var18 < 0) {
-                     var18 = -var18;
+                  if(i4 < 0) {
+                     i4 = -i4;
                   }
 
-                  if(var19 < 0) {
-                     var19 = -var19;
+                  if(l3 < 0) {
+                     l3 = -l3;
                   }
 
-                  if(var17 + var18 + var19 < 17 && var6 < this.lightUpdateBlockList.length - 6) {
-                     if(this.getSavedLightValue(var1, var10 - 1, var24, var12) < var16) {
-                        this.lightUpdateBlockList[var6++] = var10 - 1 - var2 + 32 + (var24 - var3 + 32 << 6) + (var12 - var4 + 32 << 12);
+                  if(j3 + i4 + l3 < 17 && i1 < this.lightUpdateBlockList.length - 6) {
+                     if(this.getSavedLightValue(enumskyblock, l1 - 1, i2, j2) < k3) {
+                        this.lightUpdateBlockList[i1++] = l1 - 1 - i + 32 + (i2 - j + 32 << 6) + (j2 - k + 32 << 12);
                      }
 
-                     if(this.getSavedLightValue(var1, var10 + 1, var24, var12) < var16) {
-                        this.lightUpdateBlockList[var6++] = var10 + 1 - var2 + 32 + (var24 - var3 + 32 << 6) + (var12 - var4 + 32 << 12);
+                     if(this.getSavedLightValue(enumskyblock, l1 + 1, i2, j2) < k3) {
+                        this.lightUpdateBlockList[i1++] = l1 + 1 - i + 32 + (i2 - j + 32 << 6) + (j2 - k + 32 << 12);
                      }
 
-                     if(this.getSavedLightValue(var1, var10, var24 - 1, var12) < var16) {
-                        this.lightUpdateBlockList[var6++] = var10 - var2 + 32 + (var24 - 1 - var3 + 32 << 6) + (var12 - var4 + 32 << 12);
+                     if(this.getSavedLightValue(enumskyblock, l1, i2 - 1, j2) < k3) {
+                        this.lightUpdateBlockList[i1++] = l1 - i + 32 + (i2 - 1 - j + 32 << 6) + (j2 - k + 32 << 12);
                      }
 
-                     if(this.getSavedLightValue(var1, var10, var24 + 1, var12) < var16) {
-                        this.lightUpdateBlockList[var6++] = var10 - var2 + 32 + (var24 + 1 - var3 + 32 << 6) + (var12 - var4 + 32 << 12);
+                     if(this.getSavedLightValue(enumskyblock, l1, i2 + 1, j2) < k3) {
+                        this.lightUpdateBlockList[i1++] = l1 - i + 32 + (i2 + 1 - j + 32 << 6) + (j2 - k + 32 << 12);
                      }
 
-                     if(this.getSavedLightValue(var1, var10, var24, var12 - 1) < var16) {
-                        this.lightUpdateBlockList[var6++] = var10 - var2 + 32 + (var24 - var3 + 32 << 6) + (var12 - 1 - var4 + 32 << 12);
+                     if(this.getSavedLightValue(enumskyblock, l1, i2, j2 - 1) < k3) {
+                        this.lightUpdateBlockList[i1++] = l1 - i + 32 + (i2 - j + 32 << 6) + (j2 - 1 - k + 32 << 12);
                      }
 
-                     if(this.getSavedLightValue(var1, var10, var24, var12 + 1) < var16) {
-                        this.lightUpdateBlockList[var6++] = var10 - var2 + 32 + (var24 - var3 + 32 << 6) + (var12 + 1 - var4 + 32 << 12);
+                     if(this.getSavedLightValue(enumskyblock, l1, i2, j2 + 1) < k3) {
+                        this.lightUpdateBlockList[i1++] = l1 - i + 32 + (i2 - j + 32 << 6) + (j2 + 1 - k + 32 << 12);
                      }
                   }
                }
@@ -2104,27 +2220,28 @@
 
          this.theProfiler.endSection();
       }
+
    }
 
-   public boolean tickUpdates(boolean var1) {
+   public boolean tickUpdates(boolean flag) {
       return false;
    }
 
-   public List getPendingBlockUpdates(Chunk var1, boolean var2) {
+   public List getPendingBlockUpdates(Chunk chunk, boolean flag) {
       return null;
    }
 
-   public List getEntitiesWithinAABBExcludingEntity(Entity var1, AxisAlignedBB var2) {
+   public List getEntitiesWithinAABBExcludingEntity(Entity entity, AxisAlignedBB axisalignedbb) {
       this.entitiesWithinAABBExcludingEntity.clear();
-      int var3 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-      int var4 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-      int var5 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-      int var6 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
-
-      for(int var7 = var3; var7 <= var4; ++var7) {
-         for(int var8 = var5; var8 <= var6; ++var8) {
-            if(this.chunkExists(var7, var8)) {
-               this.getChunkFromChunkCoords(var7, var8).getEntitiesWithinAABBForEntity(var1, var2, this.entitiesWithinAABBExcludingEntity);
+      int i = MathHelper.floor_double((axisalignedbb.minX - 2.0D) / 16.0D);
+      int j = MathHelper.floor_double((axisalignedbb.maxX + 2.0D) / 16.0D);
+      int k = MathHelper.floor_double((axisalignedbb.minZ - 2.0D) / 16.0D);
+      int l = MathHelper.floor_double((axisalignedbb.maxZ + 2.0D) / 16.0D);
+
+      for(int i1 = i; i1 <= j; ++i1) {
+         for(int j1 = k; j1 <= l; ++j1) {
+            if(this.chunkExists(i1, j1)) {
+               this.getChunkFromChunkCoords(i1, j1).getEntitiesWithinAABBForEntity(entity, axisalignedbb, this.entitiesWithinAABBExcludingEntity);
             }
          }
       }
@@ -2132,227 +2249,238 @@
       return this.entitiesWithinAABBExcludingEntity;
    }
 
-   public List getEntitiesWithinAABB(Class var1, AxisAlignedBB var2) {
-      return this.selectEntitiesWithinAABB(var1, var2, (IEntitySelector)null);
+   public List getEntitiesWithinAABB(Class oclass, AxisAlignedBB axisalignedbb) {
+      return this.selectEntitiesWithinAABB(oclass, axisalignedbb, (IEntitySelector)null);
    }
 
-   public List selectEntitiesWithinAABB(Class var1, AxisAlignedBB var2, IEntitySelector var3) {
-      int var4 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-      int var5 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-      int var6 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-      int var7 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
-      ArrayList var8 = new ArrayList();
+   public List selectEntitiesWithinAABB(Class oclass, AxisAlignedBB axisalignedbb, IEntitySelector ientityselector) {
+      int i = MathHelper.floor_double((axisalignedbb.minX - 2.0D) / 16.0D);
+      int j = MathHelper.floor_double((axisalignedbb.maxX + 2.0D) / 16.0D);
+      int k = MathHelper.floor_double((axisalignedbb.minZ - 2.0D) / 16.0D);
+      int l = MathHelper.floor_double((axisalignedbb.maxZ + 2.0D) / 16.0D);
+      ArrayList arraylist = new ArrayList();
 
-      for(int var9 = var4; var9 <= var5; ++var9) {
-         for(int var10 = var6; var10 <= var7; ++var10) {
-            if(this.chunkExists(var9, var10)) {
-               this.getChunkFromChunkCoords(var9, var10).getEntitiesOfTypeWithinAAAB(var1, var2, var8, var3);
+      for(int i1 = i; i1 <= j; ++i1) {
+         for(int j1 = k; j1 <= l; ++j1) {
+            if(this.chunkExists(i1, j1)) {
+               this.getChunkFromChunkCoords(i1, j1).getEntitiesOfTypeWithinAAAB(oclass, axisalignedbb, arraylist, ientityselector);
             }
          }
       }
 
-      return var8;
+      return arraylist;
    }
 
-   public Entity findNearestEntityWithinAABB(Class var1, AxisAlignedBB var2, Entity var3) {
-      List var4 = this.getEntitiesWithinAABB(var1, var2);
-      Entity var5 = null;
-      double var6 = Double.MAX_VALUE;
+   public Entity findNearestEntityWithinAABB(Class oclass, AxisAlignedBB axisalignedbb, Entity entity) {
+      List list = this.getEntitiesWithinAABB(oclass, axisalignedbb);
+      Entity entity1 = null;
+      double d0 = Double.MAX_VALUE;
 
-      for(int var8 = 0; var8 < var4.size(); ++var8) {
-         Entity var9 = (Entity)var4.get(var8);
-         if(var9 != var3) {
-            double var10 = var3.getDistanceSqToEntity(var9);
-            if(var10 <= var6) {
-               var5 = var9;
-               var6 = var10;
+      for(int i = 0; i < list.size(); ++i) {
+         Entity entity2 = (Entity)list.get(i);
+         if(entity2 != entity) {
+            double d1 = entity.getDistanceSqToEntity(entity2);
+            if(d1 <= d0) {
+               entity1 = entity2;
+               d0 = d1;
             }
          }
       }
 
-      return var5;
+      return entity1;
    }
 
    public abstract Entity getEntityByID(int var1);
 
-   public void updateTileEntityChunkAndDoNothing(int var1, int var2, int var3, TileEntity var4) {
-      if(this.blockExists(var1, var2, var3)) {
-         this.getChunkFromBlockCoords(var1, var3).setChunkModified();
+   public void updateTileEntityChunkAndDoNothing(int i, int j, int k, TileEntity tileentity) {
+      if(this.blockExists(i, j, k)) {
+         this.getChunkFromBlockCoords(i, k).setChunkModified();
       }
 
    }
 
-   public int countEntities(Class var1) {
-      int var2 = 0;
+   public int countEntities(Class oclass) {
+      int i = 0;
 
-      for(int var3 = 0; var3 < this.loadedEntityList.size(); ++var3) {
-         Entity var4 = (Entity)this.loadedEntityList.get(var3);
-         if(var1.isAssignableFrom(var4.getClass())) {
-            ++var2;
+      for(int j = 0; j < this.loadedEntityList.size(); ++j) {
+         Entity entity = (Entity)this.loadedEntityList.get(j);
+         if(oclass.isAssignableFrom(entity.getClass())) {
+            ++i;
          }
       }
 
-      return var2;
+      return i;
    }
 
-   public void addLoadedEntities(List var1) {
-      this.loadedEntityList.addAll(var1);
+   public void addLoadedEntities(List list) {
+      Entity entity = null;
 
-      for(int var2 = 0; var2 < var1.size(); ++var2) {
-         this.obtainEntitySkin((Entity)var1.get(var2));
+      for(int i = 0; i < list.size(); ++i) {
+         entity = (Entity)list.get(i);
+         if(entity != null) {
+            this.loadedEntityList.add(entity);
+            this.obtainEntitySkin((Entity)list.get(i));
+         }
       }
 
    }
 
-   public void unloadEntities(List var1) {
-      this.unloadedEntityList.addAll(var1);
+   public void unloadEntities(List list) {
+      this.unloadedEntityList.addAll(list);
    }
 
-   public boolean canPlaceEntityOnSide(int var1, int var2, int var3, int var4, boolean var5, int var6, Entity var7) {
-      int var8 = this.getBlockId(var2, var3, var4);
-      Block var9 = Block.blocksList[var8];
-      Block var10 = Block.blocksList[var1];
-      AxisAlignedBB var11 = var10.getCollisionBoundingBoxFromPool(this, var2, var3, var4);
-      if(var5) {
-         var11 = null;
+   public boolean canPlaceEntityOnSide(int i, int j, int k, int l, boolean flag, int i1, Entity entity) {
+      int j1 = this.getBlockId(j, k, l);
+      Block block = Block.blocksList[j1];
+      Block block1 = Block.blocksList[i];
+      AxisAlignedBB axisalignedbb = block1.getCollisionBoundingBoxFromPool(this, j, k, l);
+      if(flag) {
+         axisalignedbb = null;
       }
 
-      if(var11 != null && !this.checkIfAABBIsClearExcludingEntity(var11, var7)) {
-         return false;
+      boolean defaultReturn;
+      if(axisalignedbb != null && !this.checkIfAABBIsClearExcludingEntity(axisalignedbb, entity)) {
+         defaultReturn = false;
       } else {
-         if(var9 != null && (var9 == Block.waterMoving || var9 == Block.waterStill || var9 == Block.lavaMoving || var9 == Block.lavaStill || var9 == Block.fire || var9.blockMaterial.isReplaceable())) {
-            var9 = null;
+         if(block != null && (block == Block.waterMoving || block == Block.waterStill || block == Block.lavaMoving || block == Block.lavaStill || block == Block.fire || block.blockMaterial.isReplaceable())) {
+            block = null;
          }
 
-         return var9 != null && var9.blockMaterial == Material.circuits && var10 == Block.anvil?true:var1 > 0 && var9 == null && var10.canPlaceBlockOnSide(this, var2, var3, var4, var6);
+         defaultReturn = block != null && block.blockMaterial == Material.circuits && block1 == Block.anvil?true:i > 0 && block == null && block1.canPlaceBlockOnSide(this, j, k, l, i1);
       }
+
+      BlockCanBuildEvent event = new BlockCanBuildEvent(this.getWorld().getBlockAt(j, k, l), i, defaultReturn);
+      this.getServer().getPluginManager().callEvent(event);
+      return event.isBuildable();
    }
 
-   public PathEntity getPathEntityToEntity(Entity var1, Entity var2, float var3, boolean var4, boolean var5, boolean var6, boolean var7) {
+   public PathEntity getPathEntityToEntity(Entity entity, Entity entity1, float f, boolean flag, boolean flag1, boolean flag2, boolean flag3) {
       this.theProfiler.startSection("pathfind");
-      int var8 = MathHelper.floor_double(var1.posX);
-      int var9 = MathHelper.floor_double(var1.posY + 1.0D);
-      int var10 = MathHelper.floor_double(var1.posZ);
-      int var11 = (int)(var3 + 16.0F);
-      int var12 = var8 - var11;
-      int var13 = var9 - var11;
-      int var14 = var10 - var11;
-      int var15 = var8 + var11;
-      int var16 = var9 + var11;
-      int var17 = var10 + var11;
-      ChunkCache var18 = new ChunkCache(this, var12, var13, var14, var15, var16, var17);
-      PathEntity var19 = (new PathFinder(var18, var4, var5, var6, var7)).createEntityPathTo(var1, var2, var3);
+      int i = MathHelper.floor_double(entity.posX);
+      int j = MathHelper.floor_double(entity.posY + 1.0D);
+      int k = MathHelper.floor_double(entity.posZ);
+      int l = (int)(f + 16.0F);
+      int i1 = i - l;
+      int j1 = j - l;
+      int k1 = k - l;
+      int l1 = i + l;
+      int i2 = j + l;
+      int j2 = k + l;
+      ChunkCache chunkcache = new ChunkCache(this, i1, j1, k1, l1, i2, j2);
+      PathEntity pathentity = (new PathFinder(chunkcache, flag, flag1, flag2, flag3)).createEntityPathTo(entity, entity1, f);
       this.theProfiler.endSection();
-      return var19;
+      return pathentity;
    }
 
-   public PathEntity getEntityPathToXYZ(Entity var1, int var2, int var3, int var4, float var5, boolean var6, boolean var7, boolean var8, boolean var9) {
+   public PathEntity getEntityPathToXYZ(Entity entity, int i, int j, int k, float f, boolean flag, boolean flag1, boolean flag2, boolean flag3) {
       this.theProfiler.startSection("pathfind");
-      int var10 = MathHelper.floor_double(var1.posX);
-      int var11 = MathHelper.floor_double(var1.posY);
-      int var12 = MathHelper.floor_double(var1.posZ);
-      int var13 = (int)(var5 + 8.0F);
-      int var14 = var10 - var13;
-      int var15 = var11 - var13;
-      int var16 = var12 - var13;
-      int var17 = var10 + var13;
-      int var18 = var11 + var13;
-      int var19 = var12 + var13;
-      ChunkCache var20 = new ChunkCache(this, var14, var15, var16, var17, var18, var19);
-      PathEntity var21 = (new PathFinder(var20, var6, var7, var8, var9)).createEntityPathTo(var1, var2, var3, var4, var5);
+      int l = MathHelper.floor_double(entity.posX);
+      int i1 = MathHelper.floor_double(entity.posY);
+      int j1 = MathHelper.floor_double(entity.posZ);
+      int k1 = (int)(f + 8.0F);
+      int l1 = l - k1;
+      int i2 = i1 - k1;
+      int j2 = j1 - k1;
+      int k2 = l + k1;
+      int l2 = i1 + k1;
+      int i3 = j1 + k1;
+      ChunkCache chunkcache = new ChunkCache(this, l1, i2, j2, k2, l2, i3);
+      PathEntity pathentity = (new PathFinder(chunkcache, flag, flag1, flag2, flag3)).createEntityPathTo(entity, i, j, k, f);
       this.theProfiler.endSection();
-      return var21;
+      return pathentity;
    }
 
-   public boolean isBlockProvidingPowerTo(int var1, int var2, int var3, int var4) {
-      int var5 = this.getBlockId(var1, var2, var3);
-      return var5 == 0?false:Block.blocksList[var5].isProvidingStrongPower(this, var1, var2, var3, var4);
+   public boolean isBlockProvidingPowerTo(int i, int j, int k, int l) {
+      int i1 = this.getBlockId(i, j, k);
+      return i1 == 0?false:Block.blocksList[i1].isProvidingStrongPower(this, i, j, k, l);
    }
 
-   public boolean isBlockGettingPowered(int var1, int var2, int var3) {
-      return this.isBlockProvidingPowerTo(var1, var2 - 1, var3, 0)?true:(this.isBlockProvidingPowerTo(var1, var2 + 1, var3, 1)?true:(this.isBlockProvidingPowerTo(var1, var2, var3 - 1, 2)?true:(this.isBlockProvidingPowerTo(var1, var2, var3 + 1, 3)?true:(this.isBlockProvidingPowerTo(var1 - 1, var2, var3, 4)?true:this.isBlockProvidingPowerTo(var1 + 1, var2, var3, 5)))));
+   public boolean isBlockGettingPowered(int i, int j, int k) {
+      return this.isBlockProvidingPowerTo(i, j - 1, k, 0)?true:(this.isBlockProvidingPowerTo(i, j + 1, k, 1)?true:(this.isBlockProvidingPowerTo(i, j, k - 1, 2)?true:(this.isBlockProvidingPowerTo(i, j, k + 1, 3)?true:(this.isBlockProvidingPowerTo(i - 1, j, k, 4)?true:this.isBlockProvidingPowerTo(i + 1, j, k, 5)))));
    }
 
-   public boolean isBlockIndirectlyProvidingPowerTo(int var1, int var2, int var3, int var4) {
-      if(this.isBlockNormalCube(var1, var2, var3)) {
-         return this.isBlockGettingPowered(var1, var2, var3);
+   public boolean isBlockIndirectlyProvidingPowerTo(int i, int j, int k, int l) {
+      if(this.isBlockNormalCube(i, j, k)) {
+         return this.isBlockGettingPowered(i, j, k);
       } else {
-         int var5 = this.getBlockId(var1, var2, var3);
-         return var5 == 0?false:Block.blocksList[var5].isProvidingWeakPower(this, var1, var2, var3, var4);
+         int i1 = this.getBlockId(i, j, k);
+         return i1 == 0?false:Block.blocksList[i1].isProvidingWeakPower(this, i, j, k, l);
       }
    }
 
-   public boolean isBlockIndirectlyGettingPowered(int var1, int var2, int var3) {
-      return this.isBlockIndirectlyProvidingPowerTo(var1, var2 - 1, var3, 0)?true:(this.isBlockIndirectlyProvidingPowerTo(var1, var2 + 1, var3, 1)?true:(this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 - 1, 2)?true:(this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 + 1, 3)?true:(this.isBlockIndirectlyProvidingPowerTo(var1 - 1, var2, var3, 4)?true:this.isBlockIndirectlyProvidingPowerTo(var1 + 1, var2, var3, 5)))));
+   public boolean isBlockIndirectlyGettingPowered(int i, int j, int k) {
+      return this.isBlockIndirectlyProvidingPowerTo(i, j - 1, k, 0)?true:(this.isBlockIndirectlyProvidingPowerTo(i, j + 1, k, 1)?true:(this.isBlockIndirectlyProvidingPowerTo(i, j, k - 1, 2)?true:(this.isBlockIndirectlyProvidingPowerTo(i, j, k + 1, 3)?true:(this.isBlockIndirectlyProvidingPowerTo(i - 1, j, k, 4)?true:this.isBlockIndirectlyProvidingPowerTo(i + 1, j, k, 5)))));
    }
 
-   public EntityPlayer getClosestPlayerToEntity(Entity var1, double var2) {
-      return this.getClosestPlayer(var1.posX, var1.posY, var1.posZ, var2);
+   public EntityPlayer getClosestPlayerToEntity(Entity entity, double d0) {
+      return this.getClosestPlayer(entity.posX, entity.posY, entity.posZ, d0);
    }
 
-   public EntityPlayer getClosestPlayer(double var1, double var3, double var5, double var7) {
-      double var9 = -1.0D;
-      EntityPlayer var11 = null;
+   public EntityPlayer getClosestPlayer(double d0, double d1, double d2, double d3) {
+      double d4 = -1.0D;
+      EntityPlayer entityhuman = null;
 
-      for(int var12 = 0; var12 < this.playerEntities.size(); ++var12) {
-         EntityPlayer var13 = (EntityPlayer)this.playerEntities.get(var12);
-         double var14 = var13.getDistanceSq(var1, var3, var5);
-         if((var7 < 0.0D || var14 < var7 * var7) && (var9 == -1.0D || var14 < var9)) {
-            var9 = var14;
-            var11 = var13;
+      for(int i = 0; i < this.playerEntities.size(); ++i) {
+         EntityPlayer entityhuman1 = (EntityPlayer)this.playerEntities.get(i);
+         if(entityhuman1 != null && !entityhuman1.isDead) {
+            double d5 = entityhuman1.getDistanceSq(d0, d1, d2);
+            if((d3 < 0.0D || d5 < d3 * d3) && (d4 == -1.0D || d5 < d4)) {
+               d4 = d5;
+               entityhuman = entityhuman1;
+            }
          }
       }
 
-      return var11;
+      return entityhuman;
    }
 
-   public EntityPlayer getClosestVulnerablePlayerToEntity(Entity var1, double var2) {
-      return this.getClosestVulnerablePlayer(var1.posX, var1.posY, var1.posZ, var2);
+   public EntityPlayer getClosestVulnerablePlayerToEntity(Entity entity, double d0) {
+      return this.getClosestVulnerablePlayer(entity.posX, entity.posY, entity.posZ, d0);
    }
 
-   public EntityPlayer getClosestVulnerablePlayer(double var1, double var3, double var5, double var7) {
-      double var9 = -1.0D;
-      EntityPlayer var11 = null;
+   public EntityPlayer getClosestVulnerablePlayer(double d0, double d1, double d2, double d3) {
+      double d4 = -1.0D;
+      EntityPlayer entityhuman = null;
 
-      for(int var12 = 0; var12 < this.playerEntities.size(); ++var12) {
-         EntityPlayer var13 = (EntityPlayer)this.playerEntities.get(var12);
-         if(!var13.capabilities.disableDamage) {
-            double var14 = var13.getDistanceSq(var1, var3, var5);
-            double var16 = var7;
-            if(var13.isSneaking()) {
-               var16 = var7 * 0.800000011920929D;
+      for(int i = 0; i < this.playerEntities.size(); ++i) {
+         EntityPlayer entityhuman1 = (EntityPlayer)this.playerEntities.get(i);
+         if(entityhuman1 != null && !entityhuman1.isDead && !entityhuman1.capabilities.disableDamage) {
+            double d5 = entityhuman1.getDistanceSq(d0, d1, d2);
+            double d6 = d3;
+            if(entityhuman1.isSneaking()) {
+               d6 = d3 * 0.800000011920929D;
             }
 
-            if(var13.getHasActivePotion()) {
-               float var18 = var13.func_82243_bO();
-               if(var18 < 0.1F) {
-                  var18 = 0.1F;
+            if(entityhuman1.getHasActivePotion()) {
+               float f = entityhuman1.func_82243_bO();
+               if(f < 0.1F) {
+                  f = 0.1F;
                }
 
-               var16 *= (double)(0.7F * var18);
+               d6 *= (double)(0.7F * f);
             }
 
-            if((var7 < 0.0D || var14 < var16 * var16) && (var9 == -1.0D || var14 < var9)) {
-               var9 = var14;
-               var11 = var13;
+            if((d3 < 0.0D || d5 < d6 * d6) && (d4 == -1.0D || d5 < d4)) {
+               d4 = d5;
+               entityhuman = entityhuman1;
             }
          }
       }
 
-      return var11;
+      return entityhuman;
    }
 
-   public EntityPlayer getPlayerEntityByName(String var1) {
-      for(int var2 = 0; var2 < this.playerEntities.size(); ++var2) {
-         if(var1.equals(((EntityPlayer)this.playerEntities.get(var2)).username)) {
-            return (EntityPlayer)this.playerEntities.get(var2);
+   public EntityPlayer getPlayerEntityByName(String s) {
+      for(int i = 0; i < this.playerEntities.size(); ++i) {
+         if(s.equals(((EntityPlayer)this.playerEntities.get(i)).username)) {
+            return (EntityPlayer)this.playerEntities.get(i);
          }
       }
 
       return null;
    }
 
-   public void checkSessionLock() {
+   public void checkSessionLock() throws MinecraftException {
       this.saveHandler.checkSessionLock();
    }
 
@@ -2368,27 +2496,27 @@
       return this.worldInfo.getWorldTime();
    }
 
-   public void setWorldTime(long var1) {
-      this.worldInfo.setWorldTime(var1);
+   public void setWorldTime(long i) {
+      this.worldInfo.setWorldTime(i);
    }
 
    public ChunkCoordinates getSpawnPoint() {
       return new ChunkCoordinates(this.worldInfo.getSpawnX(), this.worldInfo.getSpawnY(), this.worldInfo.getSpawnZ());
    }
 
-   public boolean canMineBlock(EntityPlayer var1, int var2, int var3, int var4) {
+   public boolean canMineBlock(EntityPlayer entityhuman, int i, int j, int k) {
       return true;
    }
 
-   public void setEntityState(Entity var1, byte var2) {}
+   public void setEntityState(Entity entity, byte b0) {}
 
    public IChunkProvider getChunkProvider() {
       return this.chunkProvider;
    }
 
-   public void addBlockEvent(int var1, int var2, int var3, int var4, int var5, int var6) {
-      if(var4 > 0) {
-         Block.blocksList[var4].onBlockEventReceived(this, var1, var2, var3, var5, var6);
+   public void addBlockEvent(int i, int j, int k, int l, int i1, int j1) {
+      if(l > 0) {
+         Block.blocksList[l].onBlockEventReceived(this, i, j, k, i1, j1);
       }
 
    }
@@ -2407,12 +2535,19 @@
 
    public void updateAllPlayersSleepingFlag() {}
 
-   public float getWeightedThunderStrength(float var1) {
-      return (this.prevThunderingStrength + (this.thunderingStrength - this.prevThunderingStrength) * var1) * this.getRainStrength(var1);
+   public void checkSleepStatus() {
+      if(!this.isRemote) {
+         this.updateAllPlayersSleepingFlag();
+      }
+
+   }
+
+   public float getWeightedThunderStrength(float f) {
+      return (this.prevThunderingStrength + (this.thunderingStrength - this.prevThunderingStrength) * f) * this.getRainStrength(f);
    }
 
-   public float getRainStrength(float var1) {
-      return this.prevRainingStrength + (this.rainingStrength - this.prevRainingStrength) * var1;
+   public float getRainStrength(float f) {
+      return this.prevRainingStrength + (this.rainingStrength - this.prevRainingStrength) * f;
    }
 
    public boolean isThundering() {
@@ -2423,50 +2558,50 @@
       return (double)this.getRainStrength(1.0F) > 0.2D;
    }
 
-   public boolean canLightningStrikeAt(int var1, int var2, int var3) {
+   public boolean canLightningStrikeAt(int i, int j, int k) {
       if(!this.isRaining()) {
          return false;
-      } else if(!this.canBlockSeeTheSky(var1, var2, var3)) {
+      } else if(!this.canBlockSeeTheSky(i, j, k)) {
          return false;
-      } else if(this.getPrecipitationHeight(var1, var3) > var2) {
+      } else if(this.getPrecipitationHeight(i, k) > j) {
          return false;
       } else {
-         BiomeGenBase var4 = this.getBiomeGenForCoords(var1, var3);
-         return var4.getEnableSnow()?false:var4.canSpawnLightningBolt();
+         BiomeGenBase biomebase = this.getBiomeGenForCoords(i, k);
+         return biomebase.getEnableSnow()?false:biomebase.canSpawnLightningBolt();
       }
    }
 
-   public boolean isBlockHighHumidity(int var1, int var2, int var3) {
-      BiomeGenBase var4 = this.getBiomeGenForCoords(var1, var3);
-      return var4.isHighHumidity();
+   public boolean isBlockHighHumidity(int i, int j, int k) {
+      BiomeGenBase biomebase = this.getBiomeGenForCoords(i, k);
+      return biomebase.isHighHumidity();
    }
 
-   public void setItemData(String var1, WorldSavedData var2) {
-      this.mapStorage.setData(var1, var2);
+   public void setItemData(String s, WorldSavedData worldmapbase) {
+      this.mapStorage.setData(s, worldmapbase);
    }
 
-   public WorldSavedData loadItemData(Class var1, String var2) {
-      return this.mapStorage.loadData(var1, var2);
+   public WorldSavedData loadItemData(Class oclass, String s) {
+      return this.mapStorage.loadData(oclass, s);
    }
 
-   public int getUniqueDataId(String var1) {
-      return this.mapStorage.getUniqueDataId(var1);
+   public int getUniqueDataId(String s) {
+      return this.mapStorage.getUniqueDataId(s);
    }
 
-   public void func_82739_e(int var1, int var2, int var3, int var4, int var5) {
-      for(int var6 = 0; var6 < this.worldAccesses.size(); ++var6) {
-         ((IWorldAccess)this.worldAccesses.get(var6)).broadcastSound(var1, var2, var3, var4, var5);
+   public void func_82739_e(int i, int j, int k, int l, int i1) {
+      for(int j1 = 0; j1 < this.worldAccesses.size(); ++j1) {
+         ((IWorldAccess)this.worldAccesses.get(j1)).broadcastSound(i, j, k, l, i1);
       }
 
    }
 
-   public void playAuxSFX(int var1, int var2, int var3, int var4, int var5) {
-      this.playAuxSFXAtEntity((EntityPlayer)null, var1, var2, var3, var4, var5);
+   public void playAuxSFX(int i, int j, int k, int l, int i1) {
+      this.playAuxSFXAtEntity((EntityPlayer)null, i, j, k, l, i1);
    }
 
-   public void playAuxSFXAtEntity(EntityPlayer var1, int var2, int var3, int var4, int var5, int var6) {
-      for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-         ((IWorldAccess)this.worldAccesses.get(var7)).playAuxSFX(var1, var2, var3, var4, var5, var6);
+   public void playAuxSFXAtEntity(EntityPlayer entityhuman, int i, int j, int k, int l, int i1) {
+      for(int j1 = 0; j1 < this.worldAccesses.size(); ++j1) {
+         ((IWorldAccess)this.worldAccesses.get(j1)).playAuxSFX(entityhuman, i, j, k, l, i1);
       }
 
    }
@@ -2479,39 +2614,39 @@
       return this.provider.hasNoSky?128:256;
    }
 
-   public IUpdatePlayerListBox func_82735_a(EntityMinecart var1) {
+   public IUpdatePlayerListBox func_82735_a(EntityMinecart entityminecart) {
       return null;
    }
 
-   public Random setRandomSeed(int var1, int var2, int var3) {
-      long var4 = (long)var1 * 341873128712L + (long)var2 * 132897987541L + this.getWorldInfo().getSeed() + (long)var3;
-      this.rand.setSeed(var4);
+   public Random setRandomSeed(int i, int j, int k) {
+      long l = (long)i * 341873128712L + (long)j * 132897987541L + this.getWorldInfo().getSeed() + (long)k;
+      this.rand.setSeed(l);
       return this.rand;
    }
 
-   public ChunkPosition findClosestStructure(String var1, int var2, int var3, int var4) {
-      return this.getChunkProvider().findClosestStructure(this, var1, var2, var3, var4);
+   public ChunkPosition findClosestStructure(String s, int i, int j, int k) {
+      return this.getChunkProvider().findClosestStructure(this, s, i, j, k);
    }
 
-   public CrashReportCategory addWorldInfoToCrashReport(CrashReport var1) {
-      CrashReportCategory var2 = var1.func_85057_a("Affected level", 1);
-      var2.addCrashSection("Level name", this.worldInfo == null?"????":this.worldInfo.getWorldName());
-      var2.addCrashSectionCallable("All players", new CallableLvl2(this));
-      var2.addCrashSectionCallable("Chunk stats", new CallableLvl3(this));
+   public CrashReportCategory addWorldInfoToCrashReport(CrashReport crashreport) {
+      CrashReportCategory crashreportsystemdetails = crashreport.func_85057_a("Affected level", 1);
+      crashreportsystemdetails.addCrashSection("Level name", this.worldInfo == null?"????":this.worldInfo.getWorldName());
+      crashreportsystemdetails.addCrashSectionCallable("All players", new CallableLvl2(this));
+      crashreportsystemdetails.addCrashSectionCallable("Chunk stats", new CallableLvl3(this));
 
       try {
-         this.worldInfo.func_85118_a(var2);
+         this.worldInfo.func_85118_a(crashreportsystemdetails);
       } catch (Throwable var4) {
-         var2.addCrashSectionThrowable("Level Data Unobtainable", var4);
+         crashreportsystemdetails.addCrashSectionThrowable("Level Data Unobtainable", var4);
       }
 
-      return var2;
+      return crashreportsystemdetails;
    }
 
-   public void destroyBlockInWorldPartially(int var1, int var2, int var3, int var4, int var5) {
-      for(int var6 = 0; var6 < this.worldAccesses.size(); ++var6) {
-         IWorldAccess var7 = (IWorldAccess)this.worldAccesses.get(var6);
-         var7.destroyBlockPartially(var1, var2, var3, var4, var5);
+   public void destroyBlockInWorldPartially(int i, int j, int k, int l, int i1) {
+      for(int j1 = 0; j1 < this.worldAccesses.size(); ++j1) {
+         IWorldAccess iworldaccess = (IWorldAccess)this.worldAccesses.get(j1);
+         iworldaccess.destroyBlockPartially(i, j, k, l, i1);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/WorldGenBigMushroom.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenBigMushroom.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenBigMushroom.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenBigMushroom.java
--- mcp-mcdev/net/minecraft/src/WorldGenBigMushroom.java	2012-11-29 21:14:09.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenBigMushroom.java	2012-11-29 20:43:18.000000000 -0800
@@ -1,151 +1,202 @@
 package net.minecraft.src;
 
+import java.util.Iterator;
 import java.util.Random;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockSapling;
+import net.minecraft.src.ItemStack;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenerator;
+import org.bukkit.BlockChangeDelegate;
+import org.bukkit.Bukkit;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.world.StructureGrowEvent;
+import org.bukkit.material.MaterialData;
 
-public class WorldGenBigMushroom extends WorldGenerator {
+public class WorldGenBigMushroom extends WorldGenerator implements BlockSapling.TreeGenerator {
 
    private int mushroomType = -1;
 
 
-   public WorldGenBigMushroom(int var1) {
+   public WorldGenBigMushroom(int i) {
       super(true);
-      this.mushroomType = var1;
+      this.mushroomType = i;
    }
 
    public WorldGenBigMushroom() {
       super(false);
    }
 
-   public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-      int var6 = var2.nextInt(2);
+   public boolean generate(World world, Random random, int i, int j, int k) {
+      return this.grow((BlockChangeDelegate)world, random, i, j, k, (StructureGrowEvent)null, (ItemStack)null, (CraftWorld)null);
+   }
+
+   public boolean generate(BlockChangeDelegate world, Random random, int i, int j, int k) {
+      return this.grow(world, random, i, j, k, (StructureGrowEvent)null, (ItemStack)null, (CraftWorld)null);
+   }
+
+   public boolean grow(BlockChangeDelegate world, Random random, int i, int j, int k, StructureGrowEvent event, ItemStack itemstack, CraftWorld bukkitWorld) {
+      int l = random.nextInt(2);
       if(this.mushroomType >= 0) {
-         var6 = this.mushroomType;
+         l = this.mushroomType;
       }
 
-      int var7 = var2.nextInt(3) + 4;
-      boolean var8 = true;
-      if(var4 >= 1 && var4 + var7 + 1 < 256) {
-         int var9;
-         int var11;
-         int var12;
-         int var13;
-         for(var9 = var4; var9 <= var4 + 1 + var7; ++var9) {
-            byte var10 = 3;
-            if(var9 <= var4 + 3) {
-               var10 = 0;
+      int i1 = random.nextInt(3) + 4;
+      boolean flag = true;
+      if(j >= 1 && j + i1 + 1 < 256) {
+         int j1;
+         int k1;
+         int l1;
+         int i2;
+         for(j1 = j; j1 <= j + 1 + i1; ++j1) {
+            byte j2 = 3;
+            if(j1 <= j + 3) {
+               j2 = 0;
             }
 
-            for(var11 = var3 - var10; var11 <= var3 + var10 && var8; ++var11) {
-               for(var12 = var5 - var10; var12 <= var5 + var10 && var8; ++var12) {
-                  if(var9 >= 0 && var9 < 256) {
-                     var13 = var1.getBlockId(var11, var9, var12);
-                     if(var13 != 0 && var13 != Block.leaves.blockID) {
-                        var8 = false;
+            for(k1 = i - j2; k1 <= i + j2 && flag; ++k1) {
+               for(l1 = k - j2; l1 <= k + j2 && flag; ++l1) {
+                  if(j1 >= 0 && j1 < 256) {
+                     i2 = world.getTypeId(k1, j1, l1);
+                     if(i2 != 0 && i2 != Block.leaves.blockID) {
+                        flag = false;
                      }
                   } else {
-                     var8 = false;
+                     flag = false;
                   }
                }
             }
          }
 
-         if(!var8) {
+         if(!flag) {
             return false;
          } else {
-            var9 = var1.getBlockId(var3, var4 - 1, var5);
-            if(var9 != Block.dirt.blockID && var9 != Block.grass.blockID && var9 != Block.mycelium.blockID) {
+            j1 = world.getTypeId(i, j - 1, k);
+            if(j1 != Block.dirt.blockID && j1 != Block.grass.blockID && j1 != Block.mycelium.blockID) {
                return false;
             } else {
-               int var16 = var4 + var7;
-               if(var6 == 1) {
-                  var16 = var4 + var7 - 3;
+               if(event == null) {
+                  this.setTypeAndData(world, i, j - 1, k, Block.dirt.blockID, 0);
+               } else {
+                  BlockState var20 = bukkitWorld.getBlockAt(i, j - 1, k).getState();
+                  var20.setTypeId(Block.dirt.blockID);
+                  event.getBlocks().add(var20);
+               }
+
+               int var21 = j + i1;
+               if(l == 1) {
+                  var21 = j + i1 - 3;
                }
 
-               for(var11 = var16; var11 <= var4 + var7; ++var11) {
-                  var12 = 1;
-                  if(var11 < var4 + var7) {
-                     ++var12;
+               for(k1 = var21; k1 <= j + i1; ++k1) {
+                  l1 = 1;
+                  if(k1 < j + i1) {
+                     ++l1;
                   }
 
-                  if(var6 == 0) {
-                     var12 = 3;
+                  if(l == 0) {
+                     l1 = 3;
                   }
 
-                  for(var13 = var3 - var12; var13 <= var3 + var12; ++var13) {
-                     for(int var14 = var5 - var12; var14 <= var5 + var12; ++var14) {
-                        int var15 = 5;
-                        if(var13 == var3 - var12) {
-                           --var15;
+                  for(i2 = i - l1; i2 <= i + l1; ++i2) {
+                     for(int i$ = k - l1; i$ <= k + l1; ++i$) {
+                        int state = 5;
+                        if(i2 == i - l1) {
+                           --state;
                         }
 
-                        if(var13 == var3 + var12) {
-                           ++var15;
+                        if(i2 == i + l1) {
+                           ++state;
                         }
 
-                        if(var14 == var5 - var12) {
-                           var15 -= 3;
+                        if(i$ == k - l1) {
+                           state -= 3;
                         }
 
-                        if(var14 == var5 + var12) {
-                           var15 += 3;
+                        if(i$ == k + l1) {
+                           state += 3;
                         }
 
-                        if(var6 == 0 || var11 < var4 + var7) {
-                           if((var13 == var3 - var12 || var13 == var3 + var12) && (var14 == var5 - var12 || var14 == var5 + var12)) {
+                        if(l == 0 || k1 < j + i1) {
+                           if((i2 == i - l1 || i2 == i + l1) && (i$ == k - l1 || i$ == k + l1)) {
                               continue;
                            }
 
-                           if(var13 == var3 - (var12 - 1) && var14 == var5 - var12) {
-                              var15 = 1;
+                           if(i2 == i - (l1 - 1) && i$ == k - l1) {
+                              state = 1;
                            }
 
-                           if(var13 == var3 - var12 && var14 == var5 - (var12 - 1)) {
-                              var15 = 1;
+                           if(i2 == i - l1 && i$ == k - (l1 - 1)) {
+                              state = 1;
                            }
 
-                           if(var13 == var3 + (var12 - 1) && var14 == var5 - var12) {
-                              var15 = 3;
+                           if(i2 == i + (l1 - 1) && i$ == k - l1) {
+                              state = 3;
                            }
 
-                           if(var13 == var3 + var12 && var14 == var5 - (var12 - 1)) {
-                              var15 = 3;
+                           if(i2 == i + l1 && i$ == k - (l1 - 1)) {
+                              state = 3;
                            }
 
-                           if(var13 == var3 - (var12 - 1) && var14 == var5 + var12) {
-                              var15 = 7;
+                           if(i2 == i - (l1 - 1) && i$ == k + l1) {
+                              state = 7;
                            }
 
-                           if(var13 == var3 - var12 && var14 == var5 + (var12 - 1)) {
-                              var15 = 7;
+                           if(i2 == i - l1 && i$ == k + (l1 - 1)) {
+                              state = 7;
                            }
 
-                           if(var13 == var3 + (var12 - 1) && var14 == var5 + var12) {
-                              var15 = 9;
+                           if(i2 == i + (l1 - 1) && i$ == k + l1) {
+                              state = 9;
                            }
 
-                           if(var13 == var3 + var12 && var14 == var5 + (var12 - 1)) {
-                              var15 = 9;
+                           if(i2 == i + l1 && i$ == k + (l1 - 1)) {
+                              state = 9;
                            }
                         }
 
-                        if(var15 == 5 && var11 < var4 + var7) {
-                           var15 = 0;
+                        if(state == 5 && k1 < j + i1) {
+                           state = 0;
                         }
 
-                        if((var15 != 0 || var4 >= var4 + var7 - 1) && !Block.opaqueCubeLookup[var1.getBlockId(var13, var11, var14)]) {
-                           this.setBlockAndMetadata(var1, var13, var11, var14, Block.mushroomCapBrown.blockID + var6, var15);
+                        if((state != 0 || j >= j + i1 - 1) && !Block.opaqueCubeLookup[world.getTypeId(i2, k1, i$)]) {
+                           if(event == null) {
+                              this.setTypeAndData(world, i2, k1, i$, Block.mushroomCapBrown.blockID + l, state);
+                           } else {
+                              BlockState state1 = bukkitWorld.getBlockAt(i2, k1, i$).getState();
+                              state1.setTypeId(Block.mushroomCapBrown.blockID + l);
+                              state1.setData(new MaterialData(Block.mushroomCapBrown.blockID + l, (byte)state));
+                              event.getBlocks().add(state1);
+                           }
                         }
                      }
                   }
                }
 
-               for(var11 = 0; var11 < var7; ++var11) {
-                  var12 = var1.getBlockId(var3, var4 + var11, var5);
-                  if(!Block.opaqueCubeLookup[var12]) {
-                     this.setBlockAndMetadata(var1, var3, var4 + var11, var5, Block.mushroomCapBrown.blockID + var6, 10);
+               for(k1 = 0; k1 < i1; ++k1) {
+                  l1 = world.getTypeId(i, j + k1, k);
+                  if(!Block.opaqueCubeLookup[l1]) {
+                     if(event == null) {
+                        this.setTypeAndData(world, i, j + k1, k, Block.mushroomCapBrown.blockID + l, 10);
+                     } else {
+                        BlockState var23 = bukkitWorld.getBlockAt(i, j + k1, k).getState();
+                        var23.setTypeId(Block.mushroomCapBrown.blockID + l);
+                        var23.setData(new MaterialData(Block.mushroomCapBrown.blockID + l, (byte)10));
+                        event.getBlocks().add(var23);
+                     }
+                  }
+               }
+
+               if(event != null) {
+                  Bukkit.getPluginManager().callEvent(event);
+                  if(!event.isCancelled()) {
+                     Iterator var22 = event.getBlocks().iterator();
+
+                     while(var22.hasNext()) {
+                        BlockState var24 = (BlockState)var22.next();
+                        var24.update(true);
+                     }
                   }
                }
 
Binary files mcp-mcdev/net/minecraft/src/WorldGenBigTree.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenBigTree.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenBigTree.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenBigTree.java
--- mcp-mcdev/net/minecraft/src/WorldGenBigTree.java	2012-11-29 21:14:08.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenBigTree.java	2012-11-29 20:43:17.000000000 -0800
@@ -2,15 +2,17 @@
 
 import java.util.Random;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockSapling;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenerator;
+import org.bukkit.BlockChangeDelegate;
 
-public class WorldGenBigTree extends WorldGenerator {
+public class WorldGenBigTree extends WorldGenerator implements BlockSapling.TreeGenerator {
 
    static final byte[] otherCoordPairs = new byte[]{(byte)2, (byte)0, (byte)0, (byte)1, (byte)2, (byte)1};
    Random rand = new Random();
-   World worldObj;
+   BlockChangeDelegate worldObj;
    int[] basePos = new int[]{0, 0, 0};
    int heightLimit = 0;
    int height;
@@ -25,8 +27,8 @@
    int[][] leafNodes;
 
 
-   public WorldGenBigTree(boolean var1) {
-      super(var1);
+   public WorldGenBigTree(boolean flag) {
+      super(flag);
    }
 
    void generateLeafNodeList() {
@@ -35,90 +37,90 @@
          this.height = this.heightLimit - 1;
       }
 
-      int var1 = (int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D, 2.0D));
-      if(var1 < 1) {
-         var1 = 1;
-      }
-
-      int[][] var2 = new int[var1 * this.heightLimit][4];
-      int var3 = this.basePos[1] + this.heightLimit - this.leafDistanceLimit;
-      int var4 = 1;
-      int var5 = this.basePos[1] + this.height;
-      int var6 = var3 - this.basePos[1];
-      var2[0][0] = this.basePos[0];
-      var2[0][1] = var3;
-      var2[0][2] = this.basePos[2];
-      var2[0][3] = var5;
-      --var3;
-
-      while(var6 >= 0) {
-         int var7 = 0;
-         float var8 = this.layerSize(var6);
-         if(var8 < 0.0F) {
-            --var3;
-            --var6;
+      int i = (int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D, 2.0D));
+      if(i < 1) {
+         i = 1;
+      }
+
+      int[][] aint = new int[i * this.heightLimit][4];
+      int j = this.basePos[1] + this.heightLimit - this.leafDistanceLimit;
+      int k = 1;
+      int l = this.basePos[1] + this.height;
+      int i1 = j - this.basePos[1];
+      aint[0][0] = this.basePos[0];
+      aint[0][1] = j;
+      aint[0][2] = this.basePos[2];
+      aint[0][3] = l;
+      --j;
+
+      while(i1 >= 0) {
+         int j1 = 0;
+         float f = this.layerSize(i1);
+         if(f < 0.0F) {
+            --j;
+            --i1;
          } else {
-            for(double var9 = 0.5D; var7 < var1; ++var7) {
-               double var11 = this.scaleWidth * (double)var8 * ((double)this.rand.nextFloat() + 0.328D);
-               double var13 = (double)this.rand.nextFloat() * 2.0D * 3.14159D;
-               int var15 = MathHelper.floor_double(var11 * Math.sin(var13) + (double)this.basePos[0] + var9);
-               int var16 = MathHelper.floor_double(var11 * Math.cos(var13) + (double)this.basePos[2] + var9);
-               int[] var17 = new int[]{var15, var3, var16};
-               int[] var18 = new int[]{var15, var3 + this.leafDistanceLimit, var16};
-               if(this.checkBlockLine(var17, var18) == -1) {
-                  int[] var19 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-                  double var20 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - var17[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - var17[2]), 2.0D));
-                  double var22 = var20 * this.branchSlope;
-                  if((double)var17[1] - var22 > (double)var5) {
-                     var19[1] = var5;
+            for(double d0 = 0.5D; j1 < i; ++j1) {
+               double d1 = this.scaleWidth * (double)f * ((double)this.rand.nextFloat() + 0.328D);
+               double d2 = (double)this.rand.nextFloat() * 2.0D * 3.14159D;
+               int k1 = MathHelper.floor_double(d1 * Math.sin(d2) + (double)this.basePos[0] + d0);
+               int l1 = MathHelper.floor_double(d1 * Math.cos(d2) + (double)this.basePos[2] + d0);
+               int[] aint1 = new int[]{k1, j, l1};
+               int[] aint2 = new int[]{k1, j + this.leafDistanceLimit, l1};
+               if(this.checkBlockLine(aint1, aint2) == -1) {
+                  int[] aint3 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
+                  double d3 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - aint1[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - aint1[2]), 2.0D));
+                  double d4 = d3 * this.branchSlope;
+                  if((double)aint1[1] - d4 > (double)l) {
+                     aint3[1] = l;
                   } else {
-                     var19[1] = (int)((double)var17[1] - var22);
+                     aint3[1] = (int)((double)aint1[1] - d4);
                   }
 
-                  if(this.checkBlockLine(var19, var17) == -1) {
-                     var2[var4][0] = var15;
-                     var2[var4][1] = var3;
-                     var2[var4][2] = var16;
-                     var2[var4][3] = var19[1];
-                     ++var4;
+                  if(this.checkBlockLine(aint3, aint1) == -1) {
+                     aint[k][0] = k1;
+                     aint[k][1] = j;
+                     aint[k][2] = l1;
+                     aint[k][3] = aint3[1];
+                     ++k;
                   }
                }
             }
 
-            --var3;
-            --var6;
+            --j;
+            --i1;
          }
       }
 
-      this.leafNodes = new int[var4][4];
-      System.arraycopy(var2, 0, this.leafNodes, 0, var4);
+      this.leafNodes = new int[k][4];
+      System.arraycopy(aint, 0, this.leafNodes, 0, k);
    }
 
-   void genTreeLayer(int var1, int var2, int var3, float var4, byte var5, int var6) {
-      int var7 = (int)((double)var4 + 0.618D);
-      byte var8 = otherCoordPairs[var5];
-      byte var9 = otherCoordPairs[var5 + 3];
-      int[] var10 = new int[]{var1, var2, var3};
-      int[] var11 = new int[]{0, 0, 0};
-      int var12 = -var7;
-      int var13 = -var7;
+   void genTreeLayer(int i, int j, int k, float f, byte b0, int l) {
+      int i1 = (int)((double)f + 0.618D);
+      byte b1 = otherCoordPairs[b0];
+      byte b2 = otherCoordPairs[b0 + 3];
+      int[] aint = new int[]{i, j, k};
+      int[] aint1 = new int[]{0, 0, 0};
+      int j1 = -i1;
+      int k1 = -i1;
 
-      for(var11[var5] = var10[var5]; var12 <= var7; ++var12) {
-         var11[var8] = var10[var8] + var12;
-         var13 = -var7;
+      for(aint1[b0] = aint[b0]; j1 <= i1; ++j1) {
+         aint1[b1] = aint[b1] + j1;
+         k1 = -i1;
 
-         while(var13 <= var7) {
-            double var14 = Math.pow((double)Math.abs(var12) + 0.5D, 2.0D) + Math.pow((double)Math.abs(var13) + 0.5D, 2.0D);
-            if(var14 > (double)(var4 * var4)) {
-               ++var13;
+         while(k1 <= i1) {
+            double d0 = Math.pow((double)Math.abs(j1) + 0.5D, 2.0D) + Math.pow((double)Math.abs(k1) + 0.5D, 2.0D);
+            if(d0 > (double)(f * f)) {
+               ++k1;
             } else {
-               var11[var9] = var10[var9] + var13;
-               int var16 = this.worldObj.getBlockId(var11[0], var11[1], var11[2]);
-               if(var16 != 0 && var16 != Block.leaves.blockID) {
-                  ++var13;
+               aint1[b2] = aint[b2] + k1;
+               int l1 = this.worldObj.getTypeId(aint1[0], aint1[1], aint1[2]);
+               if(l1 != 0 && l1 != Block.leaves.blockID) {
+                  ++k1;
                } else {
-                  this.setBlockAndMetadata(this.worldObj, var11[0], var11[1], var11[2], var6, 0);
-                  ++var13;
+                  this.setTypeAndData(this.worldObj, aint1[0], aint1[1], aint1[2], l, 0);
+                  ++k1;
                }
             }
          }
@@ -126,223 +128,227 @@
 
    }
 
-   float layerSize(int var1) {
-      if((double)var1 < (double)((float)this.heightLimit) * 0.3D) {
+   float layerSize(int i) {
+      if((double)i < (double)((float)this.heightLimit) * 0.3D) {
          return -1.618F;
       } else {
-         float var2 = (float)this.heightLimit / 2.0F;
-         float var3 = (float)this.heightLimit / 2.0F - (float)var1;
-         float var4;
-         if(var3 == 0.0F) {
-            var4 = var2;
-         } else if(Math.abs(var3) >= var2) {
-            var4 = 0.0F;
+         float f = (float)this.heightLimit / 2.0F;
+         float f1 = (float)this.heightLimit / 2.0F - (float)i;
+         float f2;
+         if(f1 == 0.0F) {
+            f2 = f;
+         } else if(Math.abs(f1) >= f) {
+            f2 = 0.0F;
          } else {
-            var4 = (float)Math.sqrt(Math.pow((double)Math.abs(var2), 2.0D) - Math.pow((double)Math.abs(var3), 2.0D));
+            f2 = (float)Math.sqrt(Math.pow((double)Math.abs(f), 2.0D) - Math.pow((double)Math.abs(f1), 2.0D));
          }
 
-         var4 *= 0.5F;
-         return var4;
+         f2 *= 0.5F;
+         return f2;
       }
    }
 
-   float leafSize(int var1) {
-      return var1 >= 0 && var1 < this.leafDistanceLimit?(var1 != 0 && var1 != this.leafDistanceLimit - 1?3.0F:2.0F):-1.0F;
+   float leafSize(int i) {
+      return i >= 0 && i < this.leafDistanceLimit?(i != 0 && i != this.leafDistanceLimit - 1?3.0F:2.0F):-1.0F;
    }
 
-   void generateLeafNode(int var1, int var2, int var3) {
-      int var4 = var2;
+   void generateLeafNode(int i, int j, int k) {
+      int l = j;
 
-      for(int var5 = var2 + this.leafDistanceLimit; var4 < var5; ++var4) {
-         float var6 = this.leafSize(var4 - var2);
-         this.genTreeLayer(var1, var4, var3, var6, (byte)1, Block.leaves.blockID);
+      for(int i1 = j + this.leafDistanceLimit; l < i1; ++l) {
+         float f = this.leafSize(l - j);
+         this.genTreeLayer(i, l, k, f, (byte)1, Block.leaves.blockID);
       }
 
    }
 
-   void placeBlockLine(int[] var1, int[] var2, int var3) {
-      int[] var4 = new int[]{0, 0, 0};
-      byte var5 = 0;
+   void placeBlockLine(int[] aint, int[] aint1, int i) {
+      int[] aint2 = new int[]{0, 0, 0};
+      byte b0 = 0;
 
-      byte var6;
-      for(var6 = 0; var5 < 3; ++var5) {
-         var4[var5] = var2[var5] - var1[var5];
-         if(Math.abs(var4[var5]) > Math.abs(var4[var6])) {
-            var6 = var5;
+      byte b1;
+      for(b1 = 0; b0 < 3; ++b0) {
+         aint2[b0] = aint1[b0] - aint[b0];
+         if(Math.abs(aint2[b0]) > Math.abs(aint2[b1])) {
+            b1 = b0;
          }
       }
 
-      if(var4[var6] != 0) {
-         byte var7 = otherCoordPairs[var6];
-         byte var8 = otherCoordPairs[var6 + 3];
-         byte var9;
-         if(var4[var6] > 0) {
-            var9 = 1;
+      if(aint2[b1] != 0) {
+         byte b2 = otherCoordPairs[b1];
+         byte b3 = otherCoordPairs[b1 + 3];
+         byte b4;
+         if(aint2[b1] > 0) {
+            b4 = 1;
          } else {
-            var9 = -1;
+            b4 = -1;
          }
 
-         double var10 = (double)var4[var7] / (double)var4[var6];
-         double var12 = (double)var4[var8] / (double)var4[var6];
-         int[] var14 = new int[]{0, 0, 0};
-         int var15 = 0;
-
-         for(int var16 = var4[var6] + var9; var15 != var16; var15 += var9) {
-            var14[var6] = MathHelper.floor_double((double)(var1[var6] + var15) + 0.5D);
-            var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
-            var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
-            byte var17 = 0;
-            int var18 = Math.abs(var14[0] - var1[0]);
-            int var19 = Math.abs(var14[2] - var1[2]);
-            int var20 = Math.max(var18, var19);
-            if(var20 > 0) {
-               if(var18 == var20) {
-                  var17 = 4;
-               } else if(var19 == var20) {
-                  var17 = 8;
+         double d0 = (double)aint2[b2] / (double)aint2[b1];
+         double d1 = (double)aint2[b3] / (double)aint2[b1];
+         int[] aint3 = new int[]{0, 0, 0};
+         int j = 0;
+
+         for(int k = aint2[b1] + b4; j != k; j += b4) {
+            aint3[b1] = MathHelper.floor_double((double)(aint[b1] + j) + 0.5D);
+            aint3[b2] = MathHelper.floor_double((double)aint[b2] + (double)j * d0 + 0.5D);
+            aint3[b3] = MathHelper.floor_double((double)aint[b3] + (double)j * d1 + 0.5D);
+            byte b5 = 0;
+            int l = Math.abs(aint3[0] - aint[0]);
+            int i1 = Math.abs(aint3[2] - aint[2]);
+            int j1 = Math.max(l, i1);
+            if(j1 > 0) {
+               if(l == j1) {
+                  b5 = 4;
+               } else if(i1 == j1) {
+                  b5 = 8;
                }
             }
 
-            this.setBlockAndMetadata(this.worldObj, var14[0], var14[1], var14[2], var3, var17);
+            this.setTypeAndData(this.worldObj, aint3[0], aint3[1], aint3[2], i, b5);
          }
-
       }
+
    }
 
    void generateLeaves() {
-      int var1 = 0;
+      int i = 0;
 
-      for(int var2 = this.leafNodes.length; var1 < var2; ++var1) {
-         int var3 = this.leafNodes[var1][0];
-         int var4 = this.leafNodes[var1][1];
-         int var5 = this.leafNodes[var1][2];
-         this.generateLeafNode(var3, var4, var5);
+      for(int j = this.leafNodes.length; i < j; ++i) {
+         int k = this.leafNodes[i][0];
+         int l = this.leafNodes[i][1];
+         int i1 = this.leafNodes[i][2];
+         this.generateLeafNode(k, l, i1);
       }
 
    }
 
-   boolean leafNodeNeedsBase(int var1) {
-      return (double)var1 >= (double)this.heightLimit * 0.2D;
+   boolean leafNodeNeedsBase(int i) {
+      return (double)i >= (double)this.heightLimit * 0.2D;
    }
 
    void generateTrunk() {
-      int var1 = this.basePos[0];
-      int var2 = this.basePos[1];
-      int var3 = this.basePos[1] + this.height;
-      int var4 = this.basePos[2];
-      int[] var5 = new int[]{var1, var2, var4};
-      int[] var6 = new int[]{var1, var3, var4};
-      this.placeBlockLine(var5, var6, Block.wood.blockID);
+      int i = this.basePos[0];
+      int j = this.basePos[1];
+      int k = this.basePos[1] + this.height;
+      int l = this.basePos[2];
+      int[] aint = new int[]{i, j, l};
+      int[] aint1 = new int[]{i, k, l};
+      this.placeBlockLine(aint, aint1, Block.wood.blockID);
       if(this.trunkSize == 2) {
-         ++var5[0];
-         ++var6[0];
-         this.placeBlockLine(var5, var6, Block.wood.blockID);
-         ++var5[2];
-         ++var6[2];
-         this.placeBlockLine(var5, var6, Block.wood.blockID);
-         var5[0] += -1;
-         var6[0] += -1;
-         this.placeBlockLine(var5, var6, Block.wood.blockID);
+         ++aint[0];
+         ++aint1[0];
+         this.placeBlockLine(aint, aint1, Block.wood.blockID);
+         ++aint[2];
+         ++aint1[2];
+         this.placeBlockLine(aint, aint1, Block.wood.blockID);
+         aint[0] += -1;
+         aint1[0] += -1;
+         this.placeBlockLine(aint, aint1, Block.wood.blockID);
       }
 
    }
 
    void generateLeafNodeBases() {
-      int var1 = 0;
-      int var2 = this.leafNodes.length;
+      int i = 0;
+      int j = this.leafNodes.length;
 
-      for(int[] var3 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; var1 < var2; ++var1) {
-         int[] var4 = this.leafNodes[var1];
-         int[] var5 = new int[]{var4[0], var4[1], var4[2]};
-         var3[1] = var4[3];
-         int var6 = var3[1] - this.basePos[1];
-         if(this.leafNodeNeedsBase(var6)) {
-            this.placeBlockLine(var3, var5, (byte)Block.wood.blockID);
+      for(int[] aint = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; i < j; ++i) {
+         int[] aint1 = this.leafNodes[i];
+         int[] aint2 = new int[]{aint1[0], aint1[1], aint1[2]};
+         aint[1] = aint1[3];
+         int k = aint[1] - this.basePos[1];
+         if(this.leafNodeNeedsBase(k)) {
+            this.placeBlockLine(aint, aint2, (byte)Block.wood.blockID);
          }
       }
 
    }
 
-   int checkBlockLine(int[] var1, int[] var2) {
-      int[] var3 = new int[]{0, 0, 0};
-      byte var4 = 0;
+   int checkBlockLine(int[] aint, int[] aint1) {
+      int[] aint2 = new int[]{0, 0, 0};
+      byte b0 = 0;
 
-      byte var5;
-      for(var5 = 0; var4 < 3; ++var4) {
-         var3[var4] = var2[var4] - var1[var4];
-         if(Math.abs(var3[var4]) > Math.abs(var3[var5])) {
-            var5 = var4;
+      byte b1;
+      for(b1 = 0; b0 < 3; ++b0) {
+         aint2[b0] = aint1[b0] - aint[b0];
+         if(Math.abs(aint2[b0]) > Math.abs(aint2[b1])) {
+            b1 = b0;
          }
       }
 
-      if(var3[var5] == 0) {
+      if(aint2[b1] == 0) {
          return -1;
       } else {
-         byte var6 = otherCoordPairs[var5];
-         byte var7 = otherCoordPairs[var5 + 3];
-         byte var8;
-         if(var3[var5] > 0) {
-            var8 = 1;
+         byte b2 = otherCoordPairs[b1];
+         byte b3 = otherCoordPairs[b1 + 3];
+         byte b4;
+         if(aint2[b1] > 0) {
+            b4 = 1;
          } else {
-            var8 = -1;
+            b4 = -1;
          }
 
-         double var9 = (double)var3[var6] / (double)var3[var5];
-         double var11 = (double)var3[var7] / (double)var3[var5];
-         int[] var13 = new int[]{0, 0, 0};
-         int var14 = 0;
-
-         int var15;
-         for(var15 = var3[var5] + var8; var14 != var15; var14 += var8) {
-            var13[var5] = var1[var5] + var14;
-            var13[var6] = MathHelper.floor_double((double)var1[var6] + (double)var14 * var9);
-            var13[var7] = MathHelper.floor_double((double)var1[var7] + (double)var14 * var11);
-            int var16 = this.worldObj.getBlockId(var13[0], var13[1], var13[2]);
-            if(var16 != 0 && var16 != Block.leaves.blockID) {
+         double d0 = (double)aint2[b2] / (double)aint2[b1];
+         double d1 = (double)aint2[b3] / (double)aint2[b1];
+         int[] aint3 = new int[]{0, 0, 0};
+         int i = 0;
+
+         int j;
+         for(j = aint2[b1] + b4; i != j; i += b4) {
+            aint3[b1] = aint[b1] + i;
+            aint3[b2] = MathHelper.floor_double((double)aint[b2] + (double)i * d0);
+            aint3[b3] = MathHelper.floor_double((double)aint[b3] + (double)i * d1);
+            int k = this.worldObj.getTypeId(aint3[0], aint3[1], aint3[2]);
+            if(k != 0 && k != Block.leaves.blockID || aint3[1] >= 256) {
                break;
             }
          }
 
-         return var14 == var15?-1:Math.abs(var14);
+         return i == j?-1:Math.abs(i);
       }
    }
 
    boolean validTreeLocation() {
-      int[] var1 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-      int[] var2 = new int[]{this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
-      int var3 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
-      if(var3 != 2 && var3 != 3) {
+      int[] aint = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
+      int[] aint1 = new int[]{this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
+      int i = this.worldObj.getTypeId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
+      if(i != 2 && i != 3) {
          return false;
       } else {
-         int var4 = this.checkBlockLine(var1, var2);
-         if(var4 == -1) {
+         int j = this.checkBlockLine(aint, aint1);
+         if(j == -1) {
             return true;
-         } else if(var4 < 6) {
+         } else if(j < 6) {
             return false;
          } else {
-            this.heightLimit = var4;
+            this.heightLimit = j;
             return true;
          }
       }
    }
 
-   public void setScale(double var1, double var3, double var5) {
-      this.heightLimitLimit = (int)(var1 * 12.0D);
-      if(var1 > 0.5D) {
+   public void setScale(double d0, double d1, double d2) {
+      this.heightLimitLimit = (int)(d0 * 12.0D);
+      if(d0 > 0.5D) {
          this.leafDistanceLimit = 5;
       }
 
-      this.scaleWidth = var3;
-      this.leafDensity = var5;
+      this.scaleWidth = d1;
+      this.leafDensity = d2;
+   }
+
+   public boolean generate(World world, Random random, int i, int j, int k) {
+      return this.generate((BlockChangeDelegate)world, random, i, j, k);
    }
 
-   public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-      this.worldObj = var1;
-      long var6 = var2.nextLong();
-      this.rand.setSeed(var6);
-      this.basePos[0] = var3;
-      this.basePos[1] = var4;
-      this.basePos[2] = var5;
+   public boolean generate(BlockChangeDelegate world, Random random, int i, int j, int k) {
+      this.worldObj = world;
+      long l = random.nextLong();
+      this.rand.setSeed(l);
+      this.basePos[0] = i;
+      this.basePos[1] = j;
+      this.basePos[2] = k;
       if(this.heightLimit == 0) {
          this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
       }
Binary files mcp-mcdev/net/minecraft/src/WorldGenForest.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenForest.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenForest.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenForest.java
--- mcp-mcdev/net/minecraft/src/WorldGenForest.java	2012-11-29 21:14:06.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenForest.java	2012-11-29 20:43:14.000000000 -0800
@@ -2,75 +2,81 @@
 
 import java.util.Random;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockSapling;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenerator;
+import org.bukkit.BlockChangeDelegate;
 
-public class WorldGenForest extends WorldGenerator {
+public class WorldGenForest extends WorldGenerator implements BlockSapling.TreeGenerator {
 
-   public WorldGenForest(boolean var1) {
-      super(var1);
+   public WorldGenForest(boolean flag) {
+      super(flag);
    }
 
-   public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-      int var6 = var2.nextInt(3) + 5;
-      boolean var7 = true;
-      if(var4 >= 1 && var4 + var6 + 1 <= 256) {
-         int var8;
-         int var10;
-         int var11;
-         int var12;
-         for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-            byte var9 = 1;
-            if(var8 == var4) {
-               var9 = 0;
+   public boolean generate(World world, Random random, int i, int j, int k) {
+      return this.generate((BlockChangeDelegate)world, random, i, j, k);
+   }
+
+   public boolean generate(BlockChangeDelegate world, Random random, int i, int j, int k) {
+      int l = random.nextInt(3) + 5;
+      boolean flag = true;
+      if(j >= 1 && j + l + 1 <= 256) {
+         int i1;
+         int j1;
+         int k1;
+         int l1;
+         for(i1 = j; i1 <= j + 1 + l; ++i1) {
+            byte i2 = 1;
+            if(i1 == j) {
+               i2 = 0;
             }
 
-            if(var8 >= var4 + 1 + var6 - 2) {
-               var9 = 2;
+            if(i1 >= j + 1 + l - 2) {
+               i2 = 2;
             }
 
-            for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-               for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-                  if(var8 >= 0 && var8 < 256) {
-                     var12 = var1.getBlockId(var10, var8, var11);
-                     if(var12 != 0 && var12 != Block.leaves.blockID) {
-                        var7 = false;
+            for(j1 = i - i2; j1 <= i + i2 && flag; ++j1) {
+               for(k1 = k - i2; k1 <= k + i2 && flag; ++k1) {
+                  if(i1 >= 0 && i1 < 256) {
+                     l1 = world.getTypeId(j1, i1, k1);
+                     if(l1 != 0 && l1 != Block.leaves.blockID) {
+                        flag = false;
                      }
                   } else {
-                     var7 = false;
+                     flag = false;
                   }
                }
             }
          }
 
-         if(!var7) {
+         if(!flag) {
             return false;
          } else {
-            var8 = var1.getBlockId(var3, var4 - 1, var5);
-            if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
-               this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
+            i1 = world.getTypeId(i, j - 1, k);
+            if((i1 == Block.grass.blockID || i1 == Block.dirt.blockID) && j < 256 - l - 1) {
+               this.setType(world, i, j - 1, k, Block.dirt.blockID);
 
                int var16;
-               for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-                  var10 = var16 - (var4 + var6);
-                  var11 = 1 - var10 / 2;
-
-                  for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-                     int var13 = var12 - var3;
-
-                     for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-                        int var15 = var14 - var5;
-                        if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-                           this.setBlockAndMetadata(var1, var12, var16, var14, Block.leaves.blockID, 2);
+               for(var16 = j - 3 + l; var16 <= j + l; ++var16) {
+                  j1 = var16 - (j + l);
+                  k1 = 1 - j1 / 2;
+
+                  for(l1 = i - k1; l1 <= i + k1; ++l1) {
+                     int j2 = l1 - i;
+
+                     for(int k2 = k - k1; k2 <= k + k1; ++k2) {
+                        int l2 = k2 - k;
+                        if((Math.abs(j2) != k1 || Math.abs(l2) != k1 || random.nextInt(2) != 0 && j1 != 0) && !Block.opaqueCubeLookup[world.getTypeId(l1, var16, k2)]) {
+                           this.setTypeAndData(world, l1, var16, k2, Block.leaves.blockID, 2);
                         }
                      }
                   }
                }
 
-               for(var16 = 0; var16 < var6; ++var16) {
-                  var10 = var1.getBlockId(var3, var4 + var16, var5);
-                  if(var10 == 0 || var10 == Block.leaves.blockID) {
-                     this.setBlockAndMetadata(var1, var3, var4 + var16, var5, Block.wood.blockID, 2);
+               for(var16 = 0; var16 < l; ++var16) {
+                  j1 = world.getTypeId(i, j + var16, k);
+                  if(j1 == 0 || j1 == Block.leaves.blockID) {
+                     this.setTypeAndData(world, i, j + var16, k, Block.wood.blockID, 2);
                   }
                }
 
Binary files mcp-mcdev/net/minecraft/src/WorldGenHugeTrees.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenHugeTrees.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenHugeTrees.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenHugeTrees.java
--- mcp-mcdev/net/minecraft/src/WorldGenHugeTrees.java	2012-11-29 21:14:05.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenHugeTrees.java	2012-11-29 20:43:13.000000000 -0800
@@ -2,134 +2,140 @@
 
 import java.util.Random;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockSapling;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenerator;
+import org.bukkit.BlockChangeDelegate;
 
-public class WorldGenHugeTrees extends WorldGenerator {
+public class WorldGenHugeTrees extends WorldGenerator implements BlockSapling.TreeGenerator {
 
    private final int baseHeight;
    private final int woodMetadata;
    private final int leavesMetadata;
 
 
-   public WorldGenHugeTrees(boolean var1, int var2, int var3, int var4) {
-      super(var1);
-      this.baseHeight = var2;
-      this.woodMetadata = var3;
-      this.leavesMetadata = var4;
+   public WorldGenHugeTrees(boolean flag, int i, int j, int k) {
+      super(flag);
+      this.baseHeight = i;
+      this.woodMetadata = j;
+      this.leavesMetadata = k;
    }
 
-   public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-      int var6 = var2.nextInt(3) + this.baseHeight;
-      boolean var7 = true;
-      if(var4 >= 1 && var4 + var6 + 1 <= 256) {
-         int var8;
-         int var10;
-         int var11;
-         int var12;
-         for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-            byte var9 = 2;
-            if(var8 == var4) {
-               var9 = 1;
+   public boolean generate(World world, Random random, int i, int j, int k) {
+      return this.generate((BlockChangeDelegate)world, random, i, j, k);
+   }
+
+   public boolean generate(BlockChangeDelegate world, Random random, int i, int j, int k) {
+      int l = random.nextInt(3) + this.baseHeight;
+      boolean flag = true;
+      if(j >= 1 && j + l + 1 <= 256) {
+         int i1;
+         int j1;
+         int k1;
+         int l1;
+         for(i1 = j; i1 <= j + 1 + l; ++i1) {
+            byte i2 = 2;
+            if(i1 == j) {
+               i2 = 1;
             }
 
-            if(var8 >= var4 + 1 + var6 - 2) {
-               var9 = 2;
+            if(i1 >= j + 1 + l - 2) {
+               i2 = 2;
             }
 
-            for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-               for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-                  if(var8 >= 0 && var8 < 256) {
-                     var12 = var1.getBlockId(var10, var8, var11);
-                     if(var12 != 0 && var12 != Block.leaves.blockID && var12 != Block.grass.blockID && var12 != Block.dirt.blockID && var12 != Block.wood.blockID && var12 != Block.sapling.blockID) {
-                        var7 = false;
+            for(j1 = i - i2; j1 <= i + i2 && flag; ++j1) {
+               for(k1 = k - i2; k1 <= k + i2 && flag; ++k1) {
+                  if(i1 >= 0 && i1 < 256) {
+                     l1 = world.getTypeId(j1, i1, k1);
+                     if(l1 != 0 && l1 != Block.leaves.blockID && l1 != Block.grass.blockID && l1 != Block.dirt.blockID && l1 != Block.wood.blockID && l1 != Block.sapling.blockID) {
+                        flag = false;
                      }
                   } else {
-                     var7 = false;
+                     flag = false;
                   }
                }
             }
          }
 
-         if(!var7) {
+         if(!flag) {
             return false;
          } else {
-            var8 = var1.getBlockId(var3, var4 - 1, var5);
-            if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
-               var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
-               var1.setBlock(var3 + 1, var4 - 1, var5, Block.dirt.blockID);
-               var1.setBlock(var3, var4 - 1, var5 + 1, Block.dirt.blockID);
-               var1.setBlock(var3 + 1, var4 - 1, var5 + 1, Block.dirt.blockID);
-               this.growLeaves(var1, var3, var5, var4 + var6, 2, var2);
-
-               for(int var14 = var4 + var6 - 2 - var2.nextInt(4); var14 > var4 + var6 / 2; var14 -= 2 + var2.nextInt(4)) {
-                  float var15 = var2.nextFloat() * 3.1415927F * 2.0F;
-                  var11 = var3 + (int)(0.5F + MathHelper.cos(var15) * 4.0F);
-                  var12 = var5 + (int)(0.5F + MathHelper.sin(var15) * 4.0F);
-                  this.growLeaves(var1, var11, var12, var14, 0, var2);
-
-                  for(int var13 = 0; var13 < 5; ++var13) {
-                     var11 = var3 + (int)(1.5F + MathHelper.cos(var15) * (float)var13);
-                     var12 = var5 + (int)(1.5F + MathHelper.sin(var15) * (float)var13);
-                     this.setBlockAndMetadata(var1, var11, var14 - 3 + var13 / 2, var12, Block.wood.blockID, this.woodMetadata);
+            i1 = world.getTypeId(i, j - 1, k);
+            if((i1 == Block.grass.blockID || i1 == Block.dirt.blockID) && j < 256 - l - 1) {
+               world.setRawTypeId(i, j - 1, k, Block.dirt.blockID);
+               world.setRawTypeId(i + 1, j - 1, k, Block.dirt.blockID);
+               world.setRawTypeId(i, j - 1, k + 1, Block.dirt.blockID);
+               world.setRawTypeId(i + 1, j - 1, k + 1, Block.dirt.blockID);
+               this.a(world, i, k, j + l, 2, random);
+
+               for(int var15 = j + l - 2 - random.nextInt(4); var15 > j + l / 2; var15 -= 2 + random.nextInt(4)) {
+                  float f = random.nextFloat() * 3.1415927F * 2.0F;
+                  k1 = i + (int)(0.5F + MathHelper.cos(f) * 4.0F);
+                  l1 = k + (int)(0.5F + MathHelper.sin(f) * 4.0F);
+                  this.a(world, k1, l1, var15, 0, random);
+
+                  for(int j2 = 0; j2 < 5; ++j2) {
+                     k1 = i + (int)(1.5F + MathHelper.cos(f) * (float)j2);
+                     l1 = k + (int)(1.5F + MathHelper.sin(f) * (float)j2);
+                     this.setTypeAndData(world, k1, var15 - 3 + j2 / 2, l1, Block.wood.blockID, this.woodMetadata);
                   }
                }
 
-               for(var10 = 0; var10 < var6; ++var10) {
-                  var11 = var1.getBlockId(var3, var4 + var10, var5);
-                  if(var11 == 0 || var11 == Block.leaves.blockID) {
-                     this.setBlockAndMetadata(var1, var3, var4 + var10, var5, Block.wood.blockID, this.woodMetadata);
-                     if(var10 > 0) {
-                        if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 - 1, var4 + var10, var5)) {
-                           this.setBlockAndMetadata(var1, var3 - 1, var4 + var10, var5, Block.vine.blockID, 8);
+               for(j1 = 0; j1 < l; ++j1) {
+                  k1 = world.getTypeId(i, j + j1, k);
+                  if(k1 == 0 || k1 == Block.leaves.blockID) {
+                     this.setTypeAndData(world, i, j + j1, k, Block.wood.blockID, this.woodMetadata);
+                     if(j1 > 0) {
+                        if(random.nextInt(3) > 0 && world.isEmpty(i - 1, j + j1, k)) {
+                           this.setTypeAndData(world, i - 1, j + j1, k, Block.vine.blockID, 8);
                         }
 
-                        if(var2.nextInt(3) > 0 && var1.isAirBlock(var3, var4 + var10, var5 - 1)) {
-                           this.setBlockAndMetadata(var1, var3, var4 + var10, var5 - 1, Block.vine.blockID, 1);
+                        if(random.nextInt(3) > 0 && world.isEmpty(i, j + j1, k - 1)) {
+                           this.setTypeAndData(world, i, j + j1, k - 1, Block.vine.blockID, 1);
                         }
                      }
                   }
 
-                  if(var10 < var6 - 1) {
-                     var11 = var1.getBlockId(var3 + 1, var4 + var10, var5);
-                     if(var11 == 0 || var11 == Block.leaves.blockID) {
-                        this.setBlockAndMetadata(var1, var3 + 1, var4 + var10, var5, Block.wood.blockID, this.woodMetadata);
-                        if(var10 > 0) {
-                           if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 2, var4 + var10, var5)) {
-                              this.setBlockAndMetadata(var1, var3 + 2, var4 + var10, var5, Block.vine.blockID, 2);
+                  if(j1 < l - 1) {
+                     k1 = world.getTypeId(i + 1, j + j1, k);
+                     if(k1 == 0 || k1 == Block.leaves.blockID) {
+                        this.setTypeAndData(world, i + 1, j + j1, k, Block.wood.blockID, this.woodMetadata);
+                        if(j1 > 0) {
+                           if(random.nextInt(3) > 0 && world.isEmpty(i + 2, j + j1, k)) {
+                              this.setTypeAndData(world, i + 2, j + j1, k, Block.vine.blockID, 2);
                            }
 
-                           if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 1, var4 + var10, var5 - 1)) {
-                              this.setBlockAndMetadata(var1, var3 + 1, var4 + var10, var5 - 1, Block.vine.blockID, 1);
+                           if(random.nextInt(3) > 0 && world.isEmpty(i + 1, j + j1, k - 1)) {
+                              this.setTypeAndData(world, i + 1, j + j1, k - 1, Block.vine.blockID, 1);
                            }
                         }
                      }
 
-                     var11 = var1.getBlockId(var3 + 1, var4 + var10, var5 + 1);
-                     if(var11 == 0 || var11 == Block.leaves.blockID) {
-                        this.setBlockAndMetadata(var1, var3 + 1, var4 + var10, var5 + 1, Block.wood.blockID, this.woodMetadata);
-                        if(var10 > 0) {
-                           if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 2, var4 + var10, var5 + 1)) {
-                              this.setBlockAndMetadata(var1, var3 + 2, var4 + var10, var5 + 1, Block.vine.blockID, 2);
+                     k1 = world.getTypeId(i + 1, j + j1, k + 1);
+                     if(k1 == 0 || k1 == Block.leaves.blockID) {
+                        this.setTypeAndData(world, i + 1, j + j1, k + 1, Block.wood.blockID, this.woodMetadata);
+                        if(j1 > 0) {
+                           if(random.nextInt(3) > 0 && world.isEmpty(i + 2, j + j1, k + 1)) {
+                              this.setTypeAndData(world, i + 2, j + j1, k + 1, Block.vine.blockID, 2);
                            }
 
-                           if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 1, var4 + var10, var5 + 2)) {
-                              this.setBlockAndMetadata(var1, var3 + 1, var4 + var10, var5 + 2, Block.vine.blockID, 4);
+                           if(random.nextInt(3) > 0 && world.isEmpty(i + 1, j + j1, k + 2)) {
+                              this.setTypeAndData(world, i + 1, j + j1, k + 2, Block.vine.blockID, 4);
                            }
                         }
                      }
 
-                     var11 = var1.getBlockId(var3, var4 + var10, var5 + 1);
-                     if(var11 == 0 || var11 == Block.leaves.blockID) {
-                        this.setBlockAndMetadata(var1, var3, var4 + var10, var5 + 1, Block.wood.blockID, this.woodMetadata);
-                        if(var10 > 0) {
-                           if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 - 1, var4 + var10, var5 + 1)) {
-                              this.setBlockAndMetadata(var1, var3 - 1, var4 + var10, var5 + 1, Block.vine.blockID, 8);
+                     k1 = world.getTypeId(i, j + j1, k + 1);
+                     if(k1 == 0 || k1 == Block.leaves.blockID) {
+                        this.setTypeAndData(world, i, j + j1, k + 1, Block.wood.blockID, this.woodMetadata);
+                        if(j1 > 0) {
+                           if(random.nextInt(3) > 0 && world.isEmpty(i - 1, j + j1, k + 1)) {
+                              this.setTypeAndData(world, i - 1, j + j1, k + 1, Block.vine.blockID, 8);
                            }
 
-                           if(var2.nextInt(3) > 0 && var1.isAirBlock(var3, var4 + var10, var5 + 2)) {
-                              this.setBlockAndMetadata(var1, var3, var4 + var10, var5 + 2, Block.vine.blockID, 4);
+                           if(random.nextInt(3) > 0 && world.isEmpty(i, j + j1, k + 2)) {
+                              this.setTypeAndData(world, i, j + j1, k + 2, Block.vine.blockID, 4);
                            }
                         }
                      }
@@ -146,20 +152,20 @@
       }
    }
 
-   private void growLeaves(World var1, int var2, int var3, int var4, int var5, Random var6) {
-      byte var7 = 2;
+   private void a(BlockChangeDelegate world, int i, int j, int k, int l, Random random) {
+      byte b0 = 2;
 
-      for(int var8 = var4 - var7; var8 <= var4; ++var8) {
-         int var9 = var8 - var4;
-         int var10 = var5 + 1 - var9;
-
-         for(int var11 = var2 - var10; var11 <= var2 + var10 + 1; ++var11) {
-            int var12 = var11 - var2;
-
-            for(int var13 = var3 - var10; var13 <= var3 + var10 + 1; ++var13) {
-               int var14 = var13 - var3;
-               if((var12 >= 0 || var14 >= 0 || var12 * var12 + var14 * var14 <= var10 * var10) && (var12 <= 0 && var14 <= 0 || var12 * var12 + var14 * var14 <= (var10 + 1) * (var10 + 1)) && (var6.nextInt(4) != 0 || var12 * var12 + var14 * var14 <= (var10 - 1) * (var10 - 1)) && !Block.opaqueCubeLookup[var1.getBlockId(var11, var8, var13)]) {
-                  this.setBlockAndMetadata(var1, var11, var8, var13, Block.leaves.blockID, this.leavesMetadata);
+      for(int i1 = k - b0; i1 <= k; ++i1) {
+         int j1 = i1 - k;
+         int k1 = l + 1 - j1;
+
+         for(int l1 = i - k1; l1 <= i + k1 + 1; ++l1) {
+            int i2 = l1 - i;
+
+            for(int j2 = j - k1; j2 <= j + k1 + 1; ++j2) {
+               int k2 = j2 - j;
+               if((i2 >= 0 || k2 >= 0 || i2 * i2 + k2 * k2 <= k1 * k1) && (i2 <= 0 && k2 <= 0 || i2 * i2 + k2 * k2 <= (k1 + 1) * (k1 + 1)) && (random.nextInt(4) != 0 || i2 * i2 + k2 * k2 <= (k1 - 1) * (k1 - 1)) && !Block.opaqueCubeLookup[world.getTypeId(l1, i1, j2)]) {
+                  this.setTypeAndData(world, l1, i1, j2, Block.leaves.blockID, this.leavesMetadata);
                }
             }
          }
Binary files mcp-mcdev/net/minecraft/src/WorldGenShrub.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenShrub.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenShrub.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenShrub.java
--- mcp-mcdev/net/minecraft/src/WorldGenShrub.java	2012-11-29 21:14:00.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenShrub.java	2012-11-29 20:43:08.000000000 -0800
@@ -2,48 +2,56 @@
 
 import java.util.Random;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockSapling;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenerator;
+import org.bukkit.BlockChangeDelegate;
 
-public class WorldGenShrub extends WorldGenerator {
+public class WorldGenShrub extends WorldGenerator implements BlockSapling.TreeGenerator {
 
    private int field_76527_a;
    private int field_76526_b;
 
 
-   public WorldGenShrub(int var1, int var2) {
-      this.field_76526_b = var1;
-      this.field_76527_a = var2;
+   public WorldGenShrub(int i, int j) {
+      this.field_76526_b = i;
+      this.field_76527_a = j;
    }
 
-   public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-      int var15;
-      for(boolean var6 = false; ((var15 = var1.getBlockId(var3, var4, var5)) == 0 || var15 == Block.leaves.blockID) && var4 > 0; --var4) {
+   public boolean generate(World world, Random random, int i, int j, int k) {
+      return this.generate((BlockChangeDelegate)world, random, i, j, k);
+   }
+
+   public boolean generate(BlockChangeDelegate world, Random random, int i, int j, int k) {
+      int l;
+      for(boolean i1 = false; ((l = world.getTypeId(i, j, k)) == 0 || l == Block.leaves.blockID) && j > 0; --j) {
          ;
       }
 
-      int var7 = var1.getBlockId(var3, var4, var5);
-      if(var7 == Block.dirt.blockID || var7 == Block.grass.blockID) {
-         ++var4;
-         this.setBlockAndMetadata(var1, var3, var4, var5, Block.wood.blockID, this.field_76526_b);
+      int var15 = world.getTypeId(i, j, k);
+      if(var15 != Block.dirt.blockID && var15 != Block.grass.blockID) {
+         return false;
+      } else {
+         ++j;
+         this.setTypeAndData(world, i, j, k, Block.wood.blockID, this.field_76526_b);
 
-         for(int var8 = var4; var8 <= var4 + 2; ++var8) {
-            int var9 = var8 - var4;
-            int var10 = 2 - var9;
+         for(int j1 = j; j1 <= j + 2; ++j1) {
+            int k1 = j1 - j;
+            int l1 = 2 - k1;
 
-            for(int var11 = var3 - var10; var11 <= var3 + var10; ++var11) {
-               int var12 = var11 - var3;
+            for(int i2 = i - l1; i2 <= i + l1; ++i2) {
+               int j2 = i2 - i;
 
-               for(int var13 = var5 - var10; var13 <= var5 + var10; ++var13) {
-                  int var14 = var13 - var5;
-                  if((Math.abs(var12) != var10 || Math.abs(var14) != var10 || var2.nextInt(2) != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var11, var8, var13)]) {
-                     this.setBlockAndMetadata(var1, var11, var8, var13, Block.leaves.blockID, this.field_76527_a);
+               for(int k2 = k - l1; k2 <= k + l1; ++k2) {
+                  int l2 = k2 - k;
+                  if((Math.abs(j2) != l1 || Math.abs(l2) != l1 || random.nextInt(2) != 0) && !Block.opaqueCubeLookup[world.getTypeId(i2, j1, k2)]) {
+                     this.setTypeAndData(world, i2, j1, k2, Block.leaves.blockID, this.field_76527_a);
                   }
                }
             }
          }
-      }
 
-      return true;
+         return true;
+      }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/WorldGenSwamp.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenSwamp.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenSwamp.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenSwamp.java
--- mcp-mcdev/net/minecraft/src/WorldGenSwamp.java	2012-11-29 21:14:00.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenSwamp.java	2012-11-29 20:43:08.000000000 -0800
@@ -2,105 +2,111 @@
 
 import java.util.Random;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockSapling;
 import net.minecraft.src.Material;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenerator;
+import org.bukkit.BlockChangeDelegate;
 
-public class WorldGenSwamp extends WorldGenerator {
+public class WorldGenSwamp extends WorldGenerator implements BlockSapling.TreeGenerator {
 
-   public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-      int var6;
-      for(var6 = var2.nextInt(4) + 5; var1.getBlockMaterial(var3, var4 - 1, var5) == Material.water; --var4) {
+   public boolean generate(World world, Random random, int i, int j, int k) {
+      return this.generate((BlockChangeDelegate)world, random, i, j, k);
+   }
+
+   public boolean generate(BlockChangeDelegate world, Random random, int i, int j, int k) {
+      int l;
+      for(l = random.nextInt(4) + 5; world.getTypeId(i, j - 1, k) != 0 && Block.blocksList[world.getTypeId(i, j - 1, k)].blockMaterial == Material.water; --j) {
          ;
       }
 
-      boolean var7 = true;
-      if(var4 >= 1 && var4 + var6 + 1 <= 128) {
-         int var8;
-         int var10;
-         int var11;
-         int var12;
-         for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-            byte var9 = 1;
-            if(var8 == var4) {
-               var9 = 0;
+      boolean flag = true;
+      if(j >= 1 && j + l + 1 <= 128) {
+         int i1;
+         int j1;
+         int k1;
+         int l1;
+         for(i1 = j; i1 <= j + 1 + l; ++i1) {
+            byte i2 = 1;
+            if(i1 == j) {
+               i2 = 0;
             }
 
-            if(var8 >= var4 + 1 + var6 - 2) {
-               var9 = 3;
+            if(i1 >= j + 1 + l - 2) {
+               i2 = 3;
             }
 
-            for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-               for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-                  if(var8 >= 0 && var8 < 128) {
-                     var12 = var1.getBlockId(var10, var8, var11);
-                     if(var12 != 0 && var12 != Block.leaves.blockID) {
-                        if(var12 != Block.waterStill.blockID && var12 != Block.waterMoving.blockID) {
-                           var7 = false;
-                        } else if(var8 > var4) {
-                           var7 = false;
+            for(j1 = i - i2; j1 <= i + i2 && flag; ++j1) {
+               for(k1 = k - i2; k1 <= k + i2 && flag; ++k1) {
+                  if(i1 >= 0 && i1 < 128) {
+                     l1 = world.getTypeId(j1, i1, k1);
+                     if(l1 != 0 && l1 != Block.leaves.blockID) {
+                        if(l1 != Block.waterStill.blockID && l1 != Block.waterMoving.blockID) {
+                           flag = false;
+                        } else if(i1 > j) {
+                           flag = false;
                         }
                      }
                   } else {
-                     var7 = false;
+                     flag = false;
                   }
                }
             }
          }
 
-         if(!var7) {
+         if(!flag) {
             return false;
          } else {
-            var8 = var1.getBlockId(var3, var4 - 1, var5);
-            if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
-               this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
+            i1 = world.getTypeId(i, j - 1, k);
+            if((i1 == Block.grass.blockID || i1 == Block.dirt.blockID) && j < 128 - l - 1) {
+               this.setType(world, i, j - 1, k, Block.dirt.blockID);
 
-               int var13;
+               int j2;
                int var16;
-               for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-                  var10 = var16 - (var4 + var6);
-                  var11 = 2 - var10 / 2;
-
-                  for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-                     var13 = var12 - var3;
-
-                     for(int var14 = var5 - var11; var14 <= var5 + var11; ++var14) {
-                        int var15 = var14 - var5;
-                        if((Math.abs(var13) != var11 || Math.abs(var15) != var11 || var2.nextInt(2) != 0 && var10 != 0) && !Block.opaqueCubeLookup[var1.getBlockId(var12, var16, var14)]) {
-                           this.setBlock(var1, var12, var16, var14, Block.leaves.blockID);
+               for(j2 = j - 3 + l; j2 <= j + l; ++j2) {
+                  j1 = j2 - (j + l);
+                  k1 = 2 - j1 / 2;
+
+                  for(l1 = i - k1; l1 <= i + k1; ++l1) {
+                     var16 = l1 - i;
+
+                     for(int k2 = k - k1; k2 <= k + k1; ++k2) {
+                        int l2 = k2 - k;
+                        if((Math.abs(var16) != k1 || Math.abs(l2) != k1 || random.nextInt(2) != 0 && j1 != 0) && !Block.opaqueCubeLookup[world.getTypeId(l1, j2, k2)]) {
+                           this.setType(world, l1, j2, k2, Block.leaves.blockID);
                         }
                      }
                   }
                }
 
-               for(var16 = 0; var16 < var6; ++var16) {
-                  var10 = var1.getBlockId(var3, var4 + var16, var5);
-                  if(var10 == 0 || var10 == Block.leaves.blockID || var10 == Block.waterMoving.blockID || var10 == Block.waterStill.blockID) {
-                     this.setBlock(var1, var3, var4 + var16, var5, Block.wood.blockID);
+               for(j2 = 0; j2 < l; ++j2) {
+                  j1 = world.getTypeId(i, j + j2, k);
+                  if(j1 == 0 || j1 == Block.leaves.blockID || j1 == Block.waterMoving.blockID || j1 == Block.waterStill.blockID) {
+                     this.setType(world, i, j + j2, k, Block.wood.blockID);
                   }
                }
 
-               for(var16 = var4 - 3 + var6; var16 <= var4 + var6; ++var16) {
-                  var10 = var16 - (var4 + var6);
-                  var11 = 2 - var10 / 2;
-
-                  for(var12 = var3 - var11; var12 <= var3 + var11; ++var12) {
-                     for(var13 = var5 - var11; var13 <= var5 + var11; ++var13) {
-                        if(var1.getBlockId(var12, var16, var13) == Block.leaves.blockID) {
-                           if(var2.nextInt(4) == 0 && var1.getBlockId(var12 - 1, var16, var13) == 0) {
-                              this.generateVines(var1, var12 - 1, var16, var13, 8);
+               for(j2 = j - 3 + l; j2 <= j + l; ++j2) {
+                  j1 = j2 - (j + l);
+                  k1 = 2 - j1 / 2;
+
+                  for(l1 = i - k1; l1 <= i + k1; ++l1) {
+                     for(var16 = k - k1; var16 <= k + k1; ++var16) {
+                        if(world.getTypeId(l1, j2, var16) == Block.leaves.blockID) {
+                           if(random.nextInt(4) == 0 && world.getTypeId(l1 - 1, j2, var16) == 0) {
+                              this.b(world, l1 - 1, j2, var16, 8);
                            }
 
-                           if(var2.nextInt(4) == 0 && var1.getBlockId(var12 + 1, var16, var13) == 0) {
-                              this.generateVines(var1, var12 + 1, var16, var13, 2);
+                           if(random.nextInt(4) == 0 && world.getTypeId(l1 + 1, j2, var16) == 0) {
+                              this.b(world, l1 + 1, j2, var16, 2);
                            }
 
-                           if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 - 1) == 0) {
-                              this.generateVines(var1, var12, var16, var13 - 1, 1);
+                           if(random.nextInt(4) == 0 && world.getTypeId(l1, j2, var16 - 1) == 0) {
+                              this.b(world, l1, j2, var16 - 1, 1);
                            }
 
-                           if(var2.nextInt(4) == 0 && var1.getBlockId(var12, var16, var13 + 1) == 0) {
-                              this.generateVines(var1, var12, var16, var13 + 1, 4);
+                           if(random.nextInt(4) == 0 && world.getTypeId(l1, j2, var16 + 1) == 0) {
+                              this.b(world, l1, j2, var16 + 1, 4);
                            }
                         }
                      }
@@ -117,18 +123,18 @@
       }
    }
 
-   private void generateVines(World var1, int var2, int var3, int var4, int var5) {
-      this.setBlockAndMetadata(var1, var2, var3, var4, Block.vine.blockID, var5);
-      int var6 = 4;
+   private void b(BlockChangeDelegate world, int i, int j, int k, int l) {
+      this.setTypeAndData(world, i, j, k, Block.vine.blockID, l);
+      int i1 = 4;
 
       while(true) {
-         --var3;
-         if(var1.getBlockId(var2, var3, var4) != 0 || var6 <= 0) {
+         --j;
+         if(world.getTypeId(i, j, k) != 0 || i1 <= 0) {
             return;
          }
 
-         this.setBlockAndMetadata(var1, var2, var3, var4, Block.vine.blockID, var5);
-         --var6;
+         this.setTypeAndData(world, i, j, k, Block.vine.blockID, l);
+         --i1;
       }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/WorldGenTaiga1.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenTaiga1.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenTaiga1.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenTaiga1.java
--- mcp-mcdev/net/minecraft/src/WorldGenTaiga1.java	2012-11-29 21:13:59.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenTaiga1.java	2012-11-29 20:43:06.000000000 -0800
@@ -2,76 +2,82 @@
 
 import java.util.Random;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockSapling;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenerator;
+import org.bukkit.BlockChangeDelegate;
 
-public class WorldGenTaiga1 extends WorldGenerator {
+public class WorldGenTaiga1 extends WorldGenerator implements BlockSapling.TreeGenerator {
 
-   public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-      int var6 = var2.nextInt(5) + 7;
-      int var7 = var6 - var2.nextInt(2) - 3;
-      int var8 = var6 - var7;
-      int var9 = 1 + var2.nextInt(var8 + 1);
-      boolean var10 = true;
-      if(var4 >= 1 && var4 + var6 + 1 <= 128) {
-         int var11;
-         int var13;
-         int var14;
-         int var15;
-         int var18;
-         for(var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11) {
-            boolean var12 = true;
-            if(var11 - var4 < var7) {
-               var18 = 0;
+   public boolean generate(World world, Random random, int i, int j, int k) {
+      return this.generate((BlockChangeDelegate)world, random, i, j, k);
+   }
+
+   public boolean generate(BlockChangeDelegate world, Random random, int i, int j, int k) {
+      int l = random.nextInt(5) + 7;
+      int i1 = l - random.nextInt(2) - 3;
+      int j1 = l - i1;
+      int k1 = 1 + random.nextInt(j1 + 1);
+      boolean flag = true;
+      if(j >= 1 && j + l + 1 <= 128) {
+         int l1;
+         int l2;
+         int i2;
+         int j2;
+         int k2;
+         for(l1 = j; l1 <= j + 1 + l && flag; ++l1) {
+            boolean i3 = true;
+            if(l1 - j < i1) {
+               l2 = 0;
             } else {
-               var18 = var9;
+               l2 = k1;
             }
 
-            for(var13 = var3 - var18; var13 <= var3 + var18 && var10; ++var13) {
-               for(var14 = var5 - var18; var14 <= var5 + var18 && var10; ++var14) {
-                  if(var11 >= 0 && var11 < 128) {
-                     var15 = var1.getBlockId(var13, var11, var14);
-                     if(var15 != 0 && var15 != Block.leaves.blockID) {
-                        var10 = false;
+            for(i2 = i - l2; i2 <= i + l2 && flag; ++i2) {
+               for(j2 = k - l2; j2 <= k + l2 && flag; ++j2) {
+                  if(l1 >= 0 && l1 < 128) {
+                     k2 = world.getTypeId(i2, l1, j2);
+                     if(k2 != 0 && k2 != Block.leaves.blockID) {
+                        flag = false;
                      }
                   } else {
-                     var10 = false;
+                     flag = false;
                   }
                }
             }
          }
 
-         if(!var10) {
+         if(!flag) {
             return false;
          } else {
-            var11 = var1.getBlockId(var3, var4 - 1, var5);
-            if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < 128 - var6 - 1) {
-               this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
-               var18 = 0;
-
-               for(var13 = var4 + var6; var13 >= var4 + var7; --var13) {
-                  for(var14 = var3 - var18; var14 <= var3 + var18; ++var14) {
-                     var15 = var14 - var3;
-
-                     for(int var16 = var5 - var18; var16 <= var5 + var18; ++var16) {
-                        int var17 = var16 - var5;
-                        if((Math.abs(var15) != var18 || Math.abs(var17) != var18 || var18 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var14, var13, var16)]) {
-                           this.setBlockAndMetadata(var1, var14, var13, var16, Block.leaves.blockID, 1);
+            l1 = world.getTypeId(i, j - 1, k);
+            if((l1 == Block.grass.blockID || l1 == Block.dirt.blockID) && j < 128 - l - 1) {
+               this.setType(world, i, j - 1, k, Block.dirt.blockID);
+               l2 = 0;
+
+               for(i2 = j + l; i2 >= j + i1; --i2) {
+                  for(j2 = i - l2; j2 <= i + l2; ++j2) {
+                     k2 = j2 - i;
+
+                     for(int var18 = k - l2; var18 <= k + l2; ++var18) {
+                        int j3 = var18 - k;
+                        if((Math.abs(k2) != l2 || Math.abs(j3) != l2 || l2 <= 0) && !Block.opaqueCubeLookup[world.getTypeId(j2, i2, var18)]) {
+                           this.setTypeAndData(world, j2, i2, var18, Block.leaves.blockID, 1);
                         }
                      }
                   }
 
-                  if(var18 >= 1 && var13 == var4 + var7 + 1) {
-                     --var18;
-                  } else if(var18 < var9) {
-                     ++var18;
+                  if(l2 >= 1 && i2 == j + i1 + 1) {
+                     --l2;
+                  } else if(l2 < k1) {
+                     ++l2;
                   }
                }
 
-               for(var13 = 0; var13 < var6 - 1; ++var13) {
-                  var14 = var1.getBlockId(var3, var4 + var13, var5);
-                  if(var14 == 0 || var14 == Block.leaves.blockID) {
-                     this.setBlockAndMetadata(var1, var3, var4 + var13, var5, Block.wood.blockID, 1);
+               for(i2 = 0; i2 < l - 1; ++i2) {
+                  j2 = world.getTypeId(i, j + i2, k);
+                  if(j2 == 0 || j2 == Block.leaves.blockID) {
+                     this.setTypeAndData(world, i, j + i2, k, Block.wood.blockID, 1);
                   }
                }
 
Binary files mcp-mcdev/net/minecraft/src/WorldGenTaiga2.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenTaiga2.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenTaiga2.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenTaiga2.java
--- mcp-mcdev/net/minecraft/src/WorldGenTaiga2.java	2012-11-29 21:13:58.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenTaiga2.java	2012-11-29 20:43:05.000000000 -0800
@@ -2,92 +2,98 @@
 
 import java.util.Random;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockSapling;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenerator;
+import org.bukkit.BlockChangeDelegate;
 
-public class WorldGenTaiga2 extends WorldGenerator {
+public class WorldGenTaiga2 extends WorldGenerator implements BlockSapling.TreeGenerator {
 
-   public WorldGenTaiga2(boolean var1) {
-      super(var1);
+   public WorldGenTaiga2(boolean flag) {
+      super(flag);
    }
 
-   public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-      int var6 = var2.nextInt(4) + 6;
-      int var7 = 1 + var2.nextInt(2);
-      int var8 = var6 - var7;
-      int var9 = 2 + var2.nextInt(2);
-      boolean var10 = true;
-      if(var4 >= 1 && var4 + var6 + 1 <= 256) {
-         int var11;
-         int var13;
-         int var15;
-         int var21;
-         for(var11 = var4; var11 <= var4 + 1 + var6 && var10; ++var11) {
-            boolean var12 = true;
-            if(var11 - var4 < var7) {
-               var21 = 0;
+   public boolean generate(World world, Random random, int i, int j, int k) {
+      return this.generate((BlockChangeDelegate)world, random, i, j, k);
+   }
+
+   public boolean generate(BlockChangeDelegate world, Random random, int i, int j, int k) {
+      int l = random.nextInt(4) + 6;
+      int i1 = 1 + random.nextInt(2);
+      int j1 = l - i1;
+      int k1 = 2 + random.nextInt(2);
+      boolean flag = true;
+      if(j >= 1 && j + l + 1 <= 256) {
+         int l1;
+         int k2;
+         int i2;
+         int i3;
+         int j2;
+         for(l1 = j; l1 <= j + 1 + l && flag; ++l1) {
+            boolean b0 = true;
+            if(l1 - j < i1) {
+               k2 = 0;
             } else {
-               var21 = var9;
+               k2 = k1;
             }
 
-            for(var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13) {
-               for(int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14) {
-                  if(var11 >= 0 && var11 < 256) {
-                     var15 = var1.getBlockId(var13, var11, var14);
-                     if(var15 != 0 && var15 != Block.leaves.blockID) {
-                        var10 = false;
+            for(i2 = i - k2; i2 <= i + k2 && flag; ++i2) {
+               for(i3 = k - k2; i3 <= k + k2 && flag; ++i3) {
+                  if(l1 >= 0 && l1 < 256) {
+                     j2 = world.getTypeId(i2, l1, i3);
+                     if(j2 != 0 && j2 != Block.leaves.blockID) {
+                        flag = false;
                      }
                   } else {
-                     var10 = false;
+                     flag = false;
                   }
                }
             }
          }
 
-         if(!var10) {
+         if(!flag) {
             return false;
          } else {
-            var11 = var1.getBlockId(var3, var4 - 1, var5);
-            if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
-               this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
-               var21 = var2.nextInt(2);
-               var13 = 1;
-               byte var22 = 0;
-
-               int var17;
-               int var16;
-               for(var15 = 0; var15 <= var8; ++var15) {
-                  var16 = var4 + var6 - var15;
-
-                  for(var17 = var3 - var21; var17 <= var3 + var21; ++var17) {
-                     int var18 = var17 - var3;
-
-                     for(int var19 = var5 - var21; var19 <= var5 + var21; ++var19) {
-                        int var20 = var19 - var5;
-                        if((Math.abs(var18) != var21 || Math.abs(var20) != var21 || var21 <= 0) && !Block.opaqueCubeLookup[var1.getBlockId(var17, var16, var19)]) {
-                           this.setBlockAndMetadata(var1, var17, var16, var19, Block.leaves.blockID, 1);
+            l1 = world.getTypeId(i, j - 1, k);
+            if((l1 == Block.grass.blockID || l1 == Block.dirt.blockID) && j < 256 - l - 1) {
+               this.setType(world, i, j - 1, k, Block.dirt.blockID);
+               k2 = random.nextInt(2);
+               i2 = 1;
+               byte var21 = 0;
+
+               int j3;
+               for(j2 = 0; j2 <= j1; ++j2) {
+                  j3 = j + l - j2;
+
+                  for(i3 = i - k2; i3 <= i + k2; ++i3) {
+                     int k3 = i3 - i;
+
+                     for(int l3 = k - k2; l3 <= k + k2; ++l3) {
+                        int i4 = l3 - k;
+                        if((Math.abs(k3) != k2 || Math.abs(i4) != k2 || k2 <= 0) && !Block.opaqueCubeLookup[world.getTypeId(i3, j3, l3)]) {
+                           this.setTypeAndData(world, i3, j3, l3, Block.leaves.blockID, 1);
                         }
                      }
                   }
 
-                  if(var21 >= var13) {
-                     var21 = var22;
-                     var22 = 1;
-                     ++var13;
-                     if(var13 > var9) {
-                        var13 = var9;
+                  if(k2 >= i2) {
+                     k2 = var21;
+                     var21 = 1;
+                     ++i2;
+                     if(i2 > k1) {
+                        i2 = k1;
                      }
                   } else {
-                     ++var21;
+                     ++k2;
                   }
                }
 
-               var15 = var2.nextInt(3);
+               j2 = random.nextInt(3);
 
-               for(var16 = 0; var16 < var6 - var15; ++var16) {
-                  var17 = var1.getBlockId(var3, var4 + var16, var5);
-                  if(var17 == 0 || var17 == Block.leaves.blockID) {
-                     this.setBlockAndMetadata(var1, var3, var4 + var16, var5, Block.wood.blockID, 1);
+               for(j3 = 0; j3 < l - j2; ++j3) {
+                  i3 = world.getTypeId(i, j + j3, k);
+                  if(i3 == 0 || i3 == Block.leaves.blockID) {
+                     this.setTypeAndData(world, i, j + j3, k, Block.wood.blockID, 1);
                   }
                }
 
Binary files mcp-mcdev/net/minecraft/src/WorldGenTrees.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenTrees.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenTrees.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenTrees.java
--- mcp-mcdev/net/minecraft/src/WorldGenTrees.java	2012-11-29 21:13:57.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenTrees.java	2012-11-29 20:43:04.000000000 -0800
@@ -2,11 +2,13 @@
 
 import java.util.Random;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockSapling;
 import net.minecraft.src.Direction;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldGenerator;
+import org.bukkit.BlockChangeDelegate;
 
-public class WorldGenTrees extends WorldGenerator {
+public class WorldGenTrees extends WorldGenerator implements BlockSapling.TreeGenerator {
 
    private final int minTreeHeight;
    private final boolean vinesGrow;
@@ -14,136 +16,140 @@
    private final int metaLeaves;
 
 
-   public WorldGenTrees(boolean var1) {
-      this(var1, 4, 0, 0, false);
+   public WorldGenTrees(boolean flag) {
+      this(flag, 4, 0, 0, false);
    }
 
-   public WorldGenTrees(boolean var1, int var2, int var3, int var4, boolean var5) {
-      super(var1);
-      this.minTreeHeight = var2;
-      this.metaWood = var3;
-      this.metaLeaves = var4;
-      this.vinesGrow = var5;
+   public WorldGenTrees(boolean flag, int i, int j, int k, boolean flag1) {
+      super(flag);
+      this.minTreeHeight = i;
+      this.metaWood = j;
+      this.metaLeaves = k;
+      this.vinesGrow = flag1;
    }
 
-   public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-      int var6 = var2.nextInt(3) + this.minTreeHeight;
-      boolean var7 = true;
-      if(var4 >= 1 && var4 + var6 + 1 <= 256) {
-         int var8;
-         byte var9;
-         int var11;
-         int var12;
-         for(var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
-            var9 = 1;
-            if(var8 == var4) {
-               var9 = 0;
+   public boolean generate(World world, Random random, int i, int j, int k) {
+      return this.generate((BlockChangeDelegate)world, random, i, j, k);
+   }
+
+   public boolean generate(BlockChangeDelegate world, Random random, int i, int j, int k) {
+      int l = random.nextInt(3) + this.minTreeHeight;
+      boolean flag = true;
+      if(j >= 1 && j + l + 1 <= 256) {
+         int i1;
+         byte b0;
+         int j1;
+         int k1;
+         for(i1 = j; i1 <= j + 1 + l; ++i1) {
+            b0 = 1;
+            if(i1 == j) {
+               b0 = 0;
             }
 
-            if(var8 >= var4 + 1 + var6 - 2) {
-               var9 = 2;
+            if(i1 >= j + 1 + l - 2) {
+               b0 = 2;
             }
 
-            for(int var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
-               for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-                  if(var8 >= 0 && var8 < 256) {
-                     var12 = var1.getBlockId(var10, var8, var11);
-                     if(var12 != 0 && var12 != Block.leaves.blockID && var12 != Block.grass.blockID && var12 != Block.dirt.blockID && var12 != Block.wood.blockID) {
-                        var7 = false;
+            for(int b1 = i - b0; b1 <= i + b0 && flag; ++b1) {
+               for(j1 = k - b0; j1 <= k + b0 && flag; ++j1) {
+                  if(i1 >= 0 && i1 < 256) {
+                     k1 = world.getTypeId(b1, i1, j1);
+                     if(k1 != 0 && k1 != Block.leaves.blockID && k1 != Block.grass.blockID && k1 != Block.dirt.blockID && k1 != Block.wood.blockID) {
+                        flag = false;
                      }
                   } else {
-                     var7 = false;
+                     flag = false;
                   }
                }
             }
          }
 
-         if(!var7) {
+         if(!flag) {
             return false;
          } else {
-            var8 = var1.getBlockId(var3, var4 - 1, var5);
-            if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
-               this.setBlock(var1, var3, var4 - 1, var5, Block.dirt.blockID);
-               var9 = 3;
+            i1 = world.getTypeId(i, j - 1, k);
+            if((i1 == Block.grass.blockID || i1 == Block.dirt.blockID) && j < 256 - l - 1) {
+               this.setType(world, i, j - 1, k, Block.dirt.blockID);
+               b0 = 3;
                byte var18 = 0;
 
-               int var13;
-               int var14;
-               int var15;
-               for(var11 = var4 - var9 + var6; var11 <= var4 + var6; ++var11) {
-                  var12 = var11 - (var4 + var6);
-                  var13 = var18 + 1 - var12 / 2;
-
-                  for(var14 = var3 - var13; var14 <= var3 + var13; ++var14) {
-                     var15 = var14 - var3;
-
-                     for(int var16 = var5 - var13; var16 <= var5 + var13; ++var16) {
-                        int var17 = var16 - var5;
-                        if((Math.abs(var15) != var13 || Math.abs(var17) != var13 || var2.nextInt(2) != 0 && var12 != 0) && var1.isAirBlock(var14, var11, var16)) {
-                           this.setBlockAndMetadata(var1, var14, var11, var16, Block.leaves.blockID, this.metaLeaves);
+               int i2;
+               int j2;
+               int k2;
+               for(j1 = j - b0 + l; j1 <= j + l; ++j1) {
+                  k1 = j1 - (j + l);
+                  i2 = var18 + 1 - k1 / 2;
+
+                  for(j2 = i - i2; j2 <= i + i2; ++j2) {
+                     k2 = j2 - i;
+
+                     for(int l2 = k - i2; l2 <= k + i2; ++l2) {
+                        int i3 = l2 - k;
+                        if((Math.abs(k2) != i2 || Math.abs(i3) != i2 || random.nextInt(2) != 0 && k1 != 0) && world.isEmpty(j2, j1, l2)) {
+                           this.setTypeAndData(world, j2, j1, l2, Block.leaves.blockID, this.metaLeaves);
                         }
                      }
                   }
                }
 
-               for(var11 = 0; var11 < var6; ++var11) {
-                  var12 = var1.getBlockId(var3, var4 + var11, var5);
-                  if(var12 == 0 || var12 == Block.leaves.blockID) {
-                     this.setBlockAndMetadata(var1, var3, var4 + var11, var5, Block.wood.blockID, this.metaWood);
-                     if(this.vinesGrow && var11 > 0) {
-                        if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 - 1, var4 + var11, var5)) {
-                           this.setBlockAndMetadata(var1, var3 - 1, var4 + var11, var5, Block.vine.blockID, 8);
+               for(j1 = 0; j1 < l; ++j1) {
+                  k1 = world.getTypeId(i, j + j1, k);
+                  if(k1 == 0 || k1 == Block.leaves.blockID) {
+                     this.setTypeAndData(world, i, j + j1, k, Block.wood.blockID, this.metaWood);
+                     if(this.vinesGrow && j1 > 0) {
+                        if(random.nextInt(3) > 0 && world.isEmpty(i - 1, j + j1, k)) {
+                           this.setTypeAndData(world, i - 1, j + j1, k, Block.vine.blockID, 8);
                         }
 
-                        if(var2.nextInt(3) > 0 && var1.isAirBlock(var3 + 1, var4 + var11, var5)) {
-                           this.setBlockAndMetadata(var1, var3 + 1, var4 + var11, var5, Block.vine.blockID, 2);
+                        if(random.nextInt(3) > 0 && world.isEmpty(i + 1, j + j1, k)) {
+                           this.setTypeAndData(world, i + 1, j + j1, k, Block.vine.blockID, 2);
                         }
 
-                        if(var2.nextInt(3) > 0 && var1.isAirBlock(var3, var4 + var11, var5 - 1)) {
-                           this.setBlockAndMetadata(var1, var3, var4 + var11, var5 - 1, Block.vine.blockID, 1);
+                        if(random.nextInt(3) > 0 && world.isEmpty(i, j + j1, k - 1)) {
+                           this.setTypeAndData(world, i, j + j1, k - 1, Block.vine.blockID, 1);
                         }
 
-                        if(var2.nextInt(3) > 0 && var1.isAirBlock(var3, var4 + var11, var5 + 1)) {
-                           this.setBlockAndMetadata(var1, var3, var4 + var11, var5 + 1, Block.vine.blockID, 4);
+                        if(random.nextInt(3) > 0 && world.isEmpty(i, j + j1, k + 1)) {
+                           this.setTypeAndData(world, i, j + j1, k + 1, Block.vine.blockID, 4);
                         }
                      }
                   }
                }
 
                if(this.vinesGrow) {
-                  for(var11 = var4 - 3 + var6; var11 <= var4 + var6; ++var11) {
-                     var12 = var11 - (var4 + var6);
-                     var13 = 2 - var12 / 2;
-
-                     for(var14 = var3 - var13; var14 <= var3 + var13; ++var14) {
-                        for(var15 = var5 - var13; var15 <= var5 + var13; ++var15) {
-                           if(var1.getBlockId(var14, var11, var15) == Block.leaves.blockID) {
-                              if(var2.nextInt(4) == 0 && var1.getBlockId(var14 - 1, var11, var15) == 0) {
-                                 this.growVines(var1, var14 - 1, var11, var15, 8);
+                  for(j1 = j - 3 + l; j1 <= j + l; ++j1) {
+                     k1 = j1 - (j + l);
+                     i2 = 2 - k1 / 2;
+
+                     for(j2 = i - i2; j2 <= i + i2; ++j2) {
+                        for(k2 = k - i2; k2 <= k + i2; ++k2) {
+                           if(world.getTypeId(j2, j1, k2) == Block.leaves.blockID) {
+                              if(random.nextInt(4) == 0 && world.getTypeId(j2 - 1, j1, k2) == 0) {
+                                 this.b(world, j2 - 1, j1, k2, 8);
                               }
 
-                              if(var2.nextInt(4) == 0 && var1.getBlockId(var14 + 1, var11, var15) == 0) {
-                                 this.growVines(var1, var14 + 1, var11, var15, 2);
+                              if(random.nextInt(4) == 0 && world.getTypeId(j2 + 1, j1, k2) == 0) {
+                                 this.b(world, j2 + 1, j1, k2, 2);
                               }
 
-                              if(var2.nextInt(4) == 0 && var1.getBlockId(var14, var11, var15 - 1) == 0) {
-                                 this.growVines(var1, var14, var11, var15 - 1, 1);
+                              if(random.nextInt(4) == 0 && world.getTypeId(j2, j1, k2 - 1) == 0) {
+                                 this.b(world, j2, j1, k2 - 1, 1);
                               }
 
-                              if(var2.nextInt(4) == 0 && var1.getBlockId(var14, var11, var15 + 1) == 0) {
-                                 this.growVines(var1, var14, var11, var15 + 1, 4);
+                              if(random.nextInt(4) == 0 && world.getTypeId(j2, j1, k2 + 1) == 0) {
+                                 this.b(world, j2, j1, k2 + 1, 4);
                               }
                            }
                         }
                      }
                   }
 
-                  if(var2.nextInt(5) == 0 && var6 > 5) {
-                     for(var11 = 0; var11 < 2; ++var11) {
-                        for(var12 = 0; var12 < 4; ++var12) {
-                           if(var2.nextInt(4 - var11) == 0) {
-                              var13 = var2.nextInt(3);
-                              this.setBlockAndMetadata(var1, var3 + Direction.offsetX[Direction.footInvisibleFaceRemap[var12]], var4 + var6 - 5 + var11, var5 + Direction.offsetZ[Direction.footInvisibleFaceRemap[var12]], Block.cocoaPlant.blockID, var13 << 2 | var12);
+                  if(random.nextInt(5) == 0 && l > 5) {
+                     for(j1 = 0; j1 < 2; ++j1) {
+                        for(k1 = 0; k1 < 4; ++k1) {
+                           if(random.nextInt(4 - j1) == 0) {
+                              i2 = random.nextInt(3);
+                              this.setTypeAndData(world, i + Direction.offsetX[Direction.footInvisibleFaceRemap[k1]], j + l - 5 + j1, k + Direction.offsetZ[Direction.footInvisibleFaceRemap[k1]], Block.cocoaPlant.blockID, i2 << 2 | k1);
                            }
                         }
                      }
@@ -160,18 +166,18 @@
       }
    }
 
-   private void growVines(World var1, int var2, int var3, int var4, int var5) {
-      this.setBlockAndMetadata(var1, var2, var3, var4, Block.vine.blockID, var5);
-      int var6 = 4;
+   private void b(BlockChangeDelegate world, int i, int j, int k, int l) {
+      this.setTypeAndData(world, i, j, k, Block.vine.blockID, l);
+      int i1 = 4;
 
       while(true) {
-         --var3;
-         if(var1.getBlockId(var2, var3, var4) != 0 || var6 <= 0) {
+         --j;
+         if(world.getTypeId(i, j, k) != 0 || i1 <= 0) {
             return;
          }
 
-         this.setBlockAndMetadata(var1, var2, var3, var4, Block.vine.blockID, var5);
-         --var6;
+         this.setTypeAndData(world, i, j, k, Block.vine.blockID, l);
+         --i1;
       }
    }
 }
Binary files mcp-mcdev/net/minecraft/src/WorldGenerator.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenerator.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldGenerator.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenerator.java
--- mcp-mcdev/net/minecraft/src/WorldGenerator.java	2012-11-29 21:14:06.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldGenerator.java	2012-11-29 20:43:15.000000000 -0800
@@ -2,6 +2,7 @@
 
 import java.util.Random;
 import net.minecraft.src.World;
+import org.bukkit.BlockChangeDelegate;
 
 public abstract class WorldGenerator {
 
@@ -13,23 +14,23 @@
       this.doBlockNotify = false;
    }
 
-   public WorldGenerator(boolean var1) {
-      this.doBlockNotify = var1;
+   public WorldGenerator(boolean flag) {
+      this.doBlockNotify = flag;
    }
 
    public abstract boolean generate(World var1, Random var2, int var3, int var4, int var5);
 
-   public void setScale(double var1, double var3, double var5) {}
+   public void setScale(double d0, double d1, double d2) {}
 
-   protected void setBlock(World var1, int var2, int var3, int var4, int var5) {
-      this.setBlockAndMetadata(var1, var2, var3, var4, var5, 0);
+   protected void setType(BlockChangeDelegate world, int i, int j, int k, int l) {
+      this.setTypeAndData(world, i, j, k, l, 0);
    }
 
-   protected void setBlockAndMetadata(World var1, int var2, int var3, int var4, int var5, int var6) {
+   protected void setTypeAndData(BlockChangeDelegate world, int i, int j, int k, int l, int i1) {
       if(this.doBlockNotify) {
-         var1.setBlockAndMetadataWithNotify(var2, var3, var4, var5, var6);
+         world.setTypeIdAndData(i, j, k, l, i1);
       } else {
-         var1.setBlockAndMetadata(var2, var3, var4, var5, var6);
+         world.setRawTypeIdAndData(i, j, k, l, i1);
       }
 
    }
Binary files mcp-mcdev/net/minecraft/src/WorldManager.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldManager.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldManager.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldManager.java
--- mcp-mcdev/net/minecraft/src/WorldManager.java	2012-11-29 21:13:55.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldManager.java	2012-11-29 20:42:59.000000000 -0800
@@ -14,61 +14,65 @@
 public class WorldManager implements IWorldAccess {
 
    private MinecraftServer mcServer;
-   private WorldServer theWorldServer;
+   public WorldServer theWorldServer;
 
 
-   public WorldManager(MinecraftServer var1, WorldServer var2) {
-      this.mcServer = var1;
-      this.theWorldServer = var2;
+   public WorldManager(MinecraftServer minecraftserver, WorldServer worldserver) {
+      this.mcServer = minecraftserver;
+      this.theWorldServer = worldserver;
    }
 
-   public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {}
+   public void spawnParticle(String s, double d0, double d1, double d2, double d3, double d4, double d5) {}
 
-   public void obtainEntitySkin(Entity var1) {
-      this.theWorldServer.getEntityTracker().trackEntity(var1);
+   public void obtainEntitySkin(Entity entity) {
+      this.theWorldServer.getEntityTracker().trackEntity(entity);
    }
 
-   public void releaseEntitySkin(Entity var1) {
-      this.theWorldServer.getEntityTracker().untrackEntity(var1);
+   public void releaseEntitySkin(Entity entity) {
+      this.theWorldServer.getEntityTracker().untrackEntity(entity);
    }
 
-   public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
-      this.mcServer.getConfigurationManager().sendPacketToPlayersAroundPoint(var2, var4, var6, var8 > 1.0F?(double)(16.0F * var8):16.0D, this.theWorldServer.provider.dimensionId, new Packet62LevelSound(var1, var2, var4, var6, var8, var9));
+   public void a(String s, double d0, double d1, double d2, float f, float f1, Entity sourceentity) {
+      this.mcServer.getConfigurationManager().sendPacketNearby(d0, d1, d2, f > 1.0F?(double)(16.0F * f):16.0D, this.theWorldServer.dimension, new Packet62LevelSound(s, d0, d1, d2, f, f1), sourceentity);
    }
 
-   public void func_85102_a(EntityPlayer var1, String var2, double var3, double var5, double var7, float var9, float var10) {
-      this.mcServer.getConfigurationManager().sendToAllNearExcept(var1, var3, var5, var7, var9 > 1.0F?(double)(16.0F * var9):16.0D, this.theWorldServer.provider.dimensionId, new Packet62LevelSound(var2, var3, var5, var7, var9, var10));
+   public void playSound(String s, double d0, double d1, double d2, float f, float f1) {
+      this.mcServer.getConfigurationManager().sendPacketToPlayersAroundPoint(d0, d1, d2, f > 1.0F?(double)(16.0F * f):16.0D, this.theWorldServer.dimension, new Packet62LevelSound(s, d0, d1, d2, f, f1));
    }
 
-   public void markBlockRangeForRenderUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {}
+   public void func_85102_a(EntityPlayer entityhuman, String s, double d0, double d1, double d2, float f, float f1) {
+      this.mcServer.getConfigurationManager().sendToAllNearExcept(entityhuman, d0, d1, d2, f > 1.0F?(double)(16.0F * f):16.0D, this.theWorldServer.provider.dimensionId, new Packet62LevelSound(s, d0, d1, d2, f, f1));
+   }
+
+   public void markBlockRangeForRenderUpdate(int i, int j, int k, int l, int i1, int j1) {}
 
-   public void markBlockForUpdate(int var1, int var2, int var3) {
-      this.theWorldServer.getPlayerManager().markBlockNeedsUpdate(var1, var2, var3);
+   public void markBlockForUpdate(int i, int j, int k) {
+      this.theWorldServer.getPlayerManager().markBlockNeedsUpdate(i, j, k);
    }
 
-   public void markBlockForRenderUpdate(int var1, int var2, int var3) {}
+   public void markBlockForRenderUpdate(int i, int j, int k) {}
 
-   public void playRecord(String var1, int var2, int var3, int var4) {}
+   public void playRecord(String s, int i, int j, int k) {}
 
-   public void playAuxSFX(EntityPlayer var1, int var2, int var3, int var4, int var5, int var6) {
-      this.mcServer.getConfigurationManager().sendToAllNearExcept(var1, (double)var3, (double)var4, (double)var5, 64.0D, this.theWorldServer.provider.dimensionId, new Packet61DoorChange(var2, var3, var4, var5, var6, false));
+   public void playAuxSFX(EntityPlayer entityhuman, int i, int j, int k, int l, int i1) {
+      this.mcServer.getConfigurationManager().sendToAllNearExcept(entityhuman, (double)j, (double)k, (double)l, 64.0D, this.theWorldServer.dimension, new Packet61DoorChange(i, j, k, l, i1, false));
    }
 
-   public void broadcastSound(int var1, int var2, int var3, int var4, int var5) {
-      this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new Packet61DoorChange(var1, var2, var3, var4, var5, true));
+   public void broadcastSound(int i, int j, int k, int l, int i1) {
+      this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new Packet61DoorChange(i, j, k, l, i1, true));
    }
 
-   public void destroyBlockPartially(int var1, int var2, int var3, int var4, int var5) {
-      Iterator var6 = this.mcServer.getConfigurationManager().playerEntityList.iterator();
+   public void destroyBlockPartially(int i, int j, int k, int l, int i1) {
+      Iterator iterator = this.mcServer.getConfigurationManager().playerEntityList.iterator();
 
-      while(var6.hasNext()) {
-         EntityPlayerMP var7 = (EntityPlayerMP)var6.next();
-         if(var7 != null && var7.worldObj == this.theWorldServer && var7.entityId != var1) {
-            double var8 = (double)var2 - var7.posX;
-            double var10 = (double)var3 - var7.posY;
-            double var12 = (double)var4 - var7.posZ;
-            if(var8 * var8 + var10 * var10 + var12 * var12 < 1024.0D) {
-               var7.playerNetServerHandler.sendPacket(new Packet55BlockDestroy(var1, var2, var3, var4, var5));
+      while(iterator.hasNext()) {
+         EntityPlayerMP entityplayer = (EntityPlayerMP)iterator.next();
+         if(entityplayer != null && entityplayer.worldObj == this.theWorldServer && entityplayer.entityId != i) {
+            double d0 = (double)j - entityplayer.posX;
+            double d1 = (double)k - entityplayer.posY;
+            double d2 = (double)l - entityplayer.posZ;
+            if(d0 * d0 + d1 * d1 + d2 * d2 < 1024.0D) {
+               entityplayer.playerNetServerHandler.sendPacket(new Packet55BlockDestroy(i, j, k, l, i1));
             }
          }
       }
Binary files mcp-mcdev/net/minecraft/src/WorldServer.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldServer.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldServer.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldServer.java
--- mcp-mcdev/net/minecraft/src/WorldServer.java	2012-11-29 21:13:54.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldServer.java	2012-11-29 20:42:58.000000000 -0800
@@ -11,6 +11,7 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.BiomeGenBase;
 import net.minecraft.src.Block;
+import net.minecraft.src.BlockContainer;
 import net.minecraft.src.BlockEventData;
 import net.minecraft.src.Chunk;
 import net.minecraft.src.ChunkCoordIntPair;
@@ -21,12 +22,10 @@
 import net.minecraft.src.CrashReportCategory;
 import net.minecraft.src.Empty3;
 import net.minecraft.src.Entity;
-import net.minecraft.src.EntityAnimal;
 import net.minecraft.src.EntityLightningBolt;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.EntityPlayerMP;
 import net.minecraft.src.EntityTracker;
-import net.minecraft.src.EntityWaterMob;
 import net.minecraft.src.EnumCreatureType;
 import net.minecraft.src.Explosion;
 import net.minecraft.src.ExtendedBlockStorage;
@@ -38,6 +37,7 @@
 import net.minecraft.src.IntHashMap;
 import net.minecraft.src.Item;
 import net.minecraft.src.MathHelper;
+import net.minecraft.src.MinecraftException;
 import net.minecraft.src.NextTickListEntry;
 import net.minecraft.src.Packet38EntityStatus;
 import net.minecraft.src.Packet54PlayNoteBlock;
@@ -52,6 +52,14 @@
 import net.minecraft.src.SpawnerAnimals;
 import net.minecraft.src.Teleporter;
 import net.minecraft.src.TileEntity;
+import net.minecraft.src.TileEntityChest;
+import net.minecraft.src.TileEntityDispenser;
+import net.minecraft.src.TileEntityEnderChest;
+import net.minecraft.src.TileEntityFurnace;
+import net.minecraft.src.TileEntityMobSpawner;
+import net.minecraft.src.TileEntityNote;
+import net.minecraft.src.TileEntityRecordPlayer;
+import net.minecraft.src.TileEntitySign;
 import net.minecraft.src.Vec3;
 import net.minecraft.src.WeightedRandom;
 import net.minecraft.src.WeightedRandomChestContent;
@@ -59,12 +67,29 @@
 import net.minecraft.src.WorldChunkManager;
 import net.minecraft.src.WorldGeneratorBonusChest;
 import net.minecraft.src.WorldProvider;
+import net.minecraft.src.WorldProviderEnd;
+import net.minecraft.src.WorldProviderHell;
 import net.minecraft.src.WorldSettings;
+import org.bukkit.BlockChangeDelegate;
+import org.bukkit.Location;
+import org.bukkit.World.Environment;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
+import org.bukkit.craftbukkit.generator.NetherChunkGenerator;
+import org.bukkit.craftbukkit.generator.NormalChunkGenerator;
+import org.bukkit.craftbukkit.generator.SkyLandsChunkGenerator;
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.entity.LightningStrike;
+import org.bukkit.event.block.BlockFormEvent;
+import org.bukkit.event.weather.LightningStrikeEvent;
+import org.bukkit.event.weather.ThunderChangeEvent;
+import org.bukkit.event.weather.WeatherChangeEvent;
+import org.bukkit.generator.ChunkGenerator;
 
-public class WorldServer extends World {
+public class WorldServer extends World implements BlockChangeDelegate {
 
    private final MinecraftServer mcServer;
-   private final EntityTracker theEntityTracker;
+   public EntityTracker theEntityTracker;
    private final PlayerManager thePlayerManager;
    private Set field_73064_N;
    private TreeSet pendingTickListEntries;
@@ -77,13 +102,16 @@
    private int blockEventCacheIndex = 0;
    private static final WeightedRandomChestContent[] bonusChestContent = new WeightedRandomChestContent[]{new WeightedRandomChestContent(Item.stick.shiftedIndex, 0, 1, 3, 10), new WeightedRandomChestContent(Block.planks.blockID, 0, 1, 3, 10), new WeightedRandomChestContent(Block.wood.blockID, 0, 1, 3, 10), new WeightedRandomChestContent(Item.axeStone.shiftedIndex, 0, 1, 1, 3), new WeightedRandomChestContent(Item.axeWood.shiftedIndex, 0, 1, 1, 5), new WeightedRandomChestContent(Item.pickaxeStone.shiftedIndex, 0, 1, 1, 3), new WeightedRandomChestContent(Item.pickaxeWood.shiftedIndex, 0, 1, 1, 5), new WeightedRandomChestContent(Item.appleRed.shiftedIndex, 0, 2, 3, 5), new WeightedRandomChestContent(Item.bread.shiftedIndex, 0, 2, 3, 3)};
    private IntHashMap entityIdMap;
+   public final int dimension;
 
 
-   public WorldServer(MinecraftServer var1, ISaveHandler var2, String var3, int var4, WorldSettings var5, Profiler var6) {
-      super(var2, var3, var5, WorldProvider.getProviderForDimension(var4), var6);
-      this.mcServer = var1;
+   public WorldServer(MinecraftServer minecraftserver, ISaveHandler idatamanager, String s, int i, WorldSettings worldsettings, Profiler methodprofiler, Environment env, ChunkGenerator gen) {
+      super(idatamanager, s, worldsettings, WorldProvider.getProviderForDimension(env.getId()), methodprofiler, gen, env);
+      this.dimension = i;
+      this.pvpMode = minecraftserver.isPVPEnabled();
+      this.mcServer = minecraftserver;
       this.theEntityTracker = new EntityTracker(this);
-      this.thePlayerManager = new PlayerManager(this, var1.getConfigurationManager().getViewDistance());
+      this.thePlayerManager = new PlayerManager(this, minecraftserver.getConfigurationManager().getViewDistance());
       if(this.entityIdMap == null) {
          this.entityIdMap = new IntHashMap();
       }
@@ -99,6 +127,60 @@
       this.field_85177_Q = new Teleporter(this);
    }
 
+   public TileEntity getTileEntity(int i, int j, int k) {
+      TileEntity result = super.getBlockTileEntity(i, j, k);
+      int type = this.getBlockId(i, j, k);
+      if(type == Block.chest.blockID) {
+         if(!(result instanceof TileEntityChest)) {
+            result = this.fixTileEntity(i, j, k, type, result);
+         }
+      } else if(type == Block.stoneOvenIdle.blockID) {
+         if(!(result instanceof TileEntityFurnace)) {
+            result = this.fixTileEntity(i, j, k, type, result);
+         }
+      } else if(type == Block.dispenser.blockID) {
+         if(!(result instanceof TileEntityDispenser)) {
+            result = this.fixTileEntity(i, j, k, type, result);
+         }
+      } else if(type == Block.jukebox.blockID) {
+         if(!(result instanceof TileEntityRecordPlayer)) {
+            result = this.fixTileEntity(i, j, k, type, result);
+         }
+      } else if(type == Block.music.blockID) {
+         if(!(result instanceof TileEntityNote)) {
+            result = this.fixTileEntity(i, j, k, type, result);
+         }
+      } else if(type == Block.mobSpawner.blockID) {
+         if(!(result instanceof TileEntityMobSpawner)) {
+            result = this.fixTileEntity(i, j, k, type, result);
+         }
+      } else if(type != Block.signPost.blockID && type != Block.signWall.blockID) {
+         if(type == Block.enderChest.blockID && !(result instanceof TileEntityEnderChest)) {
+            result = this.fixTileEntity(i, j, k, type, result);
+         }
+      } else if(!(result instanceof TileEntitySign)) {
+         result = this.fixTileEntity(i, j, k, type, result);
+      }
+
+      return result;
+   }
+
+   private TileEntity fixTileEntity(int x, int y, int z, int type, TileEntity found) {
+      this.getServer().getLogger().severe("Block at " + x + "," + y + "," + z + " is " + org.bukkit.Material.getMaterial(type).toString() + " but has " + found + ". " + "Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.");
+      if(Block.blocksList[type] instanceof BlockContainer) {
+         TileEntity replacement = ((BlockContainer)Block.blocksList[type]).createNewTileEntity(this);
+         this.setBlockTileEntity(x, y, z, replacement);
+         return replacement;
+      } else {
+         this.getServer().getLogger().severe("Don\'t know how to fix for this type... Can\'t do anything! :(");
+         return found;
+      }
+   }
+
+   private boolean canSpawn(int x, int z) {
+      return this.generator != null?this.generator.canSpawn(this.getWorld(), x, z):this.provider.canCoordinateBeSpawn(x, z);
+   }
+
    public void tick() {
       super.tick();
       if(this.getWorldInfo().isHardcoreModeEnabled() && this.difficultySetting < 3) {
@@ -107,28 +189,29 @@
 
       this.provider.worldChunkMgr.cleanupCache();
       if(this.areAllPlayersAsleep()) {
-         boolean var1 = false;
+         boolean flag = false;
          if(this.spawnHostileMobs && this.difficultySetting >= 1) {
             ;
          }
 
-         if(!var1) {
-            long var2 = this.worldInfo.getWorldTime() + 24000L;
-            this.worldInfo.setWorldTime(var2 - var2 % 24000L);
+         if(!flag) {
+            long i = this.worldInfo.getWorldTime() + 24000L;
+            this.worldInfo.setWorldTime(i - i % 24000L);
             this.wakeAllPlayers();
          }
       }
 
       this.theProfiler.startSection("mobSpawner");
-      if(this.getGameRules().getGameRuleBooleanValue("doMobSpawning")) {
-         SpawnerAnimals.findChunksForSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs, this.worldInfo.getWorldTotalTime() % 400L == 0L);
+      long time = this.worldInfo.getWorldTotalTime();
+      if(this.getGameRules().getGameRuleBooleanValue("doMobSpawning") && (this.spawnHostileMobs || this.spawnPeacefulMobs) && this instanceof WorldServer && this.playerEntities.size() > 0) {
+         SpawnerAnimals.findChunksForSpawning(this, this.spawnHostileMobs && this.ticksPerMonsterSpawns != 0L && time % this.ticksPerMonsterSpawns == 0L, this.spawnPeacefulMobs && this.ticksPerAnimalSpawns != 0L && time % this.ticksPerAnimalSpawns == 0L, this.worldInfo.getWorldTotalTime() % 400L == 0L);
       }
 
       this.theProfiler.endStartSection("chunkSource");
       this.chunkProvider.unload100OldestChunks();
-      int var4 = this.calculateSkylightSubtracted(1.0F);
-      if(var4 != this.skylightSubtracted) {
-         this.skylightSubtracted = var4;
+      int j = this.calculateSkylightSubtracted(1.0F);
+      if(j != this.skylightSubtracted) {
+         this.skylightSubtracted = j;
       }
 
       this.sendAndApplyBlockEvents();
@@ -149,18 +232,18 @@
       this.sendAndApplyBlockEvents();
    }
 
-   public SpawnListEntry spawnRandomCreature(EnumCreatureType var1, int var2, int var3, int var4) {
-      List var5 = this.getChunkProvider().getPossibleCreatures(var1, var2, var3, var4);
-      return var5 != null && !var5.isEmpty()?(SpawnListEntry)WeightedRandom.getRandomItem(this.rand, (Collection)var5):null;
+   public SpawnListEntry spawnRandomCreature(EnumCreatureType enumcreaturetype, int i, int j, int k) {
+      List list = this.getChunkProvider().getPossibleCreatures(enumcreaturetype, i, j, k);
+      return list != null && !list.isEmpty()?(SpawnListEntry)WeightedRandom.getRandomItem(this.rand, (Collection)list):null;
    }
 
    public void updateAllPlayersSleepingFlag() {
       this.allPlayersSleeping = !this.playerEntities.isEmpty();
-      Iterator var1 = this.playerEntities.iterator();
+      Iterator iterator = this.playerEntities.iterator();
 
-      while(var1.hasNext()) {
-         EntityPlayer var2 = (EntityPlayer)var1.next();
-         if(!var2.isPlayerSleeping()) {
+      while(iterator.hasNext()) {
+         EntityPlayer entityhuman = (EntityPlayer)iterator.next();
+         if(!entityhuman.isPlayerSleeping() && !entityhuman.fauxSleeping) {
             this.allPlayersSleeping = false;
             break;
          }
@@ -170,12 +253,12 @@
 
    protected void wakeAllPlayers() {
       this.allPlayersSleeping = false;
-      Iterator var1 = this.playerEntities.iterator();
+      Iterator iterator = this.playerEntities.iterator();
 
-      while(var1.hasNext()) {
-         EntityPlayer var2 = (EntityPlayer)var1.next();
-         if(var2.isPlayerSleeping()) {
-            var2.wakeUpPlayer(false, false, true);
+      while(iterator.hasNext()) {
+         EntityPlayer entityhuman = (EntityPlayer)iterator.next();
+         if(entityhuman.isPlayerSleeping()) {
+            entityhuman.wakeUpPlayer(false, false, true);
          }
       }
 
@@ -183,24 +266,38 @@
    }
 
    private void resetRainAndThunder() {
-      this.worldInfo.setRainTime(0);
-      this.worldInfo.setRaining(false);
-      this.worldInfo.setThunderTime(0);
-      this.worldInfo.setThundering(false);
+      WeatherChangeEvent weather = new WeatherChangeEvent(this.getWorld(), false);
+      this.getServer().getPluginManager().callEvent(weather);
+      ThunderChangeEvent thunder = new ThunderChangeEvent(this.getWorld(), false);
+      this.getServer().getPluginManager().callEvent(thunder);
+      if(!weather.isCancelled()) {
+         this.worldInfo.setRainTime(0);
+         this.worldInfo.setRaining(false);
+      }
+
+      if(!thunder.isCancelled()) {
+         this.worldInfo.setThunderTime(0);
+         this.worldInfo.setThundering(false);
+      }
+
    }
 
    public boolean areAllPlayersAsleep() {
       if(this.allPlayersSleeping && !this.isRemote) {
-         Iterator var1 = this.playerEntities.iterator();
+         Iterator iterator = this.playerEntities.iterator();
+         boolean foundActualSleepers = false;
 
-         EntityPlayer var2;
+         EntityPlayer entityhuman;
          do {
-            if(!var1.hasNext()) {
-               return true;
+            if(!iterator.hasNext()) {
+               return foundActualSleepers;
             }
 
-            var2 = (EntityPlayer)var1.next();
-         } while(var2.isPlayerFullyAsleep());
+            entityhuman = (EntityPlayer)iterator.next();
+            if(entityhuman.isPlayerFullyAsleep()) {
+               foundActualSleepers = true;
+            }
+         } while(entityhuman.isPlayerFullyAsleep() || entityhuman.fauxSleeping);
 
          return false;
       } else {
@@ -210,82 +307,99 @@
 
    protected void tickBlocksAndAmbiance() {
       super.tickBlocksAndAmbiance();
-      int var1 = 0;
-      int var2 = 0;
-      Iterator var3 = this.activeChunkSet.iterator();
-
-      while(var3.hasNext()) {
-         ChunkCoordIntPair var4 = (ChunkCoordIntPair)var3.next();
-         int var5 = var4.chunkXPos * 16;
-         int var6 = var4.chunkZPos * 16;
+      int i = 0;
+      int j = 0;
+      long[] arr$ = this.activeChunkSet.popAll();
+      int len$ = arr$.length;
+
+      for(int i$ = 0; i$ < len$; ++i$) {
+         long chunkCoord = arr$[i$];
+         int chunkX = LongHash.msw(chunkCoord);
+         int chunkZ = LongHash.lsw(chunkCoord);
+         int k = chunkX * 16;
+         int l = chunkZ * 16;
          this.theProfiler.startSection("getChunk");
-         Chunk var7 = this.getChunkFromChunkCoords(var4.chunkXPos, var4.chunkZPos);
-         this.moodSoundAndLightCheck(var5, var6, var7);
+         Chunk chunk = this.getChunkFromChunkCoords(chunkX, chunkZ);
+         this.moodSoundAndLightCheck(k, l, chunk);
          this.theProfiler.endStartSection("tickChunk");
-         var7.updateSkylight();
+         chunk.updateSkylight();
          this.theProfiler.endStartSection("thunder");
-         int var8;
-         int var9;
-         int var10;
-         int var11;
+         int i1;
+         int j1;
+         int k1;
+         int l1;
          if(this.rand.nextInt(100000) == 0 && this.isRaining() && this.isThundering()) {
             this.updateLCG = this.updateLCG * 3 + 1013904223;
-            var8 = this.updateLCG >> 2;
-            var9 = var5 + (var8 & 15);
-            var10 = var6 + (var8 >> 8 & 15);
-            var11 = this.getPrecipitationHeight(var9, var10);
-            if(this.canLightningStrikeAt(var9, var11, var10)) {
-               this.addWeatherEffect(new EntityLightningBolt(this, (double)var9, (double)var11, (double)var10));
+            i1 = this.updateLCG >> 2;
+            j1 = k + (i1 & 15);
+            k1 = l + (i1 >> 8 & 15);
+            l1 = this.getPrecipitationHeight(j1, k1);
+            if(this.canLightningStrikeAt(j1, l1, k1)) {
+               this.addWeatherEffect(new EntityLightningBolt(this, (double)j1, (double)l1, (double)k1));
                this.lastLightningBolt = 2;
             }
          }
 
          this.theProfiler.endStartSection("iceandsnow");
-         int var13;
+         int i2;
          if(this.rand.nextInt(16) == 0) {
             this.updateLCG = this.updateLCG * 3 + 1013904223;
-            var8 = this.updateLCG >> 2;
-            var9 = var8 & 15;
-            var10 = var8 >> 8 & 15;
-            var11 = this.getPrecipitationHeight(var9 + var5, var10 + var6);
-            if(this.isBlockFreezableNaturally(var9 + var5, var11 - 1, var10 + var6)) {
-               this.setBlockWithNotify(var9 + var5, var11 - 1, var10 + var6, Block.ice.blockID);
+            i1 = this.updateLCG >> 2;
+            j1 = i1 & 15;
+            k1 = i1 >> 8 & 15;
+            l1 = this.getPrecipitationHeight(j1 + k, k1 + l);
+            BlockState achunksection;
+            BlockFormEvent chunksection;
+            if(this.isBlockFreezableNaturally(j1 + k, l1 - 1, k1 + l)) {
+               achunksection = this.getWorld().getBlockAt(j1 + k, l1 - 1, k1 + l).getState();
+               achunksection.setTypeId(Block.ice.blockID);
+               chunksection = new BlockFormEvent(achunksection.getBlock(), achunksection);
+               this.getServer().getPluginManager().callEvent(chunksection);
+               if(!chunksection.isCancelled()) {
+                  achunksection.update(true);
+               }
             }
 
-            if(this.isRaining() && this.canSnowAt(var9 + var5, var11, var10 + var6)) {
-               this.setBlockWithNotify(var9 + var5, var11, var10 + var6, Block.snow.blockID);
+            if(this.isRaining() && this.canSnowAt(j1 + k, l1, k1 + l)) {
+               achunksection = this.getWorld().getBlockAt(j1 + k, l1, k1 + l).getState();
+               achunksection.setTypeId(Block.snow.blockID);
+               chunksection = new BlockFormEvent(achunksection.getBlock(), achunksection);
+               this.getServer().getPluginManager().callEvent(chunksection);
+               if(!chunksection.isCancelled()) {
+                  achunksection.update(true);
+               }
             }
 
             if(this.isRaining()) {
-               BiomeGenBase var12 = this.getBiomeGenForCoords(var9 + var5, var10 + var6);
-               if(var12.canSpawnLightningBolt()) {
-                  var13 = this.getBlockId(var9 + var5, var11 - 1, var10 + var6);
-                  if(var13 != 0) {
-                     Block.blocksList[var13].fillWithRain(this, var9 + var5, var11 - 1, var10 + var6);
+               BiomeGenBase var27 = this.getBiomeGenForCoords(j1 + k, k1 + l);
+               if(var27.canSpawnLightningBolt()) {
+                  i2 = this.getBlockId(j1 + k, l1 - 1, k1 + l);
+                  if(i2 != 0) {
+                     Block.blocksList[i2].fillWithRain(this, j1 + k, l1 - 1, k1 + l);
                   }
                }
             }
          }
 
          this.theProfiler.endStartSection("tickTiles");
-         ExtendedBlockStorage[] var19 = var7.getBlockStorageArray();
-         var9 = var19.length;
+         ExtendedBlockStorage[] var26 = chunk.getBlockStorageArray();
+         j1 = var26.length;
 
-         for(var10 = 0; var10 < var9; ++var10) {
-            ExtendedBlockStorage var21 = var19[var10];
-            if(var21 != null && var21.getNeedsRandomTick()) {
-               for(int var20 = 0; var20 < 3; ++var20) {
+         for(k1 = 0; k1 < j1; ++k1) {
+            ExtendedBlockStorage var28 = var26[k1];
+            if(var28 != null && var28.getNeedsRandomTick()) {
+               for(int j2 = 0; j2 < 3; ++j2) {
                   this.updateLCG = this.updateLCG * 3 + 1013904223;
-                  var13 = this.updateLCG >> 2;
-                  int var14 = var13 & 15;
-                  int var15 = var13 >> 8 & 15;
-                  int var16 = var13 >> 16 & 15;
-                  int var17 = var21.getExtBlockID(var14, var16, var15);
-                  ++var2;
-                  Block var18 = Block.blocksList[var17];
-                  if(var18 != null && var18.getTickRandomly()) {
-                     ++var1;
-                     var18.updateTick(this, var14 + var5, var16 + var21.getYLocation(), var15 + var6, this.rand);
+                  i2 = this.updateLCG >> 2;
+                  int k2 = i2 & 15;
+                  int l2 = i2 >> 8 & 15;
+                  int i3 = i2 >> 16 & 15;
+                  int j3 = var28.getExtBlockID(k2, i3, l2);
+                  ++j;
+                  Block block = Block.blocksList[j3];
+                  if(block != null && block.getTickRandomly()) {
+                     ++i;
+                     block.updateTick(this, k2 + k, i3 + var28.getYLocation(), l2 + l, this.rand);
                   }
                }
             }
@@ -296,64 +410,57 @@
 
    }
 
-   public void scheduleBlockUpdate(int var1, int var2, int var3, int var4, int var5) {
-      this.func_82740_a(var1, var2, var3, var4, var5, 0);
+   public void scheduleBlockUpdate(int i, int j, int k, int l, int i1) {
+      this.func_82740_a(i, j, k, l, i1, 0);
    }
 
-   public void func_82740_a(int var1, int var2, int var3, int var4, int var5, int var6) {
-      NextTickListEntry var7 = new NextTickListEntry(var1, var2, var3, var4);
-      byte var8 = 8;
-      if(this.scheduledUpdatesAreImmediate && var4 > 0) {
-         if(Block.blocksList[var4].func_82506_l()) {
-            if(this.checkChunksExist(var7.xCoord - var8, var7.yCoord - var8, var7.zCoord - var8, var7.xCoord + var8, var7.yCoord + var8, var7.zCoord + var8)) {
-               int var9 = this.getBlockId(var7.xCoord, var7.yCoord, var7.zCoord);
-               if(var9 == var7.blockID && var9 > 0) {
-                  Block.blocksList[var9].updateTick(this, var7.xCoord, var7.yCoord, var7.zCoord, this.rand);
+   public void func_82740_a(int i, int j, int k, int l, int i1, int j1) {
+      NextTickListEntry nextticklistentry = new NextTickListEntry(i, j, k, l);
+      byte b0 = 8;
+      if(this.scheduledUpdatesAreImmediate && l > 0) {
+         if(Block.blocksList[l].func_82506_l()) {
+            if(this.checkChunksExist(nextticklistentry.xCoord - b0, nextticklistentry.yCoord - b0, nextticklistentry.zCoord - b0, nextticklistentry.xCoord + b0, nextticklistentry.yCoord + b0, nextticklistentry.zCoord + b0)) {
+               int k1 = this.getBlockId(nextticklistentry.xCoord, nextticklistentry.yCoord, nextticklistentry.zCoord);
+               if(k1 == nextticklistentry.blockID && k1 > 0) {
+                  Block.blocksList[k1].updateTick(this, nextticklistentry.xCoord, nextticklistentry.yCoord, nextticklistentry.zCoord, this.rand);
                }
             }
 
             return;
          }
 
-         var5 = 1;
+         i1 = 1;
       }
 
-      if(this.checkChunksExist(var1 - var8, var2 - var8, var3 - var8, var1 + var8, var2 + var8, var3 + var8)) {
-         if(var4 > 0) {
-            var7.setScheduledTime((long)var5 + this.worldInfo.getWorldTotalTime());
-            var7.func_82753_a(var6);
+      if(this.checkChunksExist(i - b0, j - b0, k - b0, i + b0, j + b0, k + b0)) {
+         if(l > 0) {
+            nextticklistentry.setScheduledTime((long)i1 + this.worldInfo.getWorldTotalTime());
+            nextticklistentry.func_82753_a(j1);
          }
 
-         if(!this.field_73064_N.contains(var7)) {
-            this.field_73064_N.add(var7);
-            this.pendingTickListEntries.add(var7);
+         if(!this.field_73064_N.contains(nextticklistentry)) {
+            this.field_73064_N.add(nextticklistentry);
+            this.pendingTickListEntries.add(nextticklistentry);
          }
       }
 
    }
 
-   public void scheduleBlockUpdateFromLoad(int var1, int var2, int var3, int var4, int var5) {
-      NextTickListEntry var6 = new NextTickListEntry(var1, var2, var3, var4);
-      if(var4 > 0) {
-         var6.setScheduledTime((long)var5 + this.worldInfo.getWorldTotalTime());
+   public void scheduleBlockUpdateFromLoad(int i, int j, int k, int l, int i1) {
+      NextTickListEntry nextticklistentry = new NextTickListEntry(i, j, k, l);
+      if(l > 0) {
+         nextticklistentry.setScheduledTime((long)i1 + this.worldInfo.getWorldTotalTime());
       }
 
-      if(!this.field_73064_N.contains(var6)) {
-         this.field_73064_N.add(var6);
-         this.pendingTickListEntries.add(var6);
+      if(!this.field_73064_N.contains(nextticklistentry)) {
+         this.field_73064_N.add(nextticklistentry);
+         this.pendingTickListEntries.add(nextticklistentry);
       }
 
    }
 
    public void updateEntities() {
-      if(this.playerEntities.isEmpty()) {
-         if(this.updateEntityTick++ >= 1200) {
-            return;
-         }
-      } else {
-         this.resetUpdateEntityTick();
-      }
-
+      this.resetUpdateEntityTick();
       super.updateEntities();
    }
 
@@ -361,42 +468,46 @@
       this.updateEntityTick = 0;
    }
 
-   public boolean tickUpdates(boolean var1) {
-      int var2 = this.pendingTickListEntries.size();
-      if(var2 != this.field_73064_N.size()) {
+   public boolean tickUpdates(boolean flag) {
+      int i = this.pendingTickListEntries.size();
+      if(i != this.field_73064_N.size()) {
          throw new IllegalStateException("TickNextTick list out of synch");
       } else {
-         if(var2 > 1000) {
-            var2 = 1000;
+         if(i > 1000) {
+            if(i > 20000) {
+               i /= 20;
+            } else {
+               i = 1000;
+            }
          }
 
-         for(int var3 = 0; var3 < var2; ++var3) {
-            NextTickListEntry var4 = (NextTickListEntry)this.pendingTickListEntries.first();
-            if(!var1 && var4.scheduledTime > this.worldInfo.getWorldTotalTime()) {
+         for(int j = 0; j < i; ++j) {
+            NextTickListEntry nextticklistentry = (NextTickListEntry)this.pendingTickListEntries.first();
+            if(!flag && nextticklistentry.scheduledTime > this.worldInfo.getWorldTotalTime()) {
                break;
             }
 
-            this.pendingTickListEntries.remove(var4);
-            this.field_73064_N.remove(var4);
-            byte var5 = 8;
-            if(this.checkChunksExist(var4.xCoord - var5, var4.yCoord - var5, var4.zCoord - var5, var4.xCoord + var5, var4.yCoord + var5, var4.zCoord + var5)) {
-               int var6 = this.getBlockId(var4.xCoord, var4.yCoord, var4.zCoord);
-               if(var6 == var4.blockID && var6 > 0) {
+            this.pendingTickListEntries.remove(nextticklistentry);
+            this.field_73064_N.remove(nextticklistentry);
+            byte b0 = 8;
+            if(this.checkChunksExist(nextticklistentry.xCoord - b0, nextticklistentry.yCoord - b0, nextticklistentry.zCoord - b0, nextticklistentry.xCoord + b0, nextticklistentry.yCoord + b0, nextticklistentry.zCoord + b0)) {
+               int k = this.getBlockId(nextticklistentry.xCoord, nextticklistentry.yCoord, nextticklistentry.zCoord);
+               if(k == nextticklistentry.blockID && k > 0) {
                   try {
-                     Block.blocksList[var6].updateTick(this, var4.xCoord, var4.yCoord, var4.zCoord, this.rand);
+                     Block.blocksList[k].updateTick(this, nextticklistentry.xCoord, nextticklistentry.yCoord, nextticklistentry.zCoord, this.rand);
                   } catch (Throwable var13) {
-                     CrashReport var8 = CrashReport.func_85055_a(var13, "Exception while ticking a block");
-                     CrashReportCategory var9 = var8.func_85058_a("Block being ticked");
+                     CrashReport crashreport = CrashReport.func_85055_a(var13, "Exception while ticking a block");
+                     CrashReportCategory crashreportsystemdetails = crashreport.func_85058_a("Block being ticked");
 
-                     int var10;
+                     int l;
                      try {
-                        var10 = this.getBlockMetadata(var4.xCoord, var4.yCoord, var4.zCoord);
+                        l = this.getBlockMetadata(nextticklistentry.xCoord, nextticklistentry.yCoord, nextticklistentry.zCoord);
                      } catch (Throwable var12) {
-                        var10 = -1;
+                        l = -1;
                      }
 
-                     CrashReportCategory.func_85068_a(var9, var4.xCoord, var4.yCoord, var4.zCoord, var6, var10);
-                     throw new ReportedException(var8);
+                     CrashReportCategory.func_85068_a(crashreportsystemdetails, nextticklistentry.xCoord, nextticklistentry.yCoord, nextticklistentry.zCoord, k, l);
+                     throw new ReportedException(crashreport);
                   }
                }
             }
@@ -406,83 +517,91 @@
       }
    }
 
-   public List getPendingBlockUpdates(Chunk var1, boolean var2) {
-      ArrayList var3 = null;
-      ChunkCoordIntPair var4 = var1.getChunkCoordIntPair();
-      int var5 = var4.chunkXPos << 4;
-      int var6 = var5 + 16;
-      int var7 = var4.chunkZPos << 4;
-      int var8 = var7 + 16;
-      Iterator var9 = this.pendingTickListEntries.iterator();
+   public List getPendingBlockUpdates(Chunk chunk, boolean flag) {
+      ArrayList arraylist = null;
+      ChunkCoordIntPair chunkcoordintpair = chunk.getChunkCoordIntPair();
+      int i = chunkcoordintpair.chunkXPos << 4;
+      int j = i + 16;
+      int k = chunkcoordintpair.chunkZPos << 4;
+      int l = k + 16;
+      Iterator iterator = this.pendingTickListEntries.iterator();
 
-      while(var9.hasNext()) {
-         NextTickListEntry var10 = (NextTickListEntry)var9.next();
-         if(var10.xCoord >= var5 && var10.xCoord < var6 && var10.zCoord >= var7 && var10.zCoord < var8) {
-            if(var2) {
-               this.field_73064_N.remove(var10);
-               var9.remove();
+      while(iterator.hasNext()) {
+         NextTickListEntry nextticklistentry = (NextTickListEntry)iterator.next();
+         if(nextticklistentry.xCoord >= i && nextticklistentry.xCoord < j && nextticklistentry.zCoord >= k && nextticklistentry.zCoord < l) {
+            if(flag) {
+               this.field_73064_N.remove(nextticklistentry);
+               iterator.remove();
             }
 
-            if(var3 == null) {
-               var3 = new ArrayList();
+            if(arraylist == null) {
+               arraylist = new ArrayList();
             }
 
-            var3.add(var10);
+            arraylist.add(nextticklistentry);
          }
       }
 
-      return var3;
+      return arraylist;
    }
 
-   public void updateEntityWithOptionalForce(Entity var1, boolean var2) {
-      if(!this.mcServer.getCanSpawnAnimals() && (var1 instanceof EntityAnimal || var1 instanceof EntityWaterMob)) {
-         var1.setDead();
+   public void updateEntityWithOptionalForce(Entity entity, boolean flag) {
+      if(!this.mcServer.getCanSpawnNPCs() && entity instanceof INpc) {
+         entity.setDead();
       }
 
-      if(!this.mcServer.getCanSpawnNPCs() && var1 instanceof INpc) {
-         var1.setDead();
-      }
-
-      if(!(var1.riddenByEntity instanceof EntityPlayer)) {
-         super.updateEntityWithOptionalForce(var1, var2);
+      if(!(entity.riddenByEntity instanceof EntityPlayer)) {
+         super.updateEntityWithOptionalForce(entity, flag);
       }
 
    }
 
-   public void uncheckedUpdateEntity(Entity var1, boolean var2) {
-      super.updateEntityWithOptionalForce(var1, var2);
+   public void uncheckedUpdateEntity(Entity entity, boolean flag) {
+      super.updateEntityWithOptionalForce(entity, flag);
    }
 
    protected IChunkProvider createChunkProvider() {
-      IChunkLoader var1 = this.saveHandler.getChunkLoader(this.provider);
-      this.theChunkProviderServer = new ChunkProviderServer(this, var1, this.provider.createChunkGenerator());
+      IChunkLoader ichunkloader = this.saveHandler.getChunkLoader(this.provider);
+      Object gen;
+      if(this.generator != null) {
+         gen = new CustomChunkGenerator(this, this.getSeed(), this.generator);
+      } else if(this.provider instanceof WorldProviderHell) {
+         gen = new NetherChunkGenerator(this, this.getSeed());
+      } else if(this.provider instanceof WorldProviderEnd) {
+         gen = new SkyLandsChunkGenerator(this, this.getSeed());
+      } else {
+         gen = new NormalChunkGenerator(this, this.getSeed());
+      }
+
+      this.theChunkProviderServer = new ChunkProviderServer(this, ichunkloader, (IChunkProvider)gen);
       return this.theChunkProviderServer;
    }
 
-   public List getTileEntityList(int var1, int var2, int var3, int var4, int var5, int var6) {
-      ArrayList var7 = new ArrayList();
+   public List getTileEntityList(int i, int j, int k, int l, int i1, int j1) {
+      ArrayList arraylist = new ArrayList();
+      Iterator iterator = this.loadedTileEntityList.iterator();
 
-      for(int var8 = 0; var8 < this.loadedTileEntityList.size(); ++var8) {
-         TileEntity var9 = (TileEntity)this.loadedTileEntityList.get(var8);
-         if(var9.xCoord >= var1 && var9.yCoord >= var2 && var9.zCoord >= var3 && var9.xCoord < var4 && var9.yCoord < var5 && var9.zCoord < var6) {
-            var7.add(var9);
+      while(iterator.hasNext()) {
+         TileEntity tileentity = (TileEntity)iterator.next();
+         if(tileentity.xCoord >= i && tileentity.yCoord >= j && tileentity.zCoord >= k && tileentity.xCoord < l && tileentity.yCoord < i1 && tileentity.zCoord < j1) {
+            arraylist.add(tileentity);
          }
       }
 
-      return var7;
+      return arraylist;
    }
 
-   public boolean canMineBlock(EntityPlayer var1, int var2, int var3, int var4) {
-      int var5 = MathHelper.abs(var2 - this.worldInfo.getSpawnX());
-      int var6 = MathHelper.abs(var4 - this.worldInfo.getSpawnZ());
-      if(var5 > var6) {
-         var6 = var5;
+   public boolean canMineBlock(EntityPlayer entityhuman, int i, int j, int k) {
+      int l = MathHelper.abs(i - this.worldInfo.getSpawnX());
+      int i1 = MathHelper.abs(k - this.worldInfo.getSpawnZ());
+      if(l > i1) {
+         i1 = l;
       }
 
-      return var6 > 16 || this.mcServer.getConfigurationManager().areCommandsAllowed(var1.username) || this.mcServer.isSinglePlayer();
+      return i1 > this.getServer().getSpawnRadius() || this.mcServer.getConfigurationManager().areCommandsAllowed(entityhuman.username) || this.mcServer.isSinglePlayer();
    }
 
-   protected void initialize(WorldSettings var1) {
+   protected void initialize(WorldSettings worldsettings) {
       if(this.entityIdMap == null) {
          this.entityIdMap = new IntHashMap();
       }
@@ -495,57 +614,71 @@
          this.pendingTickListEntries = new TreeSet();
       }
 
-      this.createSpawnPosition(var1);
-      super.initialize(var1);
+      this.createSpawnPosition(worldsettings);
+      super.initialize(worldsettings);
    }
 
-   protected void createSpawnPosition(WorldSettings var1) {
+   protected void createSpawnPosition(WorldSettings worldsettings) {
       if(!this.provider.canRespawnHere()) {
          this.worldInfo.setSpawnPosition(0, this.provider.getAverageGroundLevel(), 0);
       } else {
          this.findingSpawnPoint = true;
-         WorldChunkManager var2 = this.provider.worldChunkMgr;
-         List var3 = var2.getBiomesToSpawnIn();
-         Random var4 = new Random(this.getSeed());
-         ChunkPosition var5 = var2.findBiomePosition(0, 0, 256, var3, var4);
-         int var6 = 0;
-         int var7 = this.provider.getAverageGroundLevel();
-         int var8 = 0;
-         if(var5 != null) {
-            var6 = var5.x;
-            var8 = var5.z;
+         WorldChunkManager worldchunkmanager = this.provider.worldChunkMgr;
+         List list = worldchunkmanager.getBiomesToSpawnIn();
+         Random random = new Random(this.getSeed());
+         ChunkPosition chunkposition = worldchunkmanager.findBiomePosition(0, 0, 256, list, random);
+         int i = 0;
+         int j = this.provider.getAverageGroundLevel();
+         int k = 0;
+         if(this.generator != null) {
+            Random l = new Random(this.getSeed());
+            Location spawn = this.generator.getFixedSpawnLocation(this.getWorld(), l);
+            if(spawn != null) {
+               if(spawn.getWorld() != this.getWorld()) {
+                  throw new IllegalStateException("Cannot set spawn point for " + this.worldInfo.getWorldName() + " to be in another world (" + spawn.getWorld().getName() + ")");
+               }
+
+               this.worldInfo.setSpawnPosition(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ());
+               this.findingSpawnPoint = false;
+               return;
+            }
+         }
+
+         if(chunkposition != null) {
+            i = chunkposition.x;
+            k = chunkposition.z;
          } else {
             System.out.println("Unable to find spawn biome");
          }
 
-         int var9 = 0;
+         int var11 = 0;
 
-         while(!this.provider.canCoordinateBeSpawn(var6, var8)) {
-            var6 += var4.nextInt(64) - var4.nextInt(64);
-            var8 += var4.nextInt(64) - var4.nextInt(64);
-            ++var9;
-            if(var9 == 1000) {
+         while(!this.canSpawn(i, k)) {
+            i += random.nextInt(64) - random.nextInt(64);
+            k += random.nextInt(64) - random.nextInt(64);
+            ++var11;
+            if(var11 == 1000) {
                break;
             }
          }
 
-         this.worldInfo.setSpawnPosition(var6, var7, var8);
+         this.worldInfo.setSpawnPosition(i, j, k);
          this.findingSpawnPoint = false;
-         if(var1.isBonusChestEnabled()) {
+         if(worldsettings.isBonusChestEnabled()) {
             this.createBonusChest();
          }
-
       }
+
    }
 
    protected void createBonusChest() {
-      WorldGeneratorBonusChest var1 = new WorldGeneratorBonusChest(bonusChestContent, 10);
+      WorldGeneratorBonusChest worldgenbonuschest = new WorldGeneratorBonusChest(bonusChestContent, 10);
 
-      for(int var2 = 0; var2 < 10; ++var2) {
-         int var3 = this.worldInfo.getSpawnX() + this.rand.nextInt(6) - this.rand.nextInt(6);
-         int var4 = this.worldInfo.getSpawnZ() + this.rand.nextInt(6) - this.rand.nextInt(6);
-         int var5 = this.getTopSolidOrLiquidBlock(var3, var4) + 1;
-         if(var1.generate(this, this.rand, var3, var5, var4)) {
+      for(int i = 0; i < 10; ++i) {
+         int j = this.worldInfo.getSpawnX() + this.rand.nextInt(6) - this.rand.nextInt(6);
+         int k = this.worldInfo.getSpawnZ() + this.rand.nextInt(6) - this.rand.nextInt(6);
+         int l = this.getTopSolidOrLiquidBlock(j, k) + 1;
+         if(worldgenbonuschest.generate(this, this.rand, j, l, k)) {
             break;
          }
       }
@@ -556,129 +689,132 @@
       return this.provider.getEntrancePortalLocation();
    }
 
-   public void saveAllChunks(boolean var1, IProgressUpdate var2) {
+   public void saveAllChunks(boolean flag, IProgressUpdate iprogressupdate) throws MinecraftException {
       if(this.chunkProvider.canSave()) {
-         if(var2 != null) {
-            var2.displaySavingString("Saving level");
+         if(iprogressupdate != null) {
+            iprogressupdate.displaySavingString("Saving level");
          }
 
          this.saveLevel();
-         if(var2 != null) {
-            var2.displayLoadingString("Saving chunks");
+         if(iprogressupdate != null) {
+            iprogressupdate.displayLoadingString("Saving chunks");
          }
 
-         this.chunkProvider.saveChunks(var1, var2);
+         this.chunkProvider.saveChunks(flag, iprogressupdate);
       }
+
    }
 
-   protected void saveLevel() {
+   protected void saveLevel() throws MinecraftException {
       this.checkSessionLock();
       this.saveHandler.saveWorldInfoWithPlayer(this.worldInfo, this.mcServer.getConfigurationManager().getTagsFromLastWrite());
       this.mapStorage.saveAllData();
    }
 
-   protected void obtainEntitySkin(Entity var1) {
-      super.obtainEntitySkin(var1);
-      this.entityIdMap.addKey(var1.entityId, var1);
-      Entity[] var2 = var1.getParts();
-      if(var2 != null) {
-         for(int var3 = 0; var3 < var2.length; ++var3) {
-            this.entityIdMap.addKey(var2[var3].entityId, var2[var3]);
+   protected void obtainEntitySkin(Entity entity) {
+      super.obtainEntitySkin(entity);
+      this.entityIdMap.addKey(entity.entityId, entity);
+      Entity[] aentity = entity.getParts();
+      if(aentity != null) {
+         for(int i = 0; i < aentity.length; ++i) {
+            this.entityIdMap.addKey(aentity[i].entityId, aentity[i]);
          }
       }
 
    }
 
-   protected void releaseEntitySkin(Entity var1) {
-      super.releaseEntitySkin(var1);
-      this.entityIdMap.removeObject(var1.entityId);
-      Entity[] var2 = var1.getParts();
-      if(var2 != null) {
-         for(int var3 = 0; var3 < var2.length; ++var3) {
-            this.entityIdMap.removeObject(var2[var3].entityId);
+   protected void releaseEntitySkin(Entity entity) {
+      super.releaseEntitySkin(entity);
+      this.entityIdMap.removeObject(entity.entityId);
+      Entity[] aentity = entity.getParts();
+      if(aentity != null) {
+         for(int i = 0; i < aentity.length; ++i) {
+            this.entityIdMap.removeObject(aentity[i].entityId);
          }
       }
 
    }
 
-   public Entity getEntityByID(int var1) {
-      return (Entity)this.entityIdMap.lookup(var1);
+   public Entity getEntityByID(int i) {
+      return (Entity)this.entityIdMap.lookup(i);
    }
 
-   public boolean addWeatherEffect(Entity var1) {
-      if(super.addWeatherEffect(var1)) {
-         this.mcServer.getConfigurationManager().sendPacketToPlayersAroundPoint(var1.posX, var1.posY, var1.posZ, 512.0D, this.provider.dimensionId, new Packet71Weather(var1));
+   public boolean addWeatherEffect(Entity entity) {
+      LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (LightningStrike)entity.getBukkitEntity());
+      this.getServer().getPluginManager().callEvent(lightning);
+      if(lightning.isCancelled()) {
+         return false;
+      } else if(super.addWeatherEffect(entity)) {
+         this.mcServer.getConfigurationManager().sendPacketToPlayersAroundPoint(entity.posX, entity.posY, entity.posZ, 512.0D, this.dimension, new Packet71Weather(entity));
          return true;
       } else {
          return false;
       }
    }
 
-   public void setEntityState(Entity var1, byte var2) {
-      Packet38EntityStatus var3 = new Packet38EntityStatus(var1.entityId, var2);
-      this.getEntityTracker().sendPacketToTrackedPlayersAndTrackedEntity(var1, var3);
+   public void setEntityState(Entity entity, byte b0) {
+      Packet38EntityStatus packet38entitystatus = new Packet38EntityStatus(entity.entityId, b0);
+      this.getEntityTracker().sendPacketToTrackedPlayersAndTrackedEntity(entity, packet38entitystatus);
    }
 
-   public Explosion newExplosion(Entity var1, double var2, double var4, double var6, float var8, boolean var9, boolean var10) {
-      Explosion var11 = new Explosion(this, var1, var2, var4, var6, var8);
-      var11.isFlaming = var9;
-      var11.isSmoking = var10;
-      var11.doExplosionA();
-      var11.doExplosionB(false);
-      if(!var10) {
-         var11.affectedBlockPositions.clear();
-      }
+   public Explosion newExplosion(Entity entity, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
+      Explosion explosion = super.newExplosion(entity, d0, d1, d2, f, flag, flag1);
+      if(explosion.wasCanceled) {
+         return explosion;
+      } else {
+         if(!flag1) {
+            explosion.affectedBlockPositions.clear();
+         }
 
-      Iterator var12 = this.playerEntities.iterator();
+         Iterator iterator = this.playerEntities.iterator();
 
-      while(var12.hasNext()) {
-         EntityPlayer var13 = (EntityPlayer)var12.next();
-         if(var13.getDistanceSq(var2, var4, var6) < 4096.0D) {
-            ((EntityPlayerMP)var13).playerNetServerHandler.sendPacket(new Packet60Explosion(var2, var4, var6, var8, var11.affectedBlockPositions, (Vec3)var11.func_77277_b().get(var13)));
+         while(iterator.hasNext()) {
+            EntityPlayer entityhuman = (EntityPlayer)iterator.next();
+            if(entityhuman.getDistanceSq(d0, d1, d2) < 4096.0D) {
+               ((EntityPlayerMP)entityhuman).playerNetServerHandler.sendPacket(new Packet60Explosion(d0, d1, d2, f, explosion.affectedBlockPositions, (Vec3)explosion.func_77277_b().get(entityhuman)));
+            }
          }
-      }
 
-      return var11;
+         return explosion;
+      }
    }
 
-   public void addBlockEvent(int var1, int var2, int var3, int var4, int var5, int var6) {
-      BlockEventData var7 = new BlockEventData(var1, var2, var3, var4, var5, var6);
-      Iterator var8 = this.blockEventCache[this.blockEventCacheIndex].iterator();
+   public void addBlockEvent(int i, int j, int k, int l, int i1, int j1) {
+      BlockEventData noteblockdata = new BlockEventData(i, j, k, l, i1, j1);
+      Iterator iterator = this.blockEventCache[this.blockEventCacheIndex].iterator();
 
-      BlockEventData var9;
-      do {
-         if(!var8.hasNext()) {
-            this.blockEventCache[this.blockEventCacheIndex].add(var7);
+      while(iterator.hasNext()) {
+         BlockEventData noteblockdata1 = (BlockEventData)iterator.next();
+         if(noteblockdata1.equals(noteblockdata)) {
             return;
          }
+      }
 
-         var9 = (BlockEventData)var8.next();
-      } while(!var9.equals(var7));
-
+      this.blockEventCache[this.blockEventCacheIndex].add(noteblockdata);
    }
 
    private void sendAndApplyBlockEvents() {
       while(!this.blockEventCache[this.blockEventCacheIndex].isEmpty()) {
-         int var1 = this.blockEventCacheIndex;
+         int i = this.blockEventCacheIndex;
          this.blockEventCacheIndex ^= 1;
-         Iterator var2 = this.blockEventCache[var1].iterator();
+         Iterator iterator = this.blockEventCache[i].iterator();
 
-         while(var2.hasNext()) {
-            BlockEventData var3 = (BlockEventData)var2.next();
-            if(this.onBlockEventReceived(var3)) {
-               this.mcServer.getConfigurationManager().sendPacketToPlayersAroundPoint((double)var3.getX(), (double)var3.getY(), (double)var3.getZ(), 64.0D, this.provider.dimensionId, new Packet54PlayNoteBlock(var3.getX(), var3.getY(), var3.getZ(), var3.getBlockID(), var3.getEventID(), var3.getEventParameter()));
+         while(iterator.hasNext()) {
+            BlockEventData noteblockdata = (BlockEventData)iterator.next();
+            if(this.onBlockEventReceived(noteblockdata)) {
+               this.mcServer.getConfigurationManager().sendPacketToPlayersAroundPoint((double)noteblockdata.getX(), (double)noteblockdata.getY(), (double)noteblockdata.getZ(), 64.0D, this.dimension, new Packet54PlayNoteBlock(noteblockdata.getX(), noteblockdata.getY(), noteblockdata.getZ(), noteblockdata.getBlockID(), noteblockdata.getEventID(), noteblockdata.getEventParameter()));
             }
          }
 
-         this.blockEventCache[var1].clear();
+         this.blockEventCache[i].clear();
       }
 
    }
 
-   private boolean onBlockEventReceived(BlockEventData var1) {
-      int var2 = this.getBlockId(var1.getX(), var1.getY(), var1.getZ());
-      if(var2 == var1.getBlockID()) {
-         Block.blocksList[var2].onBlockEventReceived(this, var1.getX(), var1.getY(), var1.getZ(), var1.getEventID(), var1.getEventParameter());
+   private boolean onBlockEventReceived(BlockEventData noteblockdata) {
+      int i = this.getBlockId(noteblockdata.getX(), noteblockdata.getY(), noteblockdata.getZ());
+      if(i == noteblockdata.getBlockID()) {
+         Block.blocksList[i].onBlockEventReceived(this, noteblockdata.getX(), noteblockdata.getY(), noteblockdata.getZ(), noteblockdata.getEventID(), noteblockdata.getEventParameter());
          return true;
       } else {
          return false;
@@ -690,13 +826,13 @@
    }
 
    protected void updateWeather() {
-      boolean var1 = this.isRaining();
+      boolean flag = this.isRaining();
       super.updateWeather();
-      if(var1 != this.isRaining()) {
-         if(var1) {
-            this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new Packet70GameEvent(2, 0));
-         } else {
-            this.mcServer.getConfigurationManager().sendPacketToAllPlayers(new Packet70GameEvent(1, 0));
+      if(flag != this.isRaining()) {
+         for(int i = 0; i < this.playerEntities.size(); ++i) {
+            if(((EntityPlayerMP)this.playerEntities.get(i)).worldObj == this) {
+               ((EntityPlayerMP)this.playerEntities.get(i)).playerNetServerHandler.sendPacket(new Packet70GameEvent(flag?2:1, 0));
+            }
          }
       }
 
Binary files mcp-mcdev/net/minecraft/src/WorldServerMulti.class and mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldServerMulti.class differ
diff -ur mcp-mcdev/net/minecraft/src/WorldServerMulti.java mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldServerMulti.java
--- mcp-mcdev/net/minecraft/src/WorldServerMulti.java	2012-11-29 21:13:51.000000000 -0800
+++ mcp-craftbukkit-1.4.2-R0.2/net/minecraft/src/WorldServerMulti.java	2012-11-29 20:42:53.000000000 -0800
@@ -1,19 +1,17 @@
 package net.minecraft.src;
 
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.src.DerivedWorldInfo;
 import net.minecraft.src.ISaveHandler;
 import net.minecraft.src.Profiler;
 import net.minecraft.src.WorldServer;
 import net.minecraft.src.WorldSettings;
+import org.bukkit.World.Environment;
+import org.bukkit.generator.ChunkGenerator;
 
 public class WorldServerMulti extends WorldServer {
 
-   public WorldServerMulti(MinecraftServer var1, ISaveHandler var2, String var3, int var4, WorldSettings var5, WorldServer var6, Profiler var7) {
-      super(var1, var2, var3, var4, var5, var7);
-      this.mapStorage = var6.mapStorage;
-      this.worldInfo = new DerivedWorldInfo(var6.getWorldInfo());
+   public WorldServerMulti(MinecraftServer minecraftserver, ISaveHandler idatamanager, String s, int i, WorldSettings worldsettings, WorldServer worldserver, Profiler methodprofiler, Environment env, ChunkGenerator gen) {
+      super(minecraftserver, idatamanager, s, i, worldsettings, methodprofiler, env, gen);
+      this.mapStorage = worldserver.mapStorage;
    }
-
-   protected void saveLevel() {}
 }
