From 695b080197bd577cc34fe6dbc72b74f4a74b2d5c Mon Sep 17 00:00:00 2001
From: Christian <cpw@weeksfamily.ca>
Date: Sat, 26 Jan 2013 10:24:48 -0500
Subject: [PATCH] Fix NPE causing issue with the cache. Derpy derp.


diff --git a/common/net/minecraftforge/common/ForgeChunkManager.java b/common/net/minecraftforge/common/ForgeChunkManager.java
index 57274c8..4794f53 100644
--- a/common/net/minecraftforge/common/ForgeChunkManager.java
+++ b/common/net/minecraftforge/common/ForgeChunkManager.java
@@ -880,6 +880,10 @@ public class ForgeChunkManager
     public static Chunk fetchDormantChunk(long coords, World world)
     {
         Cache<Long, Chunk> cache = dormantChunkCache.get(world);
+        if (cache == null)
+        {
+            return null;
+        }
         Chunk chunk = cache.getIfPresent(coords);
         if (chunk != null)
         {
diff --git a/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java b/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java
index 2986d64..b5133e8 100644
--- a/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java
+++ b/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java
@@ -55,16 +55,16 @@ public class RConThreadClient extends RConThreadBase
                 BufferedInputStream var1 = new BufferedInputStream(this.clientSocket.getInputStream());
                 int var2 = var1.read(this.buffer, 0, 1460);
 
-                if (10 <= var2)
+                if (10 > var2)
                 {
-                    byte var3 = 0;
-                    int var4 = RConUtils.getBytesAsLEInt(this.buffer, 0, var2);
+                    return;
+                }
 
-                    if (var4 != var2 - 4)
-                    {
-                        return;
-                    }
+                byte var3 = 0;
+                int var4 = RConUtils.getBytesAsLEInt(this.buffer, 0, var2);
 
+                if (var4 == var2 - 4)
+                {
                     int var21 = var3 + 4;
                     int var5 = RConUtils.getBytesAsLEInt(this.buffer, var21, var2);
                     var21 += 4;
diff --git a/src/minecraft/net/minecraft/util/HttpUtilRunnable.java b/src/minecraft/net/minecraft/util/HttpUtilRunnable.java
index f70a39c..35de5c3 100644
--- a/src/minecraft/net/minecraft/util/HttpUtilRunnable.java
+++ b/src/minecraft/net/minecraft/util/HttpUtilRunnable.java
@@ -52,101 +52,105 @@ final class HttpUtilRunnable implements Runnable
 
         try
         {
-            byte[] var4 = new byte[4096];
-            URL var5 = new URL(this.sourceURL);
-            var1 = var5.openConnection();
-            float var6 = 0.0F;
-            float var7 = (float)this.field_76177_c.entrySet().size();
-            Iterator var8 = this.field_76177_c.entrySet().iterator();
-
-            while (var8.hasNext())
-            {
-                Entry var9 = (Entry)var8.next();
-                var1.setRequestProperty((String)var9.getKey(), (String)var9.getValue());
-
-                if (this.feedbackHook != null)
-                {
-                    this.feedbackHook.setLoadingProgress((int)(++var6 / var7 * 100.0F));
-                }
-            }
-
-            var2 = var1.getInputStream();
-            var7 = (float)var1.getContentLength();
-            int var28 = var1.getContentLength();
-
-            if (this.feedbackHook != null)
-            {
-                this.feedbackHook.resetProgresAndWorkingMessage(String.format("Downloading file (%.2f MB)...", new Object[] {Float.valueOf(var7 / 1000.0F / 1000.0F)}));
-            }
-
-            if (this.destinationFile.exists())
+            try
             {
-                long var29 = this.destinationFile.length();
-
-                if (var29 == (long)var28)
+                byte[] var4 = new byte[4096];
+                URL var5 = new URL(this.sourceURL);
+                var1 = var5.openConnection();
+                float var6 = 0.0F;
+                float var7 = (float)this.field_76177_c.entrySet().size();
+                Iterator var8 = this.field_76177_c.entrySet().iterator();
+
+                while (var8.hasNext())
                 {
-                    this.downloadSuccess.onSuccess(this.destinationFile);
+                    Entry var9 = (Entry)var8.next();
+                    var1.setRequestProperty((String)var9.getKey(), (String)var9.getValue());
 
                     if (this.feedbackHook != null)
                     {
-                        this.feedbackHook.onNoMoreProgress();
+                        this.feedbackHook.setLoadingProgress((int)(++var6 / var7 * 100.0F));
                     }
-
-                    return;
                 }
 
-                System.out.println("Deleting " + this.destinationFile + " as it does not match what we currently have (" + var28 + " vs our " + var29 + ").");
-                this.destinationFile.delete();
-            }
-
-            var3 = new DataOutputStream(new FileOutputStream(this.destinationFile));
+                var2 = var1.getInputStream();
+                var7 = (float)var1.getContentLength();
+                int var28 = var1.getContentLength();
 
-            if (this.field_76173_f > 0 && var7 > (float)this.field_76173_f)
-            {
                 if (this.feedbackHook != null)
                 {
-                    this.feedbackHook.onNoMoreProgress();
+                    this.feedbackHook.resetProgresAndWorkingMessage(String.format("Downloading file (%.2f MB)...", new Object[] {Float.valueOf(var7 / 1000.0F / 1000.0F)}));
                 }
 
-                throw new IOException("Filesize is bigger than maximum allowed (file is " + var6 + ", limit is " + this.field_76173_f + ")");
-            }
+                if (this.destinationFile.exists())
+                {
+                    long var29 = this.destinationFile.length();
 
-            boolean var31 = false;
-            int var30;
+                    if (var29 == (long)var28)
+                    {
+                        this.downloadSuccess.onSuccess(this.destinationFile);
 
-            while ((var30 = var2.read(var4)) >= 0)
-            {
-                var6 += (float)var30;
+                        if (this.feedbackHook != null)
+                        {
+                            this.feedbackHook.onNoMoreProgress();
+                        }
 
-                if (this.feedbackHook != null)
-                {
-                    this.feedbackHook.setLoadingProgress((int)(var6 / var7 * 100.0F));
+                        return;
+                    }
+
+                    System.out.println("Deleting " + this.destinationFile + " as it does not match what we currently have (" + var28 + " vs our " + var29 + ").");
+                    this.destinationFile.delete();
                 }
 
-                if (this.field_76173_f > 0 && var6 > (float)this.field_76173_f)
+                var3 = new DataOutputStream(new FileOutputStream(this.destinationFile));
+
+                if (this.field_76173_f > 0 && var7 > (float)this.field_76173_f)
                 {
                     if (this.feedbackHook != null)
                     {
                         this.feedbackHook.onNoMoreProgress();
                     }
 
-                    throw new IOException("Filesize was bigger than maximum allowed (got >= " + var6 + ", limit was " + this.field_76173_f + ")");
+                    throw new IOException("Filesize is bigger than maximum allowed (file is " + var6 + ", limit is " + this.field_76173_f + ")");
                 }
 
-                var3.write(var4, 0, var30);
-            }
+                boolean var31 = false;
+                int var30;
 
-            this.downloadSuccess.onSuccess(this.destinationFile);
+                while ((var30 = var2.read(var4)) >= 0)
+                {
+                    var6 += (float)var30;
 
-            if (this.feedbackHook != null)
+                    if (this.feedbackHook != null)
+                    {
+                        this.feedbackHook.setLoadingProgress((int)(var6 / var7 * 100.0F));
+                    }
+
+                    if (this.field_76173_f > 0 && var6 > (float)this.field_76173_f)
+                    {
+                        if (this.feedbackHook != null)
+                        {
+                            this.feedbackHook.onNoMoreProgress();
+                        }
+
+                        throw new IOException("Filesize was bigger than maximum allowed (got >= " + var6 + ", limit was " + this.field_76173_f + ")");
+                    }
+
+                    var3.write(var4, 0, var30);
+                }
+
+                this.downloadSuccess.onSuccess(this.destinationFile);
+
+                if (this.feedbackHook != null)
+                {
+                    this.feedbackHook.onNoMoreProgress();
+                    return;
+                }
+            }
+            catch (Throwable var26)
             {
-                this.feedbackHook.onNoMoreProgress();
+                var26.printStackTrace();
             }
         }
-        catch (Throwable var26)
-        {
-            var26.printStackTrace();
-        }
         finally
         {
             try
diff --git a/src/minecraft/net/minecraft/world/World.java b/src/minecraft/net/minecraft/world/World.java
index 3250f5c..4ccdc24 100644
--- a/src/minecraft/net/minecraft/world/World.java
+++ b/src/minecraft/net/minecraft/world/World.java
@@ -2037,9 +2037,9 @@ public abstract class World implements IBlockAccess
                 ++var2.ticksExisted;
                 var2.onUpdate();
             }
-            catch (Throwable var8)
+            catch (Throwable var7)
             {
-                var4 = CrashReport.makeCrashReport(var8, "Ticking entity");
+                var4 = CrashReport.makeCrashReport(var7, "Ticking entity");
                 var5 = var4.makeCategory("Entity being ticked");
 
                 if (var2 == null)
@@ -2108,9 +2108,9 @@ public abstract class World implements IBlockAccess
                 {
                     this.updateEntity(var2);
                 }
-                catch (Throwable var6)
+                catch (Throwable var8)
                 {
-                    var4 = CrashReport.makeCrashReport(var6, "Ticking entity");
+                    var4 = CrashReport.makeCrashReport(var8, "Ticking entity");
                     var5 = var4.makeCategory("Entity being ticked");
 
                     if (var2 == null)
@@ -2152,9 +2152,9 @@ public abstract class World implements IBlockAccess
                 {
                     var9.updateEntity();
                 }
-                catch (Throwable var7)
+                catch (Throwable var6)
                 {
-                    var4 = CrashReport.makeCrashReport(var7, "Ticking tile entity");
+                    var4 = CrashReport.makeCrashReport(var6, "Ticking tile entity");
                     var5 = var4.makeCategory("Tile entity being ticked");
 
                     if (var9 == null)
diff --git a/src/minecraft/net/minecraftforge/common/ForgeChunkManager.java b/src/minecraft/net/minecraftforge/common/ForgeChunkManager.java
index 57274c8..4794f53 100644
--- a/src/minecraft/net/minecraftforge/common/ForgeChunkManager.java
+++ b/src/minecraft/net/minecraftforge/common/ForgeChunkManager.java
@@ -880,6 +880,10 @@ public class ForgeChunkManager
     public static Chunk fetchDormantChunk(long coords, World world)
     {
         Cache<Long, Chunk> cache = dormantChunkCache.get(world);
+        if (cache == null)
+        {
+            return null;
+        }
         Chunk chunk = cache.getIfPresent(coords);
         if (chunk != null)
         {
