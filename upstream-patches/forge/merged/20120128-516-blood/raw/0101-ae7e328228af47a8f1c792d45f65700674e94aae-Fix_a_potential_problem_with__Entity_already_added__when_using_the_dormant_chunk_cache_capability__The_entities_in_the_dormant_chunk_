From ae7e328228af47a8f1c792d45f65700674e94aae Mon Sep 17 00:00:00 2001
From: Christian <cpw@weeksfamily.ca>
Date: Fri, 25 Jan 2013 21:21:20 -0500
Subject: [PATCH] Fix a potential problem with "Entity already added" when using the dormant
 chunk cache capability. The entities in the dormant chunk cache will get new
 IDs prior to the cached chunk returning.


diff --git a/common/net/minecraftforge/common/ForgeChunkManager.java b/common/net/minecraftforge/common/ForgeChunkManager.java
index 5145c2c..57274c8 100644
--- a/common/net/minecraftforge/common/ForgeChunkManager.java
+++ b/common/net/minecraftforge/common/ForgeChunkManager.java
@@ -880,7 +880,18 @@ public class ForgeChunkManager
     public static Chunk fetchDormantChunk(long coords, World world)
     {
         Cache<Long, Chunk> cache = dormantChunkCache.get(world);
-        return cache == null ? null : cache.getIfPresent(coords);
+        Chunk chunk = cache.getIfPresent(coords);
+        if (chunk != null)
+        {
+            for (List<Entity> eList : chunk.entityLists)
+            {
+                for (Entity e: eList)
+                {
+                    e.resetEntityId();
+                }
+            }
+        }
+        return chunk;
     }
 
     static void captureConfig(File configDir)
diff --git a/src/minecraft/net/minecraft/entity/Entity.java b/src/minecraft/net/minecraft/entity/Entity.java
index 4add362..4a7ee77 100644
--- a/src/minecraft/net/minecraft/entity/Entity.java
+++ b/src/minecraft/net/minecraft/entity/Entity.java
@@ -2521,4 +2521,12 @@ public abstract class Entity
             persistentID = UUID.randomUUID();
         }
     }
+
+    /**
+     * Reset the entity ID to a new value. Not to be used from Mod code
+     */
+    public final void resetEntityId()
+    {
+        this.entityId = nextEntityID++;
+    }
 }
diff --git a/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java b/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java
index b5133e8..2986d64 100644
--- a/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java
+++ b/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java
@@ -55,16 +55,16 @@ public class RConThreadClient extends RConThreadBase
                 BufferedInputStream var1 = new BufferedInputStream(this.clientSocket.getInputStream());
                 int var2 = var1.read(this.buffer, 0, 1460);
 
-                if (10 > var2)
+                if (10 <= var2)
                 {
-                    return;
-                }
+                    byte var3 = 0;
+                    int var4 = RConUtils.getBytesAsLEInt(this.buffer, 0, var2);
 
-                byte var3 = 0;
-                int var4 = RConUtils.getBytesAsLEInt(this.buffer, 0, var2);
+                    if (var4 != var2 - 4)
+                    {
+                        return;
+                    }
 
-                if (var4 == var2 - 4)
-                {
                     int var21 = var3 + 4;
                     int var5 = RConUtils.getBytesAsLEInt(this.buffer, var21, var2);
                     var21 += 4;
diff --git a/src/minecraft/net/minecraft/world/World.java b/src/minecraft/net/minecraft/world/World.java
index 4ccdc24..3250f5c 100644
--- a/src/minecraft/net/minecraft/world/World.java
+++ b/src/minecraft/net/minecraft/world/World.java
@@ -2037,9 +2037,9 @@ public abstract class World implements IBlockAccess
                 ++var2.ticksExisted;
                 var2.onUpdate();
             }
-            catch (Throwable var7)
+            catch (Throwable var8)
             {
-                var4 = CrashReport.makeCrashReport(var7, "Ticking entity");
+                var4 = CrashReport.makeCrashReport(var8, "Ticking entity");
                 var5 = var4.makeCategory("Entity being ticked");
 
                 if (var2 == null)
@@ -2108,9 +2108,9 @@ public abstract class World implements IBlockAccess
                 {
                     this.updateEntity(var2);
                 }
-                catch (Throwable var8)
+                catch (Throwable var6)
                 {
-                    var4 = CrashReport.makeCrashReport(var8, "Ticking entity");
+                    var4 = CrashReport.makeCrashReport(var6, "Ticking entity");
                     var5 = var4.makeCategory("Entity being ticked");
 
                     if (var2 == null)
@@ -2152,9 +2152,9 @@ public abstract class World implements IBlockAccess
                 {
                     var9.updateEntity();
                 }
-                catch (Throwable var6)
+                catch (Throwable var7)
                 {
-                    var4 = CrashReport.makeCrashReport(var6, "Ticking tile entity");
+                    var4 = CrashReport.makeCrashReport(var7, "Ticking tile entity");
                     var5 = var4.makeCategory("Tile entity being ticked");
 
                     if (var9 == null)
diff --git a/src/minecraft/net/minecraftforge/common/ForgeChunkManager.java b/src/minecraft/net/minecraftforge/common/ForgeChunkManager.java
index 5145c2c..57274c8 100644
--- a/src/minecraft/net/minecraftforge/common/ForgeChunkManager.java
+++ b/src/minecraft/net/minecraftforge/common/ForgeChunkManager.java
@@ -880,7 +880,18 @@ public class ForgeChunkManager
     public static Chunk fetchDormantChunk(long coords, World world)
     {
         Cache<Long, Chunk> cache = dormantChunkCache.get(world);
-        return cache == null ? null : cache.getIfPresent(coords);
+        Chunk chunk = cache.getIfPresent(coords);
+        if (chunk != null)
+        {
+            for (List<Entity> eList : chunk.entityLists)
+            {
+                for (Entity e: eList)
+                {
+                    e.resetEntityId();
+                }
+            }
+        }
+        return chunk;
     }
 
     static void captureConfig(File configDir)
diff --git a/patches/minecraft/net/minecraft/entity/Entity.java.patch b/patches/minecraft/net/minecraft/entity/Entity.java.patch
index 2e663e0..a3fe812 100644
--- a/patches/minecraft/net/minecraft/entity/Entity.java.patch
+++ b/patches/minecraft/net/minecraft/entity/Entity.java.patch
@@ -138,7 +138,7 @@
      }
  
      public int func_82143_as()
-@@ -2399,4 +2441,84 @@
+@@ -2399,4 +2441,92 @@
      {
          return this.isBurning();
      }
@@ -222,4 +222,12 @@
 +            persistentID = UUID.randomUUID();
 +        }
 +    }
++
++    /**
++     * Reset the entity ID to a new value. Not to be used from Mod code
++     */
++    public final void resetEntityId()
++    {
++        this.entityId = nextEntityID++;
++    }
  }
