From bdcaa0024a642a91733c2db5f73ccf9a9f59e4a0 Mon Sep 17 00:00:00 2001
From: Christian <cpw@weeksfamily.ca>
Date: Sun, 20 Jan 2013 18:46:28 -0500
Subject: [PATCH] Update FML: 5ce4e31
 5ce4e31 Fix breaking change


diff --git a/fml-src-1.4.7-4.7.17.534-master.zip b/fml-src-1.4.7-4.7.17.534-master.zip
deleted file mode 100644
index 489c8b9..0000000
Binary files a/fml-src-1.4.7-4.7.17.534-master.zip and /dev/null differ
diff --git a/fml-src-1.4.7-4.7.18.535-master.zip b/fml-src-1.4.7-4.7.18.535-master.zip
new file mode 100644
index 0000000..c0a8d1a
Binary files /dev/null and b/fml-src-1.4.7-4.7.18.535-master.zip differ
diff --git a/src/minecraft/cpw/mods/fml/common/registry/GameRegistry.java b/src/minecraft/cpw/mods/fml/common/registry/GameRegistry.java
index 302a766..33f57ea 100644
--- a/src/minecraft/cpw/mods/fml/common/registry/GameRegistry.java
+++ b/src/minecraft/cpw/mods/fml/common/registry/GameRegistry.java
@@ -248,7 +248,12 @@ public class GameRegistry
         blockRegistry.put(Loader.instance().activeModContainer(), (BlockProxy) block);
     }
 
-    public static IRecipe addRecipe(ItemStack output, Object... params)
+    public static void addRecipe(ItemStack output, Object... params)
+    {
+        addShapedRecipe(output, params);
+    }
+
+    public static IRecipe addShapedRecipe(ItemStack output, Object... params)
     {
         return CraftingManager.getInstance().addRecipe(output, params);
     }
diff --git a/src/minecraft/fmlversion.properties b/src/minecraft/fmlversion.properties
index 1f4f814..0c442ab 100644
--- a/src/minecraft/fmlversion.properties
+++ b/src/minecraft/fmlversion.properties
@@ -1,10 +1,10 @@
-#Sun, 20 Jan 2013 09:38:33 -0700
+#Sun, 20 Jan 2013 16:04:30 -0700
 fmlbuild.major.number=4
 fmlbuild.minor.number=7
-fmlbuild.revision.number=17
-fmlbuild.githash=ga99c488
+fmlbuild.revision.number=18
+fmlbuild.githash=g5ce4e31
 fmlbuild.mcpversion=7.26a
 fmlbuild.mcversion=1.4.7
 fmlbuild.branch=master
 
-fmlbuild.build.number=534
+fmlbuild.build.number=535
diff --git a/src/minecraft/net/minecraft/client/gui/GuiCreateWorld.java b/src/minecraft/net/minecraft/client/gui/GuiCreateWorld.java
index 1a1863b..713255b 100644
--- a/src/minecraft/net/minecraft/client/gui/GuiCreateWorld.java
+++ b/src/minecraft/net/minecraft/client/gui/GuiCreateWorld.java
@@ -375,7 +375,7 @@ public class GuiCreateWorld extends GuiScreen
             }
             else if (par1GuiButton.id == 8)
             {
-                this.mc.displayGuiScreen(new GuiCreateFlatWorld(this, this.field_82290_a));
+                WorldType.worldTypes[this.worldTypeId].onCustomizeButton(this.mc, this);
             }
         }
     }
@@ -393,7 +393,7 @@ public class GuiCreateWorld extends GuiScreen
         this.buttonBonusItems.drawButton = this.moreOptions;
         this.buttonWorldType.drawButton = this.moreOptions;
         this.buttonAllowCommands.drawButton = this.moreOptions;
-        this.buttonCustomize.drawButton = this.moreOptions && WorldType.worldTypes[this.worldTypeId] == WorldType.FLAT;
+        this.buttonCustomize.drawButton = this.moreOptions && (WorldType.worldTypes[this.worldTypeId].isCustomizable());
         StringTranslate var2;
 
         if (this.moreOptions)
diff --git a/src/minecraft/net/minecraft/client/multiplayer/ChunkProviderClient.java b/src/minecraft/net/minecraft/client/multiplayer/ChunkProviderClient.java
index 543825d..5955420 100644
--- a/src/minecraft/net/minecraft/client/multiplayer/ChunkProviderClient.java
+++ b/src/minecraft/net/minecraft/client/multiplayer/ChunkProviderClient.java
@@ -13,6 +13,8 @@ import net.minecraft.world.World;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.EmptyChunk;
 import net.minecraft.world.chunk.IChunkProvider;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.ChunkEvent;
 
 @SideOnly(Side.CLIENT)
 public class ChunkProviderClient implements IChunkProvider
@@ -75,6 +77,7 @@ public class ChunkProviderClient implements IChunkProvider
     {
         Chunk var3 = new Chunk(this.worldObj, par1, par2);
         this.chunkMapping.add(ChunkCoordIntPair.chunkXZ2Int(par1, par2), var3);
+        MinecraftForge.EVENT_BUS.post(new ChunkEvent.Load(var3));
         var3.isChunkLoaded = true;
         return var3;
     }
diff --git a/src/minecraft/net/minecraft/client/renderer/entity/RenderItem.java b/src/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
index 11a97bd..3fb5baa 100644
--- a/src/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
+++ b/src/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
@@ -123,7 +123,7 @@ public class RenderItem extends Render
                     }
 
 
-                    for (var15 = 0; var15 <= var10.getItem().getRenderPasses(var10.getItemDamage()); ++var15)
+                    for (var15 = 0; var15 < var10.getItem().getRenderPasses(var10.getItemDamage()); ++var15)
                     {
                         this.loadTexture(Item.itemsList[var10.itemID].getTextureFile());
                         this.random.setSeed(187L);
diff --git a/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java b/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java
index 2986d64..b5133e8 100644
--- a/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java
+++ b/src/minecraft/net/minecraft/network/rcon/RConThreadClient.java
@@ -55,16 +55,16 @@ public class RConThreadClient extends RConThreadBase
                 BufferedInputStream var1 = new BufferedInputStream(this.clientSocket.getInputStream());
                 int var2 = var1.read(this.buffer, 0, 1460);
 
-                if (10 <= var2)
+                if (10 > var2)
                 {
-                    byte var3 = 0;
-                    int var4 = RConUtils.getBytesAsLEInt(this.buffer, 0, var2);
+                    return;
+                }
 
-                    if (var4 != var2 - 4)
-                    {
-                        return;
-                    }
+                byte var3 = 0;
+                int var4 = RConUtils.getBytesAsLEInt(this.buffer, 0, var2);
 
+                if (var4 == var2 - 4)
+                {
                     int var21 = var3 + 4;
                     int var5 = RConUtils.getBytesAsLEInt(this.buffer, var21, var2);
                     var21 += 4;
diff --git a/src/minecraft/net/minecraft/util/HttpUtilRunnable.java b/src/minecraft/net/minecraft/util/HttpUtilRunnable.java
index 35de5c3..f70a39c 100644
--- a/src/minecraft/net/minecraft/util/HttpUtilRunnable.java
+++ b/src/minecraft/net/minecraft/util/HttpUtilRunnable.java
@@ -52,105 +52,101 @@ final class HttpUtilRunnable implements Runnable
 
         try
         {
-            try
+            byte[] var4 = new byte[4096];
+            URL var5 = new URL(this.sourceURL);
+            var1 = var5.openConnection();
+            float var6 = 0.0F;
+            float var7 = (float)this.field_76177_c.entrySet().size();
+            Iterator var8 = this.field_76177_c.entrySet().iterator();
+
+            while (var8.hasNext())
             {
-                byte[] var4 = new byte[4096];
-                URL var5 = new URL(this.sourceURL);
-                var1 = var5.openConnection();
-                float var6 = 0.0F;
-                float var7 = (float)this.field_76177_c.entrySet().size();
-                Iterator var8 = this.field_76177_c.entrySet().iterator();
-
-                while (var8.hasNext())
-                {
-                    Entry var9 = (Entry)var8.next();
-                    var1.setRequestProperty((String)var9.getKey(), (String)var9.getValue());
-
-                    if (this.feedbackHook != null)
-                    {
-                        this.feedbackHook.setLoadingProgress((int)(++var6 / var7 * 100.0F));
-                    }
-                }
-
-                var2 = var1.getInputStream();
-                var7 = (float)var1.getContentLength();
-                int var28 = var1.getContentLength();
+                Entry var9 = (Entry)var8.next();
+                var1.setRequestProperty((String)var9.getKey(), (String)var9.getValue());
 
                 if (this.feedbackHook != null)
                 {
-                    this.feedbackHook.resetProgresAndWorkingMessage(String.format("Downloading file (%.2f MB)...", new Object[] {Float.valueOf(var7 / 1000.0F / 1000.0F)}));
+                    this.feedbackHook.setLoadingProgress((int)(++var6 / var7 * 100.0F));
                 }
+            }
 
-                if (this.destinationFile.exists())
-                {
-                    long var29 = this.destinationFile.length();
-
-                    if (var29 == (long)var28)
-                    {
-                        this.downloadSuccess.onSuccess(this.destinationFile);
-
-                        if (this.feedbackHook != null)
-                        {
-                            this.feedbackHook.onNoMoreProgress();
-                        }
-
-                        return;
-                    }
+            var2 = var1.getInputStream();
+            var7 = (float)var1.getContentLength();
+            int var28 = var1.getContentLength();
 
-                    System.out.println("Deleting " + this.destinationFile + " as it does not match what we currently have (" + var28 + " vs our " + var29 + ").");
-                    this.destinationFile.delete();
-                }
+            if (this.feedbackHook != null)
+            {
+                this.feedbackHook.resetProgresAndWorkingMessage(String.format("Downloading file (%.2f MB)...", new Object[] {Float.valueOf(var7 / 1000.0F / 1000.0F)}));
+            }
 
-                var3 = new DataOutputStream(new FileOutputStream(this.destinationFile));
+            if (this.destinationFile.exists())
+            {
+                long var29 = this.destinationFile.length();
 
-                if (this.field_76173_f > 0 && var7 > (float)this.field_76173_f)
+                if (var29 == (long)var28)
                 {
+                    this.downloadSuccess.onSuccess(this.destinationFile);
+
                     if (this.feedbackHook != null)
                     {
                         this.feedbackHook.onNoMoreProgress();
                     }
 
-                    throw new IOException("Filesize is bigger than maximum allowed (file is " + var6 + ", limit is " + this.field_76173_f + ")");
+                    return;
                 }
 
-                boolean var31 = false;
-                int var30;
+                System.out.println("Deleting " + this.destinationFile + " as it does not match what we currently have (" + var28 + " vs our " + var29 + ").");
+                this.destinationFile.delete();
+            }
+
+            var3 = new DataOutputStream(new FileOutputStream(this.destinationFile));
 
-                while ((var30 = var2.read(var4)) >= 0)
+            if (this.field_76173_f > 0 && var7 > (float)this.field_76173_f)
+            {
+                if (this.feedbackHook != null)
                 {
-                    var6 += (float)var30;
+                    this.feedbackHook.onNoMoreProgress();
+                }
 
-                    if (this.feedbackHook != null)
-                    {
-                        this.feedbackHook.setLoadingProgress((int)(var6 / var7 * 100.0F));
-                    }
+                throw new IOException("Filesize is bigger than maximum allowed (file is " + var6 + ", limit is " + this.field_76173_f + ")");
+            }
 
-                    if (this.field_76173_f > 0 && var6 > (float)this.field_76173_f)
-                    {
-                        if (this.feedbackHook != null)
-                        {
-                            this.feedbackHook.onNoMoreProgress();
-                        }
+            boolean var31 = false;
+            int var30;
 
-                        throw new IOException("Filesize was bigger than maximum allowed (got >= " + var6 + ", limit was " + this.field_76173_f + ")");
-                    }
+            while ((var30 = var2.read(var4)) >= 0)
+            {
+                var6 += (float)var30;
 
-                    var3.write(var4, 0, var30);
+                if (this.feedbackHook != null)
+                {
+                    this.feedbackHook.setLoadingProgress((int)(var6 / var7 * 100.0F));
                 }
 
-                this.downloadSuccess.onSuccess(this.destinationFile);
-
-                if (this.feedbackHook != null)
+                if (this.field_76173_f > 0 && var6 > (float)this.field_76173_f)
                 {
-                    this.feedbackHook.onNoMoreProgress();
-                    return;
+                    if (this.feedbackHook != null)
+                    {
+                        this.feedbackHook.onNoMoreProgress();
+                    }
+
+                    throw new IOException("Filesize was bigger than maximum allowed (got >= " + var6 + ", limit was " + this.field_76173_f + ")");
                 }
+
+                var3.write(var4, 0, var30);
             }
-            catch (Throwable var26)
+
+            this.downloadSuccess.onSuccess(this.destinationFile);
+
+            if (this.feedbackHook != null)
             {
-                var26.printStackTrace();
+                this.feedbackHook.onNoMoreProgress();
             }
         }
+        catch (Throwable var26)
+        {
+            var26.printStackTrace();
+        }
         finally
         {
             try
diff --git a/src/minecraft/net/minecraft/world/World.java b/src/minecraft/net/minecraft/world/World.java
index e439f9a..ae5ea54 100644
--- a/src/minecraft/net/minecraft/world/World.java
+++ b/src/minecraft/net/minecraft/world/World.java
@@ -2037,9 +2037,9 @@ public abstract class World implements IBlockAccess
                 ++var2.ticksExisted;
                 var2.onUpdate();
             }
-            catch (Throwable var6)
+            catch (Throwable var8)
             {
-                var4 = CrashReport.makeCrashReport(var6, "Ticking entity");
+                var4 = CrashReport.makeCrashReport(var8, "Ticking entity");
                 var5 = var4.makeCategory("Entity being ticked");
 
                 if (var2 == null)
@@ -2108,9 +2108,9 @@ public abstract class World implements IBlockAccess
                 {
                     this.updateEntity(var2);
                 }
-                catch (Throwable var8)
+                catch (Throwable var7)
                 {
-                    var4 = CrashReport.makeCrashReport(var8, "Ticking entity");
+                    var4 = CrashReport.makeCrashReport(var7, "Ticking entity");
                     var5 = var4.makeCategory("Entity being ticked");
 
                     if (var2 == null)
@@ -2152,9 +2152,9 @@ public abstract class World implements IBlockAccess
                 {
                     var9.updateEntity();
                 }
-                catch (Throwable var7)
+                catch (Throwable var6)
                 {
-                    var4 = CrashReport.makeCrashReport(var7, "Ticking tile entity");
+                    var4 = CrashReport.makeCrashReport(var6, "Ticking tile entity");
                     var5 = var4.makeCategory("Tile entity being ticked");
 
                     if (var9 == null)
diff --git a/src/minecraft/net/minecraft/world/WorldType.java b/src/minecraft/net/minecraft/world/WorldType.java
index 63a919a..b5fa472 100644
--- a/src/minecraft/net/minecraft/world/WorldType.java
+++ b/src/minecraft/net/minecraft/world/WorldType.java
@@ -10,6 +10,9 @@ import java.util.Set;
 import com.google.common.collect.ObjectArrays;
 import com.google.common.collect.Sets;
 
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.GuiCreateFlatWorld;
+import net.minecraft.client.gui.GuiCreateWorld;
 import net.minecraft.world.*;
 import net.minecraft.world.gen.*;
 import net.minecraft.world.biome.*;
@@ -234,4 +237,26 @@ public class WorldType
     {
         return 20;
     }
+
+    /**
+     * Called when the 'Customize' button is pressed on world creation GUI
+     * @param instance The minecraft instance
+     * @param guiCreateWorld the createworld GUI
+     */
+    @SideOnly(Side.CLIENT)
+    public void onCustomizeButton(Minecraft instance, GuiCreateWorld guiCreateWorld) {
+        if (this == FLAT)
+        {
+            instance.displayGuiScreen(new GuiCreateFlatWorld(guiCreateWorld, guiCreateWorld.field_82290_a));
+        }
+    }
+
+    /*
+     * Should world creation GUI show 'Customize' button for this world type?
+     * @return if this world type has customization parameters
+     */
+    public boolean isCustomizable()
+    {
+        return this == FLAT;
+    }
 }
