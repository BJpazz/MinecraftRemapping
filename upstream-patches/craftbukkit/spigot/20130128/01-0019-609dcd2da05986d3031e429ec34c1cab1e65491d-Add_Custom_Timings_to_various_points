From 609dcd2da05986d3031e429ec34c1cab1e65491d Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 10 Jan 2013 00:18:11 -0500
Subject: [PATCH] Add Custom Timings to various points


diff --git a/src/minecraft/net/minecraft/entity/EntityLiving.java b/src/minecraft/net/minecraft/entity/EntityLiving.java
index 8c66a69..8eb4170 100644
--- a/src/minecraft/net/minecraft/entity/EntityLiving.java
+++ b/src/minecraft/net/minecraft/entity/EntityLiving.java
@@ -48,6 +48,7 @@ import net.minecraft.world.WorldServer;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.CustomTimingsHandler;
 import org.bukkit.event.entity.EntityDamageByBlockEvent;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityRegainHealthEvent;
@@ -250,6 +251,14 @@ public abstract class EntityLiving extends Entity
     public int expToDrop = 0;
     public int maxAirTicks = 300;
     public int maxHealth = this.getMaxHealth();
+    // Spigot Start
+    public static CustomTimingsHandler timerEntityBaseTick = new CustomTimingsHandler("** entityBaseTick");
+    public static CustomTimingsHandler timerEntityAI = new CustomTimingsHandler("** entityAI");
+    public static CustomTimingsHandler timerEntityAIJump = new CustomTimingsHandler("** entityAIJump");
+    public static CustomTimingsHandler timerEntityAIMove = new CustomTimingsHandler("** entityAIMove");
+    public static CustomTimingsHandler timerEntityAILoot = new CustomTimingsHandler("** entityAILoot");
+    public static CustomTimingsHandler timerEntityTickRest = new CustomTimingsHandler("** entityTickRest");
+    // Spigot End
     // CraftBukkit end
 
     public EntityLiving(World par1World)
@@ -807,6 +816,7 @@ public abstract class EntityLiving extends Entity
      */
     public void onUpdate()
     {
+        timerEntityBaseTick.startTiming(); // Spigot
         super.onUpdate();
 
         if (!this.worldObj.isRemote)
@@ -842,7 +852,9 @@ public abstract class EntityLiving extends Entity
             }
         }
 
+        timerEntityBaseTick.stopTiming(); // Spigot
         this.onLivingUpdate();
+        timerEntityTickRest.startTiming(); // Spigot
         double var12 = this.posX - this.prevPosX;
         double var3 = this.posZ - this.prevPosZ;
         float var5 = (float)(var12 * var12 + var3 * var3);
@@ -951,6 +963,7 @@ public abstract class EntityLiving extends Entity
 
         this.worldObj.theProfiler.endSection();
         this.field_70764_aw += var7;
+        timerEntityTickRest.stopTiming(); // Spigot
     }
 
     // CraftBukkit start - delegate so we can handle providing a reason for health being regained
@@ -1777,6 +1790,8 @@ public abstract class EntityLiving extends Entity
      */
     public void onLivingUpdate()
     {
+        timerEntityAI.startTiming(); // Spigot
+
         if (this.jumpTicks > 0)
         {
             --this.jumpTicks;
@@ -1842,8 +1857,10 @@ public abstract class EntityLiving extends Entity
             }
         }
 
+        timerEntityAI.stopTiming(); // Spigot
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("jump");
+        timerEntityAIJump.startTiming(); // Spigot
 
         if (this.isJumping)
         {
@@ -1865,8 +1882,10 @@ public abstract class EntityLiving extends Entity
             this.jumpTicks = 0;
         }
 
+        timerEntityAIJump.stopTiming(); // Spigot
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("travel");
+        timerEntityAIMove.startTiming(); // Spigot
         this.moveStrafing *= 0.98F;
         this.moveForward *= 0.98F;
         this.randomYawVelocity *= 0.9F;
@@ -1874,6 +1893,7 @@ public abstract class EntityLiving extends Entity
         this.landMovementFactor *= this.getSpeedModifier();
         this.moveEntityWithHeading(this.moveStrafing, this.moveForward);
         this.landMovementFactor = var11;
+        timerEntityAIMove.stopTiming(); // Spigot
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("push");
 
@@ -1884,6 +1904,7 @@ public abstract class EntityLiving extends Entity
 
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("looting");
+        timerEntityAILoot.startTiming(); // Spigot
 
         // CraftBukkit - Don't run mob pickup code on players
         if (!this.worldObj.isRemote && !(this instanceof EntityPlayerMP) && this.canPickUpLoot && !this.dead && this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"))
@@ -1974,6 +1995,7 @@ public abstract class EntityLiving extends Entity
             }
         }
 
+        timerEntityAILoot.stopTiming(); // Spigot
         this.worldObj.theProfiler.endSection();
     }
 
diff --git a/src/minecraft/net/minecraft/network/NetServerHandler.java b/src/minecraft/net/minecraft/network/NetServerHandler.java
index 8f79e6f..5ac2f4d 100644
--- a/src/minecraft/net/minecraft/network/NetServerHandler.java
+++ b/src/minecraft/net/minecraft/network/NetServerHandler.java
@@ -88,6 +88,7 @@ import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.entity.Player;
+import org.bukkit.event.CustomTimingsHandler;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.Action;
 import org.bukkit.event.block.SignChangeEvent;
@@ -154,6 +155,7 @@ public class NetServerHandler extends NetHandler
     private double lastPosZ;
     public boolean hasMoved = true; // CraftBukkit - private -> public
     private IntHashMap field_72586_s = new IntHashMap();
+    static private CustomTimingsHandler playerCommandTimer = new CustomTimingsHandler("playerCommand"); // Spigot
 
     public NetServerHandler(MinecraftServer par1, INetworkManager par2, EntityPlayerMP par3)
     {
@@ -1318,6 +1320,7 @@ public class NetServerHandler extends NetHandler
      */
     private void handleSlashCommand(String par1Str)
     {
+        playerCommandTimer.startTiming(); // Spigot
         // CraftBukkit start
         CraftPlayer player = this.getPlayer();
         PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, par1Str, new LazyPlayerSet());
@@ -1325,6 +1328,7 @@ public class NetServerHandler extends NetHandler
 
         if (event.isCancelled())
         {
+            playerCommandTimer.stopTiming(); // Spigot
             return;
         }
 
@@ -1337,6 +1341,7 @@ public class NetServerHandler extends NetHandler
 
             if (this.server.dispatchCommand(event.getPlayer(), event.getMessage().substring(1)))
             {
+                playerCommandTimer.stopTiming(); // Spigot
                 return;
             }
         }
@@ -1344,9 +1349,11 @@ public class NetServerHandler extends NetHandler
         {
             player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
             Logger.getLogger(NetServerHandler.class.getName()).log(Level.SEVERE, null, ex);
+            playerCommandTimer.stopTiming(); // Spigot
             return;
         }
 
+        playerCommandTimer.stopTiming(); // Spigot
         // CraftBukkit end
         /* CraftBukkit start - No longer needed as we have already handled it in server.dispatchServerCommand above.
         this.minecraftServer.getCommandHandler().a(this.player, s);
diff --git a/src/minecraft/net/minecraft/world/World.java b/src/minecraft/net/minecraft/world/World.java
index e919654..36547d6 100644
--- a/src/minecraft/net/minecraft/world/World.java
+++ b/src/minecraft/net/minecraft/world/World.java
@@ -58,6 +58,7 @@ import net.minecraft.world.storage.WorldInfo;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.util.LongHashSet;
 import org.bukkit.craftbukkit.util.UnsafeList;
+import org.bukkit.event.WorldTimingsHandler;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
@@ -225,6 +226,7 @@ public abstract class World implements IBlockAccess
     final Object chunkLock = new Object();
     private byte chunkTickRadius;
 
+    public WorldTimingsHandler timings; // Spigot
     public CraftWorld getWorld()
     {
         return this.world;
@@ -324,6 +326,7 @@ public abstract class World implements IBlockAccess
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
         this.getServer().addWorld(this.world); // CraftBukkit
+        timings = new WorldTimingsHandler(this); // Spigot
     }
 
     /**
@@ -1874,6 +1877,7 @@ public abstract class World implements IBlockAccess
         Entity var2;
         CrashReport var4;
         CrashReportCategory var5;
+        timings.entityBaseTick.startTiming(); // Spigot
 
         for (var1 = 0; var1 < this.weatherEffects.size(); ++var1)
         {
@@ -1946,6 +1950,8 @@ public abstract class World implements IBlockAccess
 
         this.unloadedEntityList.clear();
         this.theProfiler.endStartSection("regular");
+        timings.entityBaseTick.stopTiming(); // Spigot
+        timings.entityTick.startTiming(); // Spigot
 
         for (var1 = 0; var1 < this.loadedEntityList.size(); ++var1)
         {
@@ -2017,7 +2023,9 @@ public abstract class World implements IBlockAccess
             this.theProfiler.endSection();
         }
 
+        timings.entityTick.stopTiming(); // Spigot
         this.theProfiler.endStartSection("tileEntities");
+        timings.tileEntityTick.startTiming(); // Spigot
         this.scanningTileEntities = true;
         Iterator var14 = this.loadedTileEntityList.iterator();
 
@@ -2122,6 +2130,7 @@ public abstract class World implements IBlockAccess
             this.addedTileEntityList.clear();
         }
 
+        timings.tileEntityTick.stopTiming(); // Spigot
         this.theProfiler.endSection();
         this.theProfiler.endSection();
     }
diff --git a/src/minecraft/net/minecraft/world/WorldServer.java b/src/minecraft/net/minecraft/world/WorldServer.java
index 582f55e..2c7f76c 100644
--- a/src/minecraft/net/minecraft/world/WorldServer.java
+++ b/src/minecraft/net/minecraft/world/WorldServer.java
@@ -270,10 +270,13 @@ public class WorldServer extends World implements org.bukkit.BlockChangeDelegate
 
         if (this.getGameRules().getGameRuleBooleanValue("doMobSpawning") && (this.spawnHostileMobs || this.spawnPeacefulMobs) && (this instanceof WorldServer && this.playerEntities.size() > 0))
         {
+            timings.mobSpawn.startTiming(); // Spigot
             SpawnerAnimals.findChunksForSpawning(this, this.spawnHostileMobs && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.spawnPeacefulMobs && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldInfo.getWorldTotalTime() % 400L == 0L);
+            timings.mobSpawn.stopTiming(); // Spigot
         }
 
         // CraftBukkit end
+        timings.doTickRest.startTiming(); // Spigot
         this.getWorld().processChunkGC();   // Spigot
         this.theProfiler.endStartSection("chunkSource");
         this.chunkProvider.unload100OldestChunks();
@@ -301,6 +304,7 @@ public class WorldServer extends World implements org.bukkit.BlockChangeDelegate
         this.theProfiler.endSection();
         this.sendAndApplyBlockEvents();
         this.getWorld().processChunkGC(); // CraftBukkit
+        timings.doTickRest.stopTiming(); // Spigot
     }
 
     /**
diff --git a/src/minecraft/net/minecraft/world/gen/ChunkProviderServer.java b/src/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
index 9330e45..c5cd964 100644
--- a/src/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ b/src/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -31,6 +31,7 @@ import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
 import org.bukkit.craftbukkit.util.LongHash;
 import org.bukkit.craftbukkit.util.LongHashSet;
 import org.bukkit.craftbukkit.util.LongObjectHashMap;
+import org.bukkit.event.CustomTimingsHandler;
 import org.bukkit.event.world.ChunkUnloadEvent;
 // CraftBukkit end
 
@@ -44,6 +45,7 @@ public class ChunkProviderServer implements IChunkProvider
     public boolean loadChunkOnProvideRequest = false; // true -> false
     public LongObjectHashMap<Chunk> loadedChunkHashMap = new LongObjectHashMap<Chunk>();
     public WorldServer worldObj;
+    static private CustomTimingsHandler syncChunkLoadTimer = new CustomTimingsHandler("syncChunkLoad"); // Spigot
     // CraftBukkit end
 
     public ChunkProviderServer(WorldServer par1WorldServer, IChunkLoader par2IChunkLoader, IChunkProvider par3IChunkProvider)
@@ -151,6 +153,7 @@ public class ChunkProviderServer implements IChunkProvider
 
         if (chunk == null)
         {
+            syncChunkLoadTimer.startTiming(); // Spigot
             chunk = this.safeLoadChunk(i, j);
 
             if (chunk == null)
@@ -201,6 +204,7 @@ public class ChunkProviderServer implements IChunkProvider
 
             // CraftBukkit end
             chunk.populateChunk(this, this, i, j);
+            syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
         // CraftBukkit start - If we didn't need to load the chunk run the callback now
diff --git a/src/minecraft/org/bukkit/event/WorldTimingsHandler.java b/src/minecraft/org/bukkit/event/WorldTimingsHandler.java
new file mode 100644
index 0000000..a0dc9b6
--- /dev/null
+++ b/src/minecraft/org/bukkit/event/WorldTimingsHandler.java
@@ -0,0 +1,19 @@
+package org.bukkit.event;
+
+
+public class WorldTimingsHandler {
+    public CustomTimingsHandler mobSpawn;
+    public CustomTimingsHandler doTickRest;
+    public CustomTimingsHandler entityBaseTick;
+    public CustomTimingsHandler entityTick;
+    public CustomTimingsHandler tileEntityTick;
+    public WorldTimingsHandler(net.minecraft.world.World/*was:World*/ server) {
+        String name = server.worldInfo/*was:worldData*/.getWorldName/*was:getName*/() +" - ";
+
+        mobSpawn       = new CustomTimingsHandler(name + "mobSpawn");
+        doTickRest     = new CustomTimingsHandler(name + "doTickRest");
+        entityBaseTick = new CustomTimingsHandler(name + "entityBaseTick");
+        entityTick     = new CustomTimingsHandler(name + "entityTick");
+        tileEntityTick = new CustomTimingsHandler(name + "tileEntityTick");
+    }
+}
