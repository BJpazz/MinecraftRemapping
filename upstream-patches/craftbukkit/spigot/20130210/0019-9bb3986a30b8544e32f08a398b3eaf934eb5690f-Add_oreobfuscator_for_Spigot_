From 9bb3986a30b8544e32f08a398b3eaf934eb5690f Mon Sep 17 00:00:00 2001
From: lishid <lishid@gmail.com>
Date: Mon, 21 Jan 2013 16:59:04 +1100
Subject: [PATCH] Add oreobfuscator for Spigot.


diff --git a/src/minecraft/net/minecraft/item/ItemInWorldManager.java b/src/minecraft/net/minecraft/item/ItemInWorldManager.java
index a0adbe3..6a7b73e 100644
--- a/src/minecraft/net/minecraft/item/ItemInWorldManager.java
+++ b/src/minecraft/net/minecraft/item/ItemInWorldManager.java
@@ -395,6 +395,13 @@ public class ItemInWorldManager
 
                 return false;
             }
+            // Spigot (Orebfuscator) start
+            else
+            {
+                org.bukkit.craftbukkit.OrebfuscatorManager.updateNearbyBlocks(theWorld, par1, par2, par3);
+            }
+
+            // Spigot (Orebfuscator) end
         }
 
         if (false)   // Never trigger
diff --git a/src/minecraft/net/minecraft/network/packet/Packet51MapChunk.java b/src/minecraft/net/minecraft/network/packet/Packet51MapChunk.java
index 897cff3..fbef828 100644
--- a/src/minecraft/net/minecraft/network/packet/Packet51MapChunk.java
+++ b/src/minecraft/net/minecraft/network/packet/Packet51MapChunk.java
@@ -74,6 +74,7 @@ public class Packet51MapChunk extends Packet
         Deflater var5 = new Deflater(-1);
         this.yChMax = var4.chunkHasAddSectionFlag;
         this.yChMin = var4.chunkExistFlag;
+        org.bukkit.craftbukkit.OrebfuscatorManager.obfuscate(par1Chunk.xPosition, par1Chunk.zPosition, par3, var4.compressedData, par1Chunk.worldObj); // Spigot (Orebfuscator)
 
         try
         {
diff --git a/src/minecraft/net/minecraft/network/packet/Packet56MapChunks.java b/src/minecraft/net/minecraft/network/packet/Packet56MapChunks.java
index bd85100..a9e2a68 100644
--- a/src/minecraft/net/minecraft/network/packet/Packet56MapChunks.java
+++ b/src/minecraft/net/minecraft/network/packet/Packet56MapChunks.java
@@ -7,6 +7,7 @@ import java.util.List;
 import java.util.zip.DataFormatException;
 import java.util.zip.Deflater;
 import java.util.zip.Inflater;
+import net.minecraft.world.World;
 import net.minecraft.world.chunk.Chunk;
 
 public class Packet56MapChunks extends Packet
@@ -35,6 +36,7 @@ public class Packet56MapChunks extends Packet
         }
     };
     // CraftBukkit end
+    private World world; // Spigot (Orebfuscator) Keep track of world
 
     public Packet56MapChunks() {}
 
@@ -53,15 +55,17 @@ public class Packet56MapChunks extends Packet
         {
             Chunk var5 = (Chunk)par1List.get(var4);
             Packet51MapChunkData var6 = Packet51MapChunk.getMapChunkData(var5, true, '\uffff');
-
-            if (chunkDataNotCompressed.length < var3 + var6.compressedData.length)
-            {
-                byte[] var7 = new byte[var3 + var6.compressedData.length];
-                System.arraycopy(chunkDataNotCompressed, 0, var7, 0, chunkDataNotCompressed.length);
-                chunkDataNotCompressed = var7;
+            world = var5.worldObj; // Spigot (Orebfuscator)
+            /* Spigot (Orebfuscator) - Don't use the build buffer yet. Copy to it more efficiently once the chunk is obfuscated
+            // Moved to compress()
+            if (buildBuffer.length < j + chunkmap.a.length) {
+                byte[] abyte = new byte[j + chunkmap.a.length];
+
+                System.arraycopy(buildBuffer, 0, abyte, 0, buildBuffer.length);
+                buildBuffer = abyte;
             }
 
-            System.arraycopy(var6.compressedData, 0, chunkDataNotCompressed, var3, var6.compressedData.length);
+            System.arraycopy(chunkmap.a, 0, buildBuffer, j, chunkmap.a.length); */
             var3 += var6.compressedData.length;
             this.chunkPostX[var4] = var5.xPosition;
             this.chunkPosZ[var4] = var5.zPosition;
@@ -92,6 +96,26 @@ public class Packet56MapChunks extends Packet
             return;
         }
 
+        // Spigot (Orebfuscator) start - Obfuscate chunks
+        int finalBufferSize = 0;
+
+        for (int i = 0; i < field_73590_a.length; i++)
+        {
+            org.bukkit.craftbukkit.OrebfuscatorManager.obfuscate(chunkPostX[i], chunkPosZ[i], field_73590_a[i], field_73584_f[i], world);
+            finalBufferSize += field_73584_f[i].length;
+        }
+
+        // Now it's time to efficiently copy the chunk to the build buffer
+        chunkDataNotCompressed = new byte[finalBufferSize];
+        int bufferLocation = 0;
+
+        for (int i = 0; i < field_73590_a.length; i++)
+        {
+            System.arraycopy(field_73584_f[i], 0, chunkDataNotCompressed, bufferLocation, field_73584_f[i].length);
+            bufferLocation += field_73584_f[i].length;
+        }
+
+        // Spigot (Orebfuscator) end
         Deflater deflater = localDeflater.get();
         deflater.reset();
         deflater.setInput(this.chunkDataNotCompressed);
diff --git a/src/minecraft/net/minecraft/world/Explosion.java b/src/minecraft/net/minecraft/world/Explosion.java
index 2155ad8..5bd5e08 100644
--- a/src/minecraft/net/minecraft/world/Explosion.java
+++ b/src/minecraft/net/minecraft/world/Explosion.java
@@ -291,6 +291,7 @@ public class Explosion
                 var5 = var3.y;
                 var6 = var3.z;
                 var7 = this.worldObj.getBlockId(var4, var5, var6);
+                org.bukkit.craftbukkit.OrebfuscatorManager.updateNearbyBlocks(worldObj, var4, var5, var6); // Spigot (Orebfuscator)
 
                 if (par1)
                 {
diff --git a/src/minecraft/org/bukkit/craftbukkit/CraftServer.java b/src/minecraft/org/bukkit/craftbukkit/CraftServer.java
index c3ac661..99d1b54 100644
--- a/src/minecraft/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/minecraft/org/bukkit/craftbukkit/CraftServer.java
@@ -133,6 +133,11 @@ public final class CraftServer implements Server {
     private WarningState warningState = WarningState.DEFAULT;
     private final BooleanWrapper online = new BooleanWrapper();
 
+    // Orebfuscator use
+    public boolean orebfuscatorEnabled = false;
+    public int orebfuscatorUpdateRadius = 2;
+    public List<String> orebfuscatorDisabledWorlds;
+
     private final class BooleanWrapper {
         private boolean value = true;
     }
diff --git a/src/minecraft/org/bukkit/craftbukkit/CraftWorld.java b/src/minecraft/org/bukkit/craftbukkit/CraftWorld.java
index a858edd..feabfe1 100644
--- a/src/minecraft/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/minecraft/org/bukkit/craftbukkit/CraftWorld.java
@@ -118,6 +118,8 @@ public class CraftWorld implements World {
         viewDistance = Bukkit.getServer().getViewDistance();
         viewDistance = configuration.getInt("world-settings." + name + ".view-distance", viewDistance);
 
+        obfuscated = !world.getServer().orebfuscatorDisabledWorlds.contains(name);
+
         server.getLogger().info("-------------- Spigot ----------------");
         server.getLogger().info("-------- World Settings For [" + name + "] --------");
         server.getLogger().info("Growth Per Chunk: " + growthPerTick);
@@ -134,6 +136,7 @@ public class CraftWorld implements World {
         server.getLogger().info("Tree Growth Modifier: " + treeGrowthModifier);
         server.getLogger().info("Mushroom Growth Modifier: " + mushroomGrowthModifier);
         server.getLogger().info("View distance: " + viewDistance);
+        server.getLogger().info("Oreobfuscator: " + obfuscated);
         server.getLogger().info("-------------------------------------------------");
         // Spigot end
     }
@@ -145,6 +148,7 @@ public class CraftWorld implements World {
     public int mobSpawnRange = 4;
     public int aggregateTicks = 4;
     public int viewDistance;
+    public boolean obfuscated = false;
     //Crop growth rates:
     public int wheatGrowthModifier = 100;
     public int cactusGrowthModifier = 100;
diff --git a/src/minecraft/org/bukkit/craftbukkit/OrebfuscatorManager.java b/src/minecraft/org/bukkit/craftbukkit/OrebfuscatorManager.java
new file mode 100644
index 0000000..06b7138
--- /dev/null
+++ b/src/minecraft/org/bukkit/craftbukkit/OrebfuscatorManager.java
@@ -0,0 +1,93 @@
+package org.bukkit.craftbukkit;
+
+
+public class OrebfuscatorManager {
+
+    // Used to keep track of which blocks to obfuscate
+    private static boolean[] obfuscateBlocks = new boolean[Short.MAX_VALUE];
+
+    // Default blocks
+    static {
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.stone/*was:STONE*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.oreGold/*was:GOLD_ORE*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.oreIron/*was:IRON_ORE*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.oreCoal/*was:COAL_ORE*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.oreLapis/*was:LAPIS_ORE*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.chest/*was:CHEST*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.oreDiamond/*was:DIAMOND_ORE*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.oreRedstone/*was:REDSTONE_ORE*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.oreRedstoneGlowing/*was:GLOWING_REDSTONE_ORE*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.oreEmerald/*was:EMERALD_ORE*/.blockID/*was:id*/] = true;
+        obfuscateBlocks[net.minecraft.block.Block/*was:Block*/.enderChest/*was:ENDER_CHEST*/.blockID/*was:id*/] = true;
+    }
+
+    public static void updateNearbyBlocks(net.minecraft.world.World/*was:World*/ world, int x, int y, int z) {
+        updateNearbyBlocks(world, x, y, z, world.getServer().orebfuscatorUpdateRadius);
+    }
+
+    public static void obfuscate(int chunkX, int chunkY, int bitmask, byte[] buffer, net.minecraft.world.World/*was:World*/ world) {
+        if (world.getServer().orebfuscatorEnabled && world.getWorld().obfuscated) {
+            int initialRadius = 1;
+            int index = 0;
+            int startX = chunkX << 4;
+            int startZ = chunkY << 4;
+            for (int i = 0; i < 16; i++) {
+                // If the bitmask indicates this chunk is sent...
+                if ((bitmask & 1 << i) != 0) {
+                    for (int y = 0; y < 16; y++) {
+                        for (int z = 0; z < 16; z++) {
+                            for (int x = 0; x < 16; x++) {
+                                byte data = buffer[index];
+                                // Check if the block should be obfuscated for the default engine modes
+                                if (obfuscateBlocks[data & 0xFF]) {
+                                    if (initialRadius == 0 || !areAjacentBlocksTransparent(world, startX + x, (i << 4) + y, startZ + z, initialRadius)) {
+                                        // Replace with stone
+                                        buffer[index] = (byte) net.minecraft.block.Block/*was:Block*/.stone/*was:STONE*/.blockID/*was:id*/;
+                                    }
+                                }
+                                if (++index >= buffer.length) {
+                                    return;
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    private static void updateNearbyBlocks(net.minecraft.world.World/*was:World*/ world, int x, int y, int z, int radius) {
+        if (world.getServer().orebfuscatorEnabled && world.getWorld().obfuscated && world.blockExists/*was:isLoaded*/(x, y, z)) {
+            // Get block id
+            int id = world.getBlockId/*was:getTypeId*/(x, y, z);
+
+            // See if it needs update
+            if (obfuscateBlocks[id]) {
+                // Send the update
+                world.markBlockForUpdate/*was:notify*/(x, y, z);
+            }
+
+            // Check other blocks for updates
+            if (radius != 0) {
+                updateNearbyBlocks(world, x + 1, y, z, radius - 1);
+                updateNearbyBlocks(world, x - 1, y, z, radius - 1);
+                updateNearbyBlocks(world, x, y + 1, z, radius - 1);
+                updateNearbyBlocks(world, x, y - 1, z, radius - 1);
+                updateNearbyBlocks(world, x, y, z + 1, radius - 1);
+                updateNearbyBlocks(world, x, y, z - 1, radius - 1);
+            }
+        }
+    }
+
+    private static boolean areAjacentBlocksTransparent(net.minecraft.world.World/*was:World*/ world, int x, int y, int z, int radius) {
+        return y > 0 && y <= world.getHeight/*was:getHeight*/()
+                && world.blockExists/*was:isLoaded*/(x, y, z)
+                && !net.minecraft.block.Block/*was:Block*/.isNormalCube/*was:i*/(world.getBlockId/*was:getTypeId*/(x, y, z))
+                || (radius > 0 && (areAjacentBlocksTransparent(world, x, y + 1, z, radius - 1)
+                || areAjacentBlocksTransparent(world, x, y - 1, z, radius - 1)
+                || areAjacentBlocksTransparent(world, x + 1, y, z, radius - 1)
+                || areAjacentBlocksTransparent(world, x - 1, y, z, radius - 1)
+                || areAjacentBlocksTransparent(world, x, y, z + 1, radius - 1)
+                || areAjacentBlocksTransparent(world, x, y, z - 1, radius - 1)));
+    }
+}
diff --git a/src/minecraft/org/bukkit/craftbukkit/Spigot.java b/src/minecraft/org/bukkit/craftbukkit/Spigot.java
index 30bc542..ccb1cc7 100644
--- a/src/minecraft/org/bukkit/craftbukkit/Spigot.java
+++ b/src/minecraft/org/bukkit/craftbukkit/Spigot.java
@@ -23,6 +23,10 @@ public class Spigot {
         server.commandComplete = configuration.getBoolean("settings.command-complete", true);
         server.spamGuardExclusions = configuration.getStringList("settings.spam-exclusions");
 
+        server.orebfuscatorEnabled = configuration.getBoolean("orebfuscator.enable", false);
+        server.orebfuscatorUpdateRadius = configuration.getInt("orebfuscator.update-radius", 2);
+        server.orebfuscatorDisabledWorlds = configuration.getStringList("orebfuscator.disabled-worlds");
+
         if (server.chunkGCPeriod == 0) {
             server.getLogger().severe("[Spigot] You should not disable chunk-gc. Resetting period-in-ticks to 600 ticks.");
             server.chunkGCPeriod = 600;
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
index 9d6d613..6931712 100644
--- a/src/main/resources/configurations/bukkit.yml
+++ b/src/main/resources/configurations/bukkit.yml
@@ -84,3 +84,8 @@ database:
     driver: org.sqlite.JDBC
     password: walrus
     url: jdbc:sqlite:{DIR}{NAME}.db
+orebfuscator:
+    enable: false
+    update-radius: 2
+    disabled-worlds:
+       - world_the_end
