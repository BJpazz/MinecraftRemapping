From ef2225ba8fb663a23b33588b2e71ffa1f86e358e Mon Sep 17 00:00:00 2001
From: md_5 <md_5@live.com.au>
Date: Sun, 3 Feb 2013 12:28:17 +1100
Subject: [PATCH] Tick loop optimization - sleep for as long as possible.


diff --git a/src/minecraft/net/minecraft/server/MinecraftServer.java b/src/minecraft/net/minecraft/server/MinecraftServer.java
index d805664..8275fc7 100644
--- a/src/minecraft/net/minecraft/server/MinecraftServer.java
+++ b/src/minecraft/net/minecraft/server/MinecraftServer.java
@@ -190,6 +190,12 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
     public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
     public int autosavePeriod;
     // CraftBukkit end
+    // Spigot start
+    private static final int TPS = 20;
+    private static final int TICK_TIME = 1000000000 / TPS;
+    public static double currentTPS = 0;
+    private static long catchupTime = 0;
+    // Spigot end
 
     public MinecraftServer(OptionSet options)   // CraftBukkit - signature file -> OptionSet
     {
@@ -592,83 +598,63 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
         {
             if (this.startServer())
             {
-                long var1 = System.currentTimeMillis();
-
-                for (long var50 = 0L; this.serverRunning; this.serverIsRunning = true)
+                // Spigot start
+                for (long lastTick = 0L; this.serverRunning; this.serverIsRunning = true)
                 {
-                    long var5 = System.currentTimeMillis();
-                    long var7 = var5 - var1;
-
-                    if (var7 > 2000L && var1 - this.timeOfLastWarning >= 15000L)
-                    {
-                        if (this.server.getWarnOnOverload()) // CraftBukkit - Added option to suppress warning messages
-                        {
-                            logger.warning("Can\'t keep up! Did the system time change, or is the server overloaded?");
-                        }
-
-                        var7 = 2000L;
-                        this.timeOfLastWarning = var1;
-                    }
+                    long curTime = System.nanoTime();
+                    long wait = TICK_TIME - (curTime - lastTick) - catchupTime;
 
-                    if (var7 < 0L)
+                    if (wait > 0)
                     {
-                        logger.warning("Time ran backwards! Did the system time change?");
-                        var7 = 0L;
-                    }
-
-                    var50 += var7;
-                    var1 = var5;
-
-                    if (this.worlds.get(0).areAllPlayersAsleep())   // CraftBukkit
-                    {
-                        this.tick();
-                        var50 = 0L;
+                        Thread.sleep(wait / 1000000);
+                        catchupTime = 0;
+                        continue;
                     }
                     else
                     {
-                        while (var50 > 50L)
-                        {
-                            MinecraftServer.currentTick = (int)(System.currentTimeMillis() / 50);  // CraftBukkit
-                            var50 -= 50L;
-                            this.tick();
-                        }
+                        catchupTime = Math.min(TICK_TIME * TPS, Math.abs(wait));
                     }
 
-                    Thread.sleep(1L);
+                    currentTPS = (currentTPS * 0.95) + (1E9 / (curTime - lastTick) * 0.05);
+                    lastTick = curTime;
+                    MinecraftServer.currentTick++;
+                    this.tick();
                 }
+
+                // Spigot end
             }
             else
             {
                 this.finalTick((CrashReport)null);
             }
         }
-        catch (Throwable var48)
+        catch (Throwable var1)
         {
-            var48.printStackTrace();
-            logger.log(Level.SEVERE, "Encountered an unexpected exception " + var48.getClass().getSimpleName(), var48);
-            CrashReport var2 = null;
+            var1.printStackTrace();
+            logger.log(Level.SEVERE, "Encountered an unexpected exception " + var1.getClass().getSimpleName(), var1);
+            CrashReport var50 = null;
 
-            if (var48 instanceof ReportedException)
+            if (var1 instanceof ReportedException)
             {
-                var2 = this.addServerInfoToCrashReport(((ReportedException)var48).getCrashReport());
+                var50 = this.addServerInfoToCrashReport(((ReportedException) var1).getCrashReport());
             }
             else
             {
-                var2 = this.addServerInfoToCrashReport(new CrashReport("Exception in server tick loop", var48));
+                var50 = this.addServerInfoToCrashReport(new CrashReport("Exception in server tick loop", var1));
             }
 
-            File var3 = new File(new File(this.getDataDirectory(), "crash-reports"), "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
+            File var5 = new File(new File(this.getDataDirectory(), "crash-reports"), "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
 
-            if (var2.saveToFile(var3))
+            if (var50.saveToFile(var5))
             {
-                logger.severe("This crash report has been saved to: " + var3.getAbsolutePath());
+                logger.severe("This crash report has been saved to: " + var5.getAbsolutePath());
             }
             else
             {
                 logger.severe("We were unable to save this crash report to disk.");
             }
 
-            this.finalTick(var2);
+            this.finalTick(var50);
         }
         finally
         {
@@ -679,9 +665,9 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
                 this.stopServer();
                 this.serverStopped = true;
             }
-            catch (Throwable var46)
+            catch (Throwable var7)
             {
-                var46.printStackTrace();
+                var7.printStackTrace();
             }
             finally
             {
diff --git a/src/minecraft/org/bukkit/craftbukkit/Spigot.java b/src/minecraft/org/bukkit/craftbukkit/Spigot.java
index ccb1cc7..83988c3 100644
--- a/src/minecraft/org/bukkit/craftbukkit/Spigot.java
+++ b/src/minecraft/org/bukkit/craftbukkit/Spigot.java
@@ -6,6 +6,7 @@ import org.bukkit.configuration.file.YamlConfiguration;
 public class Spigot {
     public static void initialize(CraftServer server, SimpleCommandMap commandMap, YamlConfiguration configuration) {
         commandMap.register("bukkit", new org.bukkit.craftbukkit.command.RestartCommand("restart"));
+        commandMap.register("bukkit", new org.bukkit.craftbukkit.command.TicksPerSecondCommand("tps"));
 
         int timeout = configuration.getInt("settings.timeout-time", 300);
         if (timeout == 180) {
diff --git a/src/minecraft/org/bukkit/craftbukkit/command/TicksPerSecondCommand.java b/src/minecraft/org/bukkit/craftbukkit/command/TicksPerSecondCommand.java
new file mode 100644
index 0000000..4bbe528
--- /dev/null
+++ b/src/minecraft/org/bukkit/craftbukkit/command/TicksPerSecondCommand.java
@@ -0,0 +1,34 @@
+package org.bukkit.craftbukkit.command;
+
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+public class TicksPerSecondCommand extends Command {
+
+    public TicksPerSecondCommand(String name) {
+        super(name);
+        this.description = "Gets the current ticks per second for the server";
+        this.usageMessage = "/tps";
+        this.setPermission("bukkit.command.tps");
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String currentAlias, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        double tps = Math.min(20,  Math.round(net.minecraft.server.MinecraftServer/*was:MinecraftServer*/.currentTPS * 10) / 10.0);
+        ChatColor color;
+        if (tps > 19.2D) {
+            color = ChatColor.GREEN;
+        } else if (tps > 17.4D) {
+            color = ChatColor.YELLOW;
+        } else {
+            color = ChatColor.RED;
+        }
+
+        sender.sendMessage(ChatColor.GOLD + "[TPS] " + color + tps);
+
+        return true;
+    }
+}
