From de86f8c74254779dfecfb89c445acf819878ee01 Mon Sep 17 00:00:00 2001
From: EdGruberman <ed@rjump.com>
Date: Thu, 24 Jan 2013 17:37:01 -0700
Subject: [PATCH] Target default world when returning from The End; Fixes BUKKIT-3494

Due to the having to generate new logic to avoid using the customized
PlayerConnection.moveToWorld, entities returning from The End were not
properly calculating their exit target.  This commit corrects that
logic.

diff --git a/src/minecraft/net/minecraft/entity/Entity.java b/src/minecraft/net/minecraft/entity/Entity.java
index 6668d06..9ae8e0b 100644
--- a/src/minecraft/net/minecraft/entity/Entity.java
+++ b/src/minecraft/net/minecraft/entity/Entity.java
@@ -2525,8 +2525,10 @@ public abstract class Entity
 
             Location enter = this.getBukkitEntity().getLocation();
             Location exit = exitWorld != null ? var2.getConfigurationManager().calculateTarget(enter, var2.worldServerForDimension(par1)) : null;
+            boolean useTravelAgent = exitWorld != null && !(this.dimension == 1 && exitWorld.dimension == 1); // don't use agent for custom worlds or return from THE_END
             TravelAgent agent = exit != null ? (TravelAgent)((CraftWorld) exit.getWorld()).getHandle().func_85176_s() : null;
             EntityPortalEvent event = new EntityPortalEvent(this.getBukkitEntity(), enter, exit, agent);
+            event.useTravelAgent(useTravelAgent);
             event.getEntity().getServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled() || event.getTo() == null || !this.isEntityAlive())
diff --git a/src/minecraft/net/minecraft/server/management/ServerConfigurationManager.java b/src/minecraft/net/minecraft/server/management/ServerConfigurationManager.java
index f8eb91e..00996c4 100644
--- a/src/minecraft/net/minecraft/server/management/ServerConfigurationManager.java
+++ b/src/minecraft/net/minecraft/server/management/ServerConfigurationManager.java
@@ -565,23 +565,31 @@ public abstract class ServerConfigurationManager
 
         Location enter = entityplayer.getBukkitEntity().getLocation();
         Location exit = null;
+        boolean useTravelAgent = false; // don't use agent for custom worlds or return from THE_END
 
         if (exitWorld != null)
         {
             if ((cause == TeleportCause.END_PORTAL) && (i == 0))
             {
-                // THE_END -> NORMAL; use bed if available
+                // THE_END -> NORMAL; use bed if available, otherwise default spawn
                 exit = ((CraftPlayer) entityplayer.getBukkitEntity()).getBedSpawnLocation();
-            }
 
-            if (exit == null)
+                if (exit == null)
+                {
+                    exit = exitWorld.getWorld().getSpawnLocation();
+                }
+            }
+            else
             {
+                // NORMAL <-> NETHER or NORMAL -> THE_END
                 exit = this.calculateTarget(enter, exitWorld);
+                useTravelAgent = true;
             }
         }
 
         TravelAgent agent = exit != null ? (TravelAgent)((CraftWorld) exit.getWorld()).getHandle().func_85176_s() : null;
         PlayerPortalEvent event = new PlayerPortalEvent(entityplayer.getBukkitEntity(), enter, exit, agent, cause);
+        event.useTravelAgent(useTravelAgent);
         Bukkit.getServer().getPluginManager().callEvent(event);
 
         if (event.isCancelled() || event.getTo() == null)
@@ -665,6 +673,8 @@ public abstract class ServerConfigurationManager
 
             if (i == 1)
             {
+                // use default NORMAL world spawn instead of target
+                worldserver1 = this.mcServer.worlds.get(0);
                 chunkcoordinates = worldserver1.getSpawnPoint();
             }
             else
@@ -704,7 +714,7 @@ public abstract class ServerConfigurationManager
         }
 
         // entity.spawnIn(worldserver1);
-        return new Location(target.getWorld(), d0, y, d1, yaw, pitch);
+        return new Location(worldserver1.getWorld(), d0, y, d1, yaw, pitch);
     }
 
     // copy of original a(Entity, int, WorldServer, WorldServer) method with only entity repositioning logic
diff --git a/src/minecraft/net/minecraft/world/Teleporter.java b/src/minecraft/net/minecraft/world/Teleporter.java
index d0981b6..38d6c88 100644
--- a/src/minecraft/net/minecraft/world/Teleporter.java
+++ b/src/minecraft/net/minecraft/world/Teleporter.java
@@ -238,9 +238,9 @@ public class Teleporter
             // entity.setPositionRotation((double) i, (double) j, (double) k, entity.yaw, 0.0F);
             // entity.motX = entity.motY = entity.motZ = 0.0D;
             position.setPitch(0.0F);
-            position.setX(0);
-            position.setY(0);
-            position.setZ(0);
+            velocity.setX(0);
+            velocity.setY(0);
+            velocity.setZ(0);
         }
         else
         {
