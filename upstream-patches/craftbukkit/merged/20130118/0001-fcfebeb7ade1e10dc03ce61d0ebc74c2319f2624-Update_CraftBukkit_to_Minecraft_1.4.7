From fcfebeb7ade1e10dc03ce61d0ebc74c2319f2624 Mon Sep 17 00:00:00 2001
From: feildmaster <admin@feildmaster.com>
Date: Thu, 17 Jan 2013 03:28:44 -0600
Subject: [PATCH] Update CraftBukkit to Minecraft 1.4.7


diff --git a/pom.xml b/pom.xml
index 538f61b..ba2a7db 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>org.bukkit</groupId>
   <artifactId>craftbukkit</artifactId>
   <packaging>jar</packaging>
-  <version>1.4.6-R0.4-SNAPSHOT</version>
+  <version>1.4.7-R0.1-SNAPSHOT</version>
   <name>CraftBukkit</name>
   <url>http://www.bukkit.org</url>
 
@@ -12,8 +12,8 @@
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <api.version>unknown</api.version>
     <junit.version>4.11</junit.version>
-    <minecraft.version>1.4.6</minecraft.version>
-    <minecraft_version>1_4_6</minecraft_version>
+    <minecraft.version>1.4.7</minecraft.version>
+    <minecraft_version>1_4_R1</minecraft_version>
   </properties>
 
   <scm>
diff --git a/src/minecraft/net/minecraft/entity/Entity.java b/src/minecraft/net/minecraft/entity/Entity.java
index 2eeea9d..b3b790e 100644
--- a/src/minecraft/net/minecraft/entity/Entity.java
+++ b/src/minecraft/net/minecraft/entity/Entity.java
@@ -1678,7 +1678,7 @@ public abstract class Entity
                 // Reset the persistence for tamed animals
                 if (entity instanceof EntityTameable && !isLevelAtLeast(par1NBTTagCompound, 2) && !par1NBTTagCompound.getBoolean("PersistenceRequired"))
                 {
-                    entity.persistenceRequired = !entity.bj();
+                    entity.persistenceRequired = !entity.canDespawn();
                 }
             }
 
diff --git a/src/minecraft/net/minecraft/entity/EntityLiving.java b/src/minecraft/net/minecraft/entity/EntityLiving.java
index 68d1de6..8c66a69 100644
--- a/src/minecraft/net/minecraft/entity/EntityLiving.java
+++ b/src/minecraft/net/minecraft/entity/EntityLiving.java
@@ -184,7 +184,9 @@ public abstract class EntityLiving extends Entity
     private PathNavigate navigator;
     protected final EntityAITasks tasks;
     protected final EntityAITasks targetTasks;
-    private EntityLiving bN;
+
+    /** The active target the Task system uses for tracking */
+    private EntityLiving attackTarget;
     private EntitySenses senses;
     private float AIMoveSpeed;
     private ChunkCoordinates homePosition = new ChunkCoordinates(0, 0, 0);
@@ -201,7 +203,7 @@ public abstract class EntityLiving extends Entity
     public boolean isSwingInProgress = false;
     public int swingProgressInt = 0;
     public boolean canPickUpLoot = false; // CraftBukkit - protected -> public
-    public boolean persistenceRequired = !this.bj(); // CraftBukkit - private -> public, change value
+    public boolean persistenceRequired = !this.canDespawn(); // CraftBukkit - private -> public, change value
 
     /**
      * The number of updates over which the new position and rotation are to be applied to the entity.
@@ -360,14 +362,20 @@ public abstract class EntityLiving extends Entity
         return false;
     }
 
-    public EntityLiving aG()
+    /**
+     * Gets the active target the Task system uses for tracking
+     */
+    public EntityLiving getAttackTarget()
     {
-        return this.bN;
+        return this.attackTarget;
     }
 
-    public void b(EntityLiving entityliving)
+    /**
+     * Sets the active target the Task system uses for tracking
+     */
+    public void setAttackTarget(EntityLiving par1EntityLiving)
     {
-        this.bN = entityliving;
+        this.attackTarget = par1EntityLiving;
     }
 
     /**
@@ -1713,7 +1721,7 @@ public abstract class EntityLiving extends Entity
 
             for (var3 = 0; var3 < this.equipment.length; ++var3)
             {
-                this.equipment[var3] = ItemStack.a((NBTTagCompound) var2.tagAt(var3));
+                this.equipment[var3] = ItemStack.loadItemStackFromNBT((NBTTagCompound)var2.tagAt(var3));
             }
         }
 
@@ -2043,7 +2051,10 @@ public abstract class EntityLiving extends Entity
         this.isAirBorne = true;
     }
 
-    protected boolean bj()
+    /**
+     * Determines if an entity can be despawned, used on idle far away entities
+     */
+    protected boolean canDespawn()
     {
         return true;
     }
@@ -2595,7 +2606,7 @@ public abstract class EntityLiving extends Entity
 
     public int func_82143_as()
     {
-        if (this.aG() == null)
+        if (this.getAttackTarget() == null)
         {
             return 3;
         }
diff --git a/src/minecraft/net/minecraft/entity/ai/EntityAIArrowAttack.java b/src/minecraft/net/minecraft/entity/ai/EntityAIArrowAttack.java
index 7d43789..08c902c 100644
--- a/src/minecraft/net/minecraft/entity/ai/EntityAIArrowAttack.java
+++ b/src/minecraft/net/minecraft/entity/ai/EntityAIArrowAttack.java
@@ -53,7 +53,7 @@ public class EntityAIArrowAttack extends EntityAIBase
      */
     public boolean shouldExecute()
     {
-        EntityLiving var1 = this.entityHost.aG();
+        EntityLiving var1 = this.entityHost.getAttackTarget();
 
         if (var1 == null)
         {
diff --git a/src/minecraft/net/minecraft/entity/ai/EntityAIAttackOnCollide.java b/src/minecraft/net/minecraft/entity/ai/EntityAIAttackOnCollide.java
index beee7b5..9aed469 100644
--- a/src/minecraft/net/minecraft/entity/ai/EntityAIAttackOnCollide.java
+++ b/src/minecraft/net/minecraft/entity/ai/EntityAIAttackOnCollide.java
@@ -45,7 +45,7 @@ public class EntityAIAttackOnCollide extends EntityAIBase
      */
     public boolean shouldExecute()
     {
-        EntityLiving var1 = this.attacker.aG();
+        EntityLiving var1 = this.attacker.getAttackTarget();
 
         if (var1 == null)
         {
@@ -68,7 +68,7 @@ public class EntityAIAttackOnCollide extends EntityAIBase
      */
     public boolean continueExecuting()
     {
-        EntityLiving var1 = this.attacker.aG();
+        EntityLiving var1 = this.attacker.getAttackTarget();
         return var1 == null ? false : (!this.entityTarget.isEntityAlive() ? false : (!this.field_75437_f ? !this.attacker.getNavigator().noPath() : this.attacker.isWithinHomeDistance(MathHelper.floor_double(this.entityTarget.posX), MathHelper.floor_double(this.entityTarget.posY), MathHelper.floor_double(this.entityTarget.posZ))));
     }
 
diff --git a/src/minecraft/net/minecraft/entity/ai/EntityAISit.java b/src/minecraft/net/minecraft/entity/ai/EntityAISit.java
index 652c051..45b5c63 100644
--- a/src/minecraft/net/minecraft/entity/ai/EntityAISit.java
+++ b/src/minecraft/net/minecraft/entity/ai/EntityAISit.java
@@ -20,7 +20,7 @@ public class EntityAISit extends EntityAIBase
     {
         if (!this.a.isTamed())
         {
-            return this.b && this.a.aG() == null; // CraftBukkit - Allow sitting for wild animals
+            return this.b && this.a.getAttackTarget() == null; // CraftBukkit - Allow sitting for wild animals
         }
         else if (this.a.isInWater())
         {
@@ -54,8 +54,11 @@ public class EntityAISit extends EntityAIBase
         this.a.setSitting(false);
     }
 
-    public void a(boolean flag)
+    /**
+     * Sets the sitting flag.
+     */
+    public void setSitting(boolean par1)
     {
-        this.b = flag;
+        this.b = par1;
     }
 }
diff --git a/src/minecraft/net/minecraft/entity/ai/EntityAITarget.java b/src/minecraft/net/minecraft/entity/ai/EntityAITarget.java
index 7e40dce..a8a4089 100644
--- a/src/minecraft/net/minecraft/entity/ai/EntityAITarget.java
+++ b/src/minecraft/net/minecraft/entity/ai/EntityAITarget.java
@@ -45,7 +45,7 @@ public abstract class EntityAITarget extends EntityAIBase
      */
     public boolean continueExecuting()
     {
-        EntityLiving var1 = this.taskOwner.aG();
+        EntityLiving var1 = this.taskOwner.getAttackTarget();
 
         if (var1 == null)
         {
@@ -92,7 +92,7 @@ public abstract class EntityAITarget extends EntityAIBase
      */
     public void resetTask()
     {
-        this.taskOwner.b((EntityLiving) null);
+        this.taskOwner.setAttackTarget((EntityLiving)null);
     }
 
     /**
@@ -194,16 +194,12 @@ public abstract class EntityAITarget extends EntityAIBase
 
                 if (event.isCancelled() || event.getTarget() == null)
                 {
-                    if (this.taskOwner instanceof EntityCreature)
-                    {
-                        ((EntityCreature) this.taskOwner).entityToAttack = null;
-                    }
-
+                    this.taskOwner.setAttackTarget(null);
                     return false;
                 }
                 else if (par1EntityLiving.getBukkitEntity() != event.getTarget())
                 {
-                    this.taskOwner.b((EntityLiving)((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle());
+                    this.taskOwner.setAttackTarget((EntityLiving)((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle());
                 }
 
                 if (this.taskOwner instanceof EntityCreature)
diff --git a/src/minecraft/net/minecraft/entity/boss/EntityWither.java b/src/minecraft/net/minecraft/entity/boss/EntityWither.java
index 01ecbc2..807dd64 100644
--- a/src/minecraft/net/minecraft/entity/boss/EntityWither.java
+++ b/src/minecraft/net/minecraft/entity/boss/EntityWither.java
@@ -337,9 +337,9 @@ public class EntityWither extends EntityMob implements IRangedAttackMob
                 }
             }
 
-            if (this.aG() != null)
+            if (this.getAttackTarget() != null)
             {
-                this.func_82211_c(0, this.aG().entityId);
+                this.func_82211_c(0, this.getAttackTarget().entityId);
             }
             else
             {
diff --git a/src/minecraft/net/minecraft/entity/item/EntityFireworkRocket.java b/src/minecraft/net/minecraft/entity/item/EntityFireworkRocket.java
index 2aa8dba..3d283ad 100644
--- a/src/minecraft/net/minecraft/entity/item/EntityFireworkRocket.java
+++ b/src/minecraft/net/minecraft/entity/item/EntityFireworkRocket.java
@@ -7,8 +7,8 @@ import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 public class EntityFireworkRocket extends Entity
 {
-    private int a;
-    public int b; // CraftBukkit - private -> public
+    private int field_92011_a;
+    public int field_92010_b; // CraftBukkit - private -> public
 
     public EntityFireworkRocket(World par1World)
     {
@@ -18,13 +18,13 @@ public class EntityFireworkRocket extends Entity
 
     protected void entityInit()
     {
-        this.dataWatcher.addObject(8, new ItemStack(0, 0, 0));
+        this.dataWatcher.addObjectByDataType(8, 5);
     }
 
     public EntityFireworkRocket(World par1World, double par2, double par4, double par6, ItemStack par8ItemStack)
     {
         super(par1World);
-        this.a = 0;
+        this.field_92011_a = 0;
         this.setSize(0.25F, 0.25F);
         this.setPosition(par2, par4, par6);
         this.yOffset = 0.0F;
@@ -45,7 +45,7 @@ public class EntityFireworkRocket extends Entity
         this.motionX = this.rand.nextGaussian() * 0.001D;
         this.motionZ = this.rand.nextGaussian() * 0.001D;
         this.motionY = 0.05D;
-        this.b = 10 * var9 + this.rand.nextInt(6) + this.rand.nextInt(7);
+        this.field_92010_b = 10 * var9 + this.rand.nextInt(6) + this.rand.nextInt(7);
     }
 
     /**
@@ -87,19 +87,19 @@ public class EntityFireworkRocket extends Entity
         this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
         this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
 
-        if (this.a == 0)
+        if (this.field_92011_a == 0)
         {
             this.worldObj.playSoundAtEntity(this, "fireworks.launch", 3.0F, 1.0F);
         }
 
-        ++this.a;
+        ++this.field_92011_a;
 
-        if (this.worldObj.isRemote && this.a % 2 < 2)
+        if (this.worldObj.isRemote && this.field_92011_a % 2 < 2)
         {
             this.worldObj.spawnParticle("fireworksSpark", this.posX, this.posY - 0.3D, this.posZ, this.rand.nextGaussian() * 0.05D, -this.motionY * 0.5D, this.rand.nextGaussian() * 0.05D);
         }
 
-        if (!this.worldObj.isRemote && this.a > this.b)
+        if (!this.worldObj.isRemote && this.field_92011_a > this.field_92010_b)
         {
             this.worldObj.setEntityState(this, (byte)17);
             this.setDead();
@@ -111,9 +111,9 @@ public class EntityFireworkRocket extends Entity
      */
     public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound)
     {
-        par1NBTTagCompound.setInteger("Life", this.a);
-        par1NBTTagCompound.setInteger("LifeTime", this.b);
-        ItemStack var2 = this.dataWatcher.f(8);
+        par1NBTTagCompound.setInteger("Life", this.field_92011_a);
+        par1NBTTagCompound.setInteger("LifeTime", this.field_92010_b);
+        ItemStack var2 = this.dataWatcher.getWatchableObjectItemStack(8);
 
         if (var2 != null)
         {
@@ -128,13 +128,13 @@ public class EntityFireworkRocket extends Entity
      */
     public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound)
     {
-        this.a = par1NBTTagCompound.getInteger("Life");
-        this.b = par1NBTTagCompound.getInteger("LifeTime");
+        this.field_92011_a = par1NBTTagCompound.getInteger("Life");
+        this.field_92010_b = par1NBTTagCompound.getInteger("LifeTime");
         NBTTagCompound var2 = par1NBTTagCompound.getCompoundTag("FireworksItem");
 
         if (var2 != null)
         {
-            ItemStack var3 = ItemStack.a(var2);
+            ItemStack var3 = ItemStack.loadItemStackFromNBT(var2);
 
             if (var3 != null)
             {
diff --git a/src/minecraft/net/minecraft/entity/item/EntityItem.java b/src/minecraft/net/minecraft/entity/item/EntityItem.java
index 76ad93f..250983f 100644
--- a/src/minecraft/net/minecraft/entity/item/EntityItem.java
+++ b/src/minecraft/net/minecraft/entity/item/EntityItem.java
@@ -299,7 +299,7 @@ public class EntityItem extends Entity
         // CraftBukkit start
         if (var2 != null)
         {
-            ItemStack itemstack = ItemStack.a(var2);
+            ItemStack itemstack = ItemStack.loadItemStackFromNBT(var2);
 
             if (itemstack != null)
             {
@@ -418,7 +418,7 @@ public class EntityItem extends Entity
 
     public ItemStack func_92014_d()
     {
-        ItemStack var1 = this.getDataWatcher().f(10);
+        ItemStack var1 = this.getDataWatcher().getWatchableObjectItemStack(10);
 
         if (var1 == null)
         {
diff --git a/src/minecraft/net/minecraft/entity/item/EntityMinecart.java b/src/minecraft/net/minecraft/entity/item/EntityMinecart.java
index d176933..839a04c 100644
--- a/src/minecraft/net/minecraft/entity/item/EntityMinecart.java
+++ b/src/minecraft/net/minecraft/entity/item/EntityMinecart.java
@@ -1037,7 +1037,7 @@ public class EntityMinecart extends Entity implements IInventory
 
                 if (var5 >= 0 && var5 < this.cargoItems.length)
                 {
-                    this.cargoItems[var5] = ItemStack.a(var4);
+                    this.cargoItems[var5] = ItemStack.loadItemStackFromNBT(var4);
                 }
             }
         }
diff --git a/src/minecraft/net/minecraft/entity/monster/EntityCreeper.java b/src/minecraft/net/minecraft/entity/monster/EntityCreeper.java
index 60571fb..d326a1b 100644
--- a/src/minecraft/net/minecraft/entity/monster/EntityCreeper.java
+++ b/src/minecraft/net/minecraft/entity/monster/EntityCreeper.java
@@ -65,7 +65,7 @@ public class EntityCreeper extends EntityMob
 
     public int func_82143_as()
     {
-        return this.aG() == null ? 3 : 3 + (this.health - 1);
+        return this.getAttackTarget() == null ? 3 : 3 + (this.health - 1);
     }
 
     /**
diff --git a/src/minecraft/net/minecraft/entity/monster/EntityIronGolem.java b/src/minecraft/net/minecraft/entity/monster/EntityIronGolem.java
index 7b73320..9ffd372 100644
--- a/src/minecraft/net/minecraft/entity/monster/EntityIronGolem.java
+++ b/src/minecraft/net/minecraft/entity/monster/EntityIronGolem.java
@@ -106,7 +106,7 @@ public class EntityIronGolem extends EntityGolem
     {
         if (par1Entity instanceof IMob && this.getRNG().nextInt(20) == 0)
         {
-            this.b((EntityLiving) par1Entity);
+            this.setAttackTarget((EntityLiving)par1Entity);
         }
 
         super.collideWithEntity(par1Entity);
diff --git a/src/minecraft/net/minecraft/entity/monster/EntityWitch.java b/src/minecraft/net/minecraft/entity/monster/EntityWitch.java
index 40ee636..f5db339 100644
--- a/src/minecraft/net/minecraft/entity/monster/EntityWitch.java
+++ b/src/minecraft/net/minecraft/entity/monster/EntityWitch.java
@@ -150,11 +150,11 @@ public class EntityWitch extends EntityMob implements IRangedAttackMob
                 {
                     var5 = 16341;
                 }
-                else if (this.rand.nextFloat() < 0.25F && this.aG() != null && !this.isPotionActive(Potion.moveSpeed) && this.aG().getDistanceSqToEntity(this) > 121.0D)
+                else if (this.rand.nextFloat() < 0.25F && this.getAttackTarget() != null && !this.isPotionActive(Potion.moveSpeed) && this.getAttackTarget().getDistanceSqToEntity(this) > 121.0D)
                 {
                     var5 = 16274;
                 }
-                else if (this.rand.nextFloat() < 0.25F && this.aG() != null && !this.isPotionActive(Potion.moveSpeed) && this.aG().getDistanceSqToEntity(this) > 121.0D)
+                else if (this.rand.nextFloat() < 0.25F && this.getAttackTarget() != null && !this.isPotionActive(Potion.moveSpeed) && this.getAttackTarget().getDistanceSqToEntity(this) > 121.0D)
                 {
                     var5 = 16274;
                 }
diff --git a/src/minecraft/net/minecraft/entity/passive/EntityOcelot.java b/src/minecraft/net/minecraft/entity/passive/EntityOcelot.java
index 9ab20e4..de51f9a 100644
--- a/src/minecraft/net/minecraft/entity/passive/EntityOcelot.java
+++ b/src/minecraft/net/minecraft/entity/passive/EntityOcelot.java
@@ -86,7 +86,10 @@ public class EntityOcelot extends EntityTameable
         }
     }
 
-    protected boolean bj()
+    /**
+     * Determines if an entity can be despawned, used on idle far away entities
+     */
+    protected boolean canDespawn()
     {
         return !this.isTamed();
     }
@@ -183,7 +186,7 @@ public class EntityOcelot extends EntityTameable
         }
         else
         {
-            this.aiSit.a(false);
+            this.aiSit.setSitting(false);
             return super.attackEntityFrom(par1DamageSource, par2);
         }
     }
@@ -204,7 +207,7 @@ public class EntityOcelot extends EntityTameable
         {
             if (par1EntityPlayer.username.equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(var2))
             {
-                this.aiSit.a(!this.isSitting());
+                this.aiSit.setSitting(!this.isSitting());
             }
         }
         else if (this.aiTempt.func_75277_f() && var2 != null && var2.itemID == Item.fishRaw.itemID && par1EntityPlayer.getDistanceSqToEntity(this) < 9.0D)
@@ -228,7 +231,7 @@ public class EntityOcelot extends EntityTameable
                     this.setTameSkin(1 + this.worldObj.rand.nextInt(3));
                     this.setOwner(par1EntityPlayer.username);
                     this.playTameEffect(true);
-                    this.aiSit.a(true);
+                    this.aiSit.setSitting(true);
                     this.worldObj.setEntityState(this, (byte)7);
                 }
                 else
diff --git a/src/minecraft/net/minecraft/entity/passive/EntityWolf.java b/src/minecraft/net/minecraft/entity/passive/EntityWolf.java
index f6f7ae8..34cf579 100644
--- a/src/minecraft/net/minecraft/entity/passive/EntityWolf.java
+++ b/src/minecraft/net/minecraft/entity/passive/EntityWolf.java
@@ -73,11 +73,14 @@ public class EntityWolf extends EntityTameable
         return true;
     }
 
-    public void b(EntityLiving entityliving)
+    /**
+     * Sets the active target the Task system uses for tracking
+     */
+    public void setAttackTarget(EntityLiving par1EntityLiving)
     {
-        super.b(entityliving);
+        super.setAttackTarget(par1EntityLiving);
 
-        if (entityliving instanceof EntityPlayer)
+        if (par1EntityLiving instanceof EntityPlayer)
         {
             this.setAngry(true);
         }
@@ -136,7 +139,10 @@ public class EntityWolf extends EntityTameable
         }
     }
 
-    protected boolean bj()
+    /**
+     * Determines if an entity can be despawned, used on idle far away entities
+     */
+    protected boolean canDespawn()
     {
         // CraftBukkit - added && !this.isTamed()
         return this.isAngry() && !this.isTamed();
@@ -288,7 +294,7 @@ public class EntityWolf extends EntityTameable
         else
         {
             Entity var3 = par1DamageSource.getEntity();
-            this.aiSit.a(false);
+            this.aiSit.setSitting(false);
 
             if (var3 != null && !(var3 instanceof EntityPlayer) && !(var3 instanceof EntityArrow))
             {
@@ -357,7 +363,7 @@ public class EntityWolf extends EntityTameable
 
             if (par1EntityPlayer.username.equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(var2))
             {
-                this.aiSit.a(!this.isSitting());
+                this.aiSit.setSitting(!this.isSitting());
                 this.isJumping = false;
                 this.setPathToEntity((PathEntity)null);
             }
@@ -382,8 +388,8 @@ public class EntityWolf extends EntityTameable
                     boolean updateMaxHealth = this.getMaxHealth() == this.maxHealth; // CraftBukkit
                     this.setTamed(true);
                     this.setPathToEntity((PathEntity)null);
-                    this.b((EntityLiving) null);
-                    this.aiSit.a(true);
+                    this.setAttackTarget((EntityLiving)null);
+                    this.aiSit.setSitting(true);
 
                     // CraftBukkit start
                     if (updateMaxHealth)
diff --git a/src/minecraft/net/minecraft/entity/player/EntityPlayerMP.java b/src/minecraft/net/minecraft/entity/player/EntityPlayerMP.java
index e5b837c..f742bff 100644
--- a/src/minecraft/net/minecraft/entity/player/EntityPlayerMP.java
+++ b/src/minecraft/net/minecraft/entity/player/EntityPlayerMP.java
@@ -953,7 +953,11 @@ public class EntityPlayerMP extends EntityPlayer implements ICrafting
         }
     }
 
-    public void m()
+    /**
+     * this function is called when a players inventory is sent to him, lastHealth is updated on any dimension
+     * transitions, then reset.
+     */
+    public void setPlayerHealthUpdated()
     {
         this.lastHealth = -99999999;
         this.lastExperience = -1; // CraftBukkit - Added to reset
diff --git a/src/minecraft/net/minecraft/entity/player/InventoryPlayer.java b/src/minecraft/net/minecraft/entity/player/InventoryPlayer.java
index 096f445..c330246 100644
--- a/src/minecraft/net/minecraft/entity/player/InventoryPlayer.java
+++ b/src/minecraft/net/minecraft/entity/player/InventoryPlayer.java
@@ -528,7 +528,7 @@ public class InventoryPlayer implements IInventory
         {
             NBTTagCompound var3 = (NBTTagCompound)par1NBTTagList.tagAt(var2);
             int var4 = var3.getByte("Slot") & 255;
-            ItemStack var5 = ItemStack.a(var3);
+            ItemStack var5 = ItemStack.loadItemStackFromNBT(var3);
 
             if (var5 != null)
             {
diff --git a/src/minecraft/net/minecraft/entity/projectile/EntityArrow.java b/src/minecraft/net/minecraft/entity/projectile/EntityArrow.java
index 0bc7a82..8f9ea72 100644
--- a/src/minecraft/net/minecraft/entity/projectile/EntityArrow.java
+++ b/src/minecraft/net/minecraft/entity/projectile/EntityArrow.java
@@ -323,13 +323,11 @@ public class EntityArrow extends Entity implements IProjectile
                                 }
                             }
 
-                            // CraftBukkit start
                             if (this.shootingEntity != null)
                             {
                                 EnchantmentThorns.func_92044_a(this.shootingEntity, var24, this.rand);
                             }
 
-                            // CraftBukkit end
                             if (this.shootingEntity != null && var4.entityHit != this.shootingEntity && var4.entityHit instanceof EntityPlayer && this.shootingEntity instanceof EntityPlayerMP)
                             {
                                 ((EntityPlayerMP)this.shootingEntity).playerNetServerHandler.sendPacketToPlayer(new Packet70GameEvent(6, 0));
diff --git a/src/minecraft/net/minecraft/entity/projectile/EntityPotion.java b/src/minecraft/net/minecraft/entity/projectile/EntityPotion.java
index 12b516e..20631cd 100644
--- a/src/minecraft/net/minecraft/entity/projectile/EntityPotion.java
+++ b/src/minecraft/net/minecraft/entity/projectile/EntityPotion.java
@@ -196,7 +196,7 @@ public class EntityPotion extends EntityThrowable
 
         if (par1NBTTagCompound.hasKey("Potion"))
         {
-            this.potionDamage = ItemStack.a(par1NBTTagCompound.getCompoundTag("Potion"));
+            this.potionDamage = ItemStack.loadItemStackFromNBT(par1NBTTagCompound.getCompoundTag("Potion"));
         }
         else
         {
diff --git a/src/minecraft/net/minecraft/inventory/InventoryEnderChest.java b/src/minecraft/net/minecraft/inventory/InventoryEnderChest.java
index 6ecc1cb..32e01ac 100644
--- a/src/minecraft/net/minecraft/inventory/InventoryEnderChest.java
+++ b/src/minecraft/net/minecraft/inventory/InventoryEnderChest.java
@@ -82,7 +82,7 @@ public class InventoryEnderChest extends InventoryBasic
 
             if (var4 >= 0 && var4 < this.getSizeInventory())
             {
-                this.setInventorySlotContents(var4, ItemStack.a(var3));
+                this.setInventorySlotContents(var4, ItemStack.loadItemStackFromNBT(var3));
             }
         }
     }
diff --git a/src/minecraft/net/minecraft/item/ItemStack.java b/src/minecraft/net/minecraft/item/ItemStack.java
index 350152e..2d8cfc0 100644
--- a/src/minecraft/net/minecraft/item/ItemStack.java
+++ b/src/minecraft/net/minecraft/item/ItemStack.java
@@ -76,11 +76,11 @@ public final class ItemStack
         this.setItemDamage(par3); // CraftBukkit
     }
 
-    public static ItemStack a(NBTTagCompound nbttagcompound)
+    public static ItemStack loadItemStackFromNBT(NBTTagCompound par0NBTTagCompound)
     {
-        ItemStack itemstack = new ItemStack();
-        itemstack.readFromNBT(nbttagcompound);
-        return itemstack.getItem() != null ? itemstack : null;
+        ItemStack var1 = new ItemStack();
+        var1.readFromNBT(par0NBTTagCompound);
+        return var1.getItem() != null ? var1 : null;
     }
 
     private ItemStack()
diff --git a/src/minecraft/net/minecraft/nbt/NBTTagCompound.java b/src/minecraft/net/minecraft/nbt/NBTTagCompound.java
deleted file mode 100644
index b8c01af..0000000
--- a/src/minecraft/net/minecraft/nbt/NBTTagCompound.java
+++ /dev/null
@@ -1,444 +0,0 @@
-package net.minecraft.nbt;
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.concurrent.Callable;
-import net.minecraft.crash.CrashReport;
-import net.minecraft.crash.CrashReportCategory;
-import net.minecraft.util.ReportedException;
-
-public class NBTTagCompound extends NBTBase
-{
-    /**
-     * The key-value pairs for the tag. Each key is a UTF string, each value is a tag.
-     */
-    private Map tagMap = new HashMap();
-
-    public NBTTagCompound()
-    {
-        super("");
-    }
-
-    public NBTTagCompound(String par1Str)
-    {
-        super(par1Str);
-    }
-
-    void write(DataOutput par1DataOutput)
-    {
-        Iterator var2 = this.tagMap.values().iterator();
-
-        while (var2.hasNext())
-        {
-            NBTBase var3 = (NBTBase)var2.next();
-            NBTBase.writeNamedTag(var3, par1DataOutput);
-        }
-
-        // CraftBukkit start
-        try
-        {
-            par1DataOutput.writeByte(0);
-        }
-        catch (java.io.IOException ex)
-        {
-            ex.printStackTrace();
-        }
-
-        // CraftBukkit end
-    }
-
-    void load(DataInput par1DataInput)
-    {
-        this.tagMap.clear();
-        NBTBase var2;
-
-        while ((var2 = NBTBase.readNamedTag(par1DataInput)).getId() != 0)
-        {
-            this.tagMap.put(var2.getName(), var2);
-        }
-    }
-
-    /**
-     * Returns all the values in the tagMap HashMap.
-     */
-    public Collection getTags()
-    {
-        return this.tagMap.values();
-    }
-
-    /**
-     * Gets the type byte for the tag.
-     */
-    public byte getId()
-    {
-        return (byte)10;
-    }
-
-    /**
-     * Stores the given tag into the map with the given string key. This is mostly used to store tag lists.
-     */
-    public void setTag(String par1Str, NBTBase par2NBTBase)
-    {
-        this.tagMap.put(par1Str, par2NBTBase.setName(par1Str));
-    }
-
-    /**
-     * Stores a new NBTTagByte with the given byte value into the map with the given string key.
-     */
-    public void setByte(String par1Str, byte par2)
-    {
-        this.tagMap.put(par1Str, new NBTTagByte(par1Str, par2));
-    }
-
-    /**
-     * Stores a new NBTTagShort with the given short value into the map with the given string key.
-     */
-    public void setShort(String par1Str, short par2)
-    {
-        this.tagMap.put(par1Str, new NBTTagShort(par1Str, par2));
-    }
-
-    /**
-     * Stores a new NBTTagInt with the given integer value into the map with the given string key.
-     */
-    public void setInteger(String par1Str, int par2)
-    {
-        this.tagMap.put(par1Str, new NBTTagInt(par1Str, par2));
-    }
-
-    /**
-     * Stores a new NBTTagLong with the given long value into the map with the given string key.
-     */
-    public void setLong(String par1Str, long par2)
-    {
-        this.tagMap.put(par1Str, new NBTTagLong(par1Str, par2));
-    }
-
-    /**
-     * Stores a new NBTTagFloat with the given float value into the map with the given string key.
-     */
-    public void setFloat(String par1Str, float par2)
-    {
-        this.tagMap.put(par1Str, new NBTTagFloat(par1Str, par2));
-    }
-
-    /**
-     * Stores a new NBTTagDouble with the given double value into the map with the given string key.
-     */
-    public void setDouble(String par1Str, double par2)
-    {
-        this.tagMap.put(par1Str, new NBTTagDouble(par1Str, par2));
-    }
-
-    /**
-     * Stores a new NBTTagString with the given string value into the map with the given string key.
-     */
-    public void setString(String par1Str, String par2Str)
-    {
-        this.tagMap.put(par1Str, new NBTTagString(par1Str, par2Str));
-    }
-
-    /**
-     * Stores a new NBTTagByteArray with the given array as data into the map with the given string key.
-     */
-    public void setByteArray(String par1Str, byte[] par2ArrayOfByte)
-    {
-        this.tagMap.put(par1Str, new NBTTagByteArray(par1Str, par2ArrayOfByte));
-    }
-
-    /**
-     * Stores a new NBTTagIntArray with the given array as data into the map with the given string key.
-     */
-    public void setIntArray(String par1Str, int[] par2ArrayOfInteger)
-    {
-        this.tagMap.put(par1Str, new NBTTagIntArray(par1Str, par2ArrayOfInteger));
-    }
-
-    /**
-     * Stores the given NBTTagCompound into the map with the given string key.
-     */
-    public void setCompoundTag(String par1Str, NBTTagCompound par2NBTTagCompound)
-    {
-        this.tagMap.put(par1Str, par2NBTTagCompound.setName(par1Str));
-    }
-
-    /**
-     * Stores the given boolean value as a NBTTagByte, storing 1 for true and 0 for false, using the given string key.
-     */
-    public void setBoolean(String par1Str, boolean par2)
-    {
-        this.setByte(par1Str, (byte)(par2 ? 1 : 0));
-    }
-
-    /**
-     * gets a generic tag with the specified name
-     */
-    public NBTBase getTag(String par1Str)
-    {
-        return (NBTBase)this.tagMap.get(par1Str);
-    }
-
-    /**
-     * Returns whether the given string has been previously stored as a key in the map.
-     */
-    public boolean hasKey(String par1Str)
-    {
-        return this.tagMap.containsKey(par1Str);
-    }
-
-    /**
-     * Retrieves a byte value using the specified key, or 0 if no such key was stored.
-     */
-    public byte getByte(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? 0 : ((NBTTagByte)this.tagMap.get(par1Str)).data;
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 1, var3));
-        }
-    }
-
-    /**
-     * Retrieves a short value using the specified key, or 0 if no such key was stored.
-     */
-    public short getShort(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? 0 : ((NBTTagShort)this.tagMap.get(par1Str)).data;
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 2, var3));
-        }
-    }
-
-    /**
-     * Retrieves an integer value using the specified key, or 0 if no such key was stored.
-     */
-    public int getInteger(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? 0 : ((NBTTagInt)this.tagMap.get(par1Str)).data;
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 3, var3));
-        }
-    }
-
-    /**
-     * Retrieves a long value using the specified key, or 0 if no such key was stored.
-     */
-    public long getLong(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? 0L : ((NBTTagLong)this.tagMap.get(par1Str)).data;
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 4, var3));
-        }
-    }
-
-    /**
-     * Retrieves a float value using the specified key, or 0 if no such key was stored.
-     */
-    public float getFloat(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? 0.0F : ((NBTTagFloat)this.tagMap.get(par1Str)).data;
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 5, var3));
-        }
-    }
-
-    /**
-     * Retrieves a double value using the specified key, or 0 if no such key was stored.
-     */
-    public double getDouble(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? 0.0D : ((NBTTagDouble)this.tagMap.get(par1Str)).data;
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 6, var3));
-        }
-    }
-
-    /**
-     * Retrieves a string value using the specified key, or an empty string if no such key was stored.
-     */
-    public String getString(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? "" : ((NBTTagString)this.tagMap.get(par1Str)).data;
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 8, var3));
-        }
-    }
-
-    /**
-     * Retrieves a byte array using the specified key, or a zero-length array if no such key was stored.
-     */
-    public byte[] getByteArray(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(par1Str)).byteArray;
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 7, var3));
-        }
-    }
-
-    /**
-     * Retrieves an int array using the specified key, or a zero-length array if no such key was stored.
-     */
-    public int[] getIntArray(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? new int[0] : ((NBTTagIntArray)this.tagMap.get(par1Str)).intArray;
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 11, var3));
-        }
-    }
-
-    /**
-     * Retrieves a NBTTagCompound subtag matching the specified key, or a new empty NBTTagCompound if no such key was
-     * stored.
-     */
-    public NBTTagCompound getCompoundTag(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? new NBTTagCompound(par1Str) : (NBTTagCompound)this.tagMap.get(par1Str);
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 10, var3));
-        }
-    }
-
-    /**
-     * Retrieves a NBTTagList subtag matching the specified key, or a new empty NBTTagList if no such key was stored.
-     */
-    public NBTTagList getTagList(String par1Str)
-    {
-        try
-        {
-            return !this.tagMap.containsKey(par1Str) ? new NBTTagList(par1Str) : (NBTTagList)this.tagMap.get(par1Str);
-        }
-        catch (ClassCastException var3)
-        {
-            throw new ReportedException(this.createCrashReport(par1Str, 9, var3));
-        }
-    }
-
-    /**
-     * Retrieves a boolean value using the specified key, or false if no such key was stored. This uses the getByte
-     * method.
-     */
-    public boolean getBoolean(String par1Str)
-    {
-        return this.getByte(par1Str) != 0;
-    }
-
-    public void o(String s)
-    {
-        this.tagMap.remove(s);
-    }
-
-    public String toString()
-    {
-        return "" + this.tagMap.size() + " entries";
-    }
-
-    public boolean d()
-    {
-        return this.tagMap.isEmpty();
-    }
-
-    /**
-     * Create a crash report which indicates a NBT read error.
-     */
-    private CrashReport createCrashReport(String par1Str, int par2, ClassCastException par3ClassCastException)
-    {
-        CrashReport var4 = CrashReport.makeCrashReport(par3ClassCastException, "Reading NBT data");
-        CrashReportCategory var5 = var4.makeCategoryDepth("Corrupt NBT tag", 1);
-        var5.addCrashSectionCallable("Tag type found", (Callable)(new CallableTagCompound1(this, par1Str)));
-        var5.addCrashSectionCallable("Tag type expected", (Callable)(new CallableTagCompound2(this, par2)));
-        var5.addCrashSection("Tag name", par1Str);
-
-        if (this.getName() != null && this.getName().length() > 0)
-        {
-            var5.addCrashSection("Tag parent", this.getName());
-        }
-
-        return var4;
-    }
-
-    /**
-     * Creates a clone of the tag.
-     */
-    public NBTBase copy()
-    {
-        NBTTagCompound var1 = new NBTTagCompound(this.getName());
-        Iterator var2 = this.tagMap.keySet().iterator();
-
-        while (var2.hasNext())
-        {
-            String var3 = (String)var2.next();
-            var1.setTag(var3, ((NBTBase)this.tagMap.get(var3)).copy());
-        }
-
-        return var1;
-    }
-
-    public boolean equals(Object par1Obj)
-    {
-        if (super.equals(par1Obj))
-        {
-            NBTTagCompound var2 = (NBTTagCompound)par1Obj;
-            return this.tagMap.entrySet().equals(var2.tagMap.entrySet());
-        }
-        else
-        {
-            return false;
-        }
-    }
-
-    public int hashCode()
-    {
-        return super.hashCode() ^ this.tagMap.hashCode();
-    }
-
-    /**
-     * Return the tag map for this compound.
-     */
-    static Map getTagMap(NBTTagCompound par0NBTTagCompound)
-    {
-        return par0NBTTagCompound.tagMap;
-    }
-}
diff --git a/src/minecraft/net/minecraft/network/NetServerHandler.java b/src/minecraft/net/minecraft/network/NetServerHandler.java
index dc6da29..38d0b26 100644
--- a/src/minecraft/net/minecraft/network/NetServerHandler.java
+++ b/src/minecraft/net/minecraft/network/NetServerHandler.java
@@ -140,8 +140,8 @@ public class NetServerHandler extends NetHandler
     private long keepAliveTimeSent;
     private static Random randomGenerator = new Random();
     private long ticksOfLastKeepAlive;
-    private volatile int m = 0;
-    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(NetServerHandler.class, "m"); // CraftBukkit - multithreaded field
+    private volatile int chatSpamThresholdCount = 0;
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(NetServerHandler.class, "chatThrottle"); // CraftBukkit - multithreaded field
     private int creativeItemCreationSpamThresholdTally = 0;
 
     /** The last known x position for this connection. */
@@ -213,7 +213,7 @@ public class NetServerHandler extends NetHandler
         }
 
         // CraftBukkit start
-        for (int spam; (spam = this.m) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1);) ;
+        for (int spam; (spam = this.chatSpamThresholdCount) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1);) ;
 
         /* Use thread-safe field access instead
         if (this.m > 0) {
diff --git a/src/minecraft/net/minecraft/server/MinecraftServer.java b/src/minecraft/net/minecraft/server/MinecraftServer.java
index d720814..f5def75 100644
--- a/src/minecraft/net/minecraft/server/MinecraftServer.java
+++ b/src/minecraft/net/minecraft/server/MinecraftServer.java
@@ -1049,7 +1049,7 @@ public abstract class MinecraftServer implements ICommandSender, Runnable, IPlay
      */
     public String getMinecraftVersion()
     {
-        return "1.4.6";
+        return "1.4.7";
     }
 
     /**
diff --git a/src/minecraft/net/minecraft/server/dedicated/DedicatedServer.java b/src/minecraft/net/minecraft/server/dedicated/DedicatedServer.java
index 1e1ebd2..f5b20ac 100644
--- a/src/minecraft/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/minecraft/net/minecraft/server/dedicated/DedicatedServer.java
@@ -63,7 +63,7 @@ public class DedicatedServer extends MinecraftServer implements IServer
         System.setOut(new PrintStream(new LoggerOutputStream(logger, Level.INFO), true));
         System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.SEVERE), true));
         // CraftBukkit end
-        logger.info("Starting minecraft server version 1.4.6");
+        logger.info("Starting minecraft server version 1.4.7");
 
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L)
         {
diff --git a/src/minecraft/net/minecraft/server/management/ServerConfigurationManager.java b/src/minecraft/net/minecraft/server/management/ServerConfigurationManager.java
index f245f7c..a214163 100644
--- a/src/minecraft/net/minecraft/server/management/ServerConfigurationManager.java
+++ b/src/minecraft/net/minecraft/server/management/ServerConfigurationManager.java
@@ -1038,7 +1038,7 @@ public abstract class ServerConfigurationManager
     public void syncPlayerInventory(EntityPlayerMP par1EntityPlayerMP)
     {
         par1EntityPlayerMP.sendContainerToPlayer(par1EntityPlayerMP.inventoryContainer);
-        par1EntityPlayerMP.m();
+        par1EntityPlayerMP.setPlayerHealthUpdated();
         par1EntityPlayerMP.playerNetServerHandler.sendPacketToPlayer(new Packet16BlockItemSwitch(par1EntityPlayerMP.inventory.currentItem));
     }
 
diff --git a/src/minecraft/net/minecraft/tileentity/TileEntityBrewingStand.java b/src/minecraft/net/minecraft/tileentity/TileEntityBrewingStand.java
index 2b4e345..1b06433 100644
--- a/src/minecraft/net/minecraft/tileentity/TileEntityBrewingStand.java
+++ b/src/minecraft/net/minecraft/tileentity/TileEntityBrewingStand.java
@@ -253,7 +253,7 @@ public class TileEntityBrewingStand extends TileEntity implements IInventory
 
             if (var5 >= 0 && var5 < this.brewingItemStacks.length)
             {
-                this.brewingItemStacks[var5] = ItemStack.a(var4);
+                this.brewingItemStacks[var5] = ItemStack.loadItemStackFromNBT(var4);
             }
         }
 
diff --git a/src/minecraft/net/minecraft/tileentity/TileEntityChest.java b/src/minecraft/net/minecraft/tileentity/TileEntityChest.java
index 83be183..c1d2fe5 100644
--- a/src/minecraft/net/minecraft/tileentity/TileEntityChest.java
+++ b/src/minecraft/net/minecraft/tileentity/TileEntityChest.java
@@ -189,7 +189,7 @@ public class TileEntityChest extends TileEntity implements IInventory
 
             if (var5 >= 0 && var5 < this.chestContents.length)
             {
-                this.chestContents[var5] = ItemStack.a(var4);
+                this.chestContents[var5] = ItemStack.loadItemStackFromNBT(var4);
             }
         }
     }
diff --git a/src/minecraft/net/minecraft/tileentity/TileEntityDispenser.java b/src/minecraft/net/minecraft/tileentity/TileEntityDispenser.java
index 4ab66b2..02e16d1 100644
--- a/src/minecraft/net/minecraft/tileentity/TileEntityDispenser.java
+++ b/src/minecraft/net/minecraft/tileentity/TileEntityDispenser.java
@@ -202,7 +202,7 @@ public class TileEntityDispenser extends TileEntity implements IInventory
 
             if (var5 >= 0 && var5 < this.dispenserContents.length)
             {
-                this.dispenserContents[var5] = ItemStack.a(var4);
+                this.dispenserContents[var5] = ItemStack.loadItemStackFromNBT(var4);
             }
         }
     }
diff --git a/src/minecraft/net/minecraft/tileentity/TileEntityFurnace.java b/src/minecraft/net/minecraft/tileentity/TileEntityFurnace.java
index 28a3c57..ad20c60 100644
--- a/src/minecraft/net/minecraft/tileentity/TileEntityFurnace.java
+++ b/src/minecraft/net/minecraft/tileentity/TileEntityFurnace.java
@@ -179,7 +179,7 @@ public class TileEntityFurnace extends TileEntity implements IInventory
 
             if (var5 >= 0 && var5 < this.furnaceItemStacks.length)
             {
-                this.furnaceItemStacks[var5] = ItemStack.a(var4);
+                this.furnaceItemStacks[var5] = ItemStack.loadItemStackFromNBT(var4);
             }
         }
 
diff --git a/src/minecraft/net/minecraft/tileentity/TileEntityMobSpawner.java b/src/minecraft/net/minecraft/tileentity/TileEntityMobSpawner.java
index 1f6df5a..0fd8a71 100644
--- a/src/minecraft/net/minecraft/tileentity/TileEntityMobSpawner.java
+++ b/src/minecraft/net/minecraft/tileentity/TileEntityMobSpawner.java
@@ -307,7 +307,7 @@ public class TileEntityMobSpawner extends TileEntity
     {
         NBTTagCompound var1 = new NBTTagCompound();
         this.writeToNBT(var1);
-        var1.o("SpawnPotentials");
+        var1.removeTag("SpawnPotentials");
         return new Packet132TileEntityData(this.xCoord, this.yCoord, this.zCoord, 1, var1);
     }
 
diff --git a/src/minecraft/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/minecraft/org/bukkit/craftbukkit/entity/CraftFirework.java
index d29924a..f3a30a9 100644
--- a/src/minecraft/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/minecraft/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -19,11 +19,11 @@ public class CraftFirework extends CraftEntity implements Firework {
     public CraftFirework(CraftServer server, net.minecraft.entity.item.EntityFireworkRocket/*was:EntityFireworks*/ entity) {
         super(server, entity);
 
-        net.minecraft.item.ItemStack/*was:ItemStack*/ item = getHandle().getDataWatcher/*was:getDataWatcher*/().f(FIREWORK_ITEM_INDEX);
+        net.minecraft.item.ItemStack/*was:ItemStack*/ item = getHandle().getDataWatcher/*was:getDataWatcher*/().getWatchableObjectItemStack/*was:getItemStack*/(FIREWORK_ITEM_INDEX);
 
         if (item == null) {
             item = new net.minecraft.item.ItemStack/*was:ItemStack*/(net.minecraft.item.Item/*was:Item*/.field_92052_bU/*was:FIREWORKS*/);
-            getHandle().getDataWatcher/*was:getDataWatcher*/().addObject/*was:a*/(FIREWORK_ITEM_INDEX, item); // register
+            getHandle().getDataWatcher/*was:getDataWatcher*/().updateObject/*was:watch*/(FIREWORK_ITEM_INDEX, item);
         }
 
         this.item = CraftItemStack.asCraftMirror(item);
@@ -56,7 +56,7 @@ public class CraftFirework extends CraftEntity implements Firework {
         item.setItemMeta(meta);
 
         // Copied from EntityFireworks constructor, update firework lifetime/power
-        getHandle().b = 10 * (1 + meta.getPower()) + random.nextInt(6) + random.nextInt(7);
+        getHandle().field_92010_b/*was:expectedLifespan*/ = 10 * (1 + meta.getPower()) + random.nextInt(6) + random.nextInt(7);
 
         getHandle().getDataWatcher/*was:getDataWatcher*/().func_82708_h/*was:h*/(FIREWORK_ITEM_INDEX); // Update
     }
diff --git a/src/minecraft/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/minecraft/org/bukkit/craftbukkit/entity/CraftPlayer.java
index dd934f4..eedff22 100644
--- a/src/minecraft/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/minecraft/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -947,11 +947,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     public void setMaxHealth(int amount) {
         super.setMaxHealth(amount);
-        getHandle().m(); // Update health
+        getHandle().setPlayerHealthUpdated/*was:triggerHealthUpdate*/();
     }
 
     public void resetMaxHealth() {
         super.resetMaxHealth();
-        getHandle().m(); // Update health
+        getHandle().setPlayerHealthUpdated/*was:triggerHealthUpdate*/();
     }
 }
diff --git a/src/minecraft/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java b/src/minecraft/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
index 81a57f8..46e9193 100644
--- a/src/minecraft/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
+++ b/src/minecraft/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
@@ -61,7 +61,7 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
     }
 
     public void setSitting(boolean sitting) {
-        getHandle().q().a(sitting);
+        getHandle().func_70907_r/*was:getGoalSit*/().setSitting/*was:setSitting*/(sitting);
     }
 
     @Override
diff --git a/src/minecraft/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/minecraft/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index fe6324e..b4ccdfa 100644
--- a/src/minecraft/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/minecraft/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -235,8 +235,8 @@ public final class CraftItemStack extends ItemStack {
             return 0;
         }
         if (size == 1) {
-            handle.stackTagCompound/*was:tag*/.o(ENCHANTMENTS.NBT);
-            if (handle.stackTagCompound/*was:tag*/.d()) {
+            handle.stackTagCompound/*was:tag*/.removeTag/*was:remove*/(ENCHANTMENTS.NBT);
+            if (handle.stackTagCompound/*was:tag*/.hasNoTags/*was:isEmpty*/()) {
                 handle.stackTagCompound/*was:tag*/ = null;
             }
             return level;
@@ -385,6 +385,6 @@ public final class CraftItemStack extends ItemStack {
     }
 
     static boolean hasItemMeta(/*was:net.minecraft.server.*/net.minecraft.item.ItemStack/*was:ItemStack*/ item) {
-        return !(item == null || item.stackTagCompound/*was:tag*/ == null || item.stackTagCompound/*was:tag*/.d());
+        return !(item == null || item.stackTagCompound/*was:tag*/ == null || item.stackTagCompound/*was:tag*/.hasNoTags/*was:isEmpty*/());
     }
 }
